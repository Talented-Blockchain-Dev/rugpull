{"id":"3ae6d019e50c6a54579949b59754cad1","_format":"hh-sol-build-info-1","solcVersion":"0.6.12","solcLongVersion":"0.6.12+commit.27d51765","input":{"language":"Solidity","sources":{"contracts/libs.sol":{"content":"\r\n//SPDX-License-Identifier: UNLICENSED\r\npragma solidity 0.6.12;\r\npragma experimental ABIEncoderV2;\r\n\r\ncontract Context {\r\n\t// Empty internal constructor, to prevent people from mistakenly deploying\r\n\t// an instance of this contract, which should be used via inheritance.\r\n\tconstructor () internal { }\r\n\r\n\tfunction _msgSender() internal view returns (address payable) {\r\n\t\treturn msg.sender;\r\n\t}\r\n\r\n\tfunction _msgData() internal view returns (bytes memory) {\r\n\t\tthis; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n\t\treturn msg.data;\r\n\t}\r\n}\r\n    /* --------- Access Control --------- */\r\ncontract Ownable is Context {\r\n\taddress private _owner;\r\n\r\n\tevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\t/**\r\n\t* @dev Initializes the contract setting the deployer as the initial owner.\r\n\t*/\r\n\tconstructor () internal {\r\n\t\taddress msgSender = _msgSender();\r\n\t\t_owner = msgSender;\r\n\t\temit OwnershipTransferred(address(0), msgSender);\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Returns the address of the current owner.\r\n\t*/\r\n\tfunction owner() public view returns (address) {\r\n\t\treturn _owner;\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Throws if called by any account other than the owner.\r\n\t*/\r\n\tmodifier onlyOwner() {\r\n\t\trequire(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n\t\t_;\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Leaves the contract without owner. It will not be possible to call\r\n\t* `onlyOwner` functions anymore. Can only be called by the current owner.\r\n\t*\r\n\t* NOTE: Renouncing ownership will leave the contract without an owner,\r\n\t* thereby removing any functionality that is only available to the owner.\r\n\t*/\r\n\tfunction renounceOwnership() public onlyOwner {\r\n\t\temit OwnershipTransferred(_owner, address(0));\r\n\t\t_owner = address(0);\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n\t* Can only be called by the current owner.\r\n\t*/\r\n\tfunction transferOwnership(address newOwner) public onlyOwner {\r\n\t\t_transferOwnership(newOwner);\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n\t*/\r\n\tfunction _transferOwnership(address newOwner) internal {\r\n\t\trequire(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n\t\temit OwnershipTransferred(_owner, newOwner);\r\n\t\t_owner = newOwner;\r\n\t}\r\n}\r\n\r\n    /* --------- safe math --------- */\r\nlibrary SafeMath {\r\n\t/**\r\n\t* @dev Returns the addition of two unsigned integers, reverting on\r\n\t* overflow.\r\n\t*\r\n\t* Counterpart to Solidity's `+` operator.\r\n\t*\r\n\t* Requirements:\r\n\t* - Addition cannot overflow.\r\n\t*/\r\n\tfunction add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\tuint256 c = a + b;\r\n\t\trequire(c >= a, \"SafeMath: addition overflow\");\r\n\r\n\t\treturn c;\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Returns the subtraction of two unsigned integers, reverting on\r\n\t* overflow (when the result is negative).\r\n\t*\r\n\t* Counterpart to Solidity's `-` operator.\r\n\t*\r\n\t* Requirements:\r\n\t* - Subtraction cannot overflow.\r\n\t*/\r\n\tfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\treturn sub(a, b, \"SafeMath: subtraction overflow\");\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n\t* overflow (when the result is negative).\r\n\t*\r\n\t* Counterpart to Solidity's `-` operator.\r\n\t*\r\n\t* Requirements:\r\n\t* - Subtraction cannot overflow.\r\n\t*/\r\n\tfunction sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n\t\trequire(b <= a, errorMessage);\r\n\t\tuint256 c = a - b;\r\n\r\n\t\treturn c;\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Returns the multiplication of two unsigned integers, reverting on\r\n\t* overflow.\r\n\t*\r\n\t* Counterpart to Solidity's `*` operator.\r\n\t*\r\n\t* Requirements:\r\n\t* - Multiplication cannot overflow.\r\n\t*/\r\n\tfunction mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\t// Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n\t\t// benefit is lost if 'b' is also tested.\r\n\t\t// See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n\t\tif (a == 0) {\r\n\t\treturn 0;\r\n\t\t}\r\n\r\n\t\tuint256 c = a * b;\r\n\t\trequire(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n\t\treturn c;\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Returns the integer division of two unsigned integers. Reverts on\r\n\t* division by zero. The result is rounded towards zero.\r\n\t*\r\n\t* Counterpart to Solidity's `/` operator. Note: this function uses a\r\n\t* `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n\t* uses an invalid opcode to revert (consuming all remaining gas).\r\n\t*\r\n\t* Requirements:\r\n\t* - The divisor cannot be zero.\r\n\t*/\r\n\tfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\treturn div(a, b, \"SafeMath: division by zero\");\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n\t* division by zero. The result is rounded towards zero.\r\n\t*\r\n\t* Counterpart to Solidity's `/` operator. Note: this function uses a\r\n\t* `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n\t* uses an invalid opcode to revert (consuming all remaining gas).\r\n\t*\r\n\t* Requirements:\r\n\t* - The divisor cannot be zero.\r\n\t*/\r\n\tfunction div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n\t\t// Solidity only automatically asserts when dividing by 0\r\n\t\trequire(b > 0, errorMessage);\r\n\t\tuint256 c = a / b;\r\n\t\t// assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n\t\treturn c;\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n\t* Reverts when dividing by zero.\r\n\t*\r\n\t* Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n\t* opcode (which leaves remaining gas untouched) while Solidity uses an\r\n\t* invalid opcode to revert (consuming all remaining gas).\r\n\t*\r\n\t* Requirements:\r\n\t* - The divisor cannot be zero.\r\n\t*/\r\n\tfunction mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\treturn mod(a, b, \"SafeMath: modulo by zero\");\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n\t* Reverts with custom message when dividing by zero.\r\n\t*\r\n\t* Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n\t* opcode (which leaves remaining gas untouched) while Solidity uses an\r\n\t* invalid opcode to revert (consuming all remaining gas).\r\n\t*\r\n\t* Requirements:\r\n\t* - The divisor cannot be zero.\r\n\t*/\r\n\tfunction mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n\t\trequire(b != 0, errorMessage);\r\n\t\treturn a % b;\r\n\t}\r\n}\r\n"}},"settings":{"optimizer":{"enabled":true,"runs":200},"outputSelection":{"*":{"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata","devdoc","userdoc","storageLayout","evm.gasEstimates"],"":["ast"]}},"metadata":{"useLiteralContent":true}}},"output":{"sources":{"contracts/libs.sol":{"ast":{"absolutePath":"contracts/libs.sol","exportedSymbols":{"Context":[27],"Ownable":[143],"SafeMath":[336]},"id":337,"license":"UNLICENSED","nodeType":"SourceUnit","nodes":[{"id":1,"literals":["solidity","0.6",".12"],"nodeType":"PragmaDirective","src":"41:23:0"},{"id":2,"literals":["experimental","ABIEncoderV2"],"nodeType":"PragmaDirective","src":"66:33:0"},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"contract","documentation":null,"fullyImplemented":true,"id":27,"linearizedBaseContracts":[27],"name":"Context","nodeType":"ContractDefinition","nodes":[{"body":{"id":5,"nodeType":"Block","src":"298:3:0","statements":[]},"documentation":null,"id":6,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nodeType":"FunctionDefinition","overrides":null,"parameters":{"id":3,"nodeType":"ParameterList","parameters":[],"src":"286:2:0"},"returnParameters":{"id":4,"nodeType":"ParameterList","parameters":[],"src":"298:0:0"},"scope":27,"src":"274:27:0","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":14,"nodeType":"Block","src":"368:27:0","statements":[{"expression":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":11,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"380:3:0","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":12,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","referencedDeclaration":null,"src":"380:10:0","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"functionReturnParameters":10,"id":13,"nodeType":"Return","src":"373:17:0"}]},"documentation":null,"id":15,"implemented":true,"kind":"function","modifiers":[],"name":"_msgSender","nodeType":"FunctionDefinition","overrides":null,"parameters":{"id":7,"nodeType":"ParameterList","parameters":[],"src":"325:2:0"},"returnParameters":{"id":10,"nodeType":"ParameterList","parameters":[{"constant":false,"id":9,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","overrides":null,"scope":15,"src":"351:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":8,"name":"address","nodeType":"ElementaryTypeName","src":"351:15:0","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"value":null,"visibility":"internal"}],"src":"350:17:0"},"scope":27,"src":"306:89:0","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":25,"nodeType":"Block","src":"457:153:0","statements":[{"expression":{"argumentTypes":null,"id":20,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"462:4:0","typeDescriptions":{"typeIdentifier":"t_contract$_Context_$27","typeString":"contract Context"}},"id":21,"nodeType":"ExpressionStatement","src":"462:4:0"},{"expression":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":22,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"597:3:0","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":23,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"data","nodeType":"MemberAccess","referencedDeclaration":null,"src":"597:8:0","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"functionReturnParameters":19,"id":24,"nodeType":"Return","src":"590:15:0"}]},"documentation":null,"id":26,"implemented":true,"kind":"function","modifiers":[],"name":"_msgData","nodeType":"FunctionDefinition","overrides":null,"parameters":{"id":16,"nodeType":"ParameterList","parameters":[],"src":"417:2:0"},"returnParameters":{"id":19,"nodeType":"ParameterList","parameters":[{"constant":false,"id":18,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","overrides":null,"scope":26,"src":"443:12:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":17,"name":"bytes","nodeType":"ElementaryTypeName","src":"443:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"value":null,"visibility":"internal"}],"src":"442:14:0"},"scope":27,"src":"400:210:0","stateMutability":"view","virtual":false,"visibility":"internal"}],"scope":337,"src":"103:510:0"},{"abstract":false,"baseContracts":[{"arguments":null,"baseName":{"contractScope":null,"id":28,"name":"Context","nodeType":"UserDefinedTypeName","referencedDeclaration":27,"src":"681:7:0","typeDescriptions":{"typeIdentifier":"t_contract$_Context_$27","typeString":"contract Context"}},"id":29,"nodeType":"InheritanceSpecifier","src":"681:7:0"}],"contractDependencies":[27],"contractKind":"contract","documentation":null,"fullyImplemented":true,"id":143,"linearizedBaseContracts":[143,27],"name":"Ownable","nodeType":"ContractDefinition","nodes":[{"constant":false,"id":31,"mutability":"mutable","name":"_owner","nodeType":"VariableDeclaration","overrides":null,"scope":143,"src":"693:22:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":30,"name":"address","nodeType":"ElementaryTypeName","src":"693:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"private"},{"anonymous":false,"documentation":null,"id":37,"name":"OwnershipTransferred","nodeType":"EventDefinition","parameters":{"id":36,"nodeType":"ParameterList","parameters":[{"constant":false,"id":33,"indexed":true,"mutability":"mutable","name":"previousOwner","nodeType":"VariableDeclaration","overrides":null,"scope":37,"src":"748:29:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":32,"name":"address","nodeType":"ElementaryTypeName","src":"748:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"},{"constant":false,"id":35,"indexed":true,"mutability":"mutable","name":"newOwner","nodeType":"VariableDeclaration","overrides":null,"scope":37,"src":"779:24:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":34,"name":"address","nodeType":"ElementaryTypeName","src":"779:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"}],"src":"747:57:0"},"src":"721:84:0"},{"body":{"id":58,"nodeType":"Block","src":"922:118:0","statements":[{"assignments":[42],"declarations":[{"constant":false,"id":42,"mutability":"mutable","name":"msgSender","nodeType":"VariableDeclaration","overrides":null,"scope":58,"src":"927:17:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":41,"name":"address","nodeType":"ElementaryTypeName","src":"927:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"}],"id":45,"initialValue":{"argumentTypes":null,"arguments":[],"expression":{"argumentTypes":[],"id":43,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":15,"src":"947:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_payable_$","typeString":"function () view returns (address payable)"}},"id":44,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"947:12:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"nodeType":"VariableDeclarationStatement","src":"927:32:0"},{"expression":{"argumentTypes":null,"id":48,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"id":46,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":31,"src":"964:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"id":47,"name":"msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":42,"src":"973:9:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"964:18:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":49,"nodeType":"ExpressionStatement","src":"964:18:0"},{"eventCall":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"arguments":[{"argumentTypes":null,"hexValue":"30","id":53,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1021:1:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":52,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1013:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":51,"name":"address","nodeType":"ElementaryTypeName","src":"1013:7:0","typeDescriptions":{"typeIdentifier":null,"typeString":null}}},"id":54,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1013:10:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},{"argumentTypes":null,"id":55,"name":"msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":42,"src":"1025:9:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address_payable","typeString":"address payable"},{"typeIdentifier":"t_address","typeString":"address"}],"id":50,"name":"OwnershipTransferred","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":37,"src":"992:20:0","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$returns$__$","typeString":"function (address,address)"}},"id":56,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"992:43:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":57,"nodeType":"EmitStatement","src":"987:48:0"}]},"documentation":{"id":38,"nodeType":"StructuredDocumentation","src":"810:85:0","text":" @dev Initializes the contract setting the deployer as the initial owner."},"id":59,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nodeType":"FunctionDefinition","overrides":null,"parameters":{"id":39,"nodeType":"ParameterList","parameters":[],"src":"910:2:0"},"returnParameters":{"id":40,"nodeType":"ParameterList","parameters":[],"src":"922:0:0"},"scope":143,"src":"898:142:0","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":67,"nodeType":"Block","src":"1154:23:0","statements":[{"expression":{"argumentTypes":null,"id":65,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":31,"src":"1166:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":64,"id":66,"nodeType":"Return","src":"1159:13:0"}]},"documentation":{"id":60,"nodeType":"StructuredDocumentation","src":"1045:59:0","text":" @dev Returns the address of the current owner."},"functionSelector":"8da5cb5b","id":68,"implemented":true,"kind":"function","modifiers":[],"name":"owner","nodeType":"FunctionDefinition","overrides":null,"parameters":{"id":61,"nodeType":"ParameterList","parameters":[],"src":"1121:2:0"},"returnParameters":{"id":64,"nodeType":"ParameterList","parameters":[{"constant":false,"id":63,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","overrides":null,"scope":68,"src":"1145:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":62,"name":"address","nodeType":"ElementaryTypeName","src":"1145:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"}],"src":"1144:9:0"},"scope":143,"src":"1107:70:0","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":80,"nodeType":"Block","src":"1277:83:0","statements":[{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":75,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":72,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":31,"src":"1290:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"argumentTypes":null,"arguments":[],"expression":{"argumentTypes":[],"id":73,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":15,"src":"1300:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_payable_$","typeString":"function () view returns (address payable)"}},"id":74,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1300:12:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"src":"1290:22:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"argumentTypes":null,"hexValue":"4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572","id":76,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1314:34:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe","typeString":"literal_string \"Ownable: caller is not the owner\""},"value":"Ownable: caller is not the owner"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe","typeString":"literal_string \"Ownable: caller is not the owner\""}],"id":71,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1282:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":77,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1282:67:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":78,"nodeType":"ExpressionStatement","src":"1282:67:0"},{"id":79,"nodeType":"PlaceholderStatement","src":"1354:1:0"}]},"documentation":{"id":69,"nodeType":"StructuredDocumentation","src":"1182:71:0","text":" @dev Throws if called by any account other than the owner."},"id":81,"name":"onlyOwner","nodeType":"ModifierDefinition","overrides":null,"parameters":{"id":70,"nodeType":"ParameterList","parameters":[],"src":"1274:2:0"},"src":"1256:104:0","virtual":false,"visibility":"internal"},{"body":{"id":102,"nodeType":"Block","src":"1727:79:0","statements":[{"eventCall":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":88,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":31,"src":"1758:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"argumentTypes":null,"arguments":[{"argumentTypes":null,"hexValue":"30","id":91,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1774:1:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":90,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1766:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":89,"name":"address","nodeType":"ElementaryTypeName","src":"1766:7:0","typeDescriptions":{"typeIdentifier":null,"typeString":null}}},"id":92,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1766:10:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address_payable","typeString":"address payable"}],"id":87,"name":"OwnershipTransferred","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":37,"src":"1737:20:0","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$returns$__$","typeString":"function (address,address)"}},"id":93,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1737:40:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":94,"nodeType":"EmitStatement","src":"1732:45:0"},{"expression":{"argumentTypes":null,"id":100,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"id":95,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":31,"src":"1782:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"hexValue":"30","id":98,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1799:1:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":97,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1791:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":96,"name":"address","nodeType":"ElementaryTypeName","src":"1791:7:0","typeDescriptions":{"typeIdentifier":null,"typeString":null}}},"id":99,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1791:10:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"src":"1782:19:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":101,"nodeType":"ExpressionStatement","src":"1782:19:0"}]},"documentation":{"id":82,"nodeType":"StructuredDocumentation","src":"1365:313:0","text":" @dev Leaves the contract without owner. It will not be possible to call\n `onlyOwner` functions anymore. Can only be called by the current owner.\n NOTE: Renouncing ownership will leave the contract without an owner,\n thereby removing any functionality that is only available to the owner."},"functionSelector":"715018a6","id":103,"implemented":true,"kind":"function","modifiers":[{"arguments":null,"id":85,"modifierName":{"argumentTypes":null,"id":84,"name":"onlyOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":81,"src":"1717:9:0","typeDescriptions":{"typeIdentifier":"t_modifier$__$","typeString":"modifier ()"}},"nodeType":"ModifierInvocation","src":"1717:9:0"}],"name":"renounceOwnership","nodeType":"FunctionDefinition","overrides":null,"parameters":{"id":83,"nodeType":"ParameterList","parameters":[],"src":"1707:2:0"},"returnParameters":{"id":86,"nodeType":"ParameterList","parameters":[],"src":"1727:0:0"},"scope":143,"src":"1681:125:0","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":115,"nodeType":"Block","src":"2005:38:0","statements":[{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":112,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":106,"src":"2029:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":111,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":142,"src":"2010:18:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":113,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2010:28:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":114,"nodeType":"ExpressionStatement","src":"2010:28:0"}]},"documentation":{"id":104,"nodeType":"StructuredDocumentation","src":"1811:129:0","text":" @dev Transfers ownership of the contract to a new account (`newOwner`).\n Can only be called by the current owner."},"functionSelector":"f2fde38b","id":116,"implemented":true,"kind":"function","modifiers":[{"arguments":null,"id":109,"modifierName":{"argumentTypes":null,"id":108,"name":"onlyOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":81,"src":"1995:9:0","typeDescriptions":{"typeIdentifier":"t_modifier$__$","typeString":"modifier ()"}},"nodeType":"ModifierInvocation","src":"1995:9:0"}],"name":"transferOwnership","nodeType":"FunctionDefinition","overrides":null,"parameters":{"id":107,"nodeType":"ParameterList","parameters":[{"constant":false,"id":106,"mutability":"mutable","name":"newOwner","nodeType":"VariableDeclaration","overrides":null,"scope":116,"src":"1970:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":105,"name":"address","nodeType":"ElementaryTypeName","src":"1970:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"}],"src":"1969:18:0"},"returnParameters":{"id":110,"nodeType":"ParameterList","parameters":[],"src":"2005:0:0"},"scope":143,"src":"1943:100:0","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":141,"nodeType":"Block","src":"2190:153:0","statements":[{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":128,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":123,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":119,"src":"2203:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"hexValue":"30","id":126,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2223:1:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":125,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2215:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":124,"name":"address","nodeType":"ElementaryTypeName","src":"2215:7:0","typeDescriptions":{"typeIdentifier":null,"typeString":null}}},"id":127,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2215:10:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"src":"2203:22:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"argumentTypes":null,"hexValue":"4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373","id":129,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2227:40:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe","typeString":"literal_string \"Ownable: new owner is the zero address\""},"value":"Ownable: new owner is the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe","typeString":"literal_string \"Ownable: new owner is the zero address\""}],"id":122,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2195:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":130,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2195:73:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":131,"nodeType":"ExpressionStatement","src":"2195:73:0"},{"eventCall":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":133,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":31,"src":"2299:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"argumentTypes":null,"id":134,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":119,"src":"2307:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":132,"name":"OwnershipTransferred","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":37,"src":"2278:20:0","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$returns$__$","typeString":"function (address,address)"}},"id":135,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2278:38:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":136,"nodeType":"EmitStatement","src":"2273:43:0"},{"expression":{"argumentTypes":null,"id":139,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"id":137,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":31,"src":"2321:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"id":138,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":119,"src":"2330:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2321:17:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":140,"nodeType":"ExpressionStatement","src":"2321:17:0"}]},"documentation":{"id":117,"nodeType":"StructuredDocumentation","src":"2048:84:0","text":" @dev Transfers ownership of the contract to a new account (`newOwner`)."},"id":142,"implemented":true,"kind":"function","modifiers":[],"name":"_transferOwnership","nodeType":"FunctionDefinition","overrides":null,"parameters":{"id":120,"nodeType":"ParameterList","parameters":[{"constant":false,"id":119,"mutability":"mutable","name":"newOwner","nodeType":"VariableDeclaration","overrides":null,"scope":142,"src":"2163:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":118,"name":"address","nodeType":"ElementaryTypeName","src":"2163:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"}],"src":"2162:18:0"},"returnParameters":{"id":121,"nodeType":"ParameterList","parameters":[],"src":"2190:0:0"},"scope":143,"src":"2135:208:0","stateMutability":"nonpayable","virtual":false,"visibility":"internal"}],"scope":337,"src":"661:1685:0"},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"library","documentation":null,"fullyImplemented":true,"id":336,"linearizedBaseContracts":[336],"name":"SafeMath","nodeType":"ContractDefinition","nodes":[{"body":{"id":168,"nodeType":"Block","src":"2675:93:0","statements":[{"assignments":[154],"declarations":[{"constant":false,"id":154,"mutability":"mutable","name":"c","nodeType":"VariableDeclaration","overrides":null,"scope":168,"src":"2680:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":153,"name":"uint256","nodeType":"ElementaryTypeName","src":"2680:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"id":158,"initialValue":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":157,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":155,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":146,"src":"2692:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"argumentTypes":null,"id":156,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":148,"src":"2696:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2692:5:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2680:17:0"},{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":162,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":160,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":154,"src":"2710:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"argumentTypes":null,"id":161,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":146,"src":"2715:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2710:6:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"argumentTypes":null,"hexValue":"536166654d6174683a206164646974696f6e206f766572666c6f77","id":163,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2718:29:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_stringliteral_30cc447bcc13b3e22b45cef0dd9b0b514842d836dd9b6eb384e20dedfb47723a","typeString":"literal_string \"SafeMath: addition overflow\""},"value":"SafeMath: addition overflow"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_30cc447bcc13b3e22b45cef0dd9b0b514842d836dd9b6eb384e20dedfb47723a","typeString":"literal_string \"SafeMath: addition overflow\""}],"id":159,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2702:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":164,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2702:46:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":165,"nodeType":"ExpressionStatement","src":"2702:46:0"},{"expression":{"argumentTypes":null,"id":166,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":154,"src":"2762:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":152,"id":167,"nodeType":"Return","src":"2755:8:0"}]},"documentation":{"id":144,"nodeType":"StructuredDocumentation","src":"2412:193:0","text":" @dev Returns the addition of two unsigned integers, reverting on\n overflow.\n Counterpart to Solidity's `+` operator.\n Requirements:\n - Addition cannot overflow."},"id":169,"implemented":true,"kind":"function","modifiers":[],"name":"add","nodeType":"FunctionDefinition","overrides":null,"parameters":{"id":149,"nodeType":"ParameterList","parameters":[{"constant":false,"id":146,"mutability":"mutable","name":"a","nodeType":"VariableDeclaration","overrides":null,"scope":169,"src":"2621:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":145,"name":"uint256","nodeType":"ElementaryTypeName","src":"2621:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":148,"mutability":"mutable","name":"b","nodeType":"VariableDeclaration","overrides":null,"scope":169,"src":"2632:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":147,"name":"uint256","nodeType":"ElementaryTypeName","src":"2632:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"2620:22:0"},"returnParameters":{"id":152,"nodeType":"ParameterList","parameters":[{"constant":false,"id":151,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","overrides":null,"scope":169,"src":"2666:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":150,"name":"uint256","nodeType":"ElementaryTypeName","src":"2666:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"2665:9:0"},"scope":336,"src":"2608:160:0","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":185,"nodeType":"Block","src":"3072:60:0","statements":[{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":180,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":172,"src":"3088:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"id":181,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":174,"src":"3091:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"hexValue":"536166654d6174683a207375627472616374696f6e206f766572666c6f77","id":182,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3094:32:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_stringliteral_50b058e9b5320e58880d88223c9801cd9eecdcf90323d5c2318bc1b6b916e862","typeString":"literal_string \"SafeMath: subtraction overflow\""},"value":"SafeMath: subtraction overflow"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_stringliteral_50b058e9b5320e58880d88223c9801cd9eecdcf90323d5c2318bc1b6b916e862","typeString":"literal_string \"SafeMath: subtraction overflow\""}],"id":179,"name":"sub","nodeType":"Identifier","overloadedDeclarations":[186,214],"referencedDeclaration":214,"src":"3084:3:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$_t_string_memory_ptr_$returns$_t_uint256_$","typeString":"function (uint256,uint256,string memory) pure returns (uint256)"}},"id":183,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3084:43:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":178,"id":184,"nodeType":"Return","src":"3077:50:0"}]},"documentation":{"id":170,"nodeType":"StructuredDocumentation","src":"2773:229:0","text":" @dev Returns the subtraction of two unsigned integers, reverting on\n overflow (when the result is negative).\n Counterpart to Solidity's `-` operator.\n Requirements:\n - Subtraction cannot overflow."},"id":186,"implemented":true,"kind":"function","modifiers":[],"name":"sub","nodeType":"FunctionDefinition","overrides":null,"parameters":{"id":175,"nodeType":"ParameterList","parameters":[{"constant":false,"id":172,"mutability":"mutable","name":"a","nodeType":"VariableDeclaration","overrides":null,"scope":186,"src":"3018:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":171,"name":"uint256","nodeType":"ElementaryTypeName","src":"3018:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":174,"mutability":"mutable","name":"b","nodeType":"VariableDeclaration","overrides":null,"scope":186,"src":"3029:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":173,"name":"uint256","nodeType":"ElementaryTypeName","src":"3029:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"3017:22:0"},"returnParameters":{"id":178,"nodeType":"ParameterList","parameters":[{"constant":false,"id":177,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","overrides":null,"scope":186,"src":"3063:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":176,"name":"uint256","nodeType":"ElementaryTypeName","src":"3063:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"3062:9:0"},"scope":336,"src":"3005:127:0","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":213,"nodeType":"Block","src":"3484:76:0","statements":[{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":201,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":199,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":191,"src":"3497:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"argumentTypes":null,"id":200,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":189,"src":"3502:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3497:6:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"argumentTypes":null,"id":202,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":193,"src":"3505:12:0","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":198,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3489:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":203,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3489:29:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":204,"nodeType":"ExpressionStatement","src":"3489:29:0"},{"assignments":[206],"declarations":[{"constant":false,"id":206,"mutability":"mutable","name":"c","nodeType":"VariableDeclaration","overrides":null,"scope":213,"src":"3523:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":205,"name":"uint256","nodeType":"ElementaryTypeName","src":"3523:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"id":210,"initialValue":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":209,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":207,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":189,"src":"3535:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"argumentTypes":null,"id":208,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":191,"src":"3539:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3535:5:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3523:17:0"},{"expression":{"argumentTypes":null,"id":211,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":206,"src":"3554:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":197,"id":212,"nodeType":"Return","src":"3547:8:0"}]},"documentation":{"id":187,"nodeType":"StructuredDocumentation","src":"3137:249:0","text":" @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n overflow (when the result is negative).\n Counterpart to Solidity's `-` operator.\n Requirements:\n - Subtraction cannot overflow."},"id":214,"implemented":true,"kind":"function","modifiers":[],"name":"sub","nodeType":"FunctionDefinition","overrides":null,"parameters":{"id":194,"nodeType":"ParameterList","parameters":[{"constant":false,"id":189,"mutability":"mutable","name":"a","nodeType":"VariableDeclaration","overrides":null,"scope":214,"src":"3402:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":188,"name":"uint256","nodeType":"ElementaryTypeName","src":"3402:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":191,"mutability":"mutable","name":"b","nodeType":"VariableDeclaration","overrides":null,"scope":214,"src":"3413:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":190,"name":"uint256","nodeType":"ElementaryTypeName","src":"3413:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":193,"mutability":"mutable","name":"errorMessage","nodeType":"VariableDeclaration","overrides":null,"scope":214,"src":"3424:26:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":192,"name":"string","nodeType":"ElementaryTypeName","src":"3424:6:0","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"value":null,"visibility":"internal"}],"src":"3401:50:0"},"returnParameters":{"id":197,"nodeType":"ParameterList","parameters":[{"constant":false,"id":196,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","overrides":null,"scope":214,"src":"3475:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":195,"name":"uint256","nodeType":"ElementaryTypeName","src":"3475:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"3474:9:0"},"scope":336,"src":"3389:171:0","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":248,"nodeType":"Block","src":"3840:343:0","statements":[{"condition":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":226,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":224,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":217,"src":"4052:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"argumentTypes":null,"hexValue":"30","id":225,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4057:1:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"4052:6:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":null,"id":230,"nodeType":"IfStatement","src":"4048:31:0","trueBody":{"id":229,"nodeType":"Block","src":"4060:19:0","statements":[{"expression":{"argumentTypes":null,"hexValue":"30","id":227,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4072:1:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"functionReturnParameters":223,"id":228,"nodeType":"Return","src":"4065:8:0"}]}},{"assignments":[232],"declarations":[{"constant":false,"id":232,"mutability":"mutable","name":"c","nodeType":"VariableDeclaration","overrides":null,"scope":248,"src":"4085:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":231,"name":"uint256","nodeType":"ElementaryTypeName","src":"4085:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"id":236,"initialValue":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":235,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":233,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":217,"src":"4097:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"argumentTypes":null,"id":234,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":219,"src":"4101:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4097:5:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4085:17:0"},{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":242,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":240,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":238,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":232,"src":"4115:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"argumentTypes":null,"id":239,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":217,"src":"4119:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4115:5:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"argumentTypes":null,"id":241,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":219,"src":"4124:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4115:10:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"argumentTypes":null,"hexValue":"536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77","id":243,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4127:35:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_stringliteral_9113bb53c2876a3805b2c9242029423fc540a728243ce887ab24c82cf119fba3","typeString":"literal_string \"SafeMath: multiplication overflow\""},"value":"SafeMath: multiplication overflow"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_9113bb53c2876a3805b2c9242029423fc540a728243ce887ab24c82cf119fba3","typeString":"literal_string \"SafeMath: multiplication overflow\""}],"id":237,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4107:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":244,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4107:56:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":245,"nodeType":"ExpressionStatement","src":"4107:56:0"},{"expression":{"argumentTypes":null,"id":246,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":232,"src":"4177:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":223,"id":247,"nodeType":"Return","src":"4170:8:0"}]},"documentation":{"id":215,"nodeType":"StructuredDocumentation","src":"3565:205:0","text":" @dev Returns the multiplication of two unsigned integers, reverting on\n overflow.\n Counterpart to Solidity's `*` operator.\n Requirements:\n - Multiplication cannot overflow."},"id":249,"implemented":true,"kind":"function","modifiers":[],"name":"mul","nodeType":"FunctionDefinition","overrides":null,"parameters":{"id":220,"nodeType":"ParameterList","parameters":[{"constant":false,"id":217,"mutability":"mutable","name":"a","nodeType":"VariableDeclaration","overrides":null,"scope":249,"src":"3786:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":216,"name":"uint256","nodeType":"ElementaryTypeName","src":"3786:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":219,"mutability":"mutable","name":"b","nodeType":"VariableDeclaration","overrides":null,"scope":249,"src":"3797:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":218,"name":"uint256","nodeType":"ElementaryTypeName","src":"3797:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"3785:22:0"},"returnParameters":{"id":223,"nodeType":"ParameterList","parameters":[{"constant":false,"id":222,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","overrides":null,"scope":249,"src":"3831:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":221,"name":"uint256","nodeType":"ElementaryTypeName","src":"3831:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"3830:9:0"},"scope":336,"src":"3773:410:0","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":265,"nodeType":"Block","src":"4672:56:0","statements":[{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":260,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":252,"src":"4688:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"id":261,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":254,"src":"4691:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"hexValue":"536166654d6174683a206469766973696f6e206279207a65726f","id":262,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4694:28:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_stringliteral_5b7cc70dda4dc2143e5adb63bd5d1f349504f461dbdfd9bc76fac1f8ca6d019f","typeString":"literal_string \"SafeMath: division by zero\""},"value":"SafeMath: division by zero"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_stringliteral_5b7cc70dda4dc2143e5adb63bd5d1f349504f461dbdfd9bc76fac1f8ca6d019f","typeString":"literal_string \"SafeMath: division by zero\""}],"id":259,"name":"div","nodeType":"Identifier","overloadedDeclarations":[266,294],"referencedDeclaration":294,"src":"4684:3:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$_t_string_memory_ptr_$returns$_t_uint256_$","typeString":"function (uint256,uint256,string memory) pure returns (uint256)"}},"id":263,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4684:39:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":258,"id":264,"nodeType":"Return","src":"4677:46:0"}]},"documentation":{"id":250,"nodeType":"StructuredDocumentation","src":"4188:414:0","text":" @dev Returns the integer division of two unsigned integers. Reverts on\n division by zero. The result is rounded towards zero.\n Counterpart to Solidity's `/` operator. Note: this function uses a\n `revert` opcode (which leaves remaining gas untouched) while Solidity\n uses an invalid opcode to revert (consuming all remaining gas).\n Requirements:\n - The divisor cannot be zero."},"id":266,"implemented":true,"kind":"function","modifiers":[],"name":"div","nodeType":"FunctionDefinition","overrides":null,"parameters":{"id":255,"nodeType":"ParameterList","parameters":[{"constant":false,"id":252,"mutability":"mutable","name":"a","nodeType":"VariableDeclaration","overrides":null,"scope":266,"src":"4618:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":251,"name":"uint256","nodeType":"ElementaryTypeName","src":"4618:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":254,"mutability":"mutable","name":"b","nodeType":"VariableDeclaration","overrides":null,"scope":266,"src":"4629:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":253,"name":"uint256","nodeType":"ElementaryTypeName","src":"4629:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"4617:22:0"},"returnParameters":{"id":258,"nodeType":"ParameterList","parameters":[{"constant":false,"id":257,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","overrides":null,"scope":266,"src":"4663:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":256,"name":"uint256","nodeType":"ElementaryTypeName","src":"4663:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"4662:9:0"},"scope":336,"src":"4605:123:0","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":293,"nodeType":"Block","src":"5265:217:0","statements":[{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":281,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":279,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":271,"src":"5339:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"argumentTypes":null,"hexValue":"30","id":280,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5343:1:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"5339:5:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"argumentTypes":null,"id":282,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":273,"src":"5346:12:0","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":278,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5331:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":283,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5331:28:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":284,"nodeType":"ExpressionStatement","src":"5331:28:0"},{"assignments":[286],"declarations":[{"constant":false,"id":286,"mutability":"mutable","name":"c","nodeType":"VariableDeclaration","overrides":null,"scope":293,"src":"5364:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":285,"name":"uint256","nodeType":"ElementaryTypeName","src":"5364:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"id":290,"initialValue":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":289,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":287,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":269,"src":"5376:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"argumentTypes":null,"id":288,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":271,"src":"5380:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5376:5:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"5364:17:0"},{"expression":{"argumentTypes":null,"id":291,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":286,"src":"5476:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":277,"id":292,"nodeType":"Return","src":"5469:8:0"}]},"documentation":{"id":267,"nodeType":"StructuredDocumentation","src":"4733:434:0","text":" @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n division by zero. The result is rounded towards zero.\n Counterpart to Solidity's `/` operator. Note: this function uses a\n `revert` opcode (which leaves remaining gas untouched) while Solidity\n uses an invalid opcode to revert (consuming all remaining gas).\n Requirements:\n - The divisor cannot be zero."},"id":294,"implemented":true,"kind":"function","modifiers":[],"name":"div","nodeType":"FunctionDefinition","overrides":null,"parameters":{"id":274,"nodeType":"ParameterList","parameters":[{"constant":false,"id":269,"mutability":"mutable","name":"a","nodeType":"VariableDeclaration","overrides":null,"scope":294,"src":"5183:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":268,"name":"uint256","nodeType":"ElementaryTypeName","src":"5183:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":271,"mutability":"mutable","name":"b","nodeType":"VariableDeclaration","overrides":null,"scope":294,"src":"5194:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":270,"name":"uint256","nodeType":"ElementaryTypeName","src":"5194:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":273,"mutability":"mutable","name":"errorMessage","nodeType":"VariableDeclaration","overrides":null,"scope":294,"src":"5205:26:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":272,"name":"string","nodeType":"ElementaryTypeName","src":"5205:6:0","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"value":null,"visibility":"internal"}],"src":"5182:50:0"},"returnParameters":{"id":277,"nodeType":"ParameterList","parameters":[{"constant":false,"id":276,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","overrides":null,"scope":294,"src":"5256:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":275,"name":"uint256","nodeType":"ElementaryTypeName","src":"5256:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"5255:9:0"},"scope":336,"src":"5170:312:0","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":310,"nodeType":"Block","src":"5960:54:0","statements":[{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":305,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":297,"src":"5976:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"id":306,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":299,"src":"5979:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"hexValue":"536166654d6174683a206d6f64756c6f206279207a65726f","id":307,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5982:26:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_stringliteral_726e51f7b81fce0a68f5f214f445e275313b20b1633f08ce954ee39abf8d7832","typeString":"literal_string \"SafeMath: modulo by zero\""},"value":"SafeMath: modulo by zero"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_stringliteral_726e51f7b81fce0a68f5f214f445e275313b20b1633f08ce954ee39abf8d7832","typeString":"literal_string \"SafeMath: modulo by zero\""}],"id":304,"name":"mod","nodeType":"Identifier","overloadedDeclarations":[311,335],"referencedDeclaration":335,"src":"5972:3:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$_t_string_memory_ptr_$returns$_t_uint256_$","typeString":"function (uint256,uint256,string memory) pure returns (uint256)"}},"id":308,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5972:37:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":303,"id":309,"nodeType":"Return","src":"5965:44:0"}]},"documentation":{"id":295,"nodeType":"StructuredDocumentation","src":"5487:403:0","text":" @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n Reverts when dividing by zero.\n Counterpart to Solidity's `%` operator. This function uses a `revert`\n opcode (which leaves remaining gas untouched) while Solidity uses an\n invalid opcode to revert (consuming all remaining gas).\n Requirements:\n - The divisor cannot be zero."},"id":311,"implemented":true,"kind":"function","modifiers":[],"name":"mod","nodeType":"FunctionDefinition","overrides":null,"parameters":{"id":300,"nodeType":"ParameterList","parameters":[{"constant":false,"id":297,"mutability":"mutable","name":"a","nodeType":"VariableDeclaration","overrides":null,"scope":311,"src":"5906:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":296,"name":"uint256","nodeType":"ElementaryTypeName","src":"5906:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":299,"mutability":"mutable","name":"b","nodeType":"VariableDeclaration","overrides":null,"scope":311,"src":"5917:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":298,"name":"uint256","nodeType":"ElementaryTypeName","src":"5917:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"5905:22:0"},"returnParameters":{"id":303,"nodeType":"ParameterList","parameters":[{"constant":false,"id":302,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","overrides":null,"scope":311,"src":"5951:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":301,"name":"uint256","nodeType":"ElementaryTypeName","src":"5951:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"5950:9:0"},"scope":336,"src":"5893:121:0","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":334,"nodeType":"Block","src":"6540:56:0","statements":[{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":326,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":324,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":316,"src":"6553:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"argumentTypes":null,"hexValue":"30","id":325,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6558:1:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6553:6:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"argumentTypes":null,"id":327,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":318,"src":"6561:12:0","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":323,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"6545:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":328,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6545:29:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":329,"nodeType":"ExpressionStatement","src":"6545:29:0"},{"expression":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":332,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":330,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":314,"src":"6586:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"%","rightExpression":{"argumentTypes":null,"id":331,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":316,"src":"6590:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6586:5:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":322,"id":333,"nodeType":"Return","src":"6579:12:0"}]},"documentation":{"id":312,"nodeType":"StructuredDocumentation","src":"6019:423:0","text":" @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n Reverts with custom message when dividing by zero.\n Counterpart to Solidity's `%` operator. This function uses a `revert`\n opcode (which leaves remaining gas untouched) while Solidity uses an\n invalid opcode to revert (consuming all remaining gas).\n Requirements:\n - The divisor cannot be zero."},"id":335,"implemented":true,"kind":"function","modifiers":[],"name":"mod","nodeType":"FunctionDefinition","overrides":null,"parameters":{"id":319,"nodeType":"ParameterList","parameters":[{"constant":false,"id":314,"mutability":"mutable","name":"a","nodeType":"VariableDeclaration","overrides":null,"scope":335,"src":"6458:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":313,"name":"uint256","nodeType":"ElementaryTypeName","src":"6458:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":316,"mutability":"mutable","name":"b","nodeType":"VariableDeclaration","overrides":null,"scope":335,"src":"6469:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":315,"name":"uint256","nodeType":"ElementaryTypeName","src":"6469:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":318,"mutability":"mutable","name":"errorMessage","nodeType":"VariableDeclaration","overrides":null,"scope":335,"src":"6480:26:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":317,"name":"string","nodeType":"ElementaryTypeName","src":"6480:6:0","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"value":null,"visibility":"internal"}],"src":"6457:50:0"},"returnParameters":{"id":322,"nodeType":"ParameterList","parameters":[{"constant":false,"id":321,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","overrides":null,"scope":335,"src":"6531:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":320,"name":"uint256","nodeType":"ElementaryTypeName","src":"6531:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"6530:9:0"},"scope":336,"src":"6445:151:0","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":337,"src":"2391:4208:0"}],"src":"41:6560:0"},"id":0}},"contracts":{"contracts/libs.sol":{"Context":{"abi":[],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/libs.sol\":\"Context\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/libs.sol\":{\"content\":\"\\r\\n//SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity 0.6.12;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\ncontract Context {\\r\\n\\t// Empty internal constructor, to prevent people from mistakenly deploying\\r\\n\\t// an instance of this contract, which should be used via inheritance.\\r\\n\\tconstructor () internal { }\\r\\n\\r\\n\\tfunction _msgSender() internal view returns (address payable) {\\r\\n\\t\\treturn msg.sender;\\r\\n\\t}\\r\\n\\r\\n\\tfunction _msgData() internal view returns (bytes memory) {\\r\\n\\t\\tthis; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\r\\n\\t\\treturn msg.data;\\r\\n\\t}\\r\\n}\\r\\n    /* --------- Access Control --------- */\\r\\ncontract Ownable is Context {\\r\\n\\taddress private _owner;\\r\\n\\r\\n\\tevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n\\t/**\\r\\n\\t* @dev Initializes the contract setting the deployer as the initial owner.\\r\\n\\t*/\\r\\n\\tconstructor () internal {\\r\\n\\t\\taddress msgSender = _msgSender();\\r\\n\\t\\t_owner = msgSender;\\r\\n\\t\\temit OwnershipTransferred(address(0), msgSender);\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t* @dev Returns the address of the current owner.\\r\\n\\t*/\\r\\n\\tfunction owner() public view returns (address) {\\r\\n\\t\\treturn _owner;\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t* @dev Throws if called by any account other than the owner.\\r\\n\\t*/\\r\\n\\tmodifier onlyOwner() {\\r\\n\\t\\trequire(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\r\\n\\t\\t_;\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t* @dev Leaves the contract without owner. It will not be possible to call\\r\\n\\t* `onlyOwner` functions anymore. Can only be called by the current owner.\\r\\n\\t*\\r\\n\\t* NOTE: Renouncing ownership will leave the contract without an owner,\\r\\n\\t* thereby removing any functionality that is only available to the owner.\\r\\n\\t*/\\r\\n\\tfunction renounceOwnership() public onlyOwner {\\r\\n\\t\\temit OwnershipTransferred(_owner, address(0));\\r\\n\\t\\t_owner = address(0);\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t* @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n\\t* Can only be called by the current owner.\\r\\n\\t*/\\r\\n\\tfunction transferOwnership(address newOwner) public onlyOwner {\\r\\n\\t\\t_transferOwnership(newOwner);\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t* @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n\\t*/\\r\\n\\tfunction _transferOwnership(address newOwner) internal {\\r\\n\\t\\trequire(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\r\\n\\t\\temit OwnershipTransferred(_owner, newOwner);\\r\\n\\t\\t_owner = newOwner;\\r\\n\\t}\\r\\n}\\r\\n\\r\\n    /* --------- safe math --------- */\\r\\nlibrary SafeMath {\\r\\n\\t/**\\r\\n\\t* @dev Returns the addition of two unsigned integers, reverting on\\r\\n\\t* overflow.\\r\\n\\t*\\r\\n\\t* Counterpart to Solidity's `+` operator.\\r\\n\\t*\\r\\n\\t* Requirements:\\r\\n\\t* - Addition cannot overflow.\\r\\n\\t*/\\r\\n\\tfunction add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n\\t\\tuint256 c = a + b;\\r\\n\\t\\trequire(c >= a, \\\"SafeMath: addition overflow\\\");\\r\\n\\r\\n\\t\\treturn c;\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t* @dev Returns the subtraction of two unsigned integers, reverting on\\r\\n\\t* overflow (when the result is negative).\\r\\n\\t*\\r\\n\\t* Counterpart to Solidity's `-` operator.\\r\\n\\t*\\r\\n\\t* Requirements:\\r\\n\\t* - Subtraction cannot overflow.\\r\\n\\t*/\\r\\n\\tfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n\\t\\treturn sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t* @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\r\\n\\t* overflow (when the result is negative).\\r\\n\\t*\\r\\n\\t* Counterpart to Solidity's `-` operator.\\r\\n\\t*\\r\\n\\t* Requirements:\\r\\n\\t* - Subtraction cannot overflow.\\r\\n\\t*/\\r\\n\\tfunction sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n\\t\\trequire(b <= a, errorMessage);\\r\\n\\t\\tuint256 c = a - b;\\r\\n\\r\\n\\t\\treturn c;\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t* @dev Returns the multiplication of two unsigned integers, reverting on\\r\\n\\t* overflow.\\r\\n\\t*\\r\\n\\t* Counterpart to Solidity's `*` operator.\\r\\n\\t*\\r\\n\\t* Requirements:\\r\\n\\t* - Multiplication cannot overflow.\\r\\n\\t*/\\r\\n\\tfunction mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n\\t\\t// Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\r\\n\\t\\t// benefit is lost if 'b' is also tested.\\r\\n\\t\\t// See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\r\\n\\t\\tif (a == 0) {\\r\\n\\t\\treturn 0;\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tuint256 c = a * b;\\r\\n\\t\\trequire(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\r\\n\\r\\n\\t\\treturn c;\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t* @dev Returns the integer division of two unsigned integers. Reverts on\\r\\n\\t* division by zero. The result is rounded towards zero.\\r\\n\\t*\\r\\n\\t* Counterpart to Solidity's `/` operator. Note: this function uses a\\r\\n\\t* `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n\\t* uses an invalid opcode to revert (consuming all remaining gas).\\r\\n\\t*\\r\\n\\t* Requirements:\\r\\n\\t* - The divisor cannot be zero.\\r\\n\\t*/\\r\\n\\tfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n\\t\\treturn div(a, b, \\\"SafeMath: division by zero\\\");\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t* @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\r\\n\\t* division by zero. The result is rounded towards zero.\\r\\n\\t*\\r\\n\\t* Counterpart to Solidity's `/` operator. Note: this function uses a\\r\\n\\t* `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n\\t* uses an invalid opcode to revert (consuming all remaining gas).\\r\\n\\t*\\r\\n\\t* Requirements:\\r\\n\\t* - The divisor cannot be zero.\\r\\n\\t*/\\r\\n\\tfunction div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n\\t\\t// Solidity only automatically asserts when dividing by 0\\r\\n\\t\\trequire(b > 0, errorMessage);\\r\\n\\t\\tuint256 c = a / b;\\r\\n\\t\\t// assert(a == b * c + a % b); // There is no case in which this doesn't hold\\r\\n\\r\\n\\t\\treturn c;\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t* @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n\\t* Reverts when dividing by zero.\\r\\n\\t*\\r\\n\\t* Counterpart to Solidity's `%` operator. This function uses a `revert`\\r\\n\\t* opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n\\t* invalid opcode to revert (consuming all remaining gas).\\r\\n\\t*\\r\\n\\t* Requirements:\\r\\n\\t* - The divisor cannot be zero.\\r\\n\\t*/\\r\\n\\tfunction mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n\\t\\treturn mod(a, b, \\\"SafeMath: modulo by zero\\\");\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t* @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n\\t* Reverts with custom message when dividing by zero.\\r\\n\\t*\\r\\n\\t* Counterpart to Solidity's `%` operator. This function uses a `revert`\\r\\n\\t* opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n\\t* invalid opcode to revert (consuming all remaining gas).\\r\\n\\t*\\r\\n\\t* Requirements:\\r\\n\\t* - The divisor cannot be zero.\\r\\n\\t*/\\r\\n\\tfunction mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n\\t\\trequire(b != 0, errorMessage);\\r\\n\\t\\treturn a % b;\\r\\n\\t}\\r\\n}\\r\\n\",\"keccak256\":\"0x9ce348b7b2ff4ad361d117229856f2fb1fd20d8a1da68e2b2a5c3046d67aa2b3\",\"license\":\"UNLICENSED\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}},"Ownable":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{"constructor":{"details":"Initializes the contract setting the deployer as the initial owner."},"owner()":{"details":"Returns the address of the current owner."},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}},"version":1},"evm":{"bytecode":{"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"owner()":"8da5cb5b","renounceOwnership()":"715018a6","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Initializes the contract setting the deployer as the initial owner.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/libs.sol\":\"Ownable\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/libs.sol\":{\"content\":\"\\r\\n//SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity 0.6.12;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\ncontract Context {\\r\\n\\t// Empty internal constructor, to prevent people from mistakenly deploying\\r\\n\\t// an instance of this contract, which should be used via inheritance.\\r\\n\\tconstructor () internal { }\\r\\n\\r\\n\\tfunction _msgSender() internal view returns (address payable) {\\r\\n\\t\\treturn msg.sender;\\r\\n\\t}\\r\\n\\r\\n\\tfunction _msgData() internal view returns (bytes memory) {\\r\\n\\t\\tthis; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\r\\n\\t\\treturn msg.data;\\r\\n\\t}\\r\\n}\\r\\n    /* --------- Access Control --------- */\\r\\ncontract Ownable is Context {\\r\\n\\taddress private _owner;\\r\\n\\r\\n\\tevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n\\t/**\\r\\n\\t* @dev Initializes the contract setting the deployer as the initial owner.\\r\\n\\t*/\\r\\n\\tconstructor () internal {\\r\\n\\t\\taddress msgSender = _msgSender();\\r\\n\\t\\t_owner = msgSender;\\r\\n\\t\\temit OwnershipTransferred(address(0), msgSender);\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t* @dev Returns the address of the current owner.\\r\\n\\t*/\\r\\n\\tfunction owner() public view returns (address) {\\r\\n\\t\\treturn _owner;\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t* @dev Throws if called by any account other than the owner.\\r\\n\\t*/\\r\\n\\tmodifier onlyOwner() {\\r\\n\\t\\trequire(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\r\\n\\t\\t_;\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t* @dev Leaves the contract without owner. It will not be possible to call\\r\\n\\t* `onlyOwner` functions anymore. Can only be called by the current owner.\\r\\n\\t*\\r\\n\\t* NOTE: Renouncing ownership will leave the contract without an owner,\\r\\n\\t* thereby removing any functionality that is only available to the owner.\\r\\n\\t*/\\r\\n\\tfunction renounceOwnership() public onlyOwner {\\r\\n\\t\\temit OwnershipTransferred(_owner, address(0));\\r\\n\\t\\t_owner = address(0);\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t* @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n\\t* Can only be called by the current owner.\\r\\n\\t*/\\r\\n\\tfunction transferOwnership(address newOwner) public onlyOwner {\\r\\n\\t\\t_transferOwnership(newOwner);\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t* @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n\\t*/\\r\\n\\tfunction _transferOwnership(address newOwner) internal {\\r\\n\\t\\trequire(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\r\\n\\t\\temit OwnershipTransferred(_owner, newOwner);\\r\\n\\t\\t_owner = newOwner;\\r\\n\\t}\\r\\n}\\r\\n\\r\\n    /* --------- safe math --------- */\\r\\nlibrary SafeMath {\\r\\n\\t/**\\r\\n\\t* @dev Returns the addition of two unsigned integers, reverting on\\r\\n\\t* overflow.\\r\\n\\t*\\r\\n\\t* Counterpart to Solidity's `+` operator.\\r\\n\\t*\\r\\n\\t* Requirements:\\r\\n\\t* - Addition cannot overflow.\\r\\n\\t*/\\r\\n\\tfunction add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n\\t\\tuint256 c = a + b;\\r\\n\\t\\trequire(c >= a, \\\"SafeMath: addition overflow\\\");\\r\\n\\r\\n\\t\\treturn c;\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t* @dev Returns the subtraction of two unsigned integers, reverting on\\r\\n\\t* overflow (when the result is negative).\\r\\n\\t*\\r\\n\\t* Counterpart to Solidity's `-` operator.\\r\\n\\t*\\r\\n\\t* Requirements:\\r\\n\\t* - Subtraction cannot overflow.\\r\\n\\t*/\\r\\n\\tfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n\\t\\treturn sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t* @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\r\\n\\t* overflow (when the result is negative).\\r\\n\\t*\\r\\n\\t* Counterpart to Solidity's `-` operator.\\r\\n\\t*\\r\\n\\t* Requirements:\\r\\n\\t* - Subtraction cannot overflow.\\r\\n\\t*/\\r\\n\\tfunction sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n\\t\\trequire(b <= a, errorMessage);\\r\\n\\t\\tuint256 c = a - b;\\r\\n\\r\\n\\t\\treturn c;\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t* @dev Returns the multiplication of two unsigned integers, reverting on\\r\\n\\t* overflow.\\r\\n\\t*\\r\\n\\t* Counterpart to Solidity's `*` operator.\\r\\n\\t*\\r\\n\\t* Requirements:\\r\\n\\t* - Multiplication cannot overflow.\\r\\n\\t*/\\r\\n\\tfunction mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n\\t\\t// Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\r\\n\\t\\t// benefit is lost if 'b' is also tested.\\r\\n\\t\\t// See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\r\\n\\t\\tif (a == 0) {\\r\\n\\t\\treturn 0;\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tuint256 c = a * b;\\r\\n\\t\\trequire(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\r\\n\\r\\n\\t\\treturn c;\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t* @dev Returns the integer division of two unsigned integers. Reverts on\\r\\n\\t* division by zero. The result is rounded towards zero.\\r\\n\\t*\\r\\n\\t* Counterpart to Solidity's `/` operator. Note: this function uses a\\r\\n\\t* `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n\\t* uses an invalid opcode to revert (consuming all remaining gas).\\r\\n\\t*\\r\\n\\t* Requirements:\\r\\n\\t* - The divisor cannot be zero.\\r\\n\\t*/\\r\\n\\tfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n\\t\\treturn div(a, b, \\\"SafeMath: division by zero\\\");\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t* @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\r\\n\\t* division by zero. The result is rounded towards zero.\\r\\n\\t*\\r\\n\\t* Counterpart to Solidity's `/` operator. Note: this function uses a\\r\\n\\t* `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n\\t* uses an invalid opcode to revert (consuming all remaining gas).\\r\\n\\t*\\r\\n\\t* Requirements:\\r\\n\\t* - The divisor cannot be zero.\\r\\n\\t*/\\r\\n\\tfunction div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n\\t\\t// Solidity only automatically asserts when dividing by 0\\r\\n\\t\\trequire(b > 0, errorMessage);\\r\\n\\t\\tuint256 c = a / b;\\r\\n\\t\\t// assert(a == b * c + a % b); // There is no case in which this doesn't hold\\r\\n\\r\\n\\t\\treturn c;\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t* @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n\\t* Reverts when dividing by zero.\\r\\n\\t*\\r\\n\\t* Counterpart to Solidity's `%` operator. This function uses a `revert`\\r\\n\\t* opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n\\t* invalid opcode to revert (consuming all remaining gas).\\r\\n\\t*\\r\\n\\t* Requirements:\\r\\n\\t* - The divisor cannot be zero.\\r\\n\\t*/\\r\\n\\tfunction mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n\\t\\treturn mod(a, b, \\\"SafeMath: modulo by zero\\\");\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t* @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n\\t* Reverts with custom message when dividing by zero.\\r\\n\\t*\\r\\n\\t* Counterpart to Solidity's `%` operator. This function uses a `revert`\\r\\n\\t* opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n\\t* invalid opcode to revert (consuming all remaining gas).\\r\\n\\t*\\r\\n\\t* Requirements:\\r\\n\\t* - The divisor cannot be zero.\\r\\n\\t*/\\r\\n\\tfunction mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n\\t\\trequire(b != 0, errorMessage);\\r\\n\\t\\treturn a % b;\\r\\n\\t}\\r\\n}\\r\\n\",\"keccak256\":\"0x9ce348b7b2ff4ad361d117229856f2fb1fd20d8a1da68e2b2a5c3046d67aa2b3\",\"license\":\"UNLICENSED\"}},\"version\":1}","storageLayout":{"storage":[{"astId":31,"contract":"contracts/libs.sol:Ownable","label":"_owner","offset":0,"slot":"0","type":"t_address"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"}}},"userdoc":{"kind":"user","methods":{},"version":1}},"SafeMath":{"abi":[],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"linkReferences":{},"object":"60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220099761f4a8891f9bdd7ef751da7bccf8cffe273ea42320afbff1fd36ceca55a164736f6c634300060c0033","opcodes":"PUSH1 0x56 PUSH1 0x23 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x16 JUMPI INVALID JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 MULMOD SWAP8 PUSH2 0xF4A8 DUP10 0x1F SWAP12 0xDD PUSH31 0xF751DA7BCCF8CFFE273EA42320AFBFF1FD36CECA55A164736F6C634300060C STOP CALLER ","sourceMap":"2391:4208:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220099761f4a8891f9bdd7ef751da7bccf8cffe273ea42320afbff1fd36ceca55a164736f6c634300060c0033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 MULMOD SWAP8 PUSH2 0xF4A8 DUP10 0x1F SWAP12 0xDD PUSH31 0xF751DA7BCCF8CFFE273EA42320AFBFF1FD36CECA55A164736F6C634300060C STOP CALLER ","sourceMap":"2391:4208:0:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"add(uint256,uint256)":"infinite","div(uint256,uint256)":"infinite","div(uint256,uint256,string memory)":"infinite","mod(uint256,uint256)":"infinite","mod(uint256,uint256,string memory)":"infinite","mul(uint256,uint256)":"infinite","sub(uint256,uint256)":"infinite","sub(uint256,uint256,string memory)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/libs.sol\":\"SafeMath\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/libs.sol\":{\"content\":\"\\r\\n//SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity 0.6.12;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\ncontract Context {\\r\\n\\t// Empty internal constructor, to prevent people from mistakenly deploying\\r\\n\\t// an instance of this contract, which should be used via inheritance.\\r\\n\\tconstructor () internal { }\\r\\n\\r\\n\\tfunction _msgSender() internal view returns (address payable) {\\r\\n\\t\\treturn msg.sender;\\r\\n\\t}\\r\\n\\r\\n\\tfunction _msgData() internal view returns (bytes memory) {\\r\\n\\t\\tthis; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\r\\n\\t\\treturn msg.data;\\r\\n\\t}\\r\\n}\\r\\n    /* --------- Access Control --------- */\\r\\ncontract Ownable is Context {\\r\\n\\taddress private _owner;\\r\\n\\r\\n\\tevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n\\t/**\\r\\n\\t* @dev Initializes the contract setting the deployer as the initial owner.\\r\\n\\t*/\\r\\n\\tconstructor () internal {\\r\\n\\t\\taddress msgSender = _msgSender();\\r\\n\\t\\t_owner = msgSender;\\r\\n\\t\\temit OwnershipTransferred(address(0), msgSender);\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t* @dev Returns the address of the current owner.\\r\\n\\t*/\\r\\n\\tfunction owner() public view returns (address) {\\r\\n\\t\\treturn _owner;\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t* @dev Throws if called by any account other than the owner.\\r\\n\\t*/\\r\\n\\tmodifier onlyOwner() {\\r\\n\\t\\trequire(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\r\\n\\t\\t_;\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t* @dev Leaves the contract without owner. It will not be possible to call\\r\\n\\t* `onlyOwner` functions anymore. Can only be called by the current owner.\\r\\n\\t*\\r\\n\\t* NOTE: Renouncing ownership will leave the contract without an owner,\\r\\n\\t* thereby removing any functionality that is only available to the owner.\\r\\n\\t*/\\r\\n\\tfunction renounceOwnership() public onlyOwner {\\r\\n\\t\\temit OwnershipTransferred(_owner, address(0));\\r\\n\\t\\t_owner = address(0);\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t* @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n\\t* Can only be called by the current owner.\\r\\n\\t*/\\r\\n\\tfunction transferOwnership(address newOwner) public onlyOwner {\\r\\n\\t\\t_transferOwnership(newOwner);\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t* @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n\\t*/\\r\\n\\tfunction _transferOwnership(address newOwner) internal {\\r\\n\\t\\trequire(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\r\\n\\t\\temit OwnershipTransferred(_owner, newOwner);\\r\\n\\t\\t_owner = newOwner;\\r\\n\\t}\\r\\n}\\r\\n\\r\\n    /* --------- safe math --------- */\\r\\nlibrary SafeMath {\\r\\n\\t/**\\r\\n\\t* @dev Returns the addition of two unsigned integers, reverting on\\r\\n\\t* overflow.\\r\\n\\t*\\r\\n\\t* Counterpart to Solidity's `+` operator.\\r\\n\\t*\\r\\n\\t* Requirements:\\r\\n\\t* - Addition cannot overflow.\\r\\n\\t*/\\r\\n\\tfunction add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n\\t\\tuint256 c = a + b;\\r\\n\\t\\trequire(c >= a, \\\"SafeMath: addition overflow\\\");\\r\\n\\r\\n\\t\\treturn c;\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t* @dev Returns the subtraction of two unsigned integers, reverting on\\r\\n\\t* overflow (when the result is negative).\\r\\n\\t*\\r\\n\\t* Counterpart to Solidity's `-` operator.\\r\\n\\t*\\r\\n\\t* Requirements:\\r\\n\\t* - Subtraction cannot overflow.\\r\\n\\t*/\\r\\n\\tfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n\\t\\treturn sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t* @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\r\\n\\t* overflow (when the result is negative).\\r\\n\\t*\\r\\n\\t* Counterpart to Solidity's `-` operator.\\r\\n\\t*\\r\\n\\t* Requirements:\\r\\n\\t* - Subtraction cannot overflow.\\r\\n\\t*/\\r\\n\\tfunction sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n\\t\\trequire(b <= a, errorMessage);\\r\\n\\t\\tuint256 c = a - b;\\r\\n\\r\\n\\t\\treturn c;\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t* @dev Returns the multiplication of two unsigned integers, reverting on\\r\\n\\t* overflow.\\r\\n\\t*\\r\\n\\t* Counterpart to Solidity's `*` operator.\\r\\n\\t*\\r\\n\\t* Requirements:\\r\\n\\t* - Multiplication cannot overflow.\\r\\n\\t*/\\r\\n\\tfunction mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n\\t\\t// Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\r\\n\\t\\t// benefit is lost if 'b' is also tested.\\r\\n\\t\\t// See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\r\\n\\t\\tif (a == 0) {\\r\\n\\t\\treturn 0;\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tuint256 c = a * b;\\r\\n\\t\\trequire(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\r\\n\\r\\n\\t\\treturn c;\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t* @dev Returns the integer division of two unsigned integers. Reverts on\\r\\n\\t* division by zero. The result is rounded towards zero.\\r\\n\\t*\\r\\n\\t* Counterpart to Solidity's `/` operator. Note: this function uses a\\r\\n\\t* `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n\\t* uses an invalid opcode to revert (consuming all remaining gas).\\r\\n\\t*\\r\\n\\t* Requirements:\\r\\n\\t* - The divisor cannot be zero.\\r\\n\\t*/\\r\\n\\tfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n\\t\\treturn div(a, b, \\\"SafeMath: division by zero\\\");\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t* @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\r\\n\\t* division by zero. The result is rounded towards zero.\\r\\n\\t*\\r\\n\\t* Counterpart to Solidity's `/` operator. Note: this function uses a\\r\\n\\t* `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n\\t* uses an invalid opcode to revert (consuming all remaining gas).\\r\\n\\t*\\r\\n\\t* Requirements:\\r\\n\\t* - The divisor cannot be zero.\\r\\n\\t*/\\r\\n\\tfunction div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n\\t\\t// Solidity only automatically asserts when dividing by 0\\r\\n\\t\\trequire(b > 0, errorMessage);\\r\\n\\t\\tuint256 c = a / b;\\r\\n\\t\\t// assert(a == b * c + a % b); // There is no case in which this doesn't hold\\r\\n\\r\\n\\t\\treturn c;\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t* @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n\\t* Reverts when dividing by zero.\\r\\n\\t*\\r\\n\\t* Counterpart to Solidity's `%` operator. This function uses a `revert`\\r\\n\\t* opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n\\t* invalid opcode to revert (consuming all remaining gas).\\r\\n\\t*\\r\\n\\t* Requirements:\\r\\n\\t* - The divisor cannot be zero.\\r\\n\\t*/\\r\\n\\tfunction mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n\\t\\treturn mod(a, b, \\\"SafeMath: modulo by zero\\\");\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t* @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n\\t* Reverts with custom message when dividing by zero.\\r\\n\\t*\\r\\n\\t* Counterpart to Solidity's `%` operator. This function uses a `revert`\\r\\n\\t* opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n\\t* invalid opcode to revert (consuming all remaining gas).\\r\\n\\t*\\r\\n\\t* Requirements:\\r\\n\\t* - The divisor cannot be zero.\\r\\n\\t*/\\r\\n\\tfunction mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n\\t\\trequire(b != 0, errorMessage);\\r\\n\\t\\treturn a % b;\\r\\n\\t}\\r\\n}\\r\\n\",\"keccak256\":\"0x9ce348b7b2ff4ad361d117229856f2fb1fd20d8a1da68e2b2a5c3046d67aa2b3\",\"license\":\"UNLICENSED\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}}}}}
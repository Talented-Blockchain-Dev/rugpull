{"id":"002bf9b7c9efc0010004d554be5b7b0d","_format":"hh-sol-build-info-1","solcVersion":"0.8.4","solcLongVersion":"0.8.4+commit.c7e474f2","input":{"language":"Solidity","sources":{"contracts/IExchange_latest.sol":{"content":"\r\n//SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.8.4;\r\n\r\ninterface IDexFactory {\r\n\t\tevent PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n\t\tfunction feeTo() external view returns (address);\r\n\t\tfunction feeToSetter() external view returns (address);\r\n\r\n\t\tfunction getPair(address tokenA, address tokenB) external view returns (address pair);\r\n\t\tfunction allPairs(uint) external view returns (address pair);\r\n\t\tfunction allPairsLength() external view returns (uint);\r\n\r\n\t\tfunction createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n\t\tfunction setFeeTo(address) external;\r\n\t\tfunction setFeeToSetter(address) external;\r\n}\r\n\r\ninterface IDexPair {\r\n\t\tevent Approval(address indexed owner, address indexed spender, uint value);\r\n\t\tevent Transfer(address indexed from, address indexed to, uint value);\r\n\r\n\t\tfunction name() external pure returns (string memory);\r\n\t\tfunction symbol() external pure returns (string memory);\r\n\t\tfunction decimals() external pure returns (uint8);\r\n\t\tfunction totalSupply() external view returns (uint);\r\n\t\tfunction balanceOf(address owner) external view returns (uint);\r\n\t\tfunction allowance(address owner, address spender) external view returns (uint);\r\n\r\n\t\tfunction approve(address spender, uint value) external returns (bool);\r\n\t\tfunction transfer(address to, uint value) external returns (bool);\r\n\t\tfunction transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n\t\tfunction DOMAIN_SEPARATOR() external view returns (bytes32);\r\n\t\tfunction PERMIT_TYPEHASH() external pure returns (bytes32);\r\n\t\tfunction nonces(address owner) external view returns (uint);\r\n\r\n\t\tfunction permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n\t\tevent Mint(address indexed sender, uint amount0, uint amount1);\r\n\t\tevent Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n\t\tevent Swap(\r\n\t\t\t\taddress indexed sender,\r\n\t\t\t\tuint amount0In,\r\n\t\t\t\tuint amount1In,\r\n\t\t\t\tuint amount0Out,\r\n\t\t\t\tuint amount1Out,\r\n\t\t\t\taddress indexed to\r\n\t\t);\r\n\t\tevent Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n\t\tfunction MINIMUM_LIQUIDITY() external pure returns (uint);\r\n\t\tfunction factory() external view returns (address);\r\n\t\tfunction token0() external view returns (address);\r\n\t\tfunction token1() external view returns (address);\r\n\t\tfunction getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n\t\tfunction price0CumulativeLast() external view returns (uint);\r\n\t\tfunction price1CumulativeLast() external view returns (uint);\r\n\t\tfunction kLast() external view returns (uint);\r\n\r\n\t\tfunction mint(address to) external returns (uint liquidity);\r\n\t\tfunction burn(address to) external returns (uint amount0, uint amount1);\r\n\t\tfunction swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n\t\tfunction skim(address to) external;\r\n\t\tfunction sync() external;\r\n\r\n\t\tfunction initialize(address, address) external;\r\n}\r\n\r\ninterface IDexRouter{\r\n\t\tfunction factory() external pure returns (address);\r\n\t\tfunction WETH() external pure returns (address);\r\n\r\n\t\tfunction addLiquidity(\r\n\t\t\t\taddress tokenA,\r\n\t\t\t\taddress tokenB,\r\n\t\t\t\tuint amountADesired,\r\n\t\t\t\tuint amountBDesired,\r\n\t\t\t\tuint amountAMin,\r\n\t\t\t\tuint amountBMin,\r\n\t\t\t\taddress to,\r\n\t\t\t\tuint deadline\r\n\t\t) external returns (uint amountA, uint amountB, uint liquidity);\r\n\t\tfunction addLiquidityETH(\r\n\t\t\t\taddress token,\r\n\t\t\t\tuint amountTokenDesired,\r\n\t\t\t\tuint amountTokenMin,\r\n\t\t\t\tuint amountETHMin,\r\n\t\t\t\taddress to,\r\n\t\t\t\tuint deadline\r\n\t\t) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n\t\tfunction removeLiquidity(\r\n\t\t\t\taddress tokenA,\r\n\t\t\t\taddress tokenB,\r\n\t\t\t\tuint liquidity,\r\n\t\t\t\tuint amountAMin,\r\n\t\t\t\tuint amountBMin,\r\n\t\t\t\taddress to,\r\n\t\t\t\tuint deadline\r\n\t\t) external returns (uint amountA, uint amountB);\r\n\t\tfunction removeLiquidityETH(\r\n\t\t\t\taddress token,\r\n\t\t\t\tuint liquidity,\r\n\t\t\t\tuint amountTokenMin,\r\n\t\t\t\tuint amountETHMin,\r\n\t\t\t\taddress to,\r\n\t\t\t\tuint deadline\r\n\t\t) external returns (uint amountToken, uint amountETH);\r\n\t\tfunction removeLiquidityWithPermit(\r\n\t\t\t\taddress tokenA,\r\n\t\t\t\taddress tokenB,\r\n\t\t\t\tuint liquidity,\r\n\t\t\t\tuint amountAMin,\r\n\t\t\t\tuint amountBMin,\r\n\t\t\t\taddress to,\r\n\t\t\t\tuint deadline,\r\n\t\t\t\tbool approveMax, uint8 v, bytes32 r, bytes32 s\r\n\t\t) external returns (uint amountA, uint amountB);\r\n\t\tfunction removeLiquidityETHWithPermit(\r\n\t\t\t\taddress token,\r\n\t\t\t\tuint liquidity,\r\n\t\t\t\tuint amountTokenMin,\r\n\t\t\t\tuint amountETHMin,\r\n\t\t\t\taddress to,\r\n\t\t\t\tuint deadline,\r\n\t\t\t\tbool approveMax, uint8 v, bytes32 r, bytes32 s\r\n\t\t) external returns (uint amountToken, uint amountETH);\r\n\t\tfunction swapExactTokensForTokens(\r\n\t\t\t\tuint amountIn,\r\n\t\t\t\tuint amountOutMin,\r\n\t\t\t\taddress[] calldata path,\r\n\t\t\t\taddress to,\r\n\t\t\t\tuint deadline\r\n\t\t) external returns (uint[] memory amounts);\r\n\t\tfunction swapTokensForExactTokens(\r\n\t\t\t\tuint amountOut,\r\n\t\t\t\tuint amountInMax,\r\n\t\t\t\taddress[] calldata path,\r\n\t\t\t\taddress to,\r\n\t\t\t\tuint deadline\r\n\t\t) external returns (uint[] memory amounts);\r\n\t\tfunction swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n\t\t\t\texternal\r\n\t\t\t\tpayable\r\n\t\t\t\treturns (uint[] memory amounts);\r\n\t\tfunction swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n\t\t\t\texternal\r\n\t\t\t\treturns (uint[] memory amounts);\r\n\t\tfunction swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n\t\t\t\texternal\r\n\t\t\t\treturns (uint[] memory amounts);\r\n\t\tfunction swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n\t\t\t\texternal\r\n\t\t\t\tpayable\r\n\t\t\t\treturns (uint[] memory amounts);\r\n\r\n\t\tfunction quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n\t\tfunction getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n\t\tfunction getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n\t\tfunction getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n\t\tfunction getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n\t\tfunction removeLiquidityETHSupportingFeeOnTransferTokens(\r\n\t\t\taddress token,\r\n\t\t\tuint liquidity,\r\n\t\t\tuint amountTokenMin,\r\n\t\t\tuint amountETHMin,\r\n\t\t\taddress to,\r\n\t\t\tuint deadline\r\n\t\t) external returns (uint amountETH);\r\n\t\tfunction removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n\t\t\taddress token,\r\n\t\t\tuint liquidity,\r\n\t\t\tuint amountTokenMin,\r\n\t\t\tuint amountETHMin,\r\n\t\t\taddress to,\r\n\t\t\tuint deadline,\r\n\t\t\tbool approveMax, uint8 v, bytes32 r, bytes32 s\r\n\t\t) external returns (uint amountETH);\r\n\t\r\n\t\tfunction swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n\t\t\tuint amountIn,\r\n\t\t\tuint amountOutMin,\r\n\t\t\taddress[] calldata path,\r\n\t\t\taddress to,\r\n\t\t\tuint deadline\r\n\t\t) external;\r\n\t\tfunction swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n\t\t\tuint amountOutMin,\r\n\t\t\taddress[] calldata path,\r\n\t\t\taddress to,\r\n\t\t\tuint deadline\r\n\t\t) external payable;\r\n\t\tfunction swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n\t\t\tuint amountIn,\r\n\t\t\tuint amountOutMin,\r\n\t\t\taddress[] calldata path,\r\n\t\t\taddress to,\r\n\t\t\tuint deadline\r\n\t\t) external;\r\n}"},"contracts/swap.sol":{"content":"pragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(\r\n        address owner,\r\n        address spender\r\n    ) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\n// File @openzeppelin/contracts/utils/Context.sol@v4.6.0\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File @openzeppelin/contracts/access/Ownable.sol@v4.6.0\r\n\r\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File @openzeppelin/contracts/utils/math/SafeMath.sol@v4.6.0\r\n\r\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n// CAUTION\r\n// This version of SafeMath should only be used with Solidity 0.8 or later,\r\n// because it relies on the compiler's built in overflow checks.\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations.\r\n *\r\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\r\n * now has built in overflow checking.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(\r\n        uint256 a,\r\n        uint256 b\r\n    ) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(\r\n        uint256 a,\r\n        uint256 b\r\n    ) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(\r\n        uint256 a,\r\n        uint256 b\r\n    ) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n            // benefit is lost if 'b' is also tested.\r\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(\r\n        uint256 a,\r\n        uint256 b\r\n    ) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(\r\n        uint256 a,\r\n        uint256 b\r\n    ) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\n\r\n// File @openzeppelin/contracts/utils/Address.sol@v4.6.0\r\n\r\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\r\n\r\npragma solidity ^0.8.1;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\r\n     *\r\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\r\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\r\n     * constructor.\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize/address.code.length, which returns 0\r\n        // for contracts in construction, since the code is only stored at the end\r\n        // of the constructor execution.\r\n\r\n        return account.code.length > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(\r\n            address(this).balance >= amount,\r\n            \"Address: insufficient balance\"\r\n        );\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(\r\n            success,\r\n            \"Address: unable to send value, recipient may have reverted\"\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data\r\n    ) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return\r\n            functionCallWithValue(\r\n                target,\r\n                data,\r\n                value,\r\n                \"Address: low-level call with value failed\"\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(\r\n            address(this).balance >= value,\r\n            \"Address: insufficient balance for call\"\r\n        );\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(\r\n            data\r\n        );\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data\r\n    ) internal view returns (bytes memory) {\r\n        return\r\n            functionStaticCall(\r\n                target,\r\n                data,\r\n                \"Address: low-level static call failed\"\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data\r\n    ) internal returns (bytes memory) {\r\n        return\r\n            functionDelegateCall(\r\n                target,\r\n                data,\r\n                \"Address: low-level delegate call failed\"\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File @openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol@v4.6.0\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(token.transfer.selector, to, value)\r\n        );\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(token.approve.selector, spender, value)\r\n        );\r\n    }\r\n\r\n    function safeIncreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(\r\n                token.approve.selector,\r\n                spender,\r\n                newAllowance\r\n            )\r\n        );\r\n    }\r\n\r\n    function safeDecreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        unchecked {\r\n            uint256 oldAllowance = token.allowance(address(this), spender);\r\n            require(\r\n                oldAllowance >= value,\r\n                \"SafeERC20: decreased allowance below zero\"\r\n            );\r\n            uint256 newAllowance = oldAllowance - value;\r\n            _callOptionalReturn(\r\n                token,\r\n                abi.encodeWithSelector(\r\n                    token.approve.selector,\r\n                    spender,\r\n                    newAllowance\r\n                )\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(\r\n            data,\r\n            \"SafeERC20: low-level call failed\"\r\n        );\r\n        if (returndata.length > 0) {\r\n            // Return data is optional\r\n            require(\r\n                abi.decode(returndata, (bool)),\r\n                \"SafeERC20: ERC20 operation did not succeed\"\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\ninterface IRouter {\r\n    function swapExactTokensForTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapExactETHForTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function swapExactTokensForETH(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function getAmountsOut(\r\n        uint256 amountIn,\r\n        address[] calldata path\r\n    ) external view returns (uint256[] memory amounts);\r\n}\r\npragma solidity >=0.5.0;\r\n\r\n/// @title The interface for the PancakeSwap V3 Factory\r\n/// @notice The PancakeSwap V3 Factory facilitates creation of PancakeSwap V3 pools and control over the protocol fees\r\ninterface IPancakeV3Factory {\r\n    function getPool(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint24 fee\r\n    ) external view returns (address pool);\r\n}\r\npragma solidity >=0.5.0;\r\n\r\ninterface IPancakeV3PoolState {\r\n    function slot0()\r\n        external\r\n        view\r\n        returns (\r\n            uint160 sqrtPriceX96,\r\n            int24 tick,\r\n            uint16 observationIndex,\r\n            uint16 observationCardinality,\r\n            uint16 observationCardinalityNext,\r\n            uint32 feeProtocol,\r\n            bool unlocked\r\n        );\r\n}\r\n\r\ninterface IPancakeV3PoolImmutables {\r\n    /// @notice The contract that deployed the pool, which must adhere to the IPancakeV3Factory interface\r\n    /// @return The contract address\r\n    function factory() external view returns (address);\r\n\r\n    /// @notice The first of the two tokens of the pool, sorted by address\r\n    /// @return The token contract address\r\n    function token0() external view returns (address);\r\n\r\n    /// @notice The second of the two tokens of the pool, sorted by address\r\n    /// @return The token contract address\r\n    function token1() external view returns (address);\r\n\r\n    /// @notice The pool's fee in hundredths of a bip, i.e. 1e-6\r\n    /// @return The fee\r\n    function fee() external view returns (uint24);\r\n\r\n    /// @notice The pool tick spacing\r\n    /// @dev Ticks can only be used at multiples of this value, minimum of 1 and always positive\r\n    /// e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ...\r\n    /// This value is an int24 to avoid casting even though it is always positive.\r\n    /// @return The tick spacing\r\n    function tickSpacing() external view returns (int24);\r\n\r\n    /// @notice The maximum amount of position liquidity that can use any tick in the range\r\n    /// @dev This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and\r\n    /// also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\r\n    /// @return The max amount of liquidity per tick\r\n    function maxLiquidityPerTick() external view returns (uint128);\r\n}\r\n\r\ninterface IPancakeV3Pool is IPancakeV3PoolState, IPancakeV3PoolImmutables {}\r\n\r\npragma solidity >=0.5.0;\r\n\r\n/// @title Callback for IPancakeV3PoolActions#swap\r\n/// @notice Any contract that calls IPancakeV3PoolActions#swap must implement this interface\r\ninterface IPancakeV3SwapCallback {\r\n    /// @notice Called to `msg.sender` after executing a swap via IPancakeV3Pool#swap.\r\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\r\n    /// The caller of this method must be checked to be a PancakeV3Pool deployed by the canonical PancakeV3Factory.\r\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\r\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\r\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\r\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\r\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\r\n    /// @param data Any data passed through by the caller via the IPancakeV3PoolActions#swap call\r\n    function pancakeV3SwapCallback(\r\n        int256 amount0Delta,\r\n        int256 amount1Delta,\r\n        bytes calldata data\r\n    ) external;\r\n}\r\n\r\ninterface IV3SwapRouter is IPancakeV3SwapCallback {\r\n    struct ExactInputSingleParams {\r\n        address tokenIn;\r\n        address tokenOut;\r\n        uint24 fee;\r\n        address recipient;\r\n        uint256 amountIn;\r\n        uint256 amountOutMinimum;\r\n        uint160 sqrtPriceLimitX96;\r\n    }\r\n\r\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\r\n    /// @dev Setting `amountIn` to 0 will cause the contract to look up its own balance,\r\n    /// and swap the entire amount, enabling contracts to send tokens before calling this function.\r\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\r\n    /// @return amountOut The amount of the received token\r\n    function exactInputSingle(\r\n        ExactInputSingleParams calldata params\r\n    ) external payable returns (uint256 amountOut);\r\n\r\n    struct ExactInputParams {\r\n        bytes path;\r\n        address recipient;\r\n        uint256 amountIn;\r\n        uint256 amountOutMinimum;\r\n    }\r\n\r\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\r\n    /// @dev Setting `amountIn` to 0 will cause the contract to look up its own balance,\r\n    /// and swap the entire amount, enabling contracts to send tokens before calling this function.\r\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\r\n    /// @return amountOut The amount of the received token\r\n    function exactInput(\r\n        ExactInputParams calldata params\r\n    ) external payable returns (uint256 amountOut);\r\n\r\n    struct ExactOutputSingleParams {\r\n        address tokenIn;\r\n        address tokenOut;\r\n        uint24 fee;\r\n        address recipient;\r\n        uint256 amountOut;\r\n        uint256 amountInMaximum;\r\n        uint160 sqrtPriceLimitX96;\r\n    }\r\n\r\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\r\n    /// that may remain in the router after the swap.\r\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\r\n    /// @return amountIn The amount of the input token\r\n    function exactOutputSingle(\r\n        ExactOutputSingleParams calldata params\r\n    ) external payable returns (uint256 amountIn);\r\n\r\n    struct ExactOutputParams {\r\n        bytes path;\r\n        address recipient;\r\n        uint256 amountOut;\r\n        uint256 amountInMaximum;\r\n    }\r\n\r\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\r\n    /// that may remain in the router after the swap.\r\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\r\n    /// @return amountIn The amount of the input token\r\n    function exactOutput(\r\n        ExactOutputParams calldata params\r\n    ) external payable returns (uint256 amountIn);\r\n\r\n    function refundETH() external payable;\r\n}\r\n\r\ncontract Claimable is Ownable {\r\n    function claimToken(\r\n        address tokenAddress,\r\n        uint256 amount\r\n    ) external onlyOwner {\r\n        IERC20(tokenAddress).transfer(owner(), amount);\r\n    }\r\n\r\n    function claimETH(uint256 amount) external onlyOwner {\r\n        (bool sent, ) = owner().call{value: amount}(\"\");\r\n        require(sent, \"Failed to send Ether\");\r\n    }\r\n}\r\n\r\ncontract ProSwap is Claimable {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n\r\n    uint public feePercent = 0; //10:0.25%\r\n    uint256 public rewardAmount = 10000000000000000000; //10 to tokens\r\n\r\n    address public rewardAddress;\r\n    address public feeAccount;\r\n    address public router;\r\n    address public wavax;\r\n\r\n    address public routerAddress = 0x13f4EA83D0bd40E75C8222255bc855a974568Dd4;\r\n    address public factoryAddress = 0x0BFbCF9fa4f9C56B0F40a671Ad40E0805A091865;\r\n    address public wbnbAddress = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;\r\n    uint24 poolFee = 100;\r\n\r\n    mapping(address => uint256) airdropAddress;\r\n    mapping(address => uint256) airdropLastTime;\r\n\r\n    constructor(\r\n        address _feeAccount,\r\n        address _router,\r\n        address _wavax,\r\n        address _rewardAddress\r\n    ) {\r\n        feeAccount = _feeAccount;\r\n        router = _router;\r\n        wavax = _wavax;\r\n        rewardAddress = _rewardAddress;\r\n    }\r\n\r\n    function airdrop() external {\r\n        require(\r\n            airdropAddress[msg.sender] + 86400 > block.timestamp,\r\n            \"You did not swap in 24 hours\"\r\n        );\r\n\r\n        require(\r\n            block.timestamp > airdropLastTime[msg.sender] + 86400,\r\n            \"You airdroped in 24 hours\"\r\n        );\r\n\r\n        IERC20(rewardAddress).safeTransfer(msg.sender, rewardAmount);\r\n        airdropLastTime[msg.sender] = block.timestamp;\r\n    }\r\n\r\n    function swapV2Tokens(\r\n        address _tokenA,\r\n        address _tokenB,\r\n        uint256 _amountIn\r\n    ) external payable {\r\n        airdropAddress[msg.sender] = block.timestamp;\r\n        address[] memory path = new address[](2);\r\n        if (_tokenA == address(0)) {\r\n            path[0] = wavax;\r\n            path[1] = _tokenB;\r\n        } else if (_tokenB == address(0)) {\r\n            path[0] = _tokenA;\r\n            path[1] = wavax;\r\n        } else {\r\n            path[0] = _tokenA;\r\n            path[1] = _tokenB;\r\n        }\r\n\r\n        _proceedToUniswap(_tokenA, _tokenB, _amountIn, path);\r\n    }\r\n\r\n    function customSwapTokens(\r\n        address _tokenA,\r\n        address _tokenB,\r\n        uint256 _amountIn,\r\n        address[] memory path\r\n    ) external payable {\r\n        if (_tokenA == address(0)) {\r\n            require(\r\n                wavax == path[0] && _tokenB == path[path.length - 1],\r\n                \"PattieSwap: Path must be specified\"\r\n            );\r\n        } else if (_tokenB == address(0)) {\r\n            require(\r\n                _tokenA == path[0] && wavax == path[path.length - 1],\r\n                \"PattieSwap: Path must be specified\"\r\n            );\r\n        } else {\r\n            require(\r\n                _tokenA == path[0] && _tokenB == path[path.length - 1],\r\n                \"PattieSwap: Path must be specified\"\r\n            );\r\n        }\r\n        _proceedToUniswap(_tokenA, _tokenB, _amountIn, path);\r\n    }\r\n\r\n    function _proceedToUniswap(\r\n        address _tokenA,\r\n        address _tokenB,\r\n        uint256 _amountIn,\r\n        address[] memory path\r\n    ) internal {\r\n        require(_amountIn > 0, \"PattieSwap: amountIn must be greater than 0\");\r\n\r\n        if (_tokenA == address(0)) {\r\n            require(_amountIn >= msg.value, \"PattieSwap: Insufficient ETH\");\r\n            uint fee = (_amountIn * feePercent) / 10000;\r\n            payable(feeAccount).transfer(fee);\r\n            uint amountToSwap = _amountIn - fee;\r\n            _swapAVAXForTokens(amountToSwap, path);\r\n        } else {\r\n            IERC20(_tokenA).safeTransferFrom(\r\n                msg.sender,\r\n                address(this),\r\n                _amountIn\r\n            );\r\n            uint fee = (_amountIn * feePercent) / 10000;\r\n            IERC20(_tokenA).safeTransfer(feeAccount, fee);\r\n            uint amountToSwap = _amountIn - fee;\r\n            _approve(_tokenA, amountToSwap);\r\n            if (_tokenB == address(0)) {\r\n                _swapTokensForAVAX(amountToSwap, path);\r\n            } else {\r\n                _swapTokensForTokens(amountToSwap, path);\r\n            }\r\n        }\r\n    }\r\n\r\n    function _approve(address _token, uint _amount) internal {\r\n        IERC20(_token).approve(address(router), _amount);\r\n    }\r\n\r\n    function _swapTokensForAVAX(uint _amount, address[] memory path) internal {\r\n        IRouter(router).swapExactTokensForETH(\r\n            _amount,\r\n            0,\r\n            path,\r\n            msg.sender,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function _swapAVAXForTokens(uint _amount, address[] memory path) internal {\r\n        IRouter(router).swapExactETHForTokens{value: _amount}(\r\n            0,\r\n            path,\r\n            msg.sender,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function _swapTokensForTokens(\r\n        uint _amount,\r\n        address[] memory path\r\n    ) internal {\r\n        IRouter(router).swapExactTokensForTokens(\r\n            _amount,\r\n            0,\r\n            path,\r\n            msg.sender,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function _v3Approve(address _token, uint _amount) internal {\r\n        IERC20(_token).approve(address(routerAddress), _amount);\r\n    }\r\n\r\n    function getOutputTokenAmount(\r\n        uint inputAmount,\r\n        address[] memory path\r\n    ) external view returns (uint outputAmount) {\r\n        uint[] memory outputs = IRouter(router).getAmountsOut(\r\n            inputAmount,\r\n            path\r\n        );\r\n        return outputs[outputs.length - 1];\r\n    }\r\n\r\n    function getV3OutputTokenAmount(\r\n        uint256 _inputAmount,\r\n        address _tokenIn,\r\n        address _tokenOut\r\n    ) external view returns (uint outputAmount) {\r\n        uint256 slotReturnValue = 0;\r\n        address pairAddress = IPancakeV3Factory(factoryAddress).getPool(\r\n            _tokenIn,\r\n            _tokenOut,\r\n            poolFee\r\n        );\r\n        (slotReturnValue, , , , , , ) = IPancakeV3PoolState(pairAddress)\r\n            .slot0();\r\n        address token0 = IPancakeV3Pool(pairAddress).token0();\r\n        if (_tokenIn == token0)\r\n            outputAmount = ((slotReturnValue ** 2 * _inputAmount) / 2 ** 192);\r\n        else outputAmount = ((2 ** 192 * _inputAmount) / slotReturnValue ** 2);\r\n    }\r\n\r\n    function setFeePercent(uint _feePercent) external onlyOwner {\r\n        feePercent = _feePercent;\r\n    }\r\n\r\n    function setRewardAmount(uint256 _amount) external onlyOwner {\r\n        rewardAmount = _amount;\r\n    }\r\n\r\n    function setRewardToken(address _rewawrdAddress) external onlyOwner {\r\n        rewardAddress = _rewawrdAddress;\r\n    }\r\n\r\n    function setFeeAccount(address _feeAccount) external onlyOwner {\r\n        feeAccount = _feeAccount;\r\n    }\r\n\r\n    function setRouterWAVAX(\r\n        address _router,\r\n        address _wavax\r\n    ) external onlyOwner {\r\n        router = _router;\r\n        wavax = _wavax;\r\n    }\r\n\r\n    function emergencyWithdraw(\r\n        address _token,\r\n        uint _amount\r\n    ) external onlyOwner {\r\n        IERC20(_token).safeTransfer(msg.sender, _amount);\r\n    }\r\n\r\n    function emergencyWithdrawETH(uint _amount) external onlyOwner {\r\n        payable(owner()).transfer(_amount);\r\n    }\r\n\r\n    function swapTokens(\r\n        address _tokenIn,\r\n        address _tokenOut,\r\n        uint256 _amountIn\r\n    ) external payable {\r\n        airdropAddress[msg.sender] = block.timestamp;\r\n        IV3SwapRouter.ExactInputSingleParams memory params = IV3SwapRouter\r\n            .ExactInputSingleParams(\r\n                _tokenIn,\r\n                _tokenOut,\r\n                poolFee,\r\n                msg.sender,\r\n                _amountIn,\r\n                0,\r\n                0\r\n            );\r\n        if (_tokenIn == wbnbAddress)\r\n            IV3SwapRouter(routerAddress).exactInputSingle{value: msg.value}(\r\n                params\r\n            );\r\n        else {\r\n            IERC20(_tokenIn).safeTransferFrom(\r\n                msg.sender,\r\n                address(this),\r\n                _amountIn\r\n            );\r\n            _v3Approve(_tokenIn, _amountIn);\r\n            IV3SwapRouter(routerAddress).exactInputSingle{value: msg.value}(\r\n                params\r\n            );\r\n        }\r\n        IV3SwapRouter(routerAddress).refundETH();\r\n        // refund leftover ETH to user\r\n        (bool success, ) = msg.sender.call{value: address(this).balance}(\"\");\r\n        require(success, \"refund failed\");\r\n    }\r\n}\r\n"},"contracts/v3dex.sol":{"content":"// SPDX-License-Identifier: GPL-2.0-or-later\r\npragma solidity >=0.5.0;\r\n\r\n/// @title The interface for the PancakeSwap V3 Factory\r\n/// @notice The PancakeSwap V3 Factory facilitates creation of PancakeSwap V3 pools and control over the protocol fees\r\ninterface IPancakeV3Factory {\r\n    function getPool(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint24 fee\r\n    ) external view returns (address pool);\r\n}\r\npragma solidity >=0.5.0;\r\n\r\ninterface IPancakeV3PoolState {\r\n    function slot0()\r\n        external\r\n        view\r\n        returns (\r\n            uint160 sqrtPriceX96,\r\n            int24 tick,\r\n            uint16 observationIndex,\r\n            uint16 observationCardinality,\r\n            uint16 observationCardinalityNext,\r\n            uint32 feeProtocol,\r\n            bool unlocked\r\n        );\r\n}\r\n\r\ninterface IPancakeV3PoolImmutables {\r\n    /// @notice The contract that deployed the pool, which must adhere to the IPancakeV3Factory interface\r\n    /// @return The contract address\r\n    function factory() external view returns (address);\r\n\r\n    /// @notice The first of the two tokens of the pool, sorted by address\r\n    /// @return The token contract address\r\n    function token0() external view returns (address);\r\n\r\n    /// @notice The second of the two tokens of the pool, sorted by address\r\n    /// @return The token contract address\r\n    function token1() external view returns (address);\r\n\r\n    /// @notice The pool's fee in hundredths of a bip, i.e. 1e-6\r\n    /// @return The fee\r\n    function fee() external view returns (uint24);\r\n\r\n    /// @notice The pool tick spacing\r\n    /// @dev Ticks can only be used at multiples of this value, minimum of 1 and always positive\r\n    /// e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ...\r\n    /// This value is an int24 to avoid casting even though it is always positive.\r\n    /// @return The tick spacing\r\n    function tickSpacing() external view returns (int24);\r\n\r\n    /// @notice The maximum amount of position liquidity that can use any tick in the range\r\n    /// @dev This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and\r\n    /// also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\r\n    /// @return The max amount of liquidity per tick\r\n    function maxLiquidityPerTick() external view returns (uint128);\r\n}\r\n\r\ninterface IPancakeV3Pool is IPancakeV3PoolState, IPancakeV3PoolImmutables {}\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File @openzeppelin/contracts/access/Ownable.sol@v4.6.0\r\n\r\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(\r\n        uint256 a,\r\n        uint256 b\r\n    ) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(\r\n        uint256 a,\r\n        uint256 b\r\n    ) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(\r\n        uint256 a,\r\n        uint256 b\r\n    ) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n            // benefit is lost if 'b' is also tested.\r\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(\r\n        uint256 a,\r\n        uint256 b\r\n    ) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(\r\n        uint256 a,\r\n        uint256 b\r\n    ) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\n\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\r\n     *\r\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\r\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\r\n     * constructor.\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize/address.code.length, which returns 0\r\n        // for contracts in construction, since the code is only stored at the end\r\n        // of the constructor execution.\r\n\r\n        return account.code.length > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(\r\n            address(this).balance >= amount,\r\n            \"Address: insufficient balance\"\r\n        );\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(\r\n            success,\r\n            \"Address: unable to send value, recipient may have reverted\"\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data\r\n    ) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return\r\n            functionCallWithValue(\r\n                target,\r\n                data,\r\n                value,\r\n                \"Address: low-level call with value failed\"\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(\r\n            address(this).balance >= value,\r\n            \"Address: insufficient balance for call\"\r\n        );\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(\r\n            data\r\n        );\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data\r\n    ) internal view returns (bytes memory) {\r\n        return\r\n            functionStaticCall(\r\n                target,\r\n                data,\r\n                \"Address: low-level static call failed\"\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data\r\n    ) internal returns (bytes memory) {\r\n        return\r\n            functionDelegateCall(\r\n                target,\r\n                data,\r\n                \"Address: low-level delegate call failed\"\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(\r\n        address owner,\r\n        address spender\r\n    ) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\nlibrary SafeERC20 {\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(token.transfer.selector, to, value)\r\n        );\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(token.approve.selector, spender, value)\r\n        );\r\n    }\r\n\r\n    function safeIncreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(\r\n                token.approve.selector,\r\n                spender,\r\n                newAllowance\r\n            )\r\n        );\r\n    }\r\n\r\n    function safeDecreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        unchecked {\r\n            uint256 oldAllowance = token.allowance(address(this), spender);\r\n            require(\r\n                oldAllowance >= value,\r\n                \"SafeERC20: decreased allowance below zero\"\r\n            );\r\n            uint256 newAllowance = oldAllowance - value;\r\n            _callOptionalReturn(\r\n                token,\r\n                abi.encodeWithSelector(\r\n                    token.approve.selector,\r\n                    spender,\r\n                    newAllowance\r\n                )\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(\r\n            data,\r\n            \"SafeERC20: low-level call failed\"\r\n        );\r\n        if (returndata.length > 0) {\r\n            // Return data is optional\r\n            require(\r\n                abi.decode(returndata, (bool)),\r\n                \"SafeERC20: ERC20 operation did not succeed\"\r\n            );\r\n        }\r\n    }\r\n}\r\npragma solidity >=0.5.0;\r\n\r\n/// @title Callback for IPancakeV3PoolActions#swap\r\n/// @notice Any contract that calls IPancakeV3PoolActions#swap must implement this interface\r\ninterface IPancakeV3SwapCallback {\r\n    /// @notice Called to `msg.sender` after executing a swap via IPancakeV3Pool#swap.\r\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\r\n    /// The caller of this method must be checked to be a PancakeV3Pool deployed by the canonical PancakeV3Factory.\r\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\r\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\r\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\r\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\r\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\r\n    /// @param data Any data passed through by the caller via the IPancakeV3PoolActions#swap call\r\n    function pancakeV3SwapCallback(\r\n        int256 amount0Delta,\r\n        int256 amount1Delta,\r\n        bytes calldata data\r\n    ) external;\r\n}\r\n\r\ninterface IV3SwapRouter is IPancakeV3SwapCallback {\r\n    struct ExactInputSingleParams {\r\n        address tokenIn;\r\n        address tokenOut;\r\n        uint24 fee;\r\n        address recipient;\r\n        uint256 amountIn;\r\n        uint256 amountOutMinimum;\r\n        uint160 sqrtPriceLimitX96;\r\n    }\r\n\r\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\r\n    /// @dev Setting `amountIn` to 0 will cause the contract to look up its own balance,\r\n    /// and swap the entire amount, enabling contracts to send tokens before calling this function.\r\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\r\n    /// @return amountOut The amount of the received token\r\n    function exactInputSingle(\r\n        ExactInputSingleParams calldata params\r\n    ) external payable returns (uint256 amountOut);\r\n\r\n    struct ExactInputParams {\r\n        bytes path;\r\n        address recipient;\r\n        uint256 amountIn;\r\n        uint256 amountOutMinimum;\r\n    }\r\n\r\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\r\n    /// @dev Setting `amountIn` to 0 will cause the contract to look up its own balance,\r\n    /// and swap the entire amount, enabling contracts to send tokens before calling this function.\r\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\r\n    /// @return amountOut The amount of the received token\r\n    function exactInput(\r\n        ExactInputParams calldata params\r\n    ) external payable returns (uint256 amountOut);\r\n\r\n    struct ExactOutputSingleParams {\r\n        address tokenIn;\r\n        address tokenOut;\r\n        uint24 fee;\r\n        address recipient;\r\n        uint256 amountOut;\r\n        uint256 amountInMaximum;\r\n        uint160 sqrtPriceLimitX96;\r\n    }\r\n\r\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\r\n    /// that may remain in the router after the swap.\r\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\r\n    /// @return amountIn The amount of the input token\r\n    function exactOutputSingle(\r\n        ExactOutputSingleParams calldata params\r\n    ) external payable returns (uint256 amountIn);\r\n\r\n    struct ExactOutputParams {\r\n        bytes path;\r\n        address recipient;\r\n        uint256 amountOut;\r\n        uint256 amountInMaximum;\r\n    }\r\n\r\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\r\n    /// that may remain in the router after the swap.\r\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\r\n    /// @return amountIn The amount of the input token\r\n    function exactOutput(\r\n        ExactOutputParams calldata params\r\n    ) external payable returns (uint256 amountIn);\r\n\r\n     function refundETH() external payable;\r\n}\r\n\r\ncontract V3Swap {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n    address public routerAddress = 0x13f4EA83D0bd40E75C8222255bc855a974568Dd4;\r\n    address public factoryAddress = 0x0BFbCF9fa4f9C56B0F40a671Ad40E0805A091865;\r\n    address public wbnbAddress = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;\r\n    uint24 fee = 100;\r\n\r\n    constructor() {}\r\n\r\n    function getOutputTokenAmount(\r\n        uint256 _inputAmount,\r\n        address _tokenIn,\r\n        address _tokenOut\r\n    ) external view returns (uint outputAmount) {\r\n        uint256 slotReturnValue = 0;\r\n        address pairAddress = IPancakeV3Factory(factoryAddress).getPool(\r\n            _tokenIn,\r\n            _tokenOut,\r\n            fee\r\n        );\r\n        (slotReturnValue, , , , , , ) = IPancakeV3PoolState(pairAddress)\r\n            .slot0();\r\n        address token0 = IPancakeV3Pool(pairAddress).token0();\r\n        if (_tokenIn == token0)\r\n            outputAmount = ((slotReturnValue ** 2 * _inputAmount) / 2 ** 192);\r\n        else outputAmount = ((2 ** 192 * _inputAmount) / slotReturnValue ** 2);\r\n    }\r\n\r\n    function _approve(address _token, uint _amount) internal {\r\n        IERC20(_token).approve(address(routerAddress), _amount);\r\n    }\r\n\r\n    function swapTokens(\r\n        address _tokenIn,\r\n        address _tokenOut,\r\n        uint256 _amountIn\r\n    ) external payable {\r\n        IV3SwapRouter.ExactInputSingleParams memory params = IV3SwapRouter\r\n            .ExactInputSingleParams(\r\n                _tokenIn,\r\n                _tokenOut,\r\n                fee,\r\n                msg.sender,\r\n                _amountIn,\r\n                0,\r\n                0\r\n            );\r\n        if (_tokenIn == wbnbAddress)\r\n            IV3SwapRouter(routerAddress).exactInputSingle{value: msg.value}(\r\n                params\r\n            );\r\n        else {\r\n            IERC20(_tokenIn).safeTransferFrom(\r\n                msg.sender,\r\n                address(this),\r\n                _amountIn\r\n            );\r\n            _approve(_tokenIn,_amountIn);\r\n            IV3SwapRouter(routerAddress).exactInputSingle{value: msg.value}(\r\n                params\r\n            );\r\n        }\r\n        IV3SwapRouter(routerAddress).refundETH();\r\n        // refund leftover ETH to user\r\n        (bool success, ) = msg.sender.call{value: address(this).balance}(\"\");\r\n        require(success, \"refund failed\");\r\n    }\r\n}\r\n"}},"settings":{"optimizer":{"enabled":true,"runs":200},"outputSelection":{"*":{"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata","devdoc","userdoc","storageLayout","evm.gasEstimates"],"":["ast"]}},"metadata":{"useLiteralContent":true}}},"output":{"sources":{"contracts/IExchange_latest.sol":{"ast":{"absolutePath":"contracts/IExchange_latest.sol","exportedSymbols":{"IDexFactory":[62],"IDexPair":[302],"IDexRouter":[690]},"id":691,"license":"UNLICENSED","nodeType":"SourceUnit","nodes":[{"id":1,"literals":["solidity","^","0.8",".4"],"nodeType":"PragmaDirective","src":"41:23:0"},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":62,"linearizedBaseContracts":[62],"name":"IDexFactory","nameLocation":"78:11:0","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"id":11,"name":"PairCreated","nameLocation":"101:11:0","nodeType":"EventDefinition","parameters":{"id":10,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3,"indexed":true,"mutability":"mutable","name":"token0","nameLocation":"129:6:0","nodeType":"VariableDeclaration","scope":11,"src":"113:22:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2,"name":"address","nodeType":"ElementaryTypeName","src":"113:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5,"indexed":true,"mutability":"mutable","name":"token1","nameLocation":"153:6:0","nodeType":"VariableDeclaration","scope":11,"src":"137:22:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4,"name":"address","nodeType":"ElementaryTypeName","src":"137:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":7,"indexed":false,"mutability":"mutable","name":"pair","nameLocation":"169:4:0","nodeType":"VariableDeclaration","scope":11,"src":"161:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6,"name":"address","nodeType":"ElementaryTypeName","src":"161:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":9,"indexed":false,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":11,"src":"175:4:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8,"name":"uint","nodeType":"ElementaryTypeName","src":"175:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"112:68:0"},"src":"95:86:0"},{"functionSelector":"017e7e58","id":16,"implemented":false,"kind":"function","modifiers":[],"name":"feeTo","nameLocation":"196:5:0","nodeType":"FunctionDefinition","parameters":{"id":12,"nodeType":"ParameterList","parameters":[],"src":"201:2:0"},"returnParameters":{"id":15,"nodeType":"ParameterList","parameters":[{"constant":false,"id":14,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":16,"src":"227:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":13,"name":"address","nodeType":"ElementaryTypeName","src":"227:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"226:9:0"},"scope":62,"src":"187:49:0","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"094b7415","id":21,"implemented":false,"kind":"function","modifiers":[],"name":"feeToSetter","nameLocation":"249:11:0","nodeType":"FunctionDefinition","parameters":{"id":17,"nodeType":"ParameterList","parameters":[],"src":"260:2:0"},"returnParameters":{"id":20,"nodeType":"ParameterList","parameters":[{"constant":false,"id":19,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":21,"src":"286:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":18,"name":"address","nodeType":"ElementaryTypeName","src":"286:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"285:9:0"},"scope":62,"src":"240:55:0","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"e6a43905","id":30,"implemented":false,"kind":"function","modifiers":[],"name":"getPair","nameLocation":"310:7:0","nodeType":"FunctionDefinition","parameters":{"id":26,"nodeType":"ParameterList","parameters":[{"constant":false,"id":23,"mutability":"mutable","name":"tokenA","nameLocation":"326:6:0","nodeType":"VariableDeclaration","scope":30,"src":"318:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":22,"name":"address","nodeType":"ElementaryTypeName","src":"318:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":25,"mutability":"mutable","name":"tokenB","nameLocation":"342:6:0","nodeType":"VariableDeclaration","scope":30,"src":"334:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":24,"name":"address","nodeType":"ElementaryTypeName","src":"334:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"317:32:0"},"returnParameters":{"id":29,"nodeType":"ParameterList","parameters":[{"constant":false,"id":28,"mutability":"mutable","name":"pair","nameLocation":"381:4:0","nodeType":"VariableDeclaration","scope":30,"src":"373:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":27,"name":"address","nodeType":"ElementaryTypeName","src":"373:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"372:14:0"},"scope":62,"src":"301:86:0","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"1e3dd18b","id":37,"implemented":false,"kind":"function","modifiers":[],"name":"allPairs","nameLocation":"400:8:0","nodeType":"FunctionDefinition","parameters":{"id":33,"nodeType":"ParameterList","parameters":[{"constant":false,"id":32,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":37,"src":"409:4:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":31,"name":"uint","nodeType":"ElementaryTypeName","src":"409:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"408:6:0"},"returnParameters":{"id":36,"nodeType":"ParameterList","parameters":[{"constant":false,"id":35,"mutability":"mutable","name":"pair","nameLocation":"446:4:0","nodeType":"VariableDeclaration","scope":37,"src":"438:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":34,"name":"address","nodeType":"ElementaryTypeName","src":"438:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"437:14:0"},"scope":62,"src":"391:61:0","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"574f2ba3","id":42,"implemented":false,"kind":"function","modifiers":[],"name":"allPairsLength","nameLocation":"465:14:0","nodeType":"FunctionDefinition","parameters":{"id":38,"nodeType":"ParameterList","parameters":[],"src":"479:2:0"},"returnParameters":{"id":41,"nodeType":"ParameterList","parameters":[{"constant":false,"id":40,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":42,"src":"505:4:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":39,"name":"uint","nodeType":"ElementaryTypeName","src":"505:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"504:6:0"},"scope":62,"src":"456:55:0","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"c9c65396","id":51,"implemented":false,"kind":"function","modifiers":[],"name":"createPair","nameLocation":"526:10:0","nodeType":"FunctionDefinition","parameters":{"id":47,"nodeType":"ParameterList","parameters":[{"constant":false,"id":44,"mutability":"mutable","name":"tokenA","nameLocation":"545:6:0","nodeType":"VariableDeclaration","scope":51,"src":"537:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":43,"name":"address","nodeType":"ElementaryTypeName","src":"537:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":46,"mutability":"mutable","name":"tokenB","nameLocation":"561:6:0","nodeType":"VariableDeclaration","scope":51,"src":"553:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":45,"name":"address","nodeType":"ElementaryTypeName","src":"553:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"536:32:0"},"returnParameters":{"id":50,"nodeType":"ParameterList","parameters":[{"constant":false,"id":49,"mutability":"mutable","name":"pair","nameLocation":"595:4:0","nodeType":"VariableDeclaration","scope":51,"src":"587:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":48,"name":"address","nodeType":"ElementaryTypeName","src":"587:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"586:14:0"},"scope":62,"src":"517:84:0","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"f46901ed","id":56,"implemented":false,"kind":"function","modifiers":[],"name":"setFeeTo","nameLocation":"616:8:0","nodeType":"FunctionDefinition","parameters":{"id":54,"nodeType":"ParameterList","parameters":[{"constant":false,"id":53,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":56,"src":"625:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":52,"name":"address","nodeType":"ElementaryTypeName","src":"625:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"624:9:0"},"returnParameters":{"id":55,"nodeType":"ParameterList","parameters":[],"src":"642:0:0"},"scope":62,"src":"607:36:0","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"a2e74af6","id":61,"implemented":false,"kind":"function","modifiers":[],"name":"setFeeToSetter","nameLocation":"656:14:0","nodeType":"FunctionDefinition","parameters":{"id":59,"nodeType":"ParameterList","parameters":[{"constant":false,"id":58,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":61,"src":"671:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":57,"name":"address","nodeType":"ElementaryTypeName","src":"671:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"670:9:0"},"returnParameters":{"id":60,"nodeType":"ParameterList","parameters":[],"src":"688:0:0"},"scope":62,"src":"647:42:0","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":691,"src":"68:624:0","usedErrors":[]},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":302,"linearizedBaseContracts":[302],"name":"IDexPair","nameLocation":"706:8:0","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"id":70,"name":"Approval","nameLocation":"726:8:0","nodeType":"EventDefinition","parameters":{"id":69,"nodeType":"ParameterList","parameters":[{"constant":false,"id":64,"indexed":true,"mutability":"mutable","name":"owner","nameLocation":"751:5:0","nodeType":"VariableDeclaration","scope":70,"src":"735:21:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":63,"name":"address","nodeType":"ElementaryTypeName","src":"735:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":66,"indexed":true,"mutability":"mutable","name":"spender","nameLocation":"774:7:0","nodeType":"VariableDeclaration","scope":70,"src":"758:23:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":65,"name":"address","nodeType":"ElementaryTypeName","src":"758:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":68,"indexed":false,"mutability":"mutable","name":"value","nameLocation":"788:5:0","nodeType":"VariableDeclaration","scope":70,"src":"783:10:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":67,"name":"uint","nodeType":"ElementaryTypeName","src":"783:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"734:60:0"},"src":"720:75:0"},{"anonymous":false,"id":78,"name":"Transfer","nameLocation":"805:8:0","nodeType":"EventDefinition","parameters":{"id":77,"nodeType":"ParameterList","parameters":[{"constant":false,"id":72,"indexed":true,"mutability":"mutable","name":"from","nameLocation":"830:4:0","nodeType":"VariableDeclaration","scope":78,"src":"814:20:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":71,"name":"address","nodeType":"ElementaryTypeName","src":"814:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":74,"indexed":true,"mutability":"mutable","name":"to","nameLocation":"852:2:0","nodeType":"VariableDeclaration","scope":78,"src":"836:18:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":73,"name":"address","nodeType":"ElementaryTypeName","src":"836:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":76,"indexed":false,"mutability":"mutable","name":"value","nameLocation":"861:5:0","nodeType":"VariableDeclaration","scope":78,"src":"856:10:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":75,"name":"uint","nodeType":"ElementaryTypeName","src":"856:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"813:54:0"},"src":"799:69:0"},{"functionSelector":"06fdde03","id":83,"implemented":false,"kind":"function","modifiers":[],"name":"name","nameLocation":"883:4:0","nodeType":"FunctionDefinition","parameters":{"id":79,"nodeType":"ParameterList","parameters":[],"src":"887:2:0"},"returnParameters":{"id":82,"nodeType":"ParameterList","parameters":[{"constant":false,"id":81,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":83,"src":"913:13:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":80,"name":"string","nodeType":"ElementaryTypeName","src":"913:6:0","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"912:15:0"},"scope":302,"src":"874:54:0","stateMutability":"pure","virtual":false,"visibility":"external"},{"functionSelector":"95d89b41","id":88,"implemented":false,"kind":"function","modifiers":[],"name":"symbol","nameLocation":"941:6:0","nodeType":"FunctionDefinition","parameters":{"id":84,"nodeType":"ParameterList","parameters":[],"src":"947:2:0"},"returnParameters":{"id":87,"nodeType":"ParameterList","parameters":[{"constant":false,"id":86,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":88,"src":"973:13:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":85,"name":"string","nodeType":"ElementaryTypeName","src":"973:6:0","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"972:15:0"},"scope":302,"src":"932:56:0","stateMutability":"pure","virtual":false,"visibility":"external"},{"functionSelector":"313ce567","id":93,"implemented":false,"kind":"function","modifiers":[],"name":"decimals","nameLocation":"1001:8:0","nodeType":"FunctionDefinition","parameters":{"id":89,"nodeType":"ParameterList","parameters":[],"src":"1009:2:0"},"returnParameters":{"id":92,"nodeType":"ParameterList","parameters":[{"constant":false,"id":91,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":93,"src":"1035:5:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":90,"name":"uint8","nodeType":"ElementaryTypeName","src":"1035:5:0","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"1034:7:0"},"scope":302,"src":"992:50:0","stateMutability":"pure","virtual":false,"visibility":"external"},{"functionSelector":"18160ddd","id":98,"implemented":false,"kind":"function","modifiers":[],"name":"totalSupply","nameLocation":"1055:11:0","nodeType":"FunctionDefinition","parameters":{"id":94,"nodeType":"ParameterList","parameters":[],"src":"1066:2:0"},"returnParameters":{"id":97,"nodeType":"ParameterList","parameters":[{"constant":false,"id":96,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":98,"src":"1092:4:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":95,"name":"uint","nodeType":"ElementaryTypeName","src":"1092:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1091:6:0"},"scope":302,"src":"1046:52:0","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"70a08231","id":105,"implemented":false,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"1111:9:0","nodeType":"FunctionDefinition","parameters":{"id":101,"nodeType":"ParameterList","parameters":[{"constant":false,"id":100,"mutability":"mutable","name":"owner","nameLocation":"1129:5:0","nodeType":"VariableDeclaration","scope":105,"src":"1121:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":99,"name":"address","nodeType":"ElementaryTypeName","src":"1121:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1120:15:0"},"returnParameters":{"id":104,"nodeType":"ParameterList","parameters":[{"constant":false,"id":103,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":105,"src":"1159:4:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":102,"name":"uint","nodeType":"ElementaryTypeName","src":"1159:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1158:6:0"},"scope":302,"src":"1102:63:0","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"dd62ed3e","id":114,"implemented":false,"kind":"function","modifiers":[],"name":"allowance","nameLocation":"1178:9:0","nodeType":"FunctionDefinition","parameters":{"id":110,"nodeType":"ParameterList","parameters":[{"constant":false,"id":107,"mutability":"mutable","name":"owner","nameLocation":"1196:5:0","nodeType":"VariableDeclaration","scope":114,"src":"1188:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":106,"name":"address","nodeType":"ElementaryTypeName","src":"1188:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":109,"mutability":"mutable","name":"spender","nameLocation":"1211:7:0","nodeType":"VariableDeclaration","scope":114,"src":"1203:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":108,"name":"address","nodeType":"ElementaryTypeName","src":"1203:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1187:32:0"},"returnParameters":{"id":113,"nodeType":"ParameterList","parameters":[{"constant":false,"id":112,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":114,"src":"1243:4:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":111,"name":"uint","nodeType":"ElementaryTypeName","src":"1243:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1242:6:0"},"scope":302,"src":"1169:80:0","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"095ea7b3","id":123,"implemented":false,"kind":"function","modifiers":[],"name":"approve","nameLocation":"1264:7:0","nodeType":"FunctionDefinition","parameters":{"id":119,"nodeType":"ParameterList","parameters":[{"constant":false,"id":116,"mutability":"mutable","name":"spender","nameLocation":"1280:7:0","nodeType":"VariableDeclaration","scope":123,"src":"1272:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":115,"name":"address","nodeType":"ElementaryTypeName","src":"1272:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":118,"mutability":"mutable","name":"value","nameLocation":"1294:5:0","nodeType":"VariableDeclaration","scope":123,"src":"1289:10:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":117,"name":"uint","nodeType":"ElementaryTypeName","src":"1289:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1271:29:0"},"returnParameters":{"id":122,"nodeType":"ParameterList","parameters":[{"constant":false,"id":121,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":123,"src":"1319:4:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":120,"name":"bool","nodeType":"ElementaryTypeName","src":"1319:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1318:6:0"},"scope":302,"src":"1255:70:0","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"a9059cbb","id":132,"implemented":false,"kind":"function","modifiers":[],"name":"transfer","nameLocation":"1338:8:0","nodeType":"FunctionDefinition","parameters":{"id":128,"nodeType":"ParameterList","parameters":[{"constant":false,"id":125,"mutability":"mutable","name":"to","nameLocation":"1355:2:0","nodeType":"VariableDeclaration","scope":132,"src":"1347:10:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":124,"name":"address","nodeType":"ElementaryTypeName","src":"1347:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":127,"mutability":"mutable","name":"value","nameLocation":"1364:5:0","nodeType":"VariableDeclaration","scope":132,"src":"1359:10:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":126,"name":"uint","nodeType":"ElementaryTypeName","src":"1359:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1346:24:0"},"returnParameters":{"id":131,"nodeType":"ParameterList","parameters":[{"constant":false,"id":130,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":132,"src":"1389:4:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":129,"name":"bool","nodeType":"ElementaryTypeName","src":"1389:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1388:6:0"},"scope":302,"src":"1329:66:0","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"23b872dd","id":143,"implemented":false,"kind":"function","modifiers":[],"name":"transferFrom","nameLocation":"1408:12:0","nodeType":"FunctionDefinition","parameters":{"id":139,"nodeType":"ParameterList","parameters":[{"constant":false,"id":134,"mutability":"mutable","name":"from","nameLocation":"1429:4:0","nodeType":"VariableDeclaration","scope":143,"src":"1421:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":133,"name":"address","nodeType":"ElementaryTypeName","src":"1421:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":136,"mutability":"mutable","name":"to","nameLocation":"1443:2:0","nodeType":"VariableDeclaration","scope":143,"src":"1435:10:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":135,"name":"address","nodeType":"ElementaryTypeName","src":"1435:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":138,"mutability":"mutable","name":"value","nameLocation":"1452:5:0","nodeType":"VariableDeclaration","scope":143,"src":"1447:10:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":137,"name":"uint","nodeType":"ElementaryTypeName","src":"1447:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1420:38:0"},"returnParameters":{"id":142,"nodeType":"ParameterList","parameters":[{"constant":false,"id":141,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":143,"src":"1477:4:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":140,"name":"bool","nodeType":"ElementaryTypeName","src":"1477:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1476:6:0"},"scope":302,"src":"1399:84:0","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"3644e515","id":148,"implemented":false,"kind":"function","modifiers":[],"name":"DOMAIN_SEPARATOR","nameLocation":"1498:16:0","nodeType":"FunctionDefinition","parameters":{"id":144,"nodeType":"ParameterList","parameters":[],"src":"1514:2:0"},"returnParameters":{"id":147,"nodeType":"ParameterList","parameters":[{"constant":false,"id":146,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":148,"src":"1540:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":145,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1540:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1539:9:0"},"scope":302,"src":"1489:60:0","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"30adf81f","id":153,"implemented":false,"kind":"function","modifiers":[],"name":"PERMIT_TYPEHASH","nameLocation":"1562:15:0","nodeType":"FunctionDefinition","parameters":{"id":149,"nodeType":"ParameterList","parameters":[],"src":"1577:2:0"},"returnParameters":{"id":152,"nodeType":"ParameterList","parameters":[{"constant":false,"id":151,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":153,"src":"1603:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":150,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1603:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1602:9:0"},"scope":302,"src":"1553:59:0","stateMutability":"pure","virtual":false,"visibility":"external"},{"functionSelector":"7ecebe00","id":160,"implemented":false,"kind":"function","modifiers":[],"name":"nonces","nameLocation":"1625:6:0","nodeType":"FunctionDefinition","parameters":{"id":156,"nodeType":"ParameterList","parameters":[{"constant":false,"id":155,"mutability":"mutable","name":"owner","nameLocation":"1640:5:0","nodeType":"VariableDeclaration","scope":160,"src":"1632:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":154,"name":"address","nodeType":"ElementaryTypeName","src":"1632:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1631:15:0"},"returnParameters":{"id":159,"nodeType":"ParameterList","parameters":[{"constant":false,"id":158,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":160,"src":"1670:4:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":157,"name":"uint","nodeType":"ElementaryTypeName","src":"1670:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1669:6:0"},"scope":302,"src":"1616:60:0","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"d505accf","id":177,"implemented":false,"kind":"function","modifiers":[],"name":"permit","nameLocation":"1691:6:0","nodeType":"FunctionDefinition","parameters":{"id":175,"nodeType":"ParameterList","parameters":[{"constant":false,"id":162,"mutability":"mutable","name":"owner","nameLocation":"1706:5:0","nodeType":"VariableDeclaration","scope":177,"src":"1698:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":161,"name":"address","nodeType":"ElementaryTypeName","src":"1698:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":164,"mutability":"mutable","name":"spender","nameLocation":"1721:7:0","nodeType":"VariableDeclaration","scope":177,"src":"1713:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":163,"name":"address","nodeType":"ElementaryTypeName","src":"1713:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":166,"mutability":"mutable","name":"value","nameLocation":"1735:5:0","nodeType":"VariableDeclaration","scope":177,"src":"1730:10:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":165,"name":"uint","nodeType":"ElementaryTypeName","src":"1730:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":168,"mutability":"mutable","name":"deadline","nameLocation":"1747:8:0","nodeType":"VariableDeclaration","scope":177,"src":"1742:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":167,"name":"uint","nodeType":"ElementaryTypeName","src":"1742:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":170,"mutability":"mutable","name":"v","nameLocation":"1763:1:0","nodeType":"VariableDeclaration","scope":177,"src":"1757:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":169,"name":"uint8","nodeType":"ElementaryTypeName","src":"1757:5:0","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":172,"mutability":"mutable","name":"r","nameLocation":"1774:1:0","nodeType":"VariableDeclaration","scope":177,"src":"1766:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":171,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1766:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":174,"mutability":"mutable","name":"s","nameLocation":"1785:1:0","nodeType":"VariableDeclaration","scope":177,"src":"1777:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":173,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1777:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1697:90:0"},"returnParameters":{"id":176,"nodeType":"ParameterList","parameters":[],"src":"1796:0:0"},"scope":302,"src":"1682:115:0","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"anonymous":false,"id":185,"name":"Mint","nameLocation":"1809:4:0","nodeType":"EventDefinition","parameters":{"id":184,"nodeType":"ParameterList","parameters":[{"constant":false,"id":179,"indexed":true,"mutability":"mutable","name":"sender","nameLocation":"1830:6:0","nodeType":"VariableDeclaration","scope":185,"src":"1814:22:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":178,"name":"address","nodeType":"ElementaryTypeName","src":"1814:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":181,"indexed":false,"mutability":"mutable","name":"amount0","nameLocation":"1843:7:0","nodeType":"VariableDeclaration","scope":185,"src":"1838:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":180,"name":"uint","nodeType":"ElementaryTypeName","src":"1838:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":183,"indexed":false,"mutability":"mutable","name":"amount1","nameLocation":"1857:7:0","nodeType":"VariableDeclaration","scope":185,"src":"1852:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":182,"name":"uint","nodeType":"ElementaryTypeName","src":"1852:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1813:52:0"},"src":"1803:63:0"},{"anonymous":false,"id":195,"name":"Burn","nameLocation":"1876:4:0","nodeType":"EventDefinition","parameters":{"id":194,"nodeType":"ParameterList","parameters":[{"constant":false,"id":187,"indexed":true,"mutability":"mutable","name":"sender","nameLocation":"1897:6:0","nodeType":"VariableDeclaration","scope":195,"src":"1881:22:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":186,"name":"address","nodeType":"ElementaryTypeName","src":"1881:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":189,"indexed":false,"mutability":"mutable","name":"amount0","nameLocation":"1910:7:0","nodeType":"VariableDeclaration","scope":195,"src":"1905:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":188,"name":"uint","nodeType":"ElementaryTypeName","src":"1905:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":191,"indexed":false,"mutability":"mutable","name":"amount1","nameLocation":"1924:7:0","nodeType":"VariableDeclaration","scope":195,"src":"1919:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":190,"name":"uint","nodeType":"ElementaryTypeName","src":"1919:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":193,"indexed":true,"mutability":"mutable","name":"to","nameLocation":"1949:2:0","nodeType":"VariableDeclaration","scope":195,"src":"1933:18:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":192,"name":"address","nodeType":"ElementaryTypeName","src":"1933:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1880:72:0"},"src":"1870:83:0"},{"anonymous":false,"id":209,"name":"Swap","nameLocation":"1963:4:0","nodeType":"EventDefinition","parameters":{"id":208,"nodeType":"ParameterList","parameters":[{"constant":false,"id":197,"indexed":true,"mutability":"mutable","name":"sender","nameLocation":"1990:6:0","nodeType":"VariableDeclaration","scope":209,"src":"1974:22:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":196,"name":"address","nodeType":"ElementaryTypeName","src":"1974:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":199,"indexed":false,"mutability":"mutable","name":"amount0In","nameLocation":"2008:9:0","nodeType":"VariableDeclaration","scope":209,"src":"2003:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":198,"name":"uint","nodeType":"ElementaryTypeName","src":"2003:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":201,"indexed":false,"mutability":"mutable","name":"amount1In","nameLocation":"2029:9:0","nodeType":"VariableDeclaration","scope":209,"src":"2024:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":200,"name":"uint","nodeType":"ElementaryTypeName","src":"2024:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":203,"indexed":false,"mutability":"mutable","name":"amount0Out","nameLocation":"2050:10:0","nodeType":"VariableDeclaration","scope":209,"src":"2045:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":202,"name":"uint","nodeType":"ElementaryTypeName","src":"2045:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":205,"indexed":false,"mutability":"mutable","name":"amount1Out","nameLocation":"2072:10:0","nodeType":"VariableDeclaration","scope":209,"src":"2067:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":204,"name":"uint","nodeType":"ElementaryTypeName","src":"2067:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":207,"indexed":true,"mutability":"mutable","name":"to","nameLocation":"2105:2:0","nodeType":"VariableDeclaration","scope":209,"src":"2089:18:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":206,"name":"address","nodeType":"ElementaryTypeName","src":"2089:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1967:145:0"},"src":"1957:156:0"},{"anonymous":false,"id":215,"name":"Sync","nameLocation":"2123:4:0","nodeType":"EventDefinition","parameters":{"id":214,"nodeType":"ParameterList","parameters":[{"constant":false,"id":211,"indexed":false,"mutability":"mutable","name":"reserve0","nameLocation":"2136:8:0","nodeType":"VariableDeclaration","scope":215,"src":"2128:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint112","typeString":"uint112"},"typeName":{"id":210,"name":"uint112","nodeType":"ElementaryTypeName","src":"2128:7:0","typeDescriptions":{"typeIdentifier":"t_uint112","typeString":"uint112"}},"visibility":"internal"},{"constant":false,"id":213,"indexed":false,"mutability":"mutable","name":"reserve1","nameLocation":"2154:8:0","nodeType":"VariableDeclaration","scope":215,"src":"2146:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint112","typeString":"uint112"},"typeName":{"id":212,"name":"uint112","nodeType":"ElementaryTypeName","src":"2146:7:0","typeDescriptions":{"typeIdentifier":"t_uint112","typeString":"uint112"}},"visibility":"internal"}],"src":"2127:36:0"},"src":"2117:47:0"},{"functionSelector":"ba9a7a56","id":220,"implemented":false,"kind":"function","modifiers":[],"name":"MINIMUM_LIQUIDITY","nameLocation":"2179:17:0","nodeType":"FunctionDefinition","parameters":{"id":216,"nodeType":"ParameterList","parameters":[],"src":"2196:2:0"},"returnParameters":{"id":219,"nodeType":"ParameterList","parameters":[{"constant":false,"id":218,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":220,"src":"2222:4:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":217,"name":"uint","nodeType":"ElementaryTypeName","src":"2222:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2221:6:0"},"scope":302,"src":"2170:58:0","stateMutability":"pure","virtual":false,"visibility":"external"},{"functionSelector":"c45a0155","id":225,"implemented":false,"kind":"function","modifiers":[],"name":"factory","nameLocation":"2241:7:0","nodeType":"FunctionDefinition","parameters":{"id":221,"nodeType":"ParameterList","parameters":[],"src":"2248:2:0"},"returnParameters":{"id":224,"nodeType":"ParameterList","parameters":[{"constant":false,"id":223,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":225,"src":"2274:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":222,"name":"address","nodeType":"ElementaryTypeName","src":"2274:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2273:9:0"},"scope":302,"src":"2232:51:0","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"0dfe1681","id":230,"implemented":false,"kind":"function","modifiers":[],"name":"token0","nameLocation":"2296:6:0","nodeType":"FunctionDefinition","parameters":{"id":226,"nodeType":"ParameterList","parameters":[],"src":"2302:2:0"},"returnParameters":{"id":229,"nodeType":"ParameterList","parameters":[{"constant":false,"id":228,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":230,"src":"2328:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":227,"name":"address","nodeType":"ElementaryTypeName","src":"2328:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2327:9:0"},"scope":302,"src":"2287:50:0","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"d21220a7","id":235,"implemented":false,"kind":"function","modifiers":[],"name":"token1","nameLocation":"2350:6:0","nodeType":"FunctionDefinition","parameters":{"id":231,"nodeType":"ParameterList","parameters":[],"src":"2356:2:0"},"returnParameters":{"id":234,"nodeType":"ParameterList","parameters":[{"constant":false,"id":233,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":235,"src":"2382:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":232,"name":"address","nodeType":"ElementaryTypeName","src":"2382:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2381:9:0"},"scope":302,"src":"2341:50:0","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"0902f1ac","id":244,"implemented":false,"kind":"function","modifiers":[],"name":"getReserves","nameLocation":"2404:11:0","nodeType":"FunctionDefinition","parameters":{"id":236,"nodeType":"ParameterList","parameters":[],"src":"2415:2:0"},"returnParameters":{"id":243,"nodeType":"ParameterList","parameters":[{"constant":false,"id":238,"mutability":"mutable","name":"reserve0","nameLocation":"2449:8:0","nodeType":"VariableDeclaration","scope":244,"src":"2441:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint112","typeString":"uint112"},"typeName":{"id":237,"name":"uint112","nodeType":"ElementaryTypeName","src":"2441:7:0","typeDescriptions":{"typeIdentifier":"t_uint112","typeString":"uint112"}},"visibility":"internal"},{"constant":false,"id":240,"mutability":"mutable","name":"reserve1","nameLocation":"2467:8:0","nodeType":"VariableDeclaration","scope":244,"src":"2459:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint112","typeString":"uint112"},"typeName":{"id":239,"name":"uint112","nodeType":"ElementaryTypeName","src":"2459:7:0","typeDescriptions":{"typeIdentifier":"t_uint112","typeString":"uint112"}},"visibility":"internal"},{"constant":false,"id":242,"mutability":"mutable","name":"blockTimestampLast","nameLocation":"2484:18:0","nodeType":"VariableDeclaration","scope":244,"src":"2477:25:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":241,"name":"uint32","nodeType":"ElementaryTypeName","src":"2477:6:0","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"src":"2440:63:0"},"scope":302,"src":"2395:109:0","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"5909c0d5","id":249,"implemented":false,"kind":"function","modifiers":[],"name":"price0CumulativeLast","nameLocation":"2517:20:0","nodeType":"FunctionDefinition","parameters":{"id":245,"nodeType":"ParameterList","parameters":[],"src":"2537:2:0"},"returnParameters":{"id":248,"nodeType":"ParameterList","parameters":[{"constant":false,"id":247,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":249,"src":"2563:4:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":246,"name":"uint","nodeType":"ElementaryTypeName","src":"2563:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2562:6:0"},"scope":302,"src":"2508:61:0","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"5a3d5493","id":254,"implemented":false,"kind":"function","modifiers":[],"name":"price1CumulativeLast","nameLocation":"2582:20:0","nodeType":"FunctionDefinition","parameters":{"id":250,"nodeType":"ParameterList","parameters":[],"src":"2602:2:0"},"returnParameters":{"id":253,"nodeType":"ParameterList","parameters":[{"constant":false,"id":252,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":254,"src":"2628:4:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":251,"name":"uint","nodeType":"ElementaryTypeName","src":"2628:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2627:6:0"},"scope":302,"src":"2573:61:0","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"7464fc3d","id":259,"implemented":false,"kind":"function","modifiers":[],"name":"kLast","nameLocation":"2647:5:0","nodeType":"FunctionDefinition","parameters":{"id":255,"nodeType":"ParameterList","parameters":[],"src":"2652:2:0"},"returnParameters":{"id":258,"nodeType":"ParameterList","parameters":[{"constant":false,"id":257,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":259,"src":"2678:4:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":256,"name":"uint","nodeType":"ElementaryTypeName","src":"2678:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2677:6:0"},"scope":302,"src":"2638:46:0","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"6a627842","id":266,"implemented":false,"kind":"function","modifiers":[],"name":"mint","nameLocation":"2699:4:0","nodeType":"FunctionDefinition","parameters":{"id":262,"nodeType":"ParameterList","parameters":[{"constant":false,"id":261,"mutability":"mutable","name":"to","nameLocation":"2712:2:0","nodeType":"VariableDeclaration","scope":266,"src":"2704:10:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":260,"name":"address","nodeType":"ElementaryTypeName","src":"2704:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2703:12:0"},"returnParameters":{"id":265,"nodeType":"ParameterList","parameters":[{"constant":false,"id":264,"mutability":"mutable","name":"liquidity","nameLocation":"2739:9:0","nodeType":"VariableDeclaration","scope":266,"src":"2734:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":263,"name":"uint","nodeType":"ElementaryTypeName","src":"2734:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2733:16:0"},"scope":302,"src":"2690:60:0","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"89afcb44","id":275,"implemented":false,"kind":"function","modifiers":[],"name":"burn","nameLocation":"2763:4:0","nodeType":"FunctionDefinition","parameters":{"id":269,"nodeType":"ParameterList","parameters":[{"constant":false,"id":268,"mutability":"mutable","name":"to","nameLocation":"2776:2:0","nodeType":"VariableDeclaration","scope":275,"src":"2768:10:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":267,"name":"address","nodeType":"ElementaryTypeName","src":"2768:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2767:12:0"},"returnParameters":{"id":274,"nodeType":"ParameterList","parameters":[{"constant":false,"id":271,"mutability":"mutable","name":"amount0","nameLocation":"2803:7:0","nodeType":"VariableDeclaration","scope":275,"src":"2798:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":270,"name":"uint","nodeType":"ElementaryTypeName","src":"2798:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":273,"mutability":"mutable","name":"amount1","nameLocation":"2817:7:0","nodeType":"VariableDeclaration","scope":275,"src":"2812:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":272,"name":"uint","nodeType":"ElementaryTypeName","src":"2812:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2797:28:0"},"scope":302,"src":"2754:72:0","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"022c0d9f","id":286,"implemented":false,"kind":"function","modifiers":[],"name":"swap","nameLocation":"2839:4:0","nodeType":"FunctionDefinition","parameters":{"id":284,"nodeType":"ParameterList","parameters":[{"constant":false,"id":277,"mutability":"mutable","name":"amount0Out","nameLocation":"2849:10:0","nodeType":"VariableDeclaration","scope":286,"src":"2844:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":276,"name":"uint","nodeType":"ElementaryTypeName","src":"2844:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":279,"mutability":"mutable","name":"amount1Out","nameLocation":"2866:10:0","nodeType":"VariableDeclaration","scope":286,"src":"2861:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":278,"name":"uint","nodeType":"ElementaryTypeName","src":"2861:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":281,"mutability":"mutable","name":"to","nameLocation":"2886:2:0","nodeType":"VariableDeclaration","scope":286,"src":"2878:10:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":280,"name":"address","nodeType":"ElementaryTypeName","src":"2878:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":283,"mutability":"mutable","name":"data","nameLocation":"2905:4:0","nodeType":"VariableDeclaration","scope":286,"src":"2890:19:0","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":282,"name":"bytes","nodeType":"ElementaryTypeName","src":"2890:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2843:67:0"},"returnParameters":{"id":285,"nodeType":"ParameterList","parameters":[],"src":"2919:0:0"},"scope":302,"src":"2830:90:0","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"bc25cf77","id":291,"implemented":false,"kind":"function","modifiers":[],"name":"skim","nameLocation":"2933:4:0","nodeType":"FunctionDefinition","parameters":{"id":289,"nodeType":"ParameterList","parameters":[{"constant":false,"id":288,"mutability":"mutable","name":"to","nameLocation":"2946:2:0","nodeType":"VariableDeclaration","scope":291,"src":"2938:10:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":287,"name":"address","nodeType":"ElementaryTypeName","src":"2938:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2937:12:0"},"returnParameters":{"id":290,"nodeType":"ParameterList","parameters":[],"src":"2958:0:0"},"scope":302,"src":"2924:35:0","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"fff6cae9","id":294,"implemented":false,"kind":"function","modifiers":[],"name":"sync","nameLocation":"2972:4:0","nodeType":"FunctionDefinition","parameters":{"id":292,"nodeType":"ParameterList","parameters":[],"src":"2976:2:0"},"returnParameters":{"id":293,"nodeType":"ParameterList","parameters":[],"src":"2987:0:0"},"scope":302,"src":"2963:25:0","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"485cc955","id":301,"implemented":false,"kind":"function","modifiers":[],"name":"initialize","nameLocation":"3003:10:0","nodeType":"FunctionDefinition","parameters":{"id":299,"nodeType":"ParameterList","parameters":[{"constant":false,"id":296,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":301,"src":"3014:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":295,"name":"address","nodeType":"ElementaryTypeName","src":"3014:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":298,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":301,"src":"3023:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":297,"name":"address","nodeType":"ElementaryTypeName","src":"3023:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3013:18:0"},"returnParameters":{"id":300,"nodeType":"ParameterList","parameters":[],"src":"3040:0:0"},"scope":302,"src":"2994:47:0","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":691,"src":"696:2348:0","usedErrors":[]},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":690,"linearizedBaseContracts":[690],"name":"IDexRouter","nameLocation":"3058:10:0","nodeType":"ContractDefinition","nodes":[{"functionSelector":"c45a0155","id":307,"implemented":false,"kind":"function","modifiers":[],"name":"factory","nameLocation":"3082:7:0","nodeType":"FunctionDefinition","parameters":{"id":303,"nodeType":"ParameterList","parameters":[],"src":"3089:2:0"},"returnParameters":{"id":306,"nodeType":"ParameterList","parameters":[{"constant":false,"id":305,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":307,"src":"3115:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":304,"name":"address","nodeType":"ElementaryTypeName","src":"3115:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3114:9:0"},"scope":690,"src":"3073:51:0","stateMutability":"pure","virtual":false,"visibility":"external"},{"functionSelector":"ad5c4648","id":312,"implemented":false,"kind":"function","modifiers":[],"name":"WETH","nameLocation":"3137:4:0","nodeType":"FunctionDefinition","parameters":{"id":308,"nodeType":"ParameterList","parameters":[],"src":"3141:2:0"},"returnParameters":{"id":311,"nodeType":"ParameterList","parameters":[{"constant":false,"id":310,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":312,"src":"3167:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":309,"name":"address","nodeType":"ElementaryTypeName","src":"3167:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3166:9:0"},"scope":690,"src":"3128:48:0","stateMutability":"pure","virtual":false,"visibility":"external"},{"functionSelector":"e8e33700","id":337,"implemented":false,"kind":"function","modifiers":[],"name":"addLiquidity","nameLocation":"3191:12:0","nodeType":"FunctionDefinition","parameters":{"id":329,"nodeType":"ParameterList","parameters":[{"constant":false,"id":314,"mutability":"mutable","name":"tokenA","nameLocation":"3218:6:0","nodeType":"VariableDeclaration","scope":337,"src":"3210:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":313,"name":"address","nodeType":"ElementaryTypeName","src":"3210:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":316,"mutability":"mutable","name":"tokenB","nameLocation":"3239:6:0","nodeType":"VariableDeclaration","scope":337,"src":"3231:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":315,"name":"address","nodeType":"ElementaryTypeName","src":"3231:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":318,"mutability":"mutable","name":"amountADesired","nameLocation":"3257:14:0","nodeType":"VariableDeclaration","scope":337,"src":"3252:19:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":317,"name":"uint","nodeType":"ElementaryTypeName","src":"3252:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":320,"mutability":"mutable","name":"amountBDesired","nameLocation":"3283:14:0","nodeType":"VariableDeclaration","scope":337,"src":"3278:19:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":319,"name":"uint","nodeType":"ElementaryTypeName","src":"3278:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":322,"mutability":"mutable","name":"amountAMin","nameLocation":"3309:10:0","nodeType":"VariableDeclaration","scope":337,"src":"3304:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":321,"name":"uint","nodeType":"ElementaryTypeName","src":"3304:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":324,"mutability":"mutable","name":"amountBMin","nameLocation":"3331:10:0","nodeType":"VariableDeclaration","scope":337,"src":"3326:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":323,"name":"uint","nodeType":"ElementaryTypeName","src":"3326:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":326,"mutability":"mutable","name":"to","nameLocation":"3356:2:0","nodeType":"VariableDeclaration","scope":337,"src":"3348:10:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":325,"name":"address","nodeType":"ElementaryTypeName","src":"3348:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":328,"mutability":"mutable","name":"deadline","nameLocation":"3370:8:0","nodeType":"VariableDeclaration","scope":337,"src":"3365:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":327,"name":"uint","nodeType":"ElementaryTypeName","src":"3365:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3203:180:0"},"returnParameters":{"id":336,"nodeType":"ParameterList","parameters":[{"constant":false,"id":331,"mutability":"mutable","name":"amountA","nameLocation":"3407:7:0","nodeType":"VariableDeclaration","scope":337,"src":"3402:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":330,"name":"uint","nodeType":"ElementaryTypeName","src":"3402:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":333,"mutability":"mutable","name":"amountB","nameLocation":"3421:7:0","nodeType":"VariableDeclaration","scope":337,"src":"3416:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":332,"name":"uint","nodeType":"ElementaryTypeName","src":"3416:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":335,"mutability":"mutable","name":"liquidity","nameLocation":"3435:9:0","nodeType":"VariableDeclaration","scope":337,"src":"3430:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":334,"name":"uint","nodeType":"ElementaryTypeName","src":"3430:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3401:44:0"},"scope":690,"src":"3182:264:0","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"f305d719","id":358,"implemented":false,"kind":"function","modifiers":[],"name":"addLiquidityETH","nameLocation":"3459:15:0","nodeType":"FunctionDefinition","parameters":{"id":350,"nodeType":"ParameterList","parameters":[{"constant":false,"id":339,"mutability":"mutable","name":"token","nameLocation":"3489:5:0","nodeType":"VariableDeclaration","scope":358,"src":"3481:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":338,"name":"address","nodeType":"ElementaryTypeName","src":"3481:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":341,"mutability":"mutable","name":"amountTokenDesired","nameLocation":"3506:18:0","nodeType":"VariableDeclaration","scope":358,"src":"3501:23:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":340,"name":"uint","nodeType":"ElementaryTypeName","src":"3501:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":343,"mutability":"mutable","name":"amountTokenMin","nameLocation":"3536:14:0","nodeType":"VariableDeclaration","scope":358,"src":"3531:19:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":342,"name":"uint","nodeType":"ElementaryTypeName","src":"3531:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":345,"mutability":"mutable","name":"amountETHMin","nameLocation":"3562:12:0","nodeType":"VariableDeclaration","scope":358,"src":"3557:17:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":344,"name":"uint","nodeType":"ElementaryTypeName","src":"3557:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":347,"mutability":"mutable","name":"to","nameLocation":"3589:2:0","nodeType":"VariableDeclaration","scope":358,"src":"3581:10:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":346,"name":"address","nodeType":"ElementaryTypeName","src":"3581:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":349,"mutability":"mutable","name":"deadline","nameLocation":"3603:8:0","nodeType":"VariableDeclaration","scope":358,"src":"3598:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":348,"name":"uint","nodeType":"ElementaryTypeName","src":"3598:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3474:142:0"},"returnParameters":{"id":357,"nodeType":"ParameterList","parameters":[{"constant":false,"id":352,"mutability":"mutable","name":"amountToken","nameLocation":"3648:11:0","nodeType":"VariableDeclaration","scope":358,"src":"3643:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":351,"name":"uint","nodeType":"ElementaryTypeName","src":"3643:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":354,"mutability":"mutable","name":"amountETH","nameLocation":"3666:9:0","nodeType":"VariableDeclaration","scope":358,"src":"3661:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":353,"name":"uint","nodeType":"ElementaryTypeName","src":"3661:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":356,"mutability":"mutable","name":"liquidity","nameLocation":"3682:9:0","nodeType":"VariableDeclaration","scope":358,"src":"3677:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":355,"name":"uint","nodeType":"ElementaryTypeName","src":"3677:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3642:50:0"},"scope":690,"src":"3450:243:0","stateMutability":"payable","virtual":false,"visibility":"external"},{"functionSelector":"baa2abde","id":379,"implemented":false,"kind":"function","modifiers":[],"name":"removeLiquidity","nameLocation":"3706:15:0","nodeType":"FunctionDefinition","parameters":{"id":373,"nodeType":"ParameterList","parameters":[{"constant":false,"id":360,"mutability":"mutable","name":"tokenA","nameLocation":"3736:6:0","nodeType":"VariableDeclaration","scope":379,"src":"3728:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":359,"name":"address","nodeType":"ElementaryTypeName","src":"3728:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":362,"mutability":"mutable","name":"tokenB","nameLocation":"3757:6:0","nodeType":"VariableDeclaration","scope":379,"src":"3749:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":361,"name":"address","nodeType":"ElementaryTypeName","src":"3749:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":364,"mutability":"mutable","name":"liquidity","nameLocation":"3775:9:0","nodeType":"VariableDeclaration","scope":379,"src":"3770:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":363,"name":"uint","nodeType":"ElementaryTypeName","src":"3770:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":366,"mutability":"mutable","name":"amountAMin","nameLocation":"3796:10:0","nodeType":"VariableDeclaration","scope":379,"src":"3791:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":365,"name":"uint","nodeType":"ElementaryTypeName","src":"3791:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":368,"mutability":"mutable","name":"amountBMin","nameLocation":"3818:10:0","nodeType":"VariableDeclaration","scope":379,"src":"3813:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":367,"name":"uint","nodeType":"ElementaryTypeName","src":"3813:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":370,"mutability":"mutable","name":"to","nameLocation":"3843:2:0","nodeType":"VariableDeclaration","scope":379,"src":"3835:10:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":369,"name":"address","nodeType":"ElementaryTypeName","src":"3835:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":372,"mutability":"mutable","name":"deadline","nameLocation":"3857:8:0","nodeType":"VariableDeclaration","scope":379,"src":"3852:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":371,"name":"uint","nodeType":"ElementaryTypeName","src":"3852:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3721:149:0"},"returnParameters":{"id":378,"nodeType":"ParameterList","parameters":[{"constant":false,"id":375,"mutability":"mutable","name":"amountA","nameLocation":"3894:7:0","nodeType":"VariableDeclaration","scope":379,"src":"3889:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":374,"name":"uint","nodeType":"ElementaryTypeName","src":"3889:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":377,"mutability":"mutable","name":"amountB","nameLocation":"3908:7:0","nodeType":"VariableDeclaration","scope":379,"src":"3903:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":376,"name":"uint","nodeType":"ElementaryTypeName","src":"3903:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3888:28:0"},"scope":690,"src":"3697:220:0","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"02751cec","id":398,"implemented":false,"kind":"function","modifiers":[],"name":"removeLiquidityETH","nameLocation":"3930:18:0","nodeType":"FunctionDefinition","parameters":{"id":392,"nodeType":"ParameterList","parameters":[{"constant":false,"id":381,"mutability":"mutable","name":"token","nameLocation":"3963:5:0","nodeType":"VariableDeclaration","scope":398,"src":"3955:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":380,"name":"address","nodeType":"ElementaryTypeName","src":"3955:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":383,"mutability":"mutable","name":"liquidity","nameLocation":"3980:9:0","nodeType":"VariableDeclaration","scope":398,"src":"3975:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":382,"name":"uint","nodeType":"ElementaryTypeName","src":"3975:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":385,"mutability":"mutable","name":"amountTokenMin","nameLocation":"4001:14:0","nodeType":"VariableDeclaration","scope":398,"src":"3996:19:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":384,"name":"uint","nodeType":"ElementaryTypeName","src":"3996:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":387,"mutability":"mutable","name":"amountETHMin","nameLocation":"4027:12:0","nodeType":"VariableDeclaration","scope":398,"src":"4022:17:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":386,"name":"uint","nodeType":"ElementaryTypeName","src":"4022:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":389,"mutability":"mutable","name":"to","nameLocation":"4054:2:0","nodeType":"VariableDeclaration","scope":398,"src":"4046:10:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":388,"name":"address","nodeType":"ElementaryTypeName","src":"4046:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":391,"mutability":"mutable","name":"deadline","nameLocation":"4068:8:0","nodeType":"VariableDeclaration","scope":398,"src":"4063:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":390,"name":"uint","nodeType":"ElementaryTypeName","src":"4063:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3948:133:0"},"returnParameters":{"id":397,"nodeType":"ParameterList","parameters":[{"constant":false,"id":394,"mutability":"mutable","name":"amountToken","nameLocation":"4105:11:0","nodeType":"VariableDeclaration","scope":398,"src":"4100:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":393,"name":"uint","nodeType":"ElementaryTypeName","src":"4100:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":396,"mutability":"mutable","name":"amountETH","nameLocation":"4123:9:0","nodeType":"VariableDeclaration","scope":398,"src":"4118:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":395,"name":"uint","nodeType":"ElementaryTypeName","src":"4118:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4099:34:0"},"scope":690,"src":"3921:213:0","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"2195995c","id":427,"implemented":false,"kind":"function","modifiers":[],"name":"removeLiquidityWithPermit","nameLocation":"4147:25:0","nodeType":"FunctionDefinition","parameters":{"id":421,"nodeType":"ParameterList","parameters":[{"constant":false,"id":400,"mutability":"mutable","name":"tokenA","nameLocation":"4187:6:0","nodeType":"VariableDeclaration","scope":427,"src":"4179:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":399,"name":"address","nodeType":"ElementaryTypeName","src":"4179:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":402,"mutability":"mutable","name":"tokenB","nameLocation":"4208:6:0","nodeType":"VariableDeclaration","scope":427,"src":"4200:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":401,"name":"address","nodeType":"ElementaryTypeName","src":"4200:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":404,"mutability":"mutable","name":"liquidity","nameLocation":"4226:9:0","nodeType":"VariableDeclaration","scope":427,"src":"4221:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":403,"name":"uint","nodeType":"ElementaryTypeName","src":"4221:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":406,"mutability":"mutable","name":"amountAMin","nameLocation":"4247:10:0","nodeType":"VariableDeclaration","scope":427,"src":"4242:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":405,"name":"uint","nodeType":"ElementaryTypeName","src":"4242:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":408,"mutability":"mutable","name":"amountBMin","nameLocation":"4269:10:0","nodeType":"VariableDeclaration","scope":427,"src":"4264:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":407,"name":"uint","nodeType":"ElementaryTypeName","src":"4264:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":410,"mutability":"mutable","name":"to","nameLocation":"4294:2:0","nodeType":"VariableDeclaration","scope":427,"src":"4286:10:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":409,"name":"address","nodeType":"ElementaryTypeName","src":"4286:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":412,"mutability":"mutable","name":"deadline","nameLocation":"4308:8:0","nodeType":"VariableDeclaration","scope":427,"src":"4303:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":411,"name":"uint","nodeType":"ElementaryTypeName","src":"4303:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":414,"mutability":"mutable","name":"approveMax","nameLocation":"4328:10:0","nodeType":"VariableDeclaration","scope":427,"src":"4323:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":413,"name":"bool","nodeType":"ElementaryTypeName","src":"4323:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":416,"mutability":"mutable","name":"v","nameLocation":"4346:1:0","nodeType":"VariableDeclaration","scope":427,"src":"4340:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":415,"name":"uint8","nodeType":"ElementaryTypeName","src":"4340:5:0","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":418,"mutability":"mutable","name":"r","nameLocation":"4357:1:0","nodeType":"VariableDeclaration","scope":427,"src":"4349:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":417,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4349:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":420,"mutability":"mutable","name":"s","nameLocation":"4368:1:0","nodeType":"VariableDeclaration","scope":427,"src":"4360:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":419,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4360:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4172:202:0"},"returnParameters":{"id":426,"nodeType":"ParameterList","parameters":[{"constant":false,"id":423,"mutability":"mutable","name":"amountA","nameLocation":"4398:7:0","nodeType":"VariableDeclaration","scope":427,"src":"4393:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":422,"name":"uint","nodeType":"ElementaryTypeName","src":"4393:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":425,"mutability":"mutable","name":"amountB","nameLocation":"4412:7:0","nodeType":"VariableDeclaration","scope":427,"src":"4407:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":424,"name":"uint","nodeType":"ElementaryTypeName","src":"4407:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4392:28:0"},"scope":690,"src":"4138:283:0","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"ded9382a","id":454,"implemented":false,"kind":"function","modifiers":[],"name":"removeLiquidityETHWithPermit","nameLocation":"4434:28:0","nodeType":"FunctionDefinition","parameters":{"id":448,"nodeType":"ParameterList","parameters":[{"constant":false,"id":429,"mutability":"mutable","name":"token","nameLocation":"4477:5:0","nodeType":"VariableDeclaration","scope":454,"src":"4469:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":428,"name":"address","nodeType":"ElementaryTypeName","src":"4469:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":431,"mutability":"mutable","name":"liquidity","nameLocation":"4494:9:0","nodeType":"VariableDeclaration","scope":454,"src":"4489:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":430,"name":"uint","nodeType":"ElementaryTypeName","src":"4489:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":433,"mutability":"mutable","name":"amountTokenMin","nameLocation":"4515:14:0","nodeType":"VariableDeclaration","scope":454,"src":"4510:19:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":432,"name":"uint","nodeType":"ElementaryTypeName","src":"4510:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":435,"mutability":"mutable","name":"amountETHMin","nameLocation":"4541:12:0","nodeType":"VariableDeclaration","scope":454,"src":"4536:17:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":434,"name":"uint","nodeType":"ElementaryTypeName","src":"4536:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":437,"mutability":"mutable","name":"to","nameLocation":"4568:2:0","nodeType":"VariableDeclaration","scope":454,"src":"4560:10:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":436,"name":"address","nodeType":"ElementaryTypeName","src":"4560:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":439,"mutability":"mutable","name":"deadline","nameLocation":"4582:8:0","nodeType":"VariableDeclaration","scope":454,"src":"4577:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":438,"name":"uint","nodeType":"ElementaryTypeName","src":"4577:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":441,"mutability":"mutable","name":"approveMax","nameLocation":"4602:10:0","nodeType":"VariableDeclaration","scope":454,"src":"4597:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":440,"name":"bool","nodeType":"ElementaryTypeName","src":"4597:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":443,"mutability":"mutable","name":"v","nameLocation":"4620:1:0","nodeType":"VariableDeclaration","scope":454,"src":"4614:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":442,"name":"uint8","nodeType":"ElementaryTypeName","src":"4614:5:0","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":445,"mutability":"mutable","name":"r","nameLocation":"4631:1:0","nodeType":"VariableDeclaration","scope":454,"src":"4623:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":444,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4623:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":447,"mutability":"mutable","name":"s","nameLocation":"4642:1:0","nodeType":"VariableDeclaration","scope":454,"src":"4634:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":446,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4634:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4462:186:0"},"returnParameters":{"id":453,"nodeType":"ParameterList","parameters":[{"constant":false,"id":450,"mutability":"mutable","name":"amountToken","nameLocation":"4672:11:0","nodeType":"VariableDeclaration","scope":454,"src":"4667:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":449,"name":"uint","nodeType":"ElementaryTypeName","src":"4667:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":452,"mutability":"mutable","name":"amountETH","nameLocation":"4690:9:0","nodeType":"VariableDeclaration","scope":454,"src":"4685:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":451,"name":"uint","nodeType":"ElementaryTypeName","src":"4685:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4666:34:0"},"scope":690,"src":"4425:276:0","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"38ed1739","id":471,"implemented":false,"kind":"function","modifiers":[],"name":"swapExactTokensForTokens","nameLocation":"4714:24:0","nodeType":"FunctionDefinition","parameters":{"id":466,"nodeType":"ParameterList","parameters":[{"constant":false,"id":456,"mutability":"mutable","name":"amountIn","nameLocation":"4750:8:0","nodeType":"VariableDeclaration","scope":471,"src":"4745:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":455,"name":"uint","nodeType":"ElementaryTypeName","src":"4745:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":458,"mutability":"mutable","name":"amountOutMin","nameLocation":"4770:12:0","nodeType":"VariableDeclaration","scope":471,"src":"4765:17:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":457,"name":"uint","nodeType":"ElementaryTypeName","src":"4765:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":461,"mutability":"mutable","name":"path","nameLocation":"4808:4:0","nodeType":"VariableDeclaration","scope":471,"src":"4789:23:0","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":459,"name":"address","nodeType":"ElementaryTypeName","src":"4789:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":460,"nodeType":"ArrayTypeName","src":"4789:9:0","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"},{"constant":false,"id":463,"mutability":"mutable","name":"to","nameLocation":"4827:2:0","nodeType":"VariableDeclaration","scope":471,"src":"4819:10:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":462,"name":"address","nodeType":"ElementaryTypeName","src":"4819:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":465,"mutability":"mutable","name":"deadline","nameLocation":"4841:8:0","nodeType":"VariableDeclaration","scope":471,"src":"4836:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":464,"name":"uint","nodeType":"ElementaryTypeName","src":"4836:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4738:116:0"},"returnParameters":{"id":470,"nodeType":"ParameterList","parameters":[{"constant":false,"id":469,"mutability":"mutable","name":"amounts","nameLocation":"4887:7:0","nodeType":"VariableDeclaration","scope":471,"src":"4873:21:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":467,"name":"uint","nodeType":"ElementaryTypeName","src":"4873:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":468,"nodeType":"ArrayTypeName","src":"4873:6:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"4872:23:0"},"scope":690,"src":"4705:191:0","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"8803dbee","id":488,"implemented":false,"kind":"function","modifiers":[],"name":"swapTokensForExactTokens","nameLocation":"4909:24:0","nodeType":"FunctionDefinition","parameters":{"id":483,"nodeType":"ParameterList","parameters":[{"constant":false,"id":473,"mutability":"mutable","name":"amountOut","nameLocation":"4945:9:0","nodeType":"VariableDeclaration","scope":488,"src":"4940:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":472,"name":"uint","nodeType":"ElementaryTypeName","src":"4940:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":475,"mutability":"mutable","name":"amountInMax","nameLocation":"4966:11:0","nodeType":"VariableDeclaration","scope":488,"src":"4961:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":474,"name":"uint","nodeType":"ElementaryTypeName","src":"4961:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":478,"mutability":"mutable","name":"path","nameLocation":"5003:4:0","nodeType":"VariableDeclaration","scope":488,"src":"4984:23:0","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":476,"name":"address","nodeType":"ElementaryTypeName","src":"4984:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":477,"nodeType":"ArrayTypeName","src":"4984:9:0","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"},{"constant":false,"id":480,"mutability":"mutable","name":"to","nameLocation":"5022:2:0","nodeType":"VariableDeclaration","scope":488,"src":"5014:10:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":479,"name":"address","nodeType":"ElementaryTypeName","src":"5014:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":482,"mutability":"mutable","name":"deadline","nameLocation":"5036:8:0","nodeType":"VariableDeclaration","scope":488,"src":"5031:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":481,"name":"uint","nodeType":"ElementaryTypeName","src":"5031:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4933:116:0"},"returnParameters":{"id":487,"nodeType":"ParameterList","parameters":[{"constant":false,"id":486,"mutability":"mutable","name":"amounts","nameLocation":"5082:7:0","nodeType":"VariableDeclaration","scope":488,"src":"5068:21:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":484,"name":"uint","nodeType":"ElementaryTypeName","src":"5068:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":485,"nodeType":"ArrayTypeName","src":"5068:6:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"5067:23:0"},"scope":690,"src":"4900:191:0","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"7ff36ab5","id":503,"implemented":false,"kind":"function","modifiers":[],"name":"swapExactETHForTokens","nameLocation":"5104:21:0","nodeType":"FunctionDefinition","parameters":{"id":498,"nodeType":"ParameterList","parameters":[{"constant":false,"id":490,"mutability":"mutable","name":"amountOutMin","nameLocation":"5131:12:0","nodeType":"VariableDeclaration","scope":503,"src":"5126:17:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":489,"name":"uint","nodeType":"ElementaryTypeName","src":"5126:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":493,"mutability":"mutable","name":"path","nameLocation":"5164:4:0","nodeType":"VariableDeclaration","scope":503,"src":"5145:23:0","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":491,"name":"address","nodeType":"ElementaryTypeName","src":"5145:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":492,"nodeType":"ArrayTypeName","src":"5145:9:0","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"},{"constant":false,"id":495,"mutability":"mutable","name":"to","nameLocation":"5178:2:0","nodeType":"VariableDeclaration","scope":503,"src":"5170:10:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":494,"name":"address","nodeType":"ElementaryTypeName","src":"5170:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":497,"mutability":"mutable","name":"deadline","nameLocation":"5187:8:0","nodeType":"VariableDeclaration","scope":503,"src":"5182:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":496,"name":"uint","nodeType":"ElementaryTypeName","src":"5182:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5125:71:0"},"returnParameters":{"id":502,"nodeType":"ParameterList","parameters":[{"constant":false,"id":501,"mutability":"mutable","name":"amounts","nameLocation":"5252:7:0","nodeType":"VariableDeclaration","scope":503,"src":"5238:21:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":499,"name":"uint","nodeType":"ElementaryTypeName","src":"5238:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":500,"nodeType":"ArrayTypeName","src":"5238:6:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"5237:23:0"},"scope":690,"src":"5095:166:0","stateMutability":"payable","virtual":false,"visibility":"external"},{"functionSelector":"4a25d94a","id":520,"implemented":false,"kind":"function","modifiers":[],"name":"swapTokensForExactETH","nameLocation":"5274:21:0","nodeType":"FunctionDefinition","parameters":{"id":515,"nodeType":"ParameterList","parameters":[{"constant":false,"id":505,"mutability":"mutable","name":"amountOut","nameLocation":"5301:9:0","nodeType":"VariableDeclaration","scope":520,"src":"5296:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":504,"name":"uint","nodeType":"ElementaryTypeName","src":"5296:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":507,"mutability":"mutable","name":"amountInMax","nameLocation":"5317:11:0","nodeType":"VariableDeclaration","scope":520,"src":"5312:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":506,"name":"uint","nodeType":"ElementaryTypeName","src":"5312:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":510,"mutability":"mutable","name":"path","nameLocation":"5349:4:0","nodeType":"VariableDeclaration","scope":520,"src":"5330:23:0","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":508,"name":"address","nodeType":"ElementaryTypeName","src":"5330:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":509,"nodeType":"ArrayTypeName","src":"5330:9:0","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"},{"constant":false,"id":512,"mutability":"mutable","name":"to","nameLocation":"5363:2:0","nodeType":"VariableDeclaration","scope":520,"src":"5355:10:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":511,"name":"address","nodeType":"ElementaryTypeName","src":"5355:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":514,"mutability":"mutable","name":"deadline","nameLocation":"5372:8:0","nodeType":"VariableDeclaration","scope":520,"src":"5367:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":513,"name":"uint","nodeType":"ElementaryTypeName","src":"5367:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5295:86:0"},"returnParameters":{"id":519,"nodeType":"ParameterList","parameters":[{"constant":false,"id":518,"mutability":"mutable","name":"amounts","nameLocation":"5424:7:0","nodeType":"VariableDeclaration","scope":520,"src":"5410:21:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":516,"name":"uint","nodeType":"ElementaryTypeName","src":"5410:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":517,"nodeType":"ArrayTypeName","src":"5410:6:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"5409:23:0"},"scope":690,"src":"5265:168:0","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"18cbafe5","id":537,"implemented":false,"kind":"function","modifiers":[],"name":"swapExactTokensForETH","nameLocation":"5446:21:0","nodeType":"FunctionDefinition","parameters":{"id":532,"nodeType":"ParameterList","parameters":[{"constant":false,"id":522,"mutability":"mutable","name":"amountIn","nameLocation":"5473:8:0","nodeType":"VariableDeclaration","scope":537,"src":"5468:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":521,"name":"uint","nodeType":"ElementaryTypeName","src":"5468:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":524,"mutability":"mutable","name":"amountOutMin","nameLocation":"5488:12:0","nodeType":"VariableDeclaration","scope":537,"src":"5483:17:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":523,"name":"uint","nodeType":"ElementaryTypeName","src":"5483:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":527,"mutability":"mutable","name":"path","nameLocation":"5521:4:0","nodeType":"VariableDeclaration","scope":537,"src":"5502:23:0","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":525,"name":"address","nodeType":"ElementaryTypeName","src":"5502:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":526,"nodeType":"ArrayTypeName","src":"5502:9:0","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"},{"constant":false,"id":529,"mutability":"mutable","name":"to","nameLocation":"5535:2:0","nodeType":"VariableDeclaration","scope":537,"src":"5527:10:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":528,"name":"address","nodeType":"ElementaryTypeName","src":"5527:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":531,"mutability":"mutable","name":"deadline","nameLocation":"5544:8:0","nodeType":"VariableDeclaration","scope":537,"src":"5539:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":530,"name":"uint","nodeType":"ElementaryTypeName","src":"5539:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5467:86:0"},"returnParameters":{"id":536,"nodeType":"ParameterList","parameters":[{"constant":false,"id":535,"mutability":"mutable","name":"amounts","nameLocation":"5596:7:0","nodeType":"VariableDeclaration","scope":537,"src":"5582:21:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":533,"name":"uint","nodeType":"ElementaryTypeName","src":"5582:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":534,"nodeType":"ArrayTypeName","src":"5582:6:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"5581:23:0"},"scope":690,"src":"5437:168:0","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"fb3bdb41","id":552,"implemented":false,"kind":"function","modifiers":[],"name":"swapETHForExactTokens","nameLocation":"5618:21:0","nodeType":"FunctionDefinition","parameters":{"id":547,"nodeType":"ParameterList","parameters":[{"constant":false,"id":539,"mutability":"mutable","name":"amountOut","nameLocation":"5645:9:0","nodeType":"VariableDeclaration","scope":552,"src":"5640:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":538,"name":"uint","nodeType":"ElementaryTypeName","src":"5640:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":542,"mutability":"mutable","name":"path","nameLocation":"5675:4:0","nodeType":"VariableDeclaration","scope":552,"src":"5656:23:0","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":540,"name":"address","nodeType":"ElementaryTypeName","src":"5656:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":541,"nodeType":"ArrayTypeName","src":"5656:9:0","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"},{"constant":false,"id":544,"mutability":"mutable","name":"to","nameLocation":"5689:2:0","nodeType":"VariableDeclaration","scope":552,"src":"5681:10:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":543,"name":"address","nodeType":"ElementaryTypeName","src":"5681:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":546,"mutability":"mutable","name":"deadline","nameLocation":"5698:8:0","nodeType":"VariableDeclaration","scope":552,"src":"5693:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":545,"name":"uint","nodeType":"ElementaryTypeName","src":"5693:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5639:68:0"},"returnParameters":{"id":551,"nodeType":"ParameterList","parameters":[{"constant":false,"id":550,"mutability":"mutable","name":"amounts","nameLocation":"5763:7:0","nodeType":"VariableDeclaration","scope":552,"src":"5749:21:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":548,"name":"uint","nodeType":"ElementaryTypeName","src":"5749:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":549,"nodeType":"ArrayTypeName","src":"5749:6:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"5748:23:0"},"scope":690,"src":"5609:163:0","stateMutability":"payable","virtual":false,"visibility":"external"},{"functionSelector":"ad615dec","id":563,"implemented":false,"kind":"function","modifiers":[],"name":"quote","nameLocation":"5787:5:0","nodeType":"FunctionDefinition","parameters":{"id":559,"nodeType":"ParameterList","parameters":[{"constant":false,"id":554,"mutability":"mutable","name":"amountA","nameLocation":"5798:7:0","nodeType":"VariableDeclaration","scope":563,"src":"5793:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":553,"name":"uint","nodeType":"ElementaryTypeName","src":"5793:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":556,"mutability":"mutable","name":"reserveA","nameLocation":"5812:8:0","nodeType":"VariableDeclaration","scope":563,"src":"5807:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":555,"name":"uint","nodeType":"ElementaryTypeName","src":"5807:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":558,"mutability":"mutable","name":"reserveB","nameLocation":"5827:8:0","nodeType":"VariableDeclaration","scope":563,"src":"5822:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":557,"name":"uint","nodeType":"ElementaryTypeName","src":"5822:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5792:44:0"},"returnParameters":{"id":562,"nodeType":"ParameterList","parameters":[{"constant":false,"id":561,"mutability":"mutable","name":"amountB","nameLocation":"5865:7:0","nodeType":"VariableDeclaration","scope":563,"src":"5860:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":560,"name":"uint","nodeType":"ElementaryTypeName","src":"5860:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5859:14:0"},"scope":690,"src":"5778:96:0","stateMutability":"pure","virtual":false,"visibility":"external"},{"functionSelector":"054d50d4","id":574,"implemented":false,"kind":"function","modifiers":[],"name":"getAmountOut","nameLocation":"5887:12:0","nodeType":"FunctionDefinition","parameters":{"id":570,"nodeType":"ParameterList","parameters":[{"constant":false,"id":565,"mutability":"mutable","name":"amountIn","nameLocation":"5905:8:0","nodeType":"VariableDeclaration","scope":574,"src":"5900:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":564,"name":"uint","nodeType":"ElementaryTypeName","src":"5900:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":567,"mutability":"mutable","name":"reserveIn","nameLocation":"5920:9:0","nodeType":"VariableDeclaration","scope":574,"src":"5915:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":566,"name":"uint","nodeType":"ElementaryTypeName","src":"5915:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":569,"mutability":"mutable","name":"reserveOut","nameLocation":"5936:10:0","nodeType":"VariableDeclaration","scope":574,"src":"5931:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":568,"name":"uint","nodeType":"ElementaryTypeName","src":"5931:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5899:48:0"},"returnParameters":{"id":573,"nodeType":"ParameterList","parameters":[{"constant":false,"id":572,"mutability":"mutable","name":"amountOut","nameLocation":"5976:9:0","nodeType":"VariableDeclaration","scope":574,"src":"5971:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":571,"name":"uint","nodeType":"ElementaryTypeName","src":"5971:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5970:16:0"},"scope":690,"src":"5878:109:0","stateMutability":"pure","virtual":false,"visibility":"external"},{"functionSelector":"85f8c259","id":585,"implemented":false,"kind":"function","modifiers":[],"name":"getAmountIn","nameLocation":"6000:11:0","nodeType":"FunctionDefinition","parameters":{"id":581,"nodeType":"ParameterList","parameters":[{"constant":false,"id":576,"mutability":"mutable","name":"amountOut","nameLocation":"6017:9:0","nodeType":"VariableDeclaration","scope":585,"src":"6012:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":575,"name":"uint","nodeType":"ElementaryTypeName","src":"6012:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":578,"mutability":"mutable","name":"reserveIn","nameLocation":"6033:9:0","nodeType":"VariableDeclaration","scope":585,"src":"6028:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":577,"name":"uint","nodeType":"ElementaryTypeName","src":"6028:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":580,"mutability":"mutable","name":"reserveOut","nameLocation":"6049:10:0","nodeType":"VariableDeclaration","scope":585,"src":"6044:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":579,"name":"uint","nodeType":"ElementaryTypeName","src":"6044:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6011:49:0"},"returnParameters":{"id":584,"nodeType":"ParameterList","parameters":[{"constant":false,"id":583,"mutability":"mutable","name":"amountIn","nameLocation":"6089:8:0","nodeType":"VariableDeclaration","scope":585,"src":"6084:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":582,"name":"uint","nodeType":"ElementaryTypeName","src":"6084:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6083:15:0"},"scope":690,"src":"5991:108:0","stateMutability":"pure","virtual":false,"visibility":"external"},{"functionSelector":"d06ca61f","id":596,"implemented":false,"kind":"function","modifiers":[],"name":"getAmountsOut","nameLocation":"6112:13:0","nodeType":"FunctionDefinition","parameters":{"id":591,"nodeType":"ParameterList","parameters":[{"constant":false,"id":587,"mutability":"mutable","name":"amountIn","nameLocation":"6131:8:0","nodeType":"VariableDeclaration","scope":596,"src":"6126:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":586,"name":"uint","nodeType":"ElementaryTypeName","src":"6126:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":590,"mutability":"mutable","name":"path","nameLocation":"6160:4:0","nodeType":"VariableDeclaration","scope":596,"src":"6141:23:0","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":588,"name":"address","nodeType":"ElementaryTypeName","src":"6141:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":589,"nodeType":"ArrayTypeName","src":"6141:9:0","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"}],"src":"6125:40:0"},"returnParameters":{"id":595,"nodeType":"ParameterList","parameters":[{"constant":false,"id":594,"mutability":"mutable","name":"amounts","nameLocation":"6203:7:0","nodeType":"VariableDeclaration","scope":596,"src":"6189:21:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":592,"name":"uint","nodeType":"ElementaryTypeName","src":"6189:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":593,"nodeType":"ArrayTypeName","src":"6189:6:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"6188:23:0"},"scope":690,"src":"6103:109:0","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"1f00ca74","id":607,"implemented":false,"kind":"function","modifiers":[],"name":"getAmountsIn","nameLocation":"6225:12:0","nodeType":"FunctionDefinition","parameters":{"id":602,"nodeType":"ParameterList","parameters":[{"constant":false,"id":598,"mutability":"mutable","name":"amountOut","nameLocation":"6243:9:0","nodeType":"VariableDeclaration","scope":607,"src":"6238:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":597,"name":"uint","nodeType":"ElementaryTypeName","src":"6238:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":601,"mutability":"mutable","name":"path","nameLocation":"6273:4:0","nodeType":"VariableDeclaration","scope":607,"src":"6254:23:0","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":599,"name":"address","nodeType":"ElementaryTypeName","src":"6254:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":600,"nodeType":"ArrayTypeName","src":"6254:9:0","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"}],"src":"6237:41:0"},"returnParameters":{"id":606,"nodeType":"ParameterList","parameters":[{"constant":false,"id":605,"mutability":"mutable","name":"amounts","nameLocation":"6316:7:0","nodeType":"VariableDeclaration","scope":607,"src":"6302:21:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":603,"name":"uint","nodeType":"ElementaryTypeName","src":"6302:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":604,"nodeType":"ArrayTypeName","src":"6302:6:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"6301:23:0"},"scope":690,"src":"6216:109:0","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"af2979eb","id":624,"implemented":false,"kind":"function","modifiers":[],"name":"removeLiquidityETHSupportingFeeOnTransferTokens","nameLocation":"6338:47:0","nodeType":"FunctionDefinition","parameters":{"id":620,"nodeType":"ParameterList","parameters":[{"constant":false,"id":609,"mutability":"mutable","name":"token","nameLocation":"6399:5:0","nodeType":"VariableDeclaration","scope":624,"src":"6391:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":608,"name":"address","nodeType":"ElementaryTypeName","src":"6391:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":611,"mutability":"mutable","name":"liquidity","nameLocation":"6415:9:0","nodeType":"VariableDeclaration","scope":624,"src":"6410:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":610,"name":"uint","nodeType":"ElementaryTypeName","src":"6410:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":613,"mutability":"mutable","name":"amountTokenMin","nameLocation":"6435:14:0","nodeType":"VariableDeclaration","scope":624,"src":"6430:19:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":612,"name":"uint","nodeType":"ElementaryTypeName","src":"6430:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":615,"mutability":"mutable","name":"amountETHMin","nameLocation":"6460:12:0","nodeType":"VariableDeclaration","scope":624,"src":"6455:17:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":614,"name":"uint","nodeType":"ElementaryTypeName","src":"6455:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":617,"mutability":"mutable","name":"to","nameLocation":"6486:2:0","nodeType":"VariableDeclaration","scope":624,"src":"6478:10:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":616,"name":"address","nodeType":"ElementaryTypeName","src":"6478:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":619,"mutability":"mutable","name":"deadline","nameLocation":"6499:8:0","nodeType":"VariableDeclaration","scope":624,"src":"6494:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":618,"name":"uint","nodeType":"ElementaryTypeName","src":"6494:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6385:127:0"},"returnParameters":{"id":623,"nodeType":"ParameterList","parameters":[{"constant":false,"id":622,"mutability":"mutable","name":"amountETH","nameLocation":"6536:9:0","nodeType":"VariableDeclaration","scope":624,"src":"6531:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":621,"name":"uint","nodeType":"ElementaryTypeName","src":"6531:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6530:16:0"},"scope":690,"src":"6329:218:0","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"5b0d5984","id":649,"implemented":false,"kind":"function","modifiers":[],"name":"removeLiquidityETHWithPermitSupportingFeeOnTransferTokens","nameLocation":"6560:57:0","nodeType":"FunctionDefinition","parameters":{"id":645,"nodeType":"ParameterList","parameters":[{"constant":false,"id":626,"mutability":"mutable","name":"token","nameLocation":"6631:5:0","nodeType":"VariableDeclaration","scope":649,"src":"6623:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":625,"name":"address","nodeType":"ElementaryTypeName","src":"6623:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":628,"mutability":"mutable","name":"liquidity","nameLocation":"6647:9:0","nodeType":"VariableDeclaration","scope":649,"src":"6642:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":627,"name":"uint","nodeType":"ElementaryTypeName","src":"6642:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":630,"mutability":"mutable","name":"amountTokenMin","nameLocation":"6667:14:0","nodeType":"VariableDeclaration","scope":649,"src":"6662:19:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":629,"name":"uint","nodeType":"ElementaryTypeName","src":"6662:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":632,"mutability":"mutable","name":"amountETHMin","nameLocation":"6692:12:0","nodeType":"VariableDeclaration","scope":649,"src":"6687:17:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":631,"name":"uint","nodeType":"ElementaryTypeName","src":"6687:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":634,"mutability":"mutable","name":"to","nameLocation":"6718:2:0","nodeType":"VariableDeclaration","scope":649,"src":"6710:10:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":633,"name":"address","nodeType":"ElementaryTypeName","src":"6710:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":636,"mutability":"mutable","name":"deadline","nameLocation":"6731:8:0","nodeType":"VariableDeclaration","scope":649,"src":"6726:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":635,"name":"uint","nodeType":"ElementaryTypeName","src":"6726:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":638,"mutability":"mutable","name":"approveMax","nameLocation":"6750:10:0","nodeType":"VariableDeclaration","scope":649,"src":"6745:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":637,"name":"bool","nodeType":"ElementaryTypeName","src":"6745:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":640,"mutability":"mutable","name":"v","nameLocation":"6768:1:0","nodeType":"VariableDeclaration","scope":649,"src":"6762:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":639,"name":"uint8","nodeType":"ElementaryTypeName","src":"6762:5:0","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":642,"mutability":"mutable","name":"r","nameLocation":"6779:1:0","nodeType":"VariableDeclaration","scope":649,"src":"6771:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":641,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6771:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":644,"mutability":"mutable","name":"s","nameLocation":"6790:1:0","nodeType":"VariableDeclaration","scope":649,"src":"6782:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":643,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6782:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"6617:179:0"},"returnParameters":{"id":648,"nodeType":"ParameterList","parameters":[{"constant":false,"id":647,"mutability":"mutable","name":"amountETH","nameLocation":"6820:9:0","nodeType":"VariableDeclaration","scope":649,"src":"6815:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":646,"name":"uint","nodeType":"ElementaryTypeName","src":"6815:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6814:16:0"},"scope":690,"src":"6551:280:0","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"5c11d795","id":663,"implemented":false,"kind":"function","modifiers":[],"name":"swapExactTokensForTokensSupportingFeeOnTransferTokens","nameLocation":"6847:53:0","nodeType":"FunctionDefinition","parameters":{"id":661,"nodeType":"ParameterList","parameters":[{"constant":false,"id":651,"mutability":"mutable","name":"amountIn","nameLocation":"6911:8:0","nodeType":"VariableDeclaration","scope":663,"src":"6906:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":650,"name":"uint","nodeType":"ElementaryTypeName","src":"6906:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":653,"mutability":"mutable","name":"amountOutMin","nameLocation":"6930:12:0","nodeType":"VariableDeclaration","scope":663,"src":"6925:17:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":652,"name":"uint","nodeType":"ElementaryTypeName","src":"6925:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":656,"mutability":"mutable","name":"path","nameLocation":"6967:4:0","nodeType":"VariableDeclaration","scope":663,"src":"6948:23:0","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":654,"name":"address","nodeType":"ElementaryTypeName","src":"6948:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":655,"nodeType":"ArrayTypeName","src":"6948:9:0","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"},{"constant":false,"id":658,"mutability":"mutable","name":"to","nameLocation":"6985:2:0","nodeType":"VariableDeclaration","scope":663,"src":"6977:10:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":657,"name":"address","nodeType":"ElementaryTypeName","src":"6977:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":660,"mutability":"mutable","name":"deadline","nameLocation":"6998:8:0","nodeType":"VariableDeclaration","scope":663,"src":"6993:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":659,"name":"uint","nodeType":"ElementaryTypeName","src":"6993:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6900:111:0"},"returnParameters":{"id":662,"nodeType":"ParameterList","parameters":[],"src":"7020:0:0"},"scope":690,"src":"6838:183:0","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"b6f9de95","id":675,"implemented":false,"kind":"function","modifiers":[],"name":"swapExactETHForTokensSupportingFeeOnTransferTokens","nameLocation":"7034:50:0","nodeType":"FunctionDefinition","parameters":{"id":673,"nodeType":"ParameterList","parameters":[{"constant":false,"id":665,"mutability":"mutable","name":"amountOutMin","nameLocation":"7095:12:0","nodeType":"VariableDeclaration","scope":675,"src":"7090:17:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":664,"name":"uint","nodeType":"ElementaryTypeName","src":"7090:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":668,"mutability":"mutable","name":"path","nameLocation":"7132:4:0","nodeType":"VariableDeclaration","scope":675,"src":"7113:23:0","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":666,"name":"address","nodeType":"ElementaryTypeName","src":"7113:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":667,"nodeType":"ArrayTypeName","src":"7113:9:0","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"},{"constant":false,"id":670,"mutability":"mutable","name":"to","nameLocation":"7150:2:0","nodeType":"VariableDeclaration","scope":675,"src":"7142:10:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":669,"name":"address","nodeType":"ElementaryTypeName","src":"7142:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":672,"mutability":"mutable","name":"deadline","nameLocation":"7163:8:0","nodeType":"VariableDeclaration","scope":675,"src":"7158:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":671,"name":"uint","nodeType":"ElementaryTypeName","src":"7158:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7084:92:0"},"returnParameters":{"id":674,"nodeType":"ParameterList","parameters":[],"src":"7193:0:0"},"scope":690,"src":"7025:169:0","stateMutability":"payable","virtual":false,"visibility":"external"},{"functionSelector":"791ac947","id":689,"implemented":false,"kind":"function","modifiers":[],"name":"swapExactTokensForETHSupportingFeeOnTransferTokens","nameLocation":"7207:50:0","nodeType":"FunctionDefinition","parameters":{"id":687,"nodeType":"ParameterList","parameters":[{"constant":false,"id":677,"mutability":"mutable","name":"amountIn","nameLocation":"7268:8:0","nodeType":"VariableDeclaration","scope":689,"src":"7263:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":676,"name":"uint","nodeType":"ElementaryTypeName","src":"7263:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":679,"mutability":"mutable","name":"amountOutMin","nameLocation":"7287:12:0","nodeType":"VariableDeclaration","scope":689,"src":"7282:17:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":678,"name":"uint","nodeType":"ElementaryTypeName","src":"7282:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":682,"mutability":"mutable","name":"path","nameLocation":"7324:4:0","nodeType":"VariableDeclaration","scope":689,"src":"7305:23:0","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":680,"name":"address","nodeType":"ElementaryTypeName","src":"7305:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":681,"nodeType":"ArrayTypeName","src":"7305:9:0","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"},{"constant":false,"id":684,"mutability":"mutable","name":"to","nameLocation":"7342:2:0","nodeType":"VariableDeclaration","scope":689,"src":"7334:10:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":683,"name":"address","nodeType":"ElementaryTypeName","src":"7334:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":686,"mutability":"mutable","name":"deadline","nameLocation":"7355:8:0","nodeType":"VariableDeclaration","scope":689,"src":"7350:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":685,"name":"uint","nodeType":"ElementaryTypeName","src":"7350:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7257:111:0"},"returnParameters":{"id":688,"nodeType":"ParameterList","parameters":[],"src":"7377:0:0"},"scope":690,"src":"7198:180:0","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":691,"src":"3048:4333:0","usedErrors":[]}],"src":"41:7340:0"},"id":0},"contracts/swap.sol":{"ast":{"absolutePath":"contracts/swap.sol","exportedSymbols":{"Address":[1497],"Claimable":[2003],"Context":[789],"IERC20":[768],"IPancakeV3Factory":[1794],"IPancakeV3Pool":[1855],"IPancakeV3PoolImmutables":[1850],"IPancakeV3PoolState":[1813],"IPancakeV3SwapCallback":[1868],"IRouter":[1780],"IV3SwapRouter":[1958],"Ownable":[892],"ProSwap":[2844],"SafeERC20":[1718],"SafeMath":[1203]},"id":2845,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":692,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"0:23:1"},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"interface","documentation":{"id":693,"nodeType":"StructuredDocumentation","src":"27:72:1","text":" @dev Interface of the ERC20 standard as defined in the EIP."},"fullyImplemented":false,"id":768,"linearizedBaseContracts":[768],"name":"IERC20","nameLocation":"111:6:1","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":694,"nodeType":"StructuredDocumentation","src":"125:163:1","text":" @dev Emitted when `value` tokens are moved from one account (`from`) to\n another (`to`).\n Note that `value` may be zero."},"id":702,"name":"Transfer","nameLocation":"300:8:1","nodeType":"EventDefinition","parameters":{"id":701,"nodeType":"ParameterList","parameters":[{"constant":false,"id":696,"indexed":true,"mutability":"mutable","name":"from","nameLocation":"325:4:1","nodeType":"VariableDeclaration","scope":702,"src":"309:20:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":695,"name":"address","nodeType":"ElementaryTypeName","src":"309:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":698,"indexed":true,"mutability":"mutable","name":"to","nameLocation":"347:2:1","nodeType":"VariableDeclaration","scope":702,"src":"331:18:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":697,"name":"address","nodeType":"ElementaryTypeName","src":"331:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":700,"indexed":false,"mutability":"mutable","name":"value","nameLocation":"359:5:1","nodeType":"VariableDeclaration","scope":702,"src":"351:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":699,"name":"uint256","nodeType":"ElementaryTypeName","src":"351:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"308:57:1"},"src":"294:72:1"},{"anonymous":false,"documentation":{"id":703,"nodeType":"StructuredDocumentation","src":"374:151:1","text":" @dev Emitted when the allowance of a `spender` for an `owner` is set by\n a call to {approve}. `value` is the new allowance."},"id":711,"name":"Approval","nameLocation":"537:8:1","nodeType":"EventDefinition","parameters":{"id":710,"nodeType":"ParameterList","parameters":[{"constant":false,"id":705,"indexed":true,"mutability":"mutable","name":"owner","nameLocation":"572:5:1","nodeType":"VariableDeclaration","scope":711,"src":"556:21:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":704,"name":"address","nodeType":"ElementaryTypeName","src":"556:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":707,"indexed":true,"mutability":"mutable","name":"spender","nameLocation":"604:7:1","nodeType":"VariableDeclaration","scope":711,"src":"588:23:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":706,"name":"address","nodeType":"ElementaryTypeName","src":"588:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":709,"indexed":false,"mutability":"mutable","name":"value","nameLocation":"630:5:1","nodeType":"VariableDeclaration","scope":711,"src":"622:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":708,"name":"uint256","nodeType":"ElementaryTypeName","src":"622:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"545:97:1"},"src":"531:112:1"},{"documentation":{"id":712,"nodeType":"StructuredDocumentation","src":"651:68:1","text":" @dev Returns the amount of tokens in existence."},"functionSelector":"18160ddd","id":717,"implemented":false,"kind":"function","modifiers":[],"name":"totalSupply","nameLocation":"734:11:1","nodeType":"FunctionDefinition","parameters":{"id":713,"nodeType":"ParameterList","parameters":[],"src":"745:2:1"},"returnParameters":{"id":716,"nodeType":"ParameterList","parameters":[{"constant":false,"id":715,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":717,"src":"771:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":714,"name":"uint256","nodeType":"ElementaryTypeName","src":"771:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"770:9:1"},"scope":768,"src":"725:55:1","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":718,"nodeType":"StructuredDocumentation","src":"788:74:1","text":" @dev Returns the amount of tokens owned by `account`."},"functionSelector":"70a08231","id":725,"implemented":false,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"877:9:1","nodeType":"FunctionDefinition","parameters":{"id":721,"nodeType":"ParameterList","parameters":[{"constant":false,"id":720,"mutability":"mutable","name":"account","nameLocation":"895:7:1","nodeType":"VariableDeclaration","scope":725,"src":"887:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":719,"name":"address","nodeType":"ElementaryTypeName","src":"887:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"886:17:1"},"returnParameters":{"id":724,"nodeType":"ParameterList","parameters":[{"constant":false,"id":723,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":725,"src":"927:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":722,"name":"uint256","nodeType":"ElementaryTypeName","src":"927:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"926:9:1"},"scope":768,"src":"868:68:1","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":726,"nodeType":"StructuredDocumentation","src":"944:208:1","text":" @dev Moves `amount` tokens from the caller's account to `to`.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."},"functionSelector":"a9059cbb","id":735,"implemented":false,"kind":"function","modifiers":[],"name":"transfer","nameLocation":"1167:8:1","nodeType":"FunctionDefinition","parameters":{"id":731,"nodeType":"ParameterList","parameters":[{"constant":false,"id":728,"mutability":"mutable","name":"to","nameLocation":"1184:2:1","nodeType":"VariableDeclaration","scope":735,"src":"1176:10:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":727,"name":"address","nodeType":"ElementaryTypeName","src":"1176:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":730,"mutability":"mutable","name":"amount","nameLocation":"1196:6:1","nodeType":"VariableDeclaration","scope":735,"src":"1188:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":729,"name":"uint256","nodeType":"ElementaryTypeName","src":"1188:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1175:28:1"},"returnParameters":{"id":734,"nodeType":"ParameterList","parameters":[{"constant":false,"id":733,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":735,"src":"1222:4:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":732,"name":"bool","nodeType":"ElementaryTypeName","src":"1222:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1221:6:1"},"scope":768,"src":"1158:70:1","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":736,"nodeType":"StructuredDocumentation","src":"1236:270:1","text":" @dev Returns the remaining number of tokens that `spender` will be\n allowed to spend on behalf of `owner` through {transferFrom}. This is\n zero by default.\n This value changes when {approve} or {transferFrom} are called."},"functionSelector":"dd62ed3e","id":745,"implemented":false,"kind":"function","modifiers":[],"name":"allowance","nameLocation":"1521:9:1","nodeType":"FunctionDefinition","parameters":{"id":741,"nodeType":"ParameterList","parameters":[{"constant":false,"id":738,"mutability":"mutable","name":"owner","nameLocation":"1549:5:1","nodeType":"VariableDeclaration","scope":745,"src":"1541:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":737,"name":"address","nodeType":"ElementaryTypeName","src":"1541:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":740,"mutability":"mutable","name":"spender","nameLocation":"1573:7:1","nodeType":"VariableDeclaration","scope":745,"src":"1565:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":739,"name":"address","nodeType":"ElementaryTypeName","src":"1565:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1530:57:1"},"returnParameters":{"id":744,"nodeType":"ParameterList","parameters":[{"constant":false,"id":743,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":745,"src":"1611:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":742,"name":"uint256","nodeType":"ElementaryTypeName","src":"1611:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1610:9:1"},"scope":768,"src":"1512:108:1","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":746,"nodeType":"StructuredDocumentation","src":"1628:655:1","text":" @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n Returns a boolean value indicating whether the operation succeeded.\n IMPORTANT: Beware that changing an allowance with this method brings the risk\n that someone may use both the old and the new allowance by unfortunate\n transaction ordering. One possible solution to mitigate this race\n condition is to first reduce the spender's allowance to 0 and set the\n desired value afterwards:\n https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n Emits an {Approval} event."},"functionSelector":"095ea7b3","id":755,"implemented":false,"kind":"function","modifiers":[],"name":"approve","nameLocation":"2298:7:1","nodeType":"FunctionDefinition","parameters":{"id":751,"nodeType":"ParameterList","parameters":[{"constant":false,"id":748,"mutability":"mutable","name":"spender","nameLocation":"2314:7:1","nodeType":"VariableDeclaration","scope":755,"src":"2306:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":747,"name":"address","nodeType":"ElementaryTypeName","src":"2306:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":750,"mutability":"mutable","name":"amount","nameLocation":"2331:6:1","nodeType":"VariableDeclaration","scope":755,"src":"2323:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":749,"name":"uint256","nodeType":"ElementaryTypeName","src":"2323:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2305:33:1"},"returnParameters":{"id":754,"nodeType":"ParameterList","parameters":[{"constant":false,"id":753,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":755,"src":"2357:4:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":752,"name":"bool","nodeType":"ElementaryTypeName","src":"2357:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2356:6:1"},"scope":768,"src":"2289:74:1","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":756,"nodeType":"StructuredDocumentation","src":"2371:295:1","text":" @dev Moves `amount` tokens from `from` to `to` using the\n allowance mechanism. `amount` is then deducted from the caller's\n allowance.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."},"functionSelector":"23b872dd","id":767,"implemented":false,"kind":"function","modifiers":[],"name":"transferFrom","nameLocation":"2681:12:1","nodeType":"FunctionDefinition","parameters":{"id":763,"nodeType":"ParameterList","parameters":[{"constant":false,"id":758,"mutability":"mutable","name":"from","nameLocation":"2712:4:1","nodeType":"VariableDeclaration","scope":767,"src":"2704:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":757,"name":"address","nodeType":"ElementaryTypeName","src":"2704:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":760,"mutability":"mutable","name":"to","nameLocation":"2735:2:1","nodeType":"VariableDeclaration","scope":767,"src":"2727:10:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":759,"name":"address","nodeType":"ElementaryTypeName","src":"2727:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":762,"mutability":"mutable","name":"amount","nameLocation":"2756:6:1","nodeType":"VariableDeclaration","scope":767,"src":"2748:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":761,"name":"uint256","nodeType":"ElementaryTypeName","src":"2748:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2693:76:1"},"returnParameters":{"id":766,"nodeType":"ParameterList","parameters":[{"constant":false,"id":765,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":767,"src":"2788:4:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":764,"name":"bool","nodeType":"ElementaryTypeName","src":"2788:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2787:6:1"},"scope":768,"src":"2672:122:1","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":2845,"src":"101:2696:1","usedErrors":[]},{"id":769,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"2917:23:1"},{"abstract":true,"baseContracts":[],"contractDependencies":[],"contractKind":"contract","documentation":{"id":770,"nodeType":"StructuredDocumentation","src":"2944:505:1","text":" @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."},"fullyImplemented":true,"id":789,"linearizedBaseContracts":[789],"name":"Context","nameLocation":"3469:7:1","nodeType":"ContractDefinition","nodes":[{"body":{"id":778,"nodeType":"Block","src":"3546:36:1","statements":[{"expression":{"expression":{"id":775,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"3564:3:1","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":776,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"3564:10:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":774,"id":777,"nodeType":"Return","src":"3557:17:1"}]},"id":779,"implemented":true,"kind":"function","modifiers":[],"name":"_msgSender","nameLocation":"3493:10:1","nodeType":"FunctionDefinition","parameters":{"id":771,"nodeType":"ParameterList","parameters":[],"src":"3503:2:1"},"returnParameters":{"id":774,"nodeType":"ParameterList","parameters":[{"constant":false,"id":773,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":779,"src":"3537:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":772,"name":"address","nodeType":"ElementaryTypeName","src":"3537:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3536:9:1"},"scope":789,"src":"3484:98:1","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":787,"nodeType":"Block","src":"3657:34:1","statements":[{"expression":{"expression":{"id":784,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"3675:3:1","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":785,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"data","nodeType":"MemberAccess","src":"3675:8:1","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"functionReturnParameters":783,"id":786,"nodeType":"Return","src":"3668:15:1"}]},"id":788,"implemented":true,"kind":"function","modifiers":[],"name":"_msgData","nameLocation":"3599:8:1","nodeType":"FunctionDefinition","parameters":{"id":780,"nodeType":"ParameterList","parameters":[],"src":"3607:2:1"},"returnParameters":{"id":783,"nodeType":"ParameterList","parameters":[{"constant":false,"id":782,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":788,"src":"3641:14:1","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":781,"name":"bytes","nodeType":"ElementaryTypeName","src":"3641:5:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3640:16:1"},"scope":789,"src":"3590:101:1","stateMutability":"view","virtual":true,"visibility":"internal"}],"scope":2845,"src":"3451:243:1","usedErrors":[]},{"id":790,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"3816:23:1"},{"abstract":true,"baseContracts":[{"baseName":{"id":792,"name":"Context","nodeType":"IdentifierPath","referencedDeclaration":789,"src":"4379:7:1"},"id":793,"nodeType":"InheritanceSpecifier","src":"4379:7:1"}],"contractDependencies":[],"contractKind":"contract","documentation":{"id":791,"nodeType":"StructuredDocumentation","src":"3843:505:1","text":" @dev Contract module which provides a basic access control mechanism, where\n there is an account (an owner) that can be granted exclusive access to\n specific functions.\n By default, the owner account will be the one that deploys the contract. This\n can later be changed with {transferOwnership}.\n This module is used through inheritance. It will make available the modifier\n `onlyOwner`, which can be applied to your functions to restrict their use to\n the owner."},"fullyImplemented":true,"id":892,"linearizedBaseContracts":[892,789],"name":"Ownable","nameLocation":"4368:7:1","nodeType":"ContractDefinition","nodes":[{"constant":false,"id":795,"mutability":"mutable","name":"_owner","nameLocation":"4410:6:1","nodeType":"VariableDeclaration","scope":892,"src":"4394:22:1","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":794,"name":"address","nodeType":"ElementaryTypeName","src":"4394:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"private"},{"anonymous":false,"id":801,"name":"OwnershipTransferred","nameLocation":"4431:20:1","nodeType":"EventDefinition","parameters":{"id":800,"nodeType":"ParameterList","parameters":[{"constant":false,"id":797,"indexed":true,"mutability":"mutable","name":"previousOwner","nameLocation":"4478:13:1","nodeType":"VariableDeclaration","scope":801,"src":"4462:29:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":796,"name":"address","nodeType":"ElementaryTypeName","src":"4462:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":799,"indexed":true,"mutability":"mutable","name":"newOwner","nameLocation":"4518:8:1","nodeType":"VariableDeclaration","scope":801,"src":"4502:24:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":798,"name":"address","nodeType":"ElementaryTypeName","src":"4502:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4451:82:1"},"src":"4425:109:1"},{"body":{"id":810,"nodeType":"Block","src":"4655:51:1","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":806,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":779,"src":"4685:10:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":807,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4685:12:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":805,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":891,"src":"4666:18:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":808,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4666:32:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":809,"nodeType":"ExpressionStatement","src":"4666:32:1"}]},"documentation":{"id":802,"nodeType":"StructuredDocumentation","src":"4542:93:1","text":" @dev Initializes the contract setting the deployer as the initial owner."},"id":811,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":803,"nodeType":"ParameterList","parameters":[],"src":"4652:2:1"},"returnParameters":{"id":804,"nodeType":"ParameterList","parameters":[],"src":"4655:0:1"},"scope":892,"src":"4641:65:1","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":819,"nodeType":"Block","src":"4842:32:1","statements":[{"expression":{"id":817,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":795,"src":"4860:6:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":816,"id":818,"nodeType":"Return","src":"4853:13:1"}]},"documentation":{"id":812,"nodeType":"StructuredDocumentation","src":"4714:67:1","text":" @dev Returns the address of the current owner."},"functionSelector":"8da5cb5b","id":820,"implemented":true,"kind":"function","modifiers":[],"name":"owner","nameLocation":"4796:5:1","nodeType":"FunctionDefinition","parameters":{"id":813,"nodeType":"ParameterList","parameters":[],"src":"4801:2:1"},"returnParameters":{"id":816,"nodeType":"ParameterList","parameters":[{"constant":false,"id":815,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":820,"src":"4833:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":814,"name":"address","nodeType":"ElementaryTypeName","src":"4833:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4832:9:1"},"scope":892,"src":"4787:87:1","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":833,"nodeType":"Block","src":"4988:99:1","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":828,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":824,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":820,"src":"5007:5:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":825,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5007:7:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":826,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":779,"src":"5018:10:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":827,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5018:12:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"5007:23:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572","id":829,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5032:34:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe","typeString":"literal_string \"Ownable: caller is not the owner\""},"value":"Ownable: caller is not the owner"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe","typeString":"literal_string \"Ownable: caller is not the owner\""}],"id":823,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4999:7:1","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":830,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4999:68:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":831,"nodeType":"ExpressionStatement","src":"4999:68:1"},{"id":832,"nodeType":"PlaceholderStatement","src":"5078:1:1"}]},"documentation":{"id":821,"nodeType":"StructuredDocumentation","src":"4882:79:1","text":" @dev Throws if called by any account other than the owner."},"id":834,"name":"onlyOwner","nameLocation":"4976:9:1","nodeType":"ModifierDefinition","parameters":{"id":822,"nodeType":"ParameterList","parameters":[],"src":"4985:2:1"},"src":"4967:120:1","virtual":false,"visibility":"internal"},{"body":{"id":847,"nodeType":"Block","src":"5492:49:1","statements":[{"expression":{"arguments":[{"arguments":[{"hexValue":"30","id":843,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5530:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":842,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5522:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":841,"name":"address","nodeType":"ElementaryTypeName","src":"5522:7:1","typeDescriptions":{}}},"id":844,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5522:10:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":840,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":891,"src":"5503:18:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":845,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5503:30:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":846,"nodeType":"ExpressionStatement","src":"5503:30:1"}]},"documentation":{"id":835,"nodeType":"StructuredDocumentation","src":"5095:337:1","text":" @dev Leaves the contract without owner. It will not be possible to call\n `onlyOwner` functions anymore. Can only be called by the current owner.\n NOTE: Renouncing ownership will leave the contract without an owner,\n thereby removing any functionality that is only available to the owner."},"functionSelector":"715018a6","id":848,"implemented":true,"kind":"function","modifiers":[{"id":838,"kind":"modifierInvocation","modifierName":{"id":837,"name":"onlyOwner","nodeType":"IdentifierPath","referencedDeclaration":834,"src":"5482:9:1"},"nodeType":"ModifierInvocation","src":"5482:9:1"}],"name":"renounceOwnership","nameLocation":"5447:17:1","nodeType":"FunctionDefinition","parameters":{"id":836,"nodeType":"ParameterList","parameters":[],"src":"5464:2:1"},"returnParameters":{"id":839,"nodeType":"ParameterList","parameters":[],"src":"5492:0:1"},"scope":892,"src":"5438:103:1","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":870,"nodeType":"Block","src":"5766:168:1","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":862,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":857,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":851,"src":"5799:8:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":860,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5819:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":859,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5811:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":858,"name":"address","nodeType":"ElementaryTypeName","src":"5811:7:1","typeDescriptions":{}}},"id":861,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5811:10:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"5799:22:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373","id":863,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5836:40:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe","typeString":"literal_string \"Ownable: new owner is the zero address\""},"value":"Ownable: new owner is the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe","typeString":"literal_string \"Ownable: new owner is the zero address\""}],"id":856,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5777:7:1","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":864,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5777:110:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":865,"nodeType":"ExpressionStatement","src":"5777:110:1"},{"expression":{"arguments":[{"id":867,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":851,"src":"5917:8:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":866,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":891,"src":"5898:18:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":868,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5898:28:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":869,"nodeType":"ExpressionStatement","src":"5898:28:1"}]},"documentation":{"id":849,"nodeType":"StructuredDocumentation","src":"5549:141:1","text":" @dev Transfers ownership of the contract to a new account (`newOwner`).\n Can only be called by the current owner."},"functionSelector":"f2fde38b","id":871,"implemented":true,"kind":"function","modifiers":[{"id":854,"kind":"modifierInvocation","modifierName":{"id":853,"name":"onlyOwner","nodeType":"IdentifierPath","referencedDeclaration":834,"src":"5756:9:1"},"nodeType":"ModifierInvocation","src":"5756:9:1"}],"name":"transferOwnership","nameLocation":"5705:17:1","nodeType":"FunctionDefinition","parameters":{"id":852,"nodeType":"ParameterList","parameters":[{"constant":false,"id":851,"mutability":"mutable","name":"newOwner","nameLocation":"5731:8:1","nodeType":"VariableDeclaration","scope":871,"src":"5723:16:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":850,"name":"address","nodeType":"ElementaryTypeName","src":"5723:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5722:18:1"},"returnParameters":{"id":855,"nodeType":"ParameterList","parameters":[],"src":"5766:0:1"},"scope":892,"src":"5696:238:1","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":890,"nodeType":"Block","src":"6157:128:1","statements":[{"assignments":[878],"declarations":[{"constant":false,"id":878,"mutability":"mutable","name":"oldOwner","nameLocation":"6176:8:1","nodeType":"VariableDeclaration","scope":890,"src":"6168:16:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":877,"name":"address","nodeType":"ElementaryTypeName","src":"6168:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":880,"initialValue":{"id":879,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":795,"src":"6187:6:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"6168:25:1"},{"expression":{"id":883,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":881,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":795,"src":"6204:6:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":882,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":874,"src":"6213:8:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"6204:17:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":884,"nodeType":"ExpressionStatement","src":"6204:17:1"},{"eventCall":{"arguments":[{"id":886,"name":"oldOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":878,"src":"6258:8:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":887,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":874,"src":"6268:8:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":885,"name":"OwnershipTransferred","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":801,"src":"6237:20:1","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$returns$__$","typeString":"function (address,address)"}},"id":888,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6237:40:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":889,"nodeType":"EmitStatement","src":"6232:45:1"}]},"documentation":{"id":872,"nodeType":"StructuredDocumentation","src":"5942:146:1","text":" @dev Transfers ownership of the contract to a new account (`newOwner`).\n Internal function without access restriction."},"id":891,"implemented":true,"kind":"function","modifiers":[],"name":"_transferOwnership","nameLocation":"6103:18:1","nodeType":"FunctionDefinition","parameters":{"id":875,"nodeType":"ParameterList","parameters":[{"constant":false,"id":874,"mutability":"mutable","name":"newOwner","nameLocation":"6130:8:1","nodeType":"VariableDeclaration","scope":891,"src":"6122:16:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":873,"name":"address","nodeType":"ElementaryTypeName","src":"6122:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"6121:18:1"},"returnParameters":{"id":876,"nodeType":"ParameterList","parameters":[],"src":"6157:0:1"},"scope":892,"src":"6094:191:1","stateMutability":"nonpayable","virtual":true,"visibility":"internal"}],"scope":2845,"src":"4350:1938:1","usedErrors":[]},{"id":893,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"6435:23:1"},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"library","documentation":{"id":894,"nodeType":"StructuredDocumentation","src":"6619:201:1","text":" @dev Wrappers over Solidity's arithmetic operations.\n NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n now has built in overflow checking."},"fullyImplemented":true,"id":1203,"linearizedBaseContracts":[1203],"name":"SafeMath","nameLocation":"6830:8:1","nodeType":"ContractDefinition","nodes":[{"body":{"id":925,"nodeType":"Block","src":"7088:146:1","statements":[{"id":924,"nodeType":"UncheckedBlock","src":"7099:128:1","statements":[{"assignments":[907],"declarations":[{"constant":false,"id":907,"mutability":"mutable","name":"c","nameLocation":"7132:1:1","nodeType":"VariableDeclaration","scope":924,"src":"7124:9:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":906,"name":"uint256","nodeType":"ElementaryTypeName","src":"7124:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":911,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":910,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":908,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":897,"src":"7136:1:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":909,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":899,"src":"7140:1:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7136:5:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"7124:17:1"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":914,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":912,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":907,"src":"7160:1:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":913,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":897,"src":"7164:1:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7160:5:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":919,"nodeType":"IfStatement","src":"7156:28:1","trueBody":{"expression":{"components":[{"hexValue":"66616c7365","id":915,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"7175:5:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"30","id":916,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7182:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":917,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"7174:10:1","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":905,"id":918,"nodeType":"Return","src":"7167:17:1"}},{"expression":{"components":[{"hexValue":"74727565","id":920,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"7207:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"id":921,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":907,"src":"7213:1:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":922,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7206:9:1","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"functionReturnParameters":905,"id":923,"nodeType":"Return","src":"7199:16:1"}]}]},"documentation":{"id":895,"nodeType":"StructuredDocumentation","src":"6846:135:1","text":" @dev Returns the addition of two unsigned integers, with an overflow flag.\n _Available since v3.4._"},"id":926,"implemented":true,"kind":"function","modifiers":[],"name":"tryAdd","nameLocation":"6996:6:1","nodeType":"FunctionDefinition","parameters":{"id":900,"nodeType":"ParameterList","parameters":[{"constant":false,"id":897,"mutability":"mutable","name":"a","nameLocation":"7021:1:1","nodeType":"VariableDeclaration","scope":926,"src":"7013:9:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":896,"name":"uint256","nodeType":"ElementaryTypeName","src":"7013:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":899,"mutability":"mutable","name":"b","nameLocation":"7041:1:1","nodeType":"VariableDeclaration","scope":926,"src":"7033:9:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":898,"name":"uint256","nodeType":"ElementaryTypeName","src":"7033:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7002:47:1"},"returnParameters":{"id":905,"nodeType":"ParameterList","parameters":[{"constant":false,"id":902,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":926,"src":"7073:4:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":901,"name":"bool","nodeType":"ElementaryTypeName","src":"7073:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":904,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":926,"src":"7079:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":903,"name":"uint256","nodeType":"ElementaryTypeName","src":"7079:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7072:15:1"},"scope":1203,"src":"6987:247:1","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":953,"nodeType":"Block","src":"7487:118:1","statements":[{"id":952,"nodeType":"UncheckedBlock","src":"7498:100:1","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":940,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":938,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":931,"src":"7527:1:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":939,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":929,"src":"7531:1:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7527:5:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":945,"nodeType":"IfStatement","src":"7523:28:1","trueBody":{"expression":{"components":[{"hexValue":"66616c7365","id":941,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"7542:5:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"30","id":942,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7549:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":943,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"7541:10:1","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":937,"id":944,"nodeType":"Return","src":"7534:17:1"}},{"expression":{"components":[{"hexValue":"74727565","id":946,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"7574:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":949,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":947,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":929,"src":"7580:1:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":948,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":931,"src":"7584:1:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7580:5:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":950,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7573:13:1","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"functionReturnParameters":937,"id":951,"nodeType":"Return","src":"7566:20:1"}]}]},"documentation":{"id":927,"nodeType":"StructuredDocumentation","src":"7242:138:1","text":" @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n _Available since v3.4._"},"id":954,"implemented":true,"kind":"function","modifiers":[],"name":"trySub","nameLocation":"7395:6:1","nodeType":"FunctionDefinition","parameters":{"id":932,"nodeType":"ParameterList","parameters":[{"constant":false,"id":929,"mutability":"mutable","name":"a","nameLocation":"7420:1:1","nodeType":"VariableDeclaration","scope":954,"src":"7412:9:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":928,"name":"uint256","nodeType":"ElementaryTypeName","src":"7412:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":931,"mutability":"mutable","name":"b","nameLocation":"7440:1:1","nodeType":"VariableDeclaration","scope":954,"src":"7432:9:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":930,"name":"uint256","nodeType":"ElementaryTypeName","src":"7432:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7401:47:1"},"returnParameters":{"id":937,"nodeType":"ParameterList","parameters":[{"constant":false,"id":934,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":954,"src":"7472:4:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":933,"name":"bool","nodeType":"ElementaryTypeName","src":"7472:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":936,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":954,"src":"7478:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":935,"name":"uint256","nodeType":"ElementaryTypeName","src":"7478:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7471:15:1"},"scope":1203,"src":"7386:219:1","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":995,"nodeType":"Block","src":"7861:427:1","statements":[{"id":994,"nodeType":"UncheckedBlock","src":"7872:409:1","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":968,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":966,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":957,"src":"8134:1:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":967,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8139:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8134:6:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":973,"nodeType":"IfStatement","src":"8130:28:1","trueBody":{"expression":{"components":[{"hexValue":"74727565","id":969,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"8150:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"hexValue":"30","id":970,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8156:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":971,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"8149:9:1","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":965,"id":972,"nodeType":"Return","src":"8142:16:1"}},{"assignments":[975],"declarations":[{"constant":false,"id":975,"mutability":"mutable","name":"c","nameLocation":"8181:1:1","nodeType":"VariableDeclaration","scope":994,"src":"8173:9:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":974,"name":"uint256","nodeType":"ElementaryTypeName","src":"8173:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":979,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":978,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":976,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":957,"src":"8185:1:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":977,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":959,"src":"8189:1:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8185:5:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"8173:17:1"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":984,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":982,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":980,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":975,"src":"8209:1:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":981,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":957,"src":"8213:1:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8209:5:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":983,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":959,"src":"8218:1:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8209:10:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":989,"nodeType":"IfStatement","src":"8205:33:1","trueBody":{"expression":{"components":[{"hexValue":"66616c7365","id":985,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"8229:5:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"30","id":986,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8236:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":987,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"8228:10:1","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":965,"id":988,"nodeType":"Return","src":"8221:17:1"}},{"expression":{"components":[{"hexValue":"74727565","id":990,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"8261:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"id":991,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":975,"src":"8267:1:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":992,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"8260:9:1","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"functionReturnParameters":965,"id":993,"nodeType":"Return","src":"8253:16:1"}]}]},"documentation":{"id":955,"nodeType":"StructuredDocumentation","src":"7613:141:1","text":" @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n _Available since v3.4._"},"id":996,"implemented":true,"kind":"function","modifiers":[],"name":"tryMul","nameLocation":"7769:6:1","nodeType":"FunctionDefinition","parameters":{"id":960,"nodeType":"ParameterList","parameters":[{"constant":false,"id":957,"mutability":"mutable","name":"a","nameLocation":"7794:1:1","nodeType":"VariableDeclaration","scope":996,"src":"7786:9:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":956,"name":"uint256","nodeType":"ElementaryTypeName","src":"7786:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":959,"mutability":"mutable","name":"b","nameLocation":"7814:1:1","nodeType":"VariableDeclaration","scope":996,"src":"7806:9:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":958,"name":"uint256","nodeType":"ElementaryTypeName","src":"7806:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7775:47:1"},"returnParameters":{"id":965,"nodeType":"ParameterList","parameters":[{"constant":false,"id":962,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":996,"src":"7846:4:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":961,"name":"bool","nodeType":"ElementaryTypeName","src":"7846:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":964,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":996,"src":"7852:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":963,"name":"uint256","nodeType":"ElementaryTypeName","src":"7852:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7845:15:1"},"scope":1203,"src":"7760:528:1","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1023,"nodeType":"Block","src":"8545:119:1","statements":[{"id":1022,"nodeType":"UncheckedBlock","src":"8556:101:1","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1010,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1008,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1001,"src":"8585:1:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1009,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8590:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8585:6:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1015,"nodeType":"IfStatement","src":"8581:29:1","trueBody":{"expression":{"components":[{"hexValue":"66616c7365","id":1011,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"8601:5:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"30","id":1012,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8608:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":1013,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"8600:10:1","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":1007,"id":1014,"nodeType":"Return","src":"8593:17:1"}},{"expression":{"components":[{"hexValue":"74727565","id":1016,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"8633:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1019,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1017,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":999,"src":"8639:1:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":1018,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1001,"src":"8643:1:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8639:5:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1020,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"8632:13:1","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"functionReturnParameters":1007,"id":1021,"nodeType":"Return","src":"8625:20:1"}]}]},"documentation":{"id":997,"nodeType":"StructuredDocumentation","src":"8296:142:1","text":" @dev Returns the division of two unsigned integers, with a division by zero flag.\n _Available since v3.4._"},"id":1024,"implemented":true,"kind":"function","modifiers":[],"name":"tryDiv","nameLocation":"8453:6:1","nodeType":"FunctionDefinition","parameters":{"id":1002,"nodeType":"ParameterList","parameters":[{"constant":false,"id":999,"mutability":"mutable","name":"a","nameLocation":"8478:1:1","nodeType":"VariableDeclaration","scope":1024,"src":"8470:9:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":998,"name":"uint256","nodeType":"ElementaryTypeName","src":"8470:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1001,"mutability":"mutable","name":"b","nameLocation":"8498:1:1","nodeType":"VariableDeclaration","scope":1024,"src":"8490:9:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1000,"name":"uint256","nodeType":"ElementaryTypeName","src":"8490:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8459:47:1"},"returnParameters":{"id":1007,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1004,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1024,"src":"8530:4:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1003,"name":"bool","nodeType":"ElementaryTypeName","src":"8530:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1006,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1024,"src":"8536:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1005,"name":"uint256","nodeType":"ElementaryTypeName","src":"8536:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8529:15:1"},"scope":1203,"src":"8444:220:1","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1051,"nodeType":"Block","src":"8931:119:1","statements":[{"id":1050,"nodeType":"UncheckedBlock","src":"8942:101:1","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1038,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1036,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1029,"src":"8971:1:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1037,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8976:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8971:6:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1043,"nodeType":"IfStatement","src":"8967:29:1","trueBody":{"expression":{"components":[{"hexValue":"66616c7365","id":1039,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"8987:5:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"30","id":1040,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8994:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":1041,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"8986:10:1","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":1035,"id":1042,"nodeType":"Return","src":"8979:17:1"}},{"expression":{"components":[{"hexValue":"74727565","id":1044,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"9019:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1047,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1045,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1027,"src":"9025:1:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"%","rightExpression":{"id":1046,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1029,"src":"9029:1:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9025:5:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1048,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"9018:13:1","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"functionReturnParameters":1035,"id":1049,"nodeType":"Return","src":"9011:20:1"}]}]},"documentation":{"id":1025,"nodeType":"StructuredDocumentation","src":"8672:152:1","text":" @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n _Available since v3.4._"},"id":1052,"implemented":true,"kind":"function","modifiers":[],"name":"tryMod","nameLocation":"8839:6:1","nodeType":"FunctionDefinition","parameters":{"id":1030,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1027,"mutability":"mutable","name":"a","nameLocation":"8864:1:1","nodeType":"VariableDeclaration","scope":1052,"src":"8856:9:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1026,"name":"uint256","nodeType":"ElementaryTypeName","src":"8856:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1029,"mutability":"mutable","name":"b","nameLocation":"8884:1:1","nodeType":"VariableDeclaration","scope":1052,"src":"8876:9:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1028,"name":"uint256","nodeType":"ElementaryTypeName","src":"8876:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8845:47:1"},"returnParameters":{"id":1035,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1032,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1052,"src":"8916:4:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1031,"name":"bool","nodeType":"ElementaryTypeName","src":"8916:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1034,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1052,"src":"8922:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1033,"name":"uint256","nodeType":"ElementaryTypeName","src":"8922:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8915:15:1"},"scope":1203,"src":"8830:220:1","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1066,"nodeType":"Block","src":"9364:31:1","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1064,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1062,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1055,"src":"9382:1:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":1063,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1057,"src":"9386:1:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9382:5:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1061,"id":1065,"nodeType":"Return","src":"9375:12:1"}]},"documentation":{"id":1053,"nodeType":"StructuredDocumentation","src":"9058:233:1","text":" @dev Returns the addition of two unsigned integers, reverting on\n overflow.\n Counterpart to Solidity's `+` operator.\n Requirements:\n - Addition cannot overflow."},"id":1067,"implemented":true,"kind":"function","modifiers":[],"name":"add","nameLocation":"9306:3:1","nodeType":"FunctionDefinition","parameters":{"id":1058,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1055,"mutability":"mutable","name":"a","nameLocation":"9318:1:1","nodeType":"VariableDeclaration","scope":1067,"src":"9310:9:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1054,"name":"uint256","nodeType":"ElementaryTypeName","src":"9310:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1057,"mutability":"mutable","name":"b","nameLocation":"9329:1:1","nodeType":"VariableDeclaration","scope":1067,"src":"9321:9:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1056,"name":"uint256","nodeType":"ElementaryTypeName","src":"9321:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9309:22:1"},"returnParameters":{"id":1061,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1060,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1067,"src":"9355:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1059,"name":"uint256","nodeType":"ElementaryTypeName","src":"9355:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9354:9:1"},"scope":1203,"src":"9297:98:1","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1081,"nodeType":"Block","src":"9745:31:1","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1079,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1077,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1070,"src":"9763:1:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":1078,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1072,"src":"9767:1:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9763:5:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1076,"id":1080,"nodeType":"Return","src":"9756:12:1"}]},"documentation":{"id":1068,"nodeType":"StructuredDocumentation","src":"9403:269:1","text":" @dev Returns the subtraction of two unsigned integers, reverting on\n overflow (when the result is negative).\n Counterpart to Solidity's `-` operator.\n Requirements:\n - Subtraction cannot overflow."},"id":1082,"implemented":true,"kind":"function","modifiers":[],"name":"sub","nameLocation":"9687:3:1","nodeType":"FunctionDefinition","parameters":{"id":1073,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1070,"mutability":"mutable","name":"a","nameLocation":"9699:1:1","nodeType":"VariableDeclaration","scope":1082,"src":"9691:9:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1069,"name":"uint256","nodeType":"ElementaryTypeName","src":"9691:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1072,"mutability":"mutable","name":"b","nameLocation":"9710:1:1","nodeType":"VariableDeclaration","scope":1082,"src":"9702:9:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1071,"name":"uint256","nodeType":"ElementaryTypeName","src":"9702:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9690:22:1"},"returnParameters":{"id":1076,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1075,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1082,"src":"9736:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1074,"name":"uint256","nodeType":"ElementaryTypeName","src":"9736:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9735:9:1"},"scope":1203,"src":"9678:98:1","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1096,"nodeType":"Block","src":"10102:31:1","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1094,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1092,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1085,"src":"10120:1:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1093,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1087,"src":"10124:1:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10120:5:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1091,"id":1095,"nodeType":"Return","src":"10113:12:1"}]},"documentation":{"id":1083,"nodeType":"StructuredDocumentation","src":"9784:245:1","text":" @dev Returns the multiplication of two unsigned integers, reverting on\n overflow.\n Counterpart to Solidity's `*` operator.\n Requirements:\n - Multiplication cannot overflow."},"id":1097,"implemented":true,"kind":"function","modifiers":[],"name":"mul","nameLocation":"10044:3:1","nodeType":"FunctionDefinition","parameters":{"id":1088,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1085,"mutability":"mutable","name":"a","nameLocation":"10056:1:1","nodeType":"VariableDeclaration","scope":1097,"src":"10048:9:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1084,"name":"uint256","nodeType":"ElementaryTypeName","src":"10048:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1087,"mutability":"mutable","name":"b","nameLocation":"10067:1:1","nodeType":"VariableDeclaration","scope":1097,"src":"10059:9:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1086,"name":"uint256","nodeType":"ElementaryTypeName","src":"10059:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10047:22:1"},"returnParameters":{"id":1091,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1090,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1097,"src":"10093:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1089,"name":"uint256","nodeType":"ElementaryTypeName","src":"10093:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10092:9:1"},"scope":1203,"src":"10035:98:1","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1111,"nodeType":"Block","src":"10501:31:1","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1109,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1107,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1100,"src":"10519:1:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":1108,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1102,"src":"10523:1:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10519:5:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1106,"id":1110,"nodeType":"Return","src":"10512:12:1"}]},"documentation":{"id":1098,"nodeType":"StructuredDocumentation","src":"10141:287:1","text":" @dev Returns the integer division of two unsigned integers, reverting on\n division by zero. The result is rounded towards zero.\n Counterpart to Solidity's `/` operator.\n Requirements:\n - The divisor cannot be zero."},"id":1112,"implemented":true,"kind":"function","modifiers":[],"name":"div","nameLocation":"10443:3:1","nodeType":"FunctionDefinition","parameters":{"id":1103,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1100,"mutability":"mutable","name":"a","nameLocation":"10455:1:1","nodeType":"VariableDeclaration","scope":1112,"src":"10447:9:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1099,"name":"uint256","nodeType":"ElementaryTypeName","src":"10447:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1102,"mutability":"mutable","name":"b","nameLocation":"10466:1:1","nodeType":"VariableDeclaration","scope":1112,"src":"10458:9:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1101,"name":"uint256","nodeType":"ElementaryTypeName","src":"10458:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10446:22:1"},"returnParameters":{"id":1106,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1105,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1112,"src":"10492:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1104,"name":"uint256","nodeType":"ElementaryTypeName","src":"10492:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10491:9:1"},"scope":1203,"src":"10434:98:1","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1126,"nodeType":"Block","src":"11066:31:1","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1124,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1122,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1115,"src":"11084:1:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"%","rightExpression":{"id":1123,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1117,"src":"11088:1:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11084:5:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1121,"id":1125,"nodeType":"Return","src":"11077:12:1"}]},"documentation":{"id":1113,"nodeType":"StructuredDocumentation","src":"10540:453:1","text":" @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n reverting when dividing by zero.\n Counterpart to Solidity's `%` operator. This function uses a `revert`\n opcode (which leaves remaining gas untouched) while Solidity uses an\n invalid opcode to revert (consuming all remaining gas).\n Requirements:\n - The divisor cannot be zero."},"id":1127,"implemented":true,"kind":"function","modifiers":[],"name":"mod","nameLocation":"11008:3:1","nodeType":"FunctionDefinition","parameters":{"id":1118,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1115,"mutability":"mutable","name":"a","nameLocation":"11020:1:1","nodeType":"VariableDeclaration","scope":1127,"src":"11012:9:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1114,"name":"uint256","nodeType":"ElementaryTypeName","src":"11012:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1117,"mutability":"mutable","name":"b","nameLocation":"11031:1:1","nodeType":"VariableDeclaration","scope":1127,"src":"11023:9:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1116,"name":"uint256","nodeType":"ElementaryTypeName","src":"11023:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11011:22:1"},"returnParameters":{"id":1121,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1120,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1127,"src":"11057:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1119,"name":"uint256","nodeType":"ElementaryTypeName","src":"11057:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11056:9:1"},"scope":1203,"src":"10999:98:1","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1151,"nodeType":"Block","src":"11705:111:1","statements":[{"id":1150,"nodeType":"UncheckedBlock","src":"11716:93:1","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1142,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1140,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1132,"src":"11749:1:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"id":1141,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1130,"src":"11754:1:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11749:6:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":1143,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1134,"src":"11757:12:1","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1139,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"11741:7:1","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1144,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"11741:29:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1145,"nodeType":"ExpressionStatement","src":"11741:29:1"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1148,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1146,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1130,"src":"11792:1:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":1147,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1132,"src":"11796:1:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11792:5:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1138,"id":1149,"nodeType":"Return","src":"11785:12:1"}]}]},"documentation":{"id":1128,"nodeType":"StructuredDocumentation","src":"11105:465:1","text":" @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n overflow (when the result is negative).\n CAUTION: This function is deprecated because it requires allocating memory for the error\n message unnecessarily. For custom revert reasons use {trySub}.\n Counterpart to Solidity's `-` operator.\n Requirements:\n - Subtraction cannot overflow."},"id":1152,"implemented":true,"kind":"function","modifiers":[],"name":"sub","nameLocation":"11585:3:1","nodeType":"FunctionDefinition","parameters":{"id":1135,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1130,"mutability":"mutable","name":"a","nameLocation":"11607:1:1","nodeType":"VariableDeclaration","scope":1152,"src":"11599:9:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1129,"name":"uint256","nodeType":"ElementaryTypeName","src":"11599:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1132,"mutability":"mutable","name":"b","nameLocation":"11627:1:1","nodeType":"VariableDeclaration","scope":1152,"src":"11619:9:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1131,"name":"uint256","nodeType":"ElementaryTypeName","src":"11619:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1134,"mutability":"mutable","name":"errorMessage","nameLocation":"11653:12:1","nodeType":"VariableDeclaration","scope":1152,"src":"11639:26:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1133,"name":"string","nodeType":"ElementaryTypeName","src":"11639:6:1","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"11588:84:1"},"returnParameters":{"id":1138,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1137,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1152,"src":"11696:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1136,"name":"uint256","nodeType":"ElementaryTypeName","src":"11696:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11695:9:1"},"scope":1203,"src":"11576:240:1","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1176,"nodeType":"Block","src":"12443:110:1","statements":[{"id":1175,"nodeType":"UncheckedBlock","src":"12454:92:1","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1167,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1165,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1157,"src":"12487:1:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1166,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12491:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"12487:5:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":1168,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1159,"src":"12494:12:1","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1164,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"12479:7:1","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1169,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"12479:28:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1170,"nodeType":"ExpressionStatement","src":"12479:28:1"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1173,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1171,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1155,"src":"12529:1:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":1172,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1157,"src":"12533:1:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12529:5:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1163,"id":1174,"nodeType":"Return","src":"12522:12:1"}]}]},"documentation":{"id":1153,"nodeType":"StructuredDocumentation","src":"11824:484:1","text":" @dev Returns the integer division of two unsigned integers, reverting with custom message on\n division by zero. The result is rounded towards zero.\n Counterpart to Solidity's `/` operator. Note: this function uses a\n `revert` opcode (which leaves remaining gas untouched) while Solidity\n uses an invalid opcode to revert (consuming all remaining gas).\n Requirements:\n - The divisor cannot be zero."},"id":1177,"implemented":true,"kind":"function","modifiers":[],"name":"div","nameLocation":"12323:3:1","nodeType":"FunctionDefinition","parameters":{"id":1160,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1155,"mutability":"mutable","name":"a","nameLocation":"12345:1:1","nodeType":"VariableDeclaration","scope":1177,"src":"12337:9:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1154,"name":"uint256","nodeType":"ElementaryTypeName","src":"12337:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1157,"mutability":"mutable","name":"b","nameLocation":"12365:1:1","nodeType":"VariableDeclaration","scope":1177,"src":"12357:9:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1156,"name":"uint256","nodeType":"ElementaryTypeName","src":"12357:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1159,"mutability":"mutable","name":"errorMessage","nameLocation":"12391:12:1","nodeType":"VariableDeclaration","scope":1177,"src":"12377:26:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1158,"name":"string","nodeType":"ElementaryTypeName","src":"12377:6:1","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"12326:84:1"},"returnParameters":{"id":1163,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1162,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1177,"src":"12434:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1161,"name":"uint256","nodeType":"ElementaryTypeName","src":"12434:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12433:9:1"},"scope":1203,"src":"12314:239:1","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1201,"nodeType":"Block","src":"13345:110:1","statements":[{"id":1200,"nodeType":"UncheckedBlock","src":"13356:92:1","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1192,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1190,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1182,"src":"13389:1:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1191,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13393:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"13389:5:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":1193,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1184,"src":"13396:12:1","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1189,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"13381:7:1","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1194,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"13381:28:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1195,"nodeType":"ExpressionStatement","src":"13381:28:1"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1198,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1196,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1180,"src":"13431:1:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"%","rightExpression":{"id":1197,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1182,"src":"13435:1:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"13431:5:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1188,"id":1199,"nodeType":"Return","src":"13424:12:1"}]}]},"documentation":{"id":1178,"nodeType":"StructuredDocumentation","src":"12561:649:1","text":" @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n reverting with custom message when dividing by zero.\n CAUTION: This function is deprecated because it requires allocating memory for the error\n message unnecessarily. For custom revert reasons use {tryMod}.\n Counterpart to Solidity's `%` operator. This function uses a `revert`\n opcode (which leaves remaining gas untouched) while Solidity uses an\n invalid opcode to revert (consuming all remaining gas).\n Requirements:\n - The divisor cannot be zero."},"id":1202,"implemented":true,"kind":"function","modifiers":[],"name":"mod","nameLocation":"13225:3:1","nodeType":"FunctionDefinition","parameters":{"id":1185,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1180,"mutability":"mutable","name":"a","nameLocation":"13247:1:1","nodeType":"VariableDeclaration","scope":1202,"src":"13239:9:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1179,"name":"uint256","nodeType":"ElementaryTypeName","src":"13239:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1182,"mutability":"mutable","name":"b","nameLocation":"13267:1:1","nodeType":"VariableDeclaration","scope":1202,"src":"13259:9:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1181,"name":"uint256","nodeType":"ElementaryTypeName","src":"13259:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1184,"mutability":"mutable","name":"errorMessage","nameLocation":"13293:12:1","nodeType":"VariableDeclaration","scope":1202,"src":"13279:26:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1183,"name":"string","nodeType":"ElementaryTypeName","src":"13279:6:1","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"13228:84:1"},"returnParameters":{"id":1188,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1187,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1202,"src":"13336:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1186,"name":"uint256","nodeType":"ElementaryTypeName","src":"13336:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"13335:9:1"},"scope":1203,"src":"13216:239:1","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":2845,"src":"6822:6636:1","usedErrors":[]},{"id":1204,"literals":["solidity","^","0.8",".1"],"nodeType":"PragmaDirective","src":"13593:23:1"},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"library","documentation":{"id":1205,"nodeType":"StructuredDocumentation","src":"13620:69:1","text":" @dev Collection of functions related to the address type"},"fullyImplemented":true,"id":1497,"linearizedBaseContracts":[1497],"name":"Address","nameLocation":"13699:7:1","nodeType":"ContractDefinition","nodes":[{"body":{"id":1219,"nodeType":"Block","src":"14765:260:1","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1217,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"id":1213,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1208,"src":"14994:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1214,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"code","nodeType":"MemberAccess","src":"14994:12:1","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1215,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"14994:19:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1216,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"15016:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"14994:23:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1212,"id":1218,"nodeType":"Return","src":"14987:30:1"}]},"documentation":{"id":1206,"nodeType":"StructuredDocumentation","src":"13714:979:1","text":" @dev Returns true if `account` is a contract.\n [IMPORTANT]\n ====\n It is unsafe to assume that an address for which this function returns\n false is an externally-owned account (EOA) and not a contract.\n Among others, `isContract` will return false for the following\n types of addresses:\n  - an externally-owned account\n  - a contract in construction\n  - an address where a contract will be created\n  - an address where a contract lived, but was destroyed\n ====\n [IMPORTANT]\n ====\n You shouldn't rely on `isContract` to protect against flash loan attacks!\n Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n constructor.\n ===="},"id":1220,"implemented":true,"kind":"function","modifiers":[],"name":"isContract","nameLocation":"14708:10:1","nodeType":"FunctionDefinition","parameters":{"id":1209,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1208,"mutability":"mutable","name":"account","nameLocation":"14727:7:1","nodeType":"VariableDeclaration","scope":1220,"src":"14719:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1207,"name":"address","nodeType":"ElementaryTypeName","src":"14719:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"14718:17:1"},"returnParameters":{"id":1212,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1211,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1220,"src":"14759:4:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1210,"name":"bool","nodeType":"ElementaryTypeName","src":"14759:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"14758:6:1"},"scope":1497,"src":"14699:326:1","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1253,"nodeType":"Block","src":"16031:320:1","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1235,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":1231,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"16072:4:1","typeDescriptions":{"typeIdentifier":"t_contract$_Address_$1497","typeString":"library Address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Address_$1497","typeString":"library Address"}],"id":1230,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"16064:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1229,"name":"address","nodeType":"ElementaryTypeName","src":"16064:7:1","typeDescriptions":{}}},"id":1232,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"16064:13:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1233,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"balance","nodeType":"MemberAccess","src":"16064:21:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":1234,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1225,"src":"16089:6:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"16064:31:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20696e73756666696369656e742062616c616e6365","id":1236,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"16110:31:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9","typeString":"literal_string \"Address: insufficient balance\""},"value":"Address: insufficient balance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9","typeString":"literal_string \"Address: insufficient balance\""}],"id":1228,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"16042:7:1","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1237,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"16042:110:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1238,"nodeType":"ExpressionStatement","src":"16042:110:1"},{"assignments":[1240,null],"declarations":[{"constant":false,"id":1240,"mutability":"mutable","name":"success","nameLocation":"16171:7:1","nodeType":"VariableDeclaration","scope":1253,"src":"16166:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1239,"name":"bool","nodeType":"ElementaryTypeName","src":"16166:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},null],"id":1247,"initialValue":{"arguments":[{"hexValue":"","id":1245,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"16214:2:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"id":1241,"name":"recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1223,"src":"16184:9:1","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":1242,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"call","nodeType":"MemberAccess","src":"16184:14:1","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":1244,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":1243,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1225,"src":"16206:6:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"16184:29:1","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":1246,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"16184:33:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"16165:52:1"},{"expression":{"arguments":[{"id":1249,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1240,"src":"16250:7:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20756e61626c6520746f2073656e642076616c75652c20726563697069656e74206d61792068617665207265766572746564","id":1250,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"16272:60:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae","typeString":"literal_string \"Address: unable to send value, recipient may have reverted\""},"value":"Address: unable to send value, recipient may have reverted"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae","typeString":"literal_string \"Address: unable to send value, recipient may have reverted\""}],"id":1248,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"16228:7:1","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1251,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"16228:115:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1252,"nodeType":"ExpressionStatement","src":"16228:115:1"}]},"documentation":{"id":1221,"nodeType":"StructuredDocumentation","src":"15033:921:1","text":" @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n `recipient`, forwarding all available gas and reverting on errors.\n https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n of certain opcodes, possibly making contracts go over the 2300 gas limit\n imposed by `transfer`, making them unable to receive funds via\n `transfer`. {sendValue} removes this limitation.\n https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n IMPORTANT: because control is transferred to `recipient`, care must be\n taken to not create reentrancy vulnerabilities. Consider using\n {ReentrancyGuard} or the\n https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern]."},"id":1254,"implemented":true,"kind":"function","modifiers":[],"name":"sendValue","nameLocation":"15969:9:1","nodeType":"FunctionDefinition","parameters":{"id":1226,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1223,"mutability":"mutable","name":"recipient","nameLocation":"15995:9:1","nodeType":"VariableDeclaration","scope":1254,"src":"15979:25:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":1222,"name":"address","nodeType":"ElementaryTypeName","src":"15979:15:1","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"},{"constant":false,"id":1225,"mutability":"mutable","name":"amount","nameLocation":"16014:6:1","nodeType":"VariableDeclaration","scope":1254,"src":"16006:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1224,"name":"uint256","nodeType":"ElementaryTypeName","src":"16006:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"15978:43:1"},"returnParameters":{"id":1227,"nodeType":"ParameterList","parameters":[],"src":"16031:0:1"},"scope":1497,"src":"15960:391:1","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1270,"nodeType":"Block","src":"17227:86:1","statements":[{"expression":{"arguments":[{"id":1265,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1257,"src":"17258:6:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1266,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1259,"src":"17266:4:1","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"416464726573733a206c6f772d6c6576656c2063616c6c206661696c6564","id":1267,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"17272:32:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df","typeString":"literal_string \"Address: low-level call failed\""},"value":"Address: low-level call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df","typeString":"literal_string \"Address: low-level call failed\""}],"id":1264,"name":"functionCall","nodeType":"Identifier","overloadedDeclarations":[1271,1291],"referencedDeclaration":1291,"src":"17245:12:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,string memory) returns (bytes memory)"}},"id":1268,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"17245:60:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1263,"id":1269,"nodeType":"Return","src":"17238:67:1"}]},"documentation":{"id":1255,"nodeType":"StructuredDocumentation","src":"16359:748:1","text":" @dev Performs a Solidity function call using a low level `call`. A\n plain `call` is an unsafe replacement for a function call: use this\n function instead.\n If `target` reverts with a revert reason, it is bubbled up by this\n function (like regular Solidity function calls).\n Returns the raw returned data. To convert to the expected return value,\n use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n Requirements:\n - `target` must be a contract.\n - calling `target` with `data` must not revert.\n _Available since v3.1._"},"id":1271,"implemented":true,"kind":"function","modifiers":[],"name":"functionCall","nameLocation":"17122:12:1","nodeType":"FunctionDefinition","parameters":{"id":1260,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1257,"mutability":"mutable","name":"target","nameLocation":"17153:6:1","nodeType":"VariableDeclaration","scope":1271,"src":"17145:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1256,"name":"address","nodeType":"ElementaryTypeName","src":"17145:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1259,"mutability":"mutable","name":"data","nameLocation":"17183:4:1","nodeType":"VariableDeclaration","scope":1271,"src":"17170:17:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1258,"name":"bytes","nodeType":"ElementaryTypeName","src":"17170:5:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"17134:60:1"},"returnParameters":{"id":1263,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1262,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1271,"src":"17213:12:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1261,"name":"bytes","nodeType":"ElementaryTypeName","src":"17213:5:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"17212:14:1"},"scope":1497,"src":"17113:200:1","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1290,"nodeType":"Block","src":"17694:78:1","statements":[{"expression":{"arguments":[{"id":1284,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1274,"src":"17734:6:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1285,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1276,"src":"17742:4:1","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"30","id":1286,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"17748:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"id":1287,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1278,"src":"17751:12:1","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1283,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[1311,1361],"referencedDeclaration":1361,"src":"17712:21:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":1288,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"17712:52:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1282,"id":1289,"nodeType":"Return","src":"17705:59:1"}]},"documentation":{"id":1272,"nodeType":"StructuredDocumentation","src":"17321:216:1","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"},"id":1291,"implemented":true,"kind":"function","modifiers":[],"name":"functionCall","nameLocation":"17552:12:1","nodeType":"FunctionDefinition","parameters":{"id":1279,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1274,"mutability":"mutable","name":"target","nameLocation":"17583:6:1","nodeType":"VariableDeclaration","scope":1291,"src":"17575:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1273,"name":"address","nodeType":"ElementaryTypeName","src":"17575:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1276,"mutability":"mutable","name":"data","nameLocation":"17613:4:1","nodeType":"VariableDeclaration","scope":1291,"src":"17600:17:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1275,"name":"bytes","nodeType":"ElementaryTypeName","src":"17600:5:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1278,"mutability":"mutable","name":"errorMessage","nameLocation":"17642:12:1","nodeType":"VariableDeclaration","scope":1291,"src":"17628:26:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1277,"name":"string","nodeType":"ElementaryTypeName","src":"17628:6:1","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"17564:97:1"},"returnParameters":{"id":1282,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1281,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1291,"src":"17680:12:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1280,"name":"bytes","nodeType":"ElementaryTypeName","src":"17680:5:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"17679:14:1"},"scope":1497,"src":"17543:229:1","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1310,"nodeType":"Block","src":"18294:209:1","statements":[{"expression":{"arguments":[{"id":1304,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1294,"src":"18365:6:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1305,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1296,"src":"18390:4:1","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1306,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1298,"src":"18413:5:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"416464726573733a206c6f772d6c6576656c2063616c6c20776974682076616c7565206661696c6564","id":1307,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"18437:43:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc","typeString":"literal_string \"Address: low-level call with value failed\""},"value":"Address: low-level call with value failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc","typeString":"literal_string \"Address: low-level call with value failed\""}],"id":1303,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[1311,1361],"referencedDeclaration":1361,"src":"18325:21:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":1308,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"18325:170:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1302,"id":1309,"nodeType":"Return","src":"18305:190:1"}]},"documentation":{"id":1292,"nodeType":"StructuredDocumentation","src":"17780:361:1","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but also transferring `value` wei to `target`.\n Requirements:\n - the calling contract must have an ETH balance of at least `value`.\n - the called Solidity function must be `payable`.\n _Available since v3.1._"},"id":1311,"implemented":true,"kind":"function","modifiers":[],"name":"functionCallWithValue","nameLocation":"18156:21:1","nodeType":"FunctionDefinition","parameters":{"id":1299,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1294,"mutability":"mutable","name":"target","nameLocation":"18196:6:1","nodeType":"VariableDeclaration","scope":1311,"src":"18188:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1293,"name":"address","nodeType":"ElementaryTypeName","src":"18188:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1296,"mutability":"mutable","name":"data","nameLocation":"18226:4:1","nodeType":"VariableDeclaration","scope":1311,"src":"18213:17:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1295,"name":"bytes","nodeType":"ElementaryTypeName","src":"18213:5:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1298,"mutability":"mutable","name":"value","nameLocation":"18249:5:1","nodeType":"VariableDeclaration","scope":1311,"src":"18241:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1297,"name":"uint256","nodeType":"ElementaryTypeName","src":"18241:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"18177:84:1"},"returnParameters":{"id":1302,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1301,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1311,"src":"18280:12:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1300,"name":"bytes","nodeType":"ElementaryTypeName","src":"18280:5:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"18279:14:1"},"scope":1497,"src":"18147:356:1","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1360,"nodeType":"Block","src":"18943:387:1","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1332,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":1328,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"18984:4:1","typeDescriptions":{"typeIdentifier":"t_contract$_Address_$1497","typeString":"library Address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Address_$1497","typeString":"library Address"}],"id":1327,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"18976:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1326,"name":"address","nodeType":"ElementaryTypeName","src":"18976:7:1","typeDescriptions":{}}},"id":1329,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"18976:13:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1330,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"balance","nodeType":"MemberAccess","src":"18976:21:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":1331,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1318,"src":"19001:5:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"18976:30:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c","id":1333,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"19021:40:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c","typeString":"literal_string \"Address: insufficient balance for call\""},"value":"Address: insufficient balance for call"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c","typeString":"literal_string \"Address: insufficient balance for call\""}],"id":1325,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"18954:7:1","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1334,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"18954:118:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1335,"nodeType":"ExpressionStatement","src":"18954:118:1"},{"expression":{"arguments":[{"arguments":[{"id":1338,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1314,"src":"19102:6:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1337,"name":"isContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1220,"src":"19091:10:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":1339,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"19091:18:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374","id":1340,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"19111:31:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad","typeString":"literal_string \"Address: call to non-contract\""},"value":"Address: call to non-contract"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad","typeString":"literal_string \"Address: call to non-contract\""}],"id":1336,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"19083:7:1","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1341,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"19083:60:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1342,"nodeType":"ExpressionStatement","src":"19083:60:1"},{"assignments":[1344,1346],"declarations":[{"constant":false,"id":1344,"mutability":"mutable","name":"success","nameLocation":"19162:7:1","nodeType":"VariableDeclaration","scope":1360,"src":"19157:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1343,"name":"bool","nodeType":"ElementaryTypeName","src":"19157:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1346,"mutability":"mutable","name":"returndata","nameLocation":"19184:10:1","nodeType":"VariableDeclaration","scope":1360,"src":"19171:23:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1345,"name":"bytes","nodeType":"ElementaryTypeName","src":"19171:5:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":1353,"initialValue":{"arguments":[{"id":1351,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1316,"src":"19238:4:1","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":1347,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1314,"src":"19198:6:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1348,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"call","nodeType":"MemberAccess","src":"19198:11:1","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":1350,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":1349,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1318,"src":"19217:5:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"19198:25:1","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":1352,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"19198:55:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"19156:97:1"},{"expression":{"arguments":[{"id":1355,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1344,"src":"19288:7:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":1356,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1346,"src":"19297:10:1","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1357,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1320,"src":"19309:12:1","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1354,"name":"verifyCallResult","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1496,"src":"19271:16:1","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (bool,bytes memory,string memory) pure returns (bytes memory)"}},"id":1358,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"19271:51:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1324,"id":1359,"nodeType":"Return","src":"19264:58:1"}]},"documentation":{"id":1312,"nodeType":"StructuredDocumentation","src":"18511:242:1","text":" @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n with `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"},"id":1361,"implemented":true,"kind":"function","modifiers":[],"name":"functionCallWithValue","nameLocation":"18768:21:1","nodeType":"FunctionDefinition","parameters":{"id":1321,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1314,"mutability":"mutable","name":"target","nameLocation":"18808:6:1","nodeType":"VariableDeclaration","scope":1361,"src":"18800:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1313,"name":"address","nodeType":"ElementaryTypeName","src":"18800:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1316,"mutability":"mutable","name":"data","nameLocation":"18838:4:1","nodeType":"VariableDeclaration","scope":1361,"src":"18825:17:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1315,"name":"bytes","nodeType":"ElementaryTypeName","src":"18825:5:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1318,"mutability":"mutable","name":"value","nameLocation":"18861:5:1","nodeType":"VariableDeclaration","scope":1361,"src":"18853:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1317,"name":"uint256","nodeType":"ElementaryTypeName","src":"18853:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1320,"mutability":"mutable","name":"errorMessage","nameLocation":"18891:12:1","nodeType":"VariableDeclaration","scope":1361,"src":"18877:26:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1319,"name":"string","nodeType":"ElementaryTypeName","src":"18877:6:1","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"18789:121:1"},"returnParameters":{"id":1324,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1323,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1361,"src":"18929:12:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1322,"name":"bytes","nodeType":"ElementaryTypeName","src":"18929:5:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"18928:14:1"},"scope":1497,"src":"18759:571:1","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1377,"nodeType":"Block","src":"19640:178:1","statements":[{"expression":{"arguments":[{"id":1372,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1364,"src":"19708:6:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1373,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1366,"src":"19733:4:1","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"416464726573733a206c6f772d6c6576656c207374617469632063616c6c206661696c6564","id":1374,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"19756:39:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0","typeString":"literal_string \"Address: low-level static call failed\""},"value":"Address: low-level static call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0","typeString":"literal_string \"Address: low-level static call failed\""}],"id":1371,"name":"functionStaticCall","nodeType":"Identifier","overloadedDeclarations":[1378,1413],"referencedDeclaration":1413,"src":"19671:18:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,string memory) view returns (bytes memory)"}},"id":1375,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"19671:139:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1370,"id":1376,"nodeType":"Return","src":"19651:159:1"}]},"documentation":{"id":1362,"nodeType":"StructuredDocumentation","src":"19338:171:1","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"},"id":1378,"implemented":true,"kind":"function","modifiers":[],"name":"functionStaticCall","nameLocation":"19524:18:1","nodeType":"FunctionDefinition","parameters":{"id":1367,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1364,"mutability":"mutable","name":"target","nameLocation":"19561:6:1","nodeType":"VariableDeclaration","scope":1378,"src":"19553:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1363,"name":"address","nodeType":"ElementaryTypeName","src":"19553:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1366,"mutability":"mutable","name":"data","nameLocation":"19591:4:1","nodeType":"VariableDeclaration","scope":1378,"src":"19578:17:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1365,"name":"bytes","nodeType":"ElementaryTypeName","src":"19578:5:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"19542:60:1"},"returnParameters":{"id":1370,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1369,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1378,"src":"19626:12:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1368,"name":"bytes","nodeType":"ElementaryTypeName","src":"19626:5:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"19625:14:1"},"scope":1497,"src":"19515:303:1","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1412,"nodeType":"Block","src":"20172:233:1","statements":[{"expression":{"arguments":[{"arguments":[{"id":1392,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1381,"src":"20202:6:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1391,"name":"isContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1220,"src":"20191:10:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":1393,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"20191:18:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a207374617469632063616c6c20746f206e6f6e2d636f6e7472616374","id":1394,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"20211:38:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_c79cc78e4f16ce3933a42b84c73868f93bb4a59c031a0acf576679de98c608a9","typeString":"literal_string \"Address: static call to non-contract\""},"value":"Address: static call to non-contract"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_c79cc78e4f16ce3933a42b84c73868f93bb4a59c031a0acf576679de98c608a9","typeString":"literal_string \"Address: static call to non-contract\""}],"id":1390,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"20183:7:1","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1395,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"20183:67:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1396,"nodeType":"ExpressionStatement","src":"20183:67:1"},{"assignments":[1398,1400],"declarations":[{"constant":false,"id":1398,"mutability":"mutable","name":"success","nameLocation":"20269:7:1","nodeType":"VariableDeclaration","scope":1412,"src":"20264:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1397,"name":"bool","nodeType":"ElementaryTypeName","src":"20264:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1400,"mutability":"mutable","name":"returndata","nameLocation":"20291:10:1","nodeType":"VariableDeclaration","scope":1412,"src":"20278:23:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1399,"name":"bytes","nodeType":"ElementaryTypeName","src":"20278:5:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":1405,"initialValue":{"arguments":[{"id":1403,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1383,"src":"20323:4:1","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":1401,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1381,"src":"20305:6:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1402,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"staticcall","nodeType":"MemberAccess","src":"20305:17:1","typeDescriptions":{"typeIdentifier":"t_function_barestaticcall_view$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) view returns (bool,bytes memory)"}},"id":1404,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"20305:23:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"20263:65:1"},{"expression":{"arguments":[{"id":1407,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1398,"src":"20363:7:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":1408,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1400,"src":"20372:10:1","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1409,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1385,"src":"20384:12:1","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1406,"name":"verifyCallResult","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1496,"src":"20346:16:1","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (bool,bytes memory,string memory) pure returns (bytes memory)"}},"id":1410,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"20346:51:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1389,"id":1411,"nodeType":"Return","src":"20339:58:1"}]},"documentation":{"id":1379,"nodeType":"StructuredDocumentation","src":"19826:178:1","text":" @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"},"id":1413,"implemented":true,"kind":"function","modifiers":[],"name":"functionStaticCall","nameLocation":"20019:18:1","nodeType":"FunctionDefinition","parameters":{"id":1386,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1381,"mutability":"mutable","name":"target","nameLocation":"20056:6:1","nodeType":"VariableDeclaration","scope":1413,"src":"20048:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1380,"name":"address","nodeType":"ElementaryTypeName","src":"20048:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1383,"mutability":"mutable","name":"data","nameLocation":"20086:4:1","nodeType":"VariableDeclaration","scope":1413,"src":"20073:17:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1382,"name":"bytes","nodeType":"ElementaryTypeName","src":"20073:5:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1385,"mutability":"mutable","name":"errorMessage","nameLocation":"20115:12:1","nodeType":"VariableDeclaration","scope":1413,"src":"20101:26:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1384,"name":"string","nodeType":"ElementaryTypeName","src":"20101:6:1","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"20037:97:1"},"returnParameters":{"id":1389,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1388,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1413,"src":"20158:12:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1387,"name":"bytes","nodeType":"ElementaryTypeName","src":"20158:5:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"20157:14:1"},"scope":1497,"src":"20010:395:1","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1429,"nodeType":"Block","src":"20714:182:1","statements":[{"expression":{"arguments":[{"id":1424,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1416,"src":"20784:6:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1425,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1418,"src":"20809:4:1","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564","id":1426,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"20832:41:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398","typeString":"literal_string \"Address: low-level delegate call failed\""},"value":"Address: low-level delegate call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398","typeString":"literal_string \"Address: low-level delegate call failed\""}],"id":1423,"name":"functionDelegateCall","nodeType":"Identifier","overloadedDeclarations":[1430,1465],"referencedDeclaration":1465,"src":"20745:20:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,string memory) returns (bytes memory)"}},"id":1427,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"20745:143:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1422,"id":1428,"nodeType":"Return","src":"20725:163:1"}]},"documentation":{"id":1414,"nodeType":"StructuredDocumentation","src":"20413:173:1","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"},"id":1430,"implemented":true,"kind":"function","modifiers":[],"name":"functionDelegateCall","nameLocation":"20601:20:1","nodeType":"FunctionDefinition","parameters":{"id":1419,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1416,"mutability":"mutable","name":"target","nameLocation":"20640:6:1","nodeType":"VariableDeclaration","scope":1430,"src":"20632:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1415,"name":"address","nodeType":"ElementaryTypeName","src":"20632:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1418,"mutability":"mutable","name":"data","nameLocation":"20670:4:1","nodeType":"VariableDeclaration","scope":1430,"src":"20657:17:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1417,"name":"bytes","nodeType":"ElementaryTypeName","src":"20657:5:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"20621:60:1"},"returnParameters":{"id":1422,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1421,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1430,"src":"20700:12:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1420,"name":"bytes","nodeType":"ElementaryTypeName","src":"20700:5:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"20699:14:1"},"scope":1497,"src":"20592:304:1","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1464,"nodeType":"Block","src":"21249:237:1","statements":[{"expression":{"arguments":[{"arguments":[{"id":1444,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1433,"src":"21279:6:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1443,"name":"isContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1220,"src":"21268:10:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":1445,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"21268:18:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6e7472616374","id":1446,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"21288:40:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_b94ded0918034cf8f896e19fa3cfdef1188cd569c577264a3622e49152f88520","typeString":"literal_string \"Address: delegate call to non-contract\""},"value":"Address: delegate call to non-contract"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_b94ded0918034cf8f896e19fa3cfdef1188cd569c577264a3622e49152f88520","typeString":"literal_string \"Address: delegate call to non-contract\""}],"id":1442,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"21260:7:1","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1447,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"21260:69:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1448,"nodeType":"ExpressionStatement","src":"21260:69:1"},{"assignments":[1450,1452],"declarations":[{"constant":false,"id":1450,"mutability":"mutable","name":"success","nameLocation":"21348:7:1","nodeType":"VariableDeclaration","scope":1464,"src":"21343:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1449,"name":"bool","nodeType":"ElementaryTypeName","src":"21343:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1452,"mutability":"mutable","name":"returndata","nameLocation":"21370:10:1","nodeType":"VariableDeclaration","scope":1464,"src":"21357:23:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1451,"name":"bytes","nodeType":"ElementaryTypeName","src":"21357:5:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":1457,"initialValue":{"arguments":[{"id":1455,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1435,"src":"21404:4:1","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":1453,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1433,"src":"21384:6:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1454,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"delegatecall","nodeType":"MemberAccess","src":"21384:19:1","typeDescriptions":{"typeIdentifier":"t_function_baredelegatecall_nonpayable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) returns (bool,bytes memory)"}},"id":1456,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"21384:25:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"21342:67:1"},{"expression":{"arguments":[{"id":1459,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1450,"src":"21444:7:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":1460,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1452,"src":"21453:10:1","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1461,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1437,"src":"21465:12:1","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1458,"name":"verifyCallResult","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1496,"src":"21427:16:1","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (bool,bytes memory,string memory) pure returns (bytes memory)"}},"id":1462,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"21427:51:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1441,"id":1463,"nodeType":"Return","src":"21420:58:1"}]},"documentation":{"id":1431,"nodeType":"StructuredDocumentation","src":"20904:180:1","text":" @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"},"id":1465,"implemented":true,"kind":"function","modifiers":[],"name":"functionDelegateCall","nameLocation":"21099:20:1","nodeType":"FunctionDefinition","parameters":{"id":1438,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1433,"mutability":"mutable","name":"target","nameLocation":"21138:6:1","nodeType":"VariableDeclaration","scope":1465,"src":"21130:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1432,"name":"address","nodeType":"ElementaryTypeName","src":"21130:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1435,"mutability":"mutable","name":"data","nameLocation":"21168:4:1","nodeType":"VariableDeclaration","scope":1465,"src":"21155:17:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1434,"name":"bytes","nodeType":"ElementaryTypeName","src":"21155:5:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1437,"mutability":"mutable","name":"errorMessage","nameLocation":"21197:12:1","nodeType":"VariableDeclaration","scope":1465,"src":"21183:26:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1436,"name":"string","nodeType":"ElementaryTypeName","src":"21183:6:1","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"21119:97:1"},"returnParameters":{"id":1441,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1440,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1465,"src":"21235:12:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1439,"name":"bytes","nodeType":"ElementaryTypeName","src":"21235:5:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"21234:14:1"},"scope":1497,"src":"21090:396:1","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1495,"nodeType":"Block","src":"21878:548:1","statements":[{"condition":{"id":1477,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1468,"src":"21893:7:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1493,"nodeType":"Block","src":"21952:467:1","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1484,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1481,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1470,"src":"22038:10:1","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1482,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"22038:17:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1483,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"22058:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"22038:21:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1491,"nodeType":"Block","src":"22353:55:1","statements":[{"expression":{"arguments":[{"id":1488,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1472,"src":"22379:12:1","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1487,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"22372:6:1","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":1489,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"22372:20:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1490,"nodeType":"ExpressionStatement","src":"22372:20:1"}]},"id":1492,"nodeType":"IfStatement","src":"22034:374:1","trueBody":{"id":1486,"nodeType":"Block","src":"22061:286:1","statements":[{"AST":{"nodeType":"YulBlock","src":"22184:148:1","statements":[{"nodeType":"YulVariableDeclaration","src":"22207:40:1","value":{"arguments":[{"name":"returndata","nodeType":"YulIdentifier","src":"22236:10:1"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"22230:5:1"},"nodeType":"YulFunctionCall","src":"22230:17:1"},"variables":[{"name":"returndata_size","nodeType":"YulTypedName","src":"22211:15:1","type":""}]},{"expression":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"22280:2:1","type":"","value":"32"},{"name":"returndata","nodeType":"YulIdentifier","src":"22284:10:1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22276:3:1"},"nodeType":"YulFunctionCall","src":"22276:19:1"},{"name":"returndata_size","nodeType":"YulIdentifier","src":"22297:15:1"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"22269:6:1"},"nodeType":"YulFunctionCall","src":"22269:44:1"},"nodeType":"YulExpressionStatement","src":"22269:44:1"}]},"evmVersion":"istanbul","externalReferences":[{"declaration":1470,"isOffset":false,"isSlot":false,"src":"22236:10:1","valueSize":1},{"declaration":1470,"isOffset":false,"isSlot":false,"src":"22284:10:1","valueSize":1}],"id":1485,"nodeType":"InlineAssembly","src":"22175:157:1"}]}}]},"id":1494,"nodeType":"IfStatement","src":"21889:530:1","trueBody":{"id":1480,"nodeType":"Block","src":"21902:44:1","statements":[{"expression":{"id":1478,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1470,"src":"21924:10:1","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1476,"id":1479,"nodeType":"Return","src":"21917:17:1"}]}}]},"documentation":{"id":1466,"nodeType":"StructuredDocumentation","src":"21494:214:1","text":" @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n revert reason using the provided one.\n _Available since v4.3._"},"id":1496,"implemented":true,"kind":"function","modifiers":[],"name":"verifyCallResult","nameLocation":"21723:16:1","nodeType":"FunctionDefinition","parameters":{"id":1473,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1468,"mutability":"mutable","name":"success","nameLocation":"21755:7:1","nodeType":"VariableDeclaration","scope":1496,"src":"21750:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1467,"name":"bool","nodeType":"ElementaryTypeName","src":"21750:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1470,"mutability":"mutable","name":"returndata","nameLocation":"21786:10:1","nodeType":"VariableDeclaration","scope":1496,"src":"21773:23:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1469,"name":"bytes","nodeType":"ElementaryTypeName","src":"21773:5:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1472,"mutability":"mutable","name":"errorMessage","nameLocation":"21821:12:1","nodeType":"VariableDeclaration","scope":1496,"src":"21807:26:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1471,"name":"string","nodeType":"ElementaryTypeName","src":"21807:6:1","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"21739:101:1"},"returnParameters":{"id":1476,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1475,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1496,"src":"21864:12:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1474,"name":"bytes","nodeType":"ElementaryTypeName","src":"21864:5:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"21863:14:1"},"scope":1497,"src":"21714:712:1","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":2845,"src":"13691:8738:1","usedErrors":[]},{"id":1498,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"22577:23:1"},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"library","documentation":{"id":1499,"nodeType":"StructuredDocumentation","src":"22604:465:1","text":" @title SafeERC20\n @dev Wrappers around ERC20 operations that throw on failure (when the token\n contract returns false). Tokens that return no value (and instead revert or\n throw on failure) are also supported, non-reverting calls are assumed to be\n successful.\n To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n which allows you to call the safe operations as `token.safeTransfer(...)`, etc."},"fullyImplemented":true,"id":1718,"linearizedBaseContracts":[1718],"name":"SafeERC20","nameLocation":"23079:9:1","nodeType":"ContractDefinition","nodes":[{"id":1502,"libraryName":{"id":1500,"name":"Address","nodeType":"IdentifierPath","referencedDeclaration":1497,"src":"23102:7:1"},"nodeType":"UsingForDirective","src":"23096:26:1","typeName":{"id":1501,"name":"address","nodeType":"ElementaryTypeName","src":"23114:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}},{"body":{"id":1524,"nodeType":"Block","src":"23202:142:1","statements":[{"expression":{"arguments":[{"id":1513,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1505,"src":"23247:5:1","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$768","typeString":"contract IERC20"}},{"arguments":[{"expression":{"expression":{"id":1516,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1505,"src":"23290:5:1","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$768","typeString":"contract IERC20"}},"id":1517,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"transfer","nodeType":"MemberAccess","referencedDeclaration":735,"src":"23290:14:1","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":1518,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"selector","nodeType":"MemberAccess","src":"23290:23:1","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":1519,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1507,"src":"23315:2:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1520,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1509,"src":"23319:5:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1514,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"23267:3:1","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1515,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"23267:22:1","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":1521,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"23267:58:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$768","typeString":"contract IERC20"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1512,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1717,"src":"23213:19:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$768_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20,bytes memory)"}},"id":1522,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"23213:123:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1523,"nodeType":"ExpressionStatement","src":"23213:123:1"}]},"id":1525,"implemented":true,"kind":"function","modifiers":[],"name":"safeTransfer","nameLocation":"23139:12:1","nodeType":"FunctionDefinition","parameters":{"id":1510,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1505,"mutability":"mutable","name":"token","nameLocation":"23159:5:1","nodeType":"VariableDeclaration","scope":1525,"src":"23152:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$768","typeString":"contract IERC20"},"typeName":{"id":1504,"nodeType":"UserDefinedTypeName","pathNode":{"id":1503,"name":"IERC20","nodeType":"IdentifierPath","referencedDeclaration":768,"src":"23152:6:1"},"referencedDeclaration":768,"src":"23152:6:1","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$768","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":1507,"mutability":"mutable","name":"to","nameLocation":"23174:2:1","nodeType":"VariableDeclaration","scope":1525,"src":"23166:10:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1506,"name":"address","nodeType":"ElementaryTypeName","src":"23166:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1509,"mutability":"mutable","name":"value","nameLocation":"23186:5:1","nodeType":"VariableDeclaration","scope":1525,"src":"23178:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1508,"name":"uint256","nodeType":"ElementaryTypeName","src":"23178:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"23151:41:1"},"returnParameters":{"id":1511,"nodeType":"ParameterList","parameters":[],"src":"23202:0:1"},"scope":1718,"src":"23130:214:1","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1550,"nodeType":"Block","src":"23485:152:1","statements":[{"expression":{"arguments":[{"id":1538,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1528,"src":"23530:5:1","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$768","typeString":"contract IERC20"}},{"arguments":[{"expression":{"expression":{"id":1541,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1528,"src":"23573:5:1","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$768","typeString":"contract IERC20"}},"id":1542,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"transferFrom","nodeType":"MemberAccess","referencedDeclaration":767,"src":"23573:18:1","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,address,uint256) external returns (bool)"}},"id":1543,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"selector","nodeType":"MemberAccess","src":"23573:27:1","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":1544,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1530,"src":"23602:4:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1545,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1532,"src":"23608:2:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1546,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1534,"src":"23612:5:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1539,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"23550:3:1","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1540,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"23550:22:1","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":1547,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"23550:68:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$768","typeString":"contract IERC20"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1537,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1717,"src":"23496:19:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$768_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20,bytes memory)"}},"id":1548,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"23496:133:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1549,"nodeType":"ExpressionStatement","src":"23496:133:1"}]},"id":1551,"implemented":true,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"23361:16:1","nodeType":"FunctionDefinition","parameters":{"id":1535,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1528,"mutability":"mutable","name":"token","nameLocation":"23395:5:1","nodeType":"VariableDeclaration","scope":1551,"src":"23388:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$768","typeString":"contract IERC20"},"typeName":{"id":1527,"nodeType":"UserDefinedTypeName","pathNode":{"id":1526,"name":"IERC20","nodeType":"IdentifierPath","referencedDeclaration":768,"src":"23388:6:1"},"referencedDeclaration":768,"src":"23388:6:1","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$768","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":1530,"mutability":"mutable","name":"from","nameLocation":"23419:4:1","nodeType":"VariableDeclaration","scope":1551,"src":"23411:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1529,"name":"address","nodeType":"ElementaryTypeName","src":"23411:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1532,"mutability":"mutable","name":"to","nameLocation":"23442:2:1","nodeType":"VariableDeclaration","scope":1551,"src":"23434:10:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1531,"name":"address","nodeType":"ElementaryTypeName","src":"23434:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1534,"mutability":"mutable","name":"value","nameLocation":"23463:5:1","nodeType":"VariableDeclaration","scope":1551,"src":"23455:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1533,"name":"uint256","nodeType":"ElementaryTypeName","src":"23455:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"23377:98:1"},"returnParameters":{"id":1536,"nodeType":"ParameterList","parameters":[],"src":"23485:0:1"},"scope":1718,"src":"23352:285:1","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1594,"nodeType":"Block","src":"24016:543:1","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1578,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1565,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1563,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1559,"src":"24270:5:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1564,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"24279:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"24270:10:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":1566,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"24269:12:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1576,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"id":1571,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"24310:4:1","typeDescriptions":{"typeIdentifier":"t_contract$_SafeERC20_$1718","typeString":"library SafeERC20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_SafeERC20_$1718","typeString":"library SafeERC20"}],"id":1570,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"24302:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1569,"name":"address","nodeType":"ElementaryTypeName","src":"24302:7:1","typeDescriptions":{}}},"id":1572,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"24302:13:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1573,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1557,"src":"24317:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":1567,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1555,"src":"24286:5:1","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$768","typeString":"contract IERC20"}},"id":1568,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"allowance","nodeType":"MemberAccess","referencedDeclaration":745,"src":"24286:15:1","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$","typeString":"function (address,address) view external returns (uint256)"}},"id":1574,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"24286:39:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1575,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"24329:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"24286:44:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":1577,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"24285:46:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"24269:62:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f20746f206e6f6e2d7a65726f20616c6c6f77616e6365","id":1579,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"24346:56:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_ef945ddb1bfdc0da870feb4560d868b047642b4ac7f2fb7f8b7c51cb4a411e25","typeString":"literal_string \"SafeERC20: approve from non-zero to non-zero allowance\""},"value":"SafeERC20: approve from non-zero to non-zero allowance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_ef945ddb1bfdc0da870feb4560d868b047642b4ac7f2fb7f8b7c51cb4a411e25","typeString":"literal_string \"SafeERC20: approve from non-zero to non-zero allowance\""}],"id":1562,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"24247:7:1","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1580,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"24247:166:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1581,"nodeType":"ExpressionStatement","src":"24247:166:1"},{"expression":{"arguments":[{"id":1583,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1555,"src":"24458:5:1","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$768","typeString":"contract IERC20"}},{"arguments":[{"expression":{"expression":{"id":1586,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1555,"src":"24501:5:1","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$768","typeString":"contract IERC20"}},"id":1587,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"approve","nodeType":"MemberAccess","referencedDeclaration":755,"src":"24501:13:1","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":1588,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"selector","nodeType":"MemberAccess","src":"24501:22:1","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":1589,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1557,"src":"24525:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1590,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1559,"src":"24534:5:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1584,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"24478:3:1","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1585,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"24478:22:1","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":1591,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"24478:62:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$768","typeString":"contract IERC20"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1582,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1717,"src":"24424:19:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$768_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20,bytes memory)"}},"id":1592,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"24424:127:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1593,"nodeType":"ExpressionStatement","src":"24424:127:1"}]},"documentation":{"id":1552,"nodeType":"StructuredDocumentation","src":"23645:255:1","text":" @dev Deprecated. This function has issues similar to the ones found in\n {IERC20-approve}, and its usage is discouraged.\n Whenever possible, use {safeIncreaseAllowance} and\n {safeDecreaseAllowance} instead."},"id":1595,"implemented":true,"kind":"function","modifiers":[],"name":"safeApprove","nameLocation":"23915:11:1","nodeType":"FunctionDefinition","parameters":{"id":1560,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1555,"mutability":"mutable","name":"token","nameLocation":"23944:5:1","nodeType":"VariableDeclaration","scope":1595,"src":"23937:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$768","typeString":"contract IERC20"},"typeName":{"id":1554,"nodeType":"UserDefinedTypeName","pathNode":{"id":1553,"name":"IERC20","nodeType":"IdentifierPath","referencedDeclaration":768,"src":"23937:6:1"},"referencedDeclaration":768,"src":"23937:6:1","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$768","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":1557,"mutability":"mutable","name":"spender","nameLocation":"23968:7:1","nodeType":"VariableDeclaration","scope":1595,"src":"23960:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1556,"name":"address","nodeType":"ElementaryTypeName","src":"23960:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1559,"mutability":"mutable","name":"value","nameLocation":"23994:5:1","nodeType":"VariableDeclaration","scope":1595,"src":"23986:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1558,"name":"uint256","nodeType":"ElementaryTypeName","src":"23986:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"23926:80:1"},"returnParameters":{"id":1561,"nodeType":"ParameterList","parameters":[],"src":"24016:0:1"},"scope":1718,"src":"23906:653:1","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1630,"nodeType":"Block","src":"24687:300:1","statements":[{"assignments":[1606],"declarations":[{"constant":false,"id":1606,"mutability":"mutable","name":"newAllowance","nameLocation":"24706:12:1","nodeType":"VariableDeclaration","scope":1630,"src":"24698:20:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1605,"name":"uint256","nodeType":"ElementaryTypeName","src":"24698:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1617,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1616,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"id":1611,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"24745:4:1","typeDescriptions":{"typeIdentifier":"t_contract$_SafeERC20_$1718","typeString":"library SafeERC20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_SafeERC20_$1718","typeString":"library SafeERC20"}],"id":1610,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"24737:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1609,"name":"address","nodeType":"ElementaryTypeName","src":"24737:7:1","typeDescriptions":{}}},"id":1612,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"24737:13:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1613,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1600,"src":"24752:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":1607,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1598,"src":"24721:5:1","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$768","typeString":"contract IERC20"}},"id":1608,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"allowance","nodeType":"MemberAccess","referencedDeclaration":745,"src":"24721:15:1","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$","typeString":"function (address,address) view external returns (uint256)"}},"id":1614,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"24721:39:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":1615,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1602,"src":"24763:5:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"24721:47:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"24698:70:1"},{"expression":{"arguments":[{"id":1619,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1598,"src":"24813:5:1","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$768","typeString":"contract IERC20"}},{"arguments":[{"expression":{"expression":{"id":1622,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1598,"src":"24874:5:1","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$768","typeString":"contract IERC20"}},"id":1623,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"approve","nodeType":"MemberAccess","referencedDeclaration":755,"src":"24874:13:1","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":1624,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"selector","nodeType":"MemberAccess","src":"24874:22:1","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":1625,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1600,"src":"24915:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1626,"name":"newAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1606,"src":"24941:12:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1620,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"24833:3:1","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1621,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"24833:22:1","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":1627,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"24833:135:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$768","typeString":"contract IERC20"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1618,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1717,"src":"24779:19:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$768_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20,bytes memory)"}},"id":1628,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"24779:200:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1629,"nodeType":"ExpressionStatement","src":"24779:200:1"}]},"id":1631,"implemented":true,"kind":"function","modifiers":[],"name":"safeIncreaseAllowance","nameLocation":"24576:21:1","nodeType":"FunctionDefinition","parameters":{"id":1603,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1598,"mutability":"mutable","name":"token","nameLocation":"24615:5:1","nodeType":"VariableDeclaration","scope":1631,"src":"24608:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$768","typeString":"contract IERC20"},"typeName":{"id":1597,"nodeType":"UserDefinedTypeName","pathNode":{"id":1596,"name":"IERC20","nodeType":"IdentifierPath","referencedDeclaration":768,"src":"24608:6:1"},"referencedDeclaration":768,"src":"24608:6:1","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$768","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":1600,"mutability":"mutable","name":"spender","nameLocation":"24639:7:1","nodeType":"VariableDeclaration","scope":1631,"src":"24631:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1599,"name":"address","nodeType":"ElementaryTypeName","src":"24631:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1602,"mutability":"mutable","name":"value","nameLocation":"24665:5:1","nodeType":"VariableDeclaration","scope":1631,"src":"24657:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1601,"name":"uint256","nodeType":"ElementaryTypeName","src":"24657:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"24597:80:1"},"returnParameters":{"id":1604,"nodeType":"ParameterList","parameters":[],"src":"24687:0:1"},"scope":1718,"src":"24567:420:1","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1678,"nodeType":"Block","src":"25115:557:1","statements":[{"id":1677,"nodeType":"UncheckedBlock","src":"25126:539:1","statements":[{"assignments":[1642],"declarations":[{"constant":false,"id":1642,"mutability":"mutable","name":"oldAllowance","nameLocation":"25159:12:1","nodeType":"VariableDeclaration","scope":1677,"src":"25151:20:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1641,"name":"uint256","nodeType":"ElementaryTypeName","src":"25151:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1651,"initialValue":{"arguments":[{"arguments":[{"id":1647,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"25198:4:1","typeDescriptions":{"typeIdentifier":"t_contract$_SafeERC20_$1718","typeString":"library SafeERC20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_SafeERC20_$1718","typeString":"library SafeERC20"}],"id":1646,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"25190:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1645,"name":"address","nodeType":"ElementaryTypeName","src":"25190:7:1","typeDescriptions":{}}},"id":1648,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"25190:13:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1649,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1636,"src":"25205:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":1643,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1634,"src":"25174:5:1","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$768","typeString":"contract IERC20"}},"id":1644,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"allowance","nodeType":"MemberAccess","referencedDeclaration":745,"src":"25174:15:1","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$","typeString":"function (address,address) view external returns (uint256)"}},"id":1650,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"25174:39:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"25151:62:1"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1655,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1653,"name":"oldAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1642,"src":"25254:12:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":1654,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1638,"src":"25270:5:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"25254:21:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5361666545524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726f","id":1656,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"25294:43:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_2c3af60974a758b7e72e108c9bf0943ecc9e4f2e8af4695da5f52fbf57a63d3a","typeString":"literal_string \"SafeERC20: decreased allowance below zero\""},"value":"SafeERC20: decreased allowance below zero"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_2c3af60974a758b7e72e108c9bf0943ecc9e4f2e8af4695da5f52fbf57a63d3a","typeString":"literal_string \"SafeERC20: decreased allowance below zero\""}],"id":1652,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"25228:7:1","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1657,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"25228:124:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1658,"nodeType":"ExpressionStatement","src":"25228:124:1"},{"assignments":[1660],"declarations":[{"constant":false,"id":1660,"mutability":"mutable","name":"newAllowance","nameLocation":"25375:12:1","nodeType":"VariableDeclaration","scope":1677,"src":"25367:20:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1659,"name":"uint256","nodeType":"ElementaryTypeName","src":"25367:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1664,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1663,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1661,"name":"oldAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1642,"src":"25390:12:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":1662,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1638,"src":"25405:5:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"25390:20:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"25367:43:1"},{"expression":{"arguments":[{"id":1666,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1634,"src":"25463:5:1","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$768","typeString":"contract IERC20"}},{"arguments":[{"expression":{"expression":{"id":1669,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1634,"src":"25532:5:1","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$768","typeString":"contract IERC20"}},"id":1670,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"approve","nodeType":"MemberAccess","referencedDeclaration":755,"src":"25532:13:1","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":1671,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"selector","nodeType":"MemberAccess","src":"25532:22:1","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":1672,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1636,"src":"25577:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1673,"name":"newAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1660,"src":"25607:12:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1667,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"25487:3:1","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1668,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"25487:22:1","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":1674,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"25487:151:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$768","typeString":"contract IERC20"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1665,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1717,"src":"25425:19:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$768_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20,bytes memory)"}},"id":1675,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"25425:228:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1676,"nodeType":"ExpressionStatement","src":"25425:228:1"}]}]},"id":1679,"implemented":true,"kind":"function","modifiers":[],"name":"safeDecreaseAllowance","nameLocation":"25004:21:1","nodeType":"FunctionDefinition","parameters":{"id":1639,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1634,"mutability":"mutable","name":"token","nameLocation":"25043:5:1","nodeType":"VariableDeclaration","scope":1679,"src":"25036:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$768","typeString":"contract IERC20"},"typeName":{"id":1633,"nodeType":"UserDefinedTypeName","pathNode":{"id":1632,"name":"IERC20","nodeType":"IdentifierPath","referencedDeclaration":768,"src":"25036:6:1"},"referencedDeclaration":768,"src":"25036:6:1","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$768","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":1636,"mutability":"mutable","name":"spender","nameLocation":"25067:7:1","nodeType":"VariableDeclaration","scope":1679,"src":"25059:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1635,"name":"address","nodeType":"ElementaryTypeName","src":"25059:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1638,"mutability":"mutable","name":"value","nameLocation":"25093:5:1","nodeType":"VariableDeclaration","scope":1679,"src":"25085:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1637,"name":"uint256","nodeType":"ElementaryTypeName","src":"25085:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"25025:80:1"},"returnParameters":{"id":1640,"nodeType":"ParameterList","parameters":[],"src":"25115:0:1"},"scope":1718,"src":"24995:677:1","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1716,"nodeType":"Block","src":"26133:732:1","statements":[{"assignments":[1689],"declarations":[{"constant":false,"id":1689,"mutability":"mutable","name":"returndata","nameLocation":"26500:10:1","nodeType":"VariableDeclaration","scope":1716,"src":"26487:23:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1688,"name":"bytes","nodeType":"ElementaryTypeName","src":"26487:5:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":1698,"initialValue":{"arguments":[{"id":1695,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1685,"src":"26555:4:1","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564","id":1696,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"26574:34:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_47fb62c2c272651d2f0f342bac006756b8ba07f21cc5cb87e0fbb9d50c0c585b","typeString":"literal_string \"SafeERC20: low-level call failed\""},"value":"SafeERC20: low-level call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_stringliteral_47fb62c2c272651d2f0f342bac006756b8ba07f21cc5cb87e0fbb9d50c0c585b","typeString":"literal_string \"SafeERC20: low-level call failed\""}],"expression":{"arguments":[{"id":1692,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1683,"src":"26521:5:1","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$768","typeString":"contract IERC20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$768","typeString":"contract IERC20"}],"id":1691,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"26513:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1690,"name":"address","nodeType":"ElementaryTypeName","src":"26513:7:1","typeDescriptions":{}}},"id":1693,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"26513:14:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1694,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"functionCall","nodeType":"MemberAccess","referencedDeclaration":1291,"src":"26513:27:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$bound_to$_t_address_$","typeString":"function (address,bytes memory,string memory) returns (bytes memory)"}},"id":1697,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"26513:106:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"26487:132:1"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1702,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1699,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1689,"src":"26634:10:1","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1700,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"26634:17:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1701,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"26654:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"26634:21:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1715,"nodeType":"IfStatement","src":"26630:228:1","trueBody":{"id":1714,"nodeType":"Block","src":"26657:201:1","statements":[{"expression":{"arguments":[{"arguments":[{"id":1706,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1689,"src":"26749:10:1","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"components":[{"id":1708,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"26762:4:1","typeDescriptions":{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"},"typeName":{"id":1707,"name":"bool","nodeType":"ElementaryTypeName","src":"26762:4:1","typeDescriptions":{}}}],"id":1709,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"26761:6:1","typeDescriptions":{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"}],"expression":{"id":1704,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"26738:3:1","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1705,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"decode","nodeType":"MemberAccess","src":"26738:10:1","typeDescriptions":{"typeIdentifier":"t_function_abidecode_pure$__$returns$__$","typeString":"function () pure"}},"id":1710,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"26738:30:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564","id":1711,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"26787:44:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd","typeString":"literal_string \"SafeERC20: ERC20 operation did not succeed\""},"value":"SafeERC20: ERC20 operation did not succeed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd","typeString":"literal_string \"SafeERC20: ERC20 operation did not succeed\""}],"id":1703,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"26712:7:1","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1712,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"26712:134:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1713,"nodeType":"ExpressionStatement","src":"26712:134:1"}]}}]},"documentation":{"id":1680,"nodeType":"StructuredDocumentation","src":"25680:377:1","text":" @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n on the return value: the return value is optional (but if data is returned, it must not be false).\n @param token The token targeted by the call.\n @param data The call data (encoded using abi.encode or one of its variants)."},"id":1717,"implemented":true,"kind":"function","modifiers":[],"name":"_callOptionalReturn","nameLocation":"26072:19:1","nodeType":"FunctionDefinition","parameters":{"id":1686,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1683,"mutability":"mutable","name":"token","nameLocation":"26099:5:1","nodeType":"VariableDeclaration","scope":1717,"src":"26092:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$768","typeString":"contract IERC20"},"typeName":{"id":1682,"nodeType":"UserDefinedTypeName","pathNode":{"id":1681,"name":"IERC20","nodeType":"IdentifierPath","referencedDeclaration":768,"src":"26092:6:1"},"referencedDeclaration":768,"src":"26092:6:1","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$768","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":1685,"mutability":"mutable","name":"data","nameLocation":"26119:4:1","nodeType":"VariableDeclaration","scope":1717,"src":"26106:17:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1684,"name":"bytes","nodeType":"ElementaryTypeName","src":"26106:5:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"26091:33:1"},"returnParameters":{"id":1687,"nodeType":"ParameterList","parameters":[],"src":"26133:0:1"},"scope":1718,"src":"26063:802:1","stateMutability":"nonpayable","virtual":false,"visibility":"private"}],"scope":2845,"src":"23071:3797:1","usedErrors":[]},{"id":1719,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"26905:23:1"},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":1780,"linearizedBaseContracts":[1780],"name":"IRouter","nameLocation":"26942:7:1","nodeType":"ContractDefinition","nodes":[{"functionSelector":"38ed1739","id":1736,"implemented":false,"kind":"function","modifiers":[],"name":"swapExactTokensForTokens","nameLocation":"26966:24:1","nodeType":"FunctionDefinition","parameters":{"id":1731,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1721,"mutability":"mutable","name":"amountIn","nameLocation":"27009:8:1","nodeType":"VariableDeclaration","scope":1736,"src":"27001:16:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1720,"name":"uint256","nodeType":"ElementaryTypeName","src":"27001:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1723,"mutability":"mutable","name":"amountOutMin","nameLocation":"27036:12:1","nodeType":"VariableDeclaration","scope":1736,"src":"27028:20:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1722,"name":"uint256","nodeType":"ElementaryTypeName","src":"27028:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1726,"mutability":"mutable","name":"path","nameLocation":"27078:4:1","nodeType":"VariableDeclaration","scope":1736,"src":"27059:23:1","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":1724,"name":"address","nodeType":"ElementaryTypeName","src":"27059:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1725,"nodeType":"ArrayTypeName","src":"27059:9:1","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"},{"constant":false,"id":1728,"mutability":"mutable","name":"to","nameLocation":"27101:2:1","nodeType":"VariableDeclaration","scope":1736,"src":"27093:10:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1727,"name":"address","nodeType":"ElementaryTypeName","src":"27093:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1730,"mutability":"mutable","name":"deadline","nameLocation":"27122:8:1","nodeType":"VariableDeclaration","scope":1736,"src":"27114:16:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1729,"name":"uint256","nodeType":"ElementaryTypeName","src":"27114:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"26990:147:1"},"returnParameters":{"id":1735,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1734,"mutability":"mutable","name":"amounts","nameLocation":"27173:7:1","nodeType":"VariableDeclaration","scope":1736,"src":"27156:24:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1732,"name":"uint256","nodeType":"ElementaryTypeName","src":"27156:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1733,"nodeType":"ArrayTypeName","src":"27156:9:1","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"27155:26:1"},"scope":1780,"src":"26957:225:1","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"7ff36ab5","id":1751,"implemented":false,"kind":"function","modifiers":[],"name":"swapExactETHForTokens","nameLocation":"27199:21:1","nodeType":"FunctionDefinition","parameters":{"id":1746,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1738,"mutability":"mutable","name":"amountOutMin","nameLocation":"27239:12:1","nodeType":"VariableDeclaration","scope":1751,"src":"27231:20:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1737,"name":"uint256","nodeType":"ElementaryTypeName","src":"27231:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1741,"mutability":"mutable","name":"path","nameLocation":"27281:4:1","nodeType":"VariableDeclaration","scope":1751,"src":"27262:23:1","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":1739,"name":"address","nodeType":"ElementaryTypeName","src":"27262:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1740,"nodeType":"ArrayTypeName","src":"27262:9:1","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"},{"constant":false,"id":1743,"mutability":"mutable","name":"to","nameLocation":"27304:2:1","nodeType":"VariableDeclaration","scope":1751,"src":"27296:10:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1742,"name":"address","nodeType":"ElementaryTypeName","src":"27296:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1745,"mutability":"mutable","name":"deadline","nameLocation":"27325:8:1","nodeType":"VariableDeclaration","scope":1751,"src":"27317:16:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1744,"name":"uint256","nodeType":"ElementaryTypeName","src":"27317:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"27220:120:1"},"returnParameters":{"id":1750,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1749,"mutability":"mutable","name":"amounts","nameLocation":"27384:7:1","nodeType":"VariableDeclaration","scope":1751,"src":"27367:24:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1747,"name":"uint256","nodeType":"ElementaryTypeName","src":"27367:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1748,"nodeType":"ArrayTypeName","src":"27367:9:1","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"27366:26:1"},"scope":1780,"src":"27190:203:1","stateMutability":"payable","virtual":false,"visibility":"external"},{"functionSelector":"18cbafe5","id":1768,"implemented":false,"kind":"function","modifiers":[],"name":"swapExactTokensForETH","nameLocation":"27410:21:1","nodeType":"FunctionDefinition","parameters":{"id":1763,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1753,"mutability":"mutable","name":"amountIn","nameLocation":"27450:8:1","nodeType":"VariableDeclaration","scope":1768,"src":"27442:16:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1752,"name":"uint256","nodeType":"ElementaryTypeName","src":"27442:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1755,"mutability":"mutable","name":"amountOutMin","nameLocation":"27477:12:1","nodeType":"VariableDeclaration","scope":1768,"src":"27469:20:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1754,"name":"uint256","nodeType":"ElementaryTypeName","src":"27469:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1758,"mutability":"mutable","name":"path","nameLocation":"27519:4:1","nodeType":"VariableDeclaration","scope":1768,"src":"27500:23:1","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":1756,"name":"address","nodeType":"ElementaryTypeName","src":"27500:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1757,"nodeType":"ArrayTypeName","src":"27500:9:1","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"},{"constant":false,"id":1760,"mutability":"mutable","name":"to","nameLocation":"27542:2:1","nodeType":"VariableDeclaration","scope":1768,"src":"27534:10:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1759,"name":"address","nodeType":"ElementaryTypeName","src":"27534:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1762,"mutability":"mutable","name":"deadline","nameLocation":"27563:8:1","nodeType":"VariableDeclaration","scope":1768,"src":"27555:16:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1761,"name":"uint256","nodeType":"ElementaryTypeName","src":"27555:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"27431:147:1"},"returnParameters":{"id":1767,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1766,"mutability":"mutable","name":"amounts","nameLocation":"27614:7:1","nodeType":"VariableDeclaration","scope":1768,"src":"27597:24:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1764,"name":"uint256","nodeType":"ElementaryTypeName","src":"27597:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1765,"nodeType":"ArrayTypeName","src":"27597:9:1","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"27596:26:1"},"scope":1780,"src":"27401:222:1","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"d06ca61f","id":1779,"implemented":false,"kind":"function","modifiers":[],"name":"getAmountsOut","nameLocation":"27640:13:1","nodeType":"FunctionDefinition","parameters":{"id":1774,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1770,"mutability":"mutable","name":"amountIn","nameLocation":"27672:8:1","nodeType":"VariableDeclaration","scope":1779,"src":"27664:16:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1769,"name":"uint256","nodeType":"ElementaryTypeName","src":"27664:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1773,"mutability":"mutable","name":"path","nameLocation":"27710:4:1","nodeType":"VariableDeclaration","scope":1779,"src":"27691:23:1","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":1771,"name":"address","nodeType":"ElementaryTypeName","src":"27691:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1772,"nodeType":"ArrayTypeName","src":"27691:9:1","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"}],"src":"27653:68:1"},"returnParameters":{"id":1778,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1777,"mutability":"mutable","name":"amounts","nameLocation":"27762:7:1","nodeType":"VariableDeclaration","scope":1779,"src":"27745:24:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1775,"name":"uint256","nodeType":"ElementaryTypeName","src":"27745:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1776,"nodeType":"ArrayTypeName","src":"27745:9:1","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"27744:26:1"},"scope":1780,"src":"27631:140:1","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":2845,"src":"26932:842:1","usedErrors":[]},{"id":1781,"literals":["solidity",">=","0.5",".0"],"nodeType":"PragmaDirective","src":"27776:24:1"},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"interface","documentation":{"id":1782,"nodeType":"StructuredDocumentation","src":"27804:177:1","text":"@title The interface for the PancakeSwap V3 Factory\n @notice The PancakeSwap V3 Factory facilitates creation of PancakeSwap V3 pools and control over the protocol fees"},"fullyImplemented":false,"id":1794,"linearizedBaseContracts":[1794],"name":"IPancakeV3Factory","nameLocation":"27991:17:1","nodeType":"ContractDefinition","nodes":[{"functionSelector":"1698ee82","id":1793,"implemented":false,"kind":"function","modifiers":[],"name":"getPool","nameLocation":"28025:7:1","nodeType":"FunctionDefinition","parameters":{"id":1789,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1784,"mutability":"mutable","name":"tokenA","nameLocation":"28051:6:1","nodeType":"VariableDeclaration","scope":1793,"src":"28043:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1783,"name":"address","nodeType":"ElementaryTypeName","src":"28043:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1786,"mutability":"mutable","name":"tokenB","nameLocation":"28076:6:1","nodeType":"VariableDeclaration","scope":1793,"src":"28068:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1785,"name":"address","nodeType":"ElementaryTypeName","src":"28068:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1788,"mutability":"mutable","name":"fee","nameLocation":"28100:3:1","nodeType":"VariableDeclaration","scope":1793,"src":"28093:10:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"},"typeName":{"id":1787,"name":"uint24","nodeType":"ElementaryTypeName","src":"28093:6:1","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"}},"visibility":"internal"}],"src":"28032:78:1"},"returnParameters":{"id":1792,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1791,"mutability":"mutable","name":"pool","nameLocation":"28142:4:1","nodeType":"VariableDeclaration","scope":1793,"src":"28134:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1790,"name":"address","nodeType":"ElementaryTypeName","src":"28134:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"28133:14:1"},"scope":1794,"src":"28016:132:1","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":2845,"src":"27981:170:1","usedErrors":[]},{"id":1795,"literals":["solidity",">=","0.5",".0"],"nodeType":"PragmaDirective","src":"28153:24:1"},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":1813,"linearizedBaseContracts":[1813],"name":"IPancakeV3PoolState","nameLocation":"28191:19:1","nodeType":"ContractDefinition","nodes":[{"functionSelector":"3850c7bd","id":1812,"implemented":false,"kind":"function","modifiers":[],"name":"slot0","nameLocation":"28227:5:1","nodeType":"FunctionDefinition","parameters":{"id":1796,"nodeType":"ParameterList","parameters":[],"src":"28232:2:1"},"returnParameters":{"id":1811,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1798,"mutability":"mutable","name":"sqrtPriceX96","nameLocation":"28307:12:1","nodeType":"VariableDeclaration","scope":1812,"src":"28299:20:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"},"typeName":{"id":1797,"name":"uint160","nodeType":"ElementaryTypeName","src":"28299:7:1","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"visibility":"internal"},{"constant":false,"id":1800,"mutability":"mutable","name":"tick","nameLocation":"28340:4:1","nodeType":"VariableDeclaration","scope":1812,"src":"28334:10:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"},"typeName":{"id":1799,"name":"int24","nodeType":"ElementaryTypeName","src":"28334:5:1","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"visibility":"internal"},{"constant":false,"id":1802,"mutability":"mutable","name":"observationIndex","nameLocation":"28366:16:1","nodeType":"VariableDeclaration","scope":1812,"src":"28359:23:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":1801,"name":"uint16","nodeType":"ElementaryTypeName","src":"28359:6:1","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":1804,"mutability":"mutable","name":"observationCardinality","nameLocation":"28404:22:1","nodeType":"VariableDeclaration","scope":1812,"src":"28397:29:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":1803,"name":"uint16","nodeType":"ElementaryTypeName","src":"28397:6:1","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":1806,"mutability":"mutable","name":"observationCardinalityNext","nameLocation":"28448:26:1","nodeType":"VariableDeclaration","scope":1812,"src":"28441:33:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":1805,"name":"uint16","nodeType":"ElementaryTypeName","src":"28441:6:1","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":1808,"mutability":"mutable","name":"feeProtocol","nameLocation":"28496:11:1","nodeType":"VariableDeclaration","scope":1812,"src":"28489:18:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":1807,"name":"uint32","nodeType":"ElementaryTypeName","src":"28489:6:1","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":1810,"mutability":"mutable","name":"unlocked","nameLocation":"28527:8:1","nodeType":"VariableDeclaration","scope":1812,"src":"28522:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1809,"name":"bool","nodeType":"ElementaryTypeName","src":"28522:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"28284:262:1"},"scope":1813,"src":"28218:329:1","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":2845,"src":"28181:369:1","usedErrors":[]},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":1850,"linearizedBaseContracts":[1850],"name":"IPancakeV3PoolImmutables","nameLocation":"28564:24:1","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":1814,"nodeType":"StructuredDocumentation","src":"28596:139:1","text":"@notice The contract that deployed the pool, which must adhere to the IPancakeV3Factory interface\n @return The contract address"},"functionSelector":"c45a0155","id":1819,"implemented":false,"kind":"function","modifiers":[],"name":"factory","nameLocation":"28750:7:1","nodeType":"FunctionDefinition","parameters":{"id":1815,"nodeType":"ParameterList","parameters":[],"src":"28757:2:1"},"returnParameters":{"id":1818,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1817,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1819,"src":"28783:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1816,"name":"address","nodeType":"ElementaryTypeName","src":"28783:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"28782:9:1"},"scope":1850,"src":"28741:51:1","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1820,"nodeType":"StructuredDocumentation","src":"28800:114:1","text":"@notice The first of the two tokens of the pool, sorted by address\n @return The token contract address"},"functionSelector":"0dfe1681","id":1825,"implemented":false,"kind":"function","modifiers":[],"name":"token0","nameLocation":"28929:6:1","nodeType":"FunctionDefinition","parameters":{"id":1821,"nodeType":"ParameterList","parameters":[],"src":"28935:2:1"},"returnParameters":{"id":1824,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1823,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1825,"src":"28961:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1822,"name":"address","nodeType":"ElementaryTypeName","src":"28961:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"28960:9:1"},"scope":1850,"src":"28920:50:1","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1826,"nodeType":"StructuredDocumentation","src":"28978:115:1","text":"@notice The second of the two tokens of the pool, sorted by address\n @return The token contract address"},"functionSelector":"d21220a7","id":1831,"implemented":false,"kind":"function","modifiers":[],"name":"token1","nameLocation":"29108:6:1","nodeType":"FunctionDefinition","parameters":{"id":1827,"nodeType":"ParameterList","parameters":[],"src":"29114:2:1"},"returnParameters":{"id":1830,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1829,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1831,"src":"29140:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1828,"name":"address","nodeType":"ElementaryTypeName","src":"29140:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"29139:9:1"},"scope":1850,"src":"29099:50:1","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1832,"nodeType":"StructuredDocumentation","src":"29157:85:1","text":"@notice The pool's fee in hundredths of a bip, i.e. 1e-6\n @return The fee"},"functionSelector":"ddca3f43","id":1837,"implemented":false,"kind":"function","modifiers":[],"name":"fee","nameLocation":"29257:3:1","nodeType":"FunctionDefinition","parameters":{"id":1833,"nodeType":"ParameterList","parameters":[],"src":"29260:2:1"},"returnParameters":{"id":1836,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1835,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1837,"src":"29286:6:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"},"typeName":{"id":1834,"name":"uint24","nodeType":"ElementaryTypeName","src":"29286:6:1","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"}},"visibility":"internal"}],"src":"29285:8:1"},"scope":1850,"src":"29248:46:1","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1838,"nodeType":"StructuredDocumentation","src":"29302:362:1","text":"@notice The pool tick spacing\n @dev Ticks can only be used at multiples of this value, minimum of 1 and always positive\n e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ...\n This value is an int24 to avoid casting even though it is always positive.\n @return The tick spacing"},"functionSelector":"d0c93a7c","id":1843,"implemented":false,"kind":"function","modifiers":[],"name":"tickSpacing","nameLocation":"29679:11:1","nodeType":"FunctionDefinition","parameters":{"id":1839,"nodeType":"ParameterList","parameters":[],"src":"29690:2:1"},"returnParameters":{"id":1842,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1841,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1843,"src":"29716:5:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"},"typeName":{"id":1840,"name":"int24","nodeType":"ElementaryTypeName","src":"29716:5:1","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"visibility":"internal"}],"src":"29715:7:1"},"scope":1850,"src":"29670:53:1","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1844,"nodeType":"StructuredDocumentation","src":"29731:366:1","text":"@notice The maximum amount of position liquidity that can use any tick in the range\n @dev This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and\n also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\n @return The max amount of liquidity per tick"},"functionSelector":"70cf754a","id":1849,"implemented":false,"kind":"function","modifiers":[],"name":"maxLiquidityPerTick","nameLocation":"30112:19:1","nodeType":"FunctionDefinition","parameters":{"id":1845,"nodeType":"ParameterList","parameters":[],"src":"30131:2:1"},"returnParameters":{"id":1848,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1847,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1849,"src":"30157:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":1846,"name":"uint128","nodeType":"ElementaryTypeName","src":"30157:7:1","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"visibility":"internal"}],"src":"30156:9:1"},"scope":1850,"src":"30103:63:1","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":2845,"src":"28554:1615:1","usedErrors":[]},{"abstract":false,"baseContracts":[{"baseName":{"id":1851,"name":"IPancakeV3PoolState","nodeType":"IdentifierPath","referencedDeclaration":1813,"src":"30201:19:1"},"id":1852,"nodeType":"InheritanceSpecifier","src":"30201:19:1"},{"baseName":{"id":1853,"name":"IPancakeV3PoolImmutables","nodeType":"IdentifierPath","referencedDeclaration":1850,"src":"30222:24:1"},"id":1854,"nodeType":"InheritanceSpecifier","src":"30222:24:1"}],"contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":1855,"linearizedBaseContracts":[1855,1850,1813],"name":"IPancakeV3Pool","nameLocation":"30183:14:1","nodeType":"ContractDefinition","nodes":[],"scope":2845,"src":"30173:76:1","usedErrors":[]},{"id":1856,"literals":["solidity",">=","0.5",".0"],"nodeType":"PragmaDirective","src":"30253:24:1"},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"interface","documentation":{"id":1857,"nodeType":"StructuredDocumentation","src":"30281:146:1","text":"@title Callback for IPancakeV3PoolActions#swap\n @notice Any contract that calls IPancakeV3PoolActions#swap must implement this interface"},"fullyImplemented":false,"id":1868,"linearizedBaseContracts":[1868],"name":"IPancakeV3SwapCallback","nameLocation":"30437:22:1","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":1858,"nodeType":"StructuredDocumentation","src":"30467:906:1","text":"@notice Called to `msg.sender` after executing a swap via IPancakeV3Pool#swap.\n @dev In the implementation you must pay the pool tokens owed for the swap.\n The caller of this method must be checked to be a PancakeV3Pool deployed by the canonical PancakeV3Factory.\n amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\n @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\n the end of the swap. If positive, the callback must send that amount of token0 to the pool.\n @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\n the end of the swap. If positive, the callback must send that amount of token1 to the pool.\n @param data Any data passed through by the caller via the IPancakeV3PoolActions#swap call"},"functionSelector":"23a69e75","id":1867,"implemented":false,"kind":"function","modifiers":[],"name":"pancakeV3SwapCallback","nameLocation":"31388:21:1","nodeType":"FunctionDefinition","parameters":{"id":1865,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1860,"mutability":"mutable","name":"amount0Delta","nameLocation":"31427:12:1","nodeType":"VariableDeclaration","scope":1867,"src":"31420:19:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":1859,"name":"int256","nodeType":"ElementaryTypeName","src":"31420:6:1","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":1862,"mutability":"mutable","name":"amount1Delta","nameLocation":"31457:12:1","nodeType":"VariableDeclaration","scope":1867,"src":"31450:19:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":1861,"name":"int256","nodeType":"ElementaryTypeName","src":"31450:6:1","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":1864,"mutability":"mutable","name":"data","nameLocation":"31495:4:1","nodeType":"VariableDeclaration","scope":1867,"src":"31480:19:1","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1863,"name":"bytes","nodeType":"ElementaryTypeName","src":"31480:5:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"31409:97:1"},"returnParameters":{"id":1866,"nodeType":"ParameterList","parameters":[],"src":"31515:0:1"},"scope":1868,"src":"31379:137:1","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":2845,"src":"30427:1092:1","usedErrors":[]},{"abstract":false,"baseContracts":[{"baseName":{"id":1869,"name":"IPancakeV3SwapCallback","nodeType":"IdentifierPath","referencedDeclaration":1868,"src":"31550:22:1"},"id":1870,"nodeType":"InheritanceSpecifier","src":"31550:22:1"}],"contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":1958,"linearizedBaseContracts":[1958,1868],"name":"IV3SwapRouter","nameLocation":"31533:13:1","nodeType":"ContractDefinition","nodes":[{"canonicalName":"IV3SwapRouter.ExactInputSingleParams","id":1885,"members":[{"constant":false,"id":1872,"mutability":"mutable","name":"tokenIn","nameLocation":"31629:7:1","nodeType":"VariableDeclaration","scope":1885,"src":"31621:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1871,"name":"address","nodeType":"ElementaryTypeName","src":"31621:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1874,"mutability":"mutable","name":"tokenOut","nameLocation":"31655:8:1","nodeType":"VariableDeclaration","scope":1885,"src":"31647:16:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1873,"name":"address","nodeType":"ElementaryTypeName","src":"31647:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1876,"mutability":"mutable","name":"fee","nameLocation":"31681:3:1","nodeType":"VariableDeclaration","scope":1885,"src":"31674:10:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"},"typeName":{"id":1875,"name":"uint24","nodeType":"ElementaryTypeName","src":"31674:6:1","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"}},"visibility":"internal"},{"constant":false,"id":1878,"mutability":"mutable","name":"recipient","nameLocation":"31703:9:1","nodeType":"VariableDeclaration","scope":1885,"src":"31695:17:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1877,"name":"address","nodeType":"ElementaryTypeName","src":"31695:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1880,"mutability":"mutable","name":"amountIn","nameLocation":"31731:8:1","nodeType":"VariableDeclaration","scope":1885,"src":"31723:16:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1879,"name":"uint256","nodeType":"ElementaryTypeName","src":"31723:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1882,"mutability":"mutable","name":"amountOutMinimum","nameLocation":"31758:16:1","nodeType":"VariableDeclaration","scope":1885,"src":"31750:24:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1881,"name":"uint256","nodeType":"ElementaryTypeName","src":"31750:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1884,"mutability":"mutable","name":"sqrtPriceLimitX96","nameLocation":"31793:17:1","nodeType":"VariableDeclaration","scope":1885,"src":"31785:25:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"},"typeName":{"id":1883,"name":"uint160","nodeType":"ElementaryTypeName","src":"31785:7:1","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"visibility":"internal"}],"name":"ExactInputSingleParams","nameLocation":"31587:22:1","nodeType":"StructDefinition","scope":1958,"src":"31580:238:1","visibility":"public"},{"documentation":{"id":1886,"nodeType":"StructuredDocumentation","src":"31826:443:1","text":"@notice Swaps `amountIn` of one token for as much as possible of another token\n @dev Setting `amountIn` to 0 will cause the contract to look up its own balance,\n and swap the entire amount, enabling contracts to send tokens before calling this function.\n @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\n @return amountOut The amount of the received token"},"functionSelector":"04e45aaf","id":1894,"implemented":false,"kind":"function","modifiers":[],"name":"exactInputSingle","nameLocation":"32284:16:1","nodeType":"FunctionDefinition","parameters":{"id":1890,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1889,"mutability":"mutable","name":"params","nameLocation":"32343:6:1","nodeType":"VariableDeclaration","scope":1894,"src":"32311:38:1","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_ExactInputSingleParams_$1885_calldata_ptr","typeString":"struct IV3SwapRouter.ExactInputSingleParams"},"typeName":{"id":1888,"nodeType":"UserDefinedTypeName","pathNode":{"id":1887,"name":"ExactInputSingleParams","nodeType":"IdentifierPath","referencedDeclaration":1885,"src":"32311:22:1"},"referencedDeclaration":1885,"src":"32311:22:1","typeDescriptions":{"typeIdentifier":"t_struct$_ExactInputSingleParams_$1885_storage_ptr","typeString":"struct IV3SwapRouter.ExactInputSingleParams"}},"visibility":"internal"}],"src":"32300:56:1"},"returnParameters":{"id":1893,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1892,"mutability":"mutable","name":"amountOut","nameLocation":"32391:9:1","nodeType":"VariableDeclaration","scope":1894,"src":"32383:17:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1891,"name":"uint256","nodeType":"ElementaryTypeName","src":"32383:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"32382:19:1"},"scope":1958,"src":"32275:127:1","stateMutability":"payable","virtual":false,"visibility":"external"},{"canonicalName":"IV3SwapRouter.ExactInputParams","id":1903,"members":[{"constant":false,"id":1896,"mutability":"mutable","name":"path","nameLocation":"32451:4:1","nodeType":"VariableDeclaration","scope":1903,"src":"32445:10:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":1895,"name":"bytes","nodeType":"ElementaryTypeName","src":"32445:5:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1898,"mutability":"mutable","name":"recipient","nameLocation":"32474:9:1","nodeType":"VariableDeclaration","scope":1903,"src":"32466:17:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1897,"name":"address","nodeType":"ElementaryTypeName","src":"32466:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1900,"mutability":"mutable","name":"amountIn","nameLocation":"32502:8:1","nodeType":"VariableDeclaration","scope":1903,"src":"32494:16:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1899,"name":"uint256","nodeType":"ElementaryTypeName","src":"32494:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1902,"mutability":"mutable","name":"amountOutMinimum","nameLocation":"32529:16:1","nodeType":"VariableDeclaration","scope":1903,"src":"32521:24:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1901,"name":"uint256","nodeType":"ElementaryTypeName","src":"32521:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"ExactInputParams","nameLocation":"32417:16:1","nodeType":"StructDefinition","scope":1958,"src":"32410:143:1","visibility":"public"},{"documentation":{"id":1904,"nodeType":"StructuredDocumentation","src":"32561:466:1","text":"@notice Swaps `amountIn` of one token for as much as possible of another along the specified path\n @dev Setting `amountIn` to 0 will cause the contract to look up its own balance,\n and swap the entire amount, enabling contracts to send tokens before calling this function.\n @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\n @return amountOut The amount of the received token"},"functionSelector":"b858183f","id":1912,"implemented":false,"kind":"function","modifiers":[],"name":"exactInput","nameLocation":"33042:10:1","nodeType":"FunctionDefinition","parameters":{"id":1908,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1907,"mutability":"mutable","name":"params","nameLocation":"33089:6:1","nodeType":"VariableDeclaration","scope":1912,"src":"33063:32:1","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_ExactInputParams_$1903_calldata_ptr","typeString":"struct IV3SwapRouter.ExactInputParams"},"typeName":{"id":1906,"nodeType":"UserDefinedTypeName","pathNode":{"id":1905,"name":"ExactInputParams","nodeType":"IdentifierPath","referencedDeclaration":1903,"src":"33063:16:1"},"referencedDeclaration":1903,"src":"33063:16:1","typeDescriptions":{"typeIdentifier":"t_struct$_ExactInputParams_$1903_storage_ptr","typeString":"struct IV3SwapRouter.ExactInputParams"}},"visibility":"internal"}],"src":"33052:50:1"},"returnParameters":{"id":1911,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1910,"mutability":"mutable","name":"amountOut","nameLocation":"33137:9:1","nodeType":"VariableDeclaration","scope":1912,"src":"33129:17:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1909,"name":"uint256","nodeType":"ElementaryTypeName","src":"33129:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"33128:19:1"},"scope":1958,"src":"33033:115:1","stateMutability":"payable","virtual":false,"visibility":"external"},{"canonicalName":"IV3SwapRouter.ExactOutputSingleParams","id":1927,"members":[{"constant":false,"id":1914,"mutability":"mutable","name":"tokenIn","nameLocation":"33206:7:1","nodeType":"VariableDeclaration","scope":1927,"src":"33198:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1913,"name":"address","nodeType":"ElementaryTypeName","src":"33198:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1916,"mutability":"mutable","name":"tokenOut","nameLocation":"33232:8:1","nodeType":"VariableDeclaration","scope":1927,"src":"33224:16:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1915,"name":"address","nodeType":"ElementaryTypeName","src":"33224:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1918,"mutability":"mutable","name":"fee","nameLocation":"33258:3:1","nodeType":"VariableDeclaration","scope":1927,"src":"33251:10:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"},"typeName":{"id":1917,"name":"uint24","nodeType":"ElementaryTypeName","src":"33251:6:1","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"}},"visibility":"internal"},{"constant":false,"id":1920,"mutability":"mutable","name":"recipient","nameLocation":"33280:9:1","nodeType":"VariableDeclaration","scope":1927,"src":"33272:17:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1919,"name":"address","nodeType":"ElementaryTypeName","src":"33272:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1922,"mutability":"mutable","name":"amountOut","nameLocation":"33308:9:1","nodeType":"VariableDeclaration","scope":1927,"src":"33300:17:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1921,"name":"uint256","nodeType":"ElementaryTypeName","src":"33300:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1924,"mutability":"mutable","name":"amountInMaximum","nameLocation":"33336:15:1","nodeType":"VariableDeclaration","scope":1927,"src":"33328:23:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1923,"name":"uint256","nodeType":"ElementaryTypeName","src":"33328:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1926,"mutability":"mutable","name":"sqrtPriceLimitX96","nameLocation":"33370:17:1","nodeType":"VariableDeclaration","scope":1927,"src":"33362:25:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"},"typeName":{"id":1925,"name":"uint160","nodeType":"ElementaryTypeName","src":"33362:7:1","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"visibility":"internal"}],"name":"ExactOutputSingleParams","nameLocation":"33163:23:1","nodeType":"StructDefinition","scope":1958,"src":"33156:239:1","visibility":"public"},{"documentation":{"id":1928,"nodeType":"StructuredDocumentation","src":"33403:307:1","text":"@notice Swaps as little as possible of one token for `amountOut` of another token\n that may remain in the router after the swap.\n @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\n @return amountIn The amount of the input token"},"functionSelector":"5023b4df","id":1936,"implemented":false,"kind":"function","modifiers":[],"name":"exactOutputSingle","nameLocation":"33725:17:1","nodeType":"FunctionDefinition","parameters":{"id":1932,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1931,"mutability":"mutable","name":"params","nameLocation":"33786:6:1","nodeType":"VariableDeclaration","scope":1936,"src":"33753:39:1","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_ExactOutputSingleParams_$1927_calldata_ptr","typeString":"struct IV3SwapRouter.ExactOutputSingleParams"},"typeName":{"id":1930,"nodeType":"UserDefinedTypeName","pathNode":{"id":1929,"name":"ExactOutputSingleParams","nodeType":"IdentifierPath","referencedDeclaration":1927,"src":"33753:23:1"},"referencedDeclaration":1927,"src":"33753:23:1","typeDescriptions":{"typeIdentifier":"t_struct$_ExactOutputSingleParams_$1927_storage_ptr","typeString":"struct IV3SwapRouter.ExactOutputSingleParams"}},"visibility":"internal"}],"src":"33742:57:1"},"returnParameters":{"id":1935,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1934,"mutability":"mutable","name":"amountIn","nameLocation":"33834:8:1","nodeType":"VariableDeclaration","scope":1936,"src":"33826:16:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1933,"name":"uint256","nodeType":"ElementaryTypeName","src":"33826:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"33825:18:1"},"scope":1958,"src":"33716:128:1","stateMutability":"payable","virtual":false,"visibility":"external"},{"canonicalName":"IV3SwapRouter.ExactOutputParams","id":1945,"members":[{"constant":false,"id":1938,"mutability":"mutable","name":"path","nameLocation":"33894:4:1","nodeType":"VariableDeclaration","scope":1945,"src":"33888:10:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":1937,"name":"bytes","nodeType":"ElementaryTypeName","src":"33888:5:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1940,"mutability":"mutable","name":"recipient","nameLocation":"33917:9:1","nodeType":"VariableDeclaration","scope":1945,"src":"33909:17:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1939,"name":"address","nodeType":"ElementaryTypeName","src":"33909:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1942,"mutability":"mutable","name":"amountOut","nameLocation":"33945:9:1","nodeType":"VariableDeclaration","scope":1945,"src":"33937:17:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1941,"name":"uint256","nodeType":"ElementaryTypeName","src":"33937:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1944,"mutability":"mutable","name":"amountInMaximum","nameLocation":"33973:15:1","nodeType":"VariableDeclaration","scope":1945,"src":"33965:23:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1943,"name":"uint256","nodeType":"ElementaryTypeName","src":"33965:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"ExactOutputParams","nameLocation":"33859:17:1","nodeType":"StructDefinition","scope":1958,"src":"33852:144:1","visibility":"public"},{"documentation":{"id":1946,"nodeType":"StructuredDocumentation","src":"34004:341:1","text":"@notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\n that may remain in the router after the swap.\n @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\n @return amountIn The amount of the input token"},"functionSelector":"09b81346","id":1954,"implemented":false,"kind":"function","modifiers":[],"name":"exactOutput","nameLocation":"34360:11:1","nodeType":"FunctionDefinition","parameters":{"id":1950,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1949,"mutability":"mutable","name":"params","nameLocation":"34409:6:1","nodeType":"VariableDeclaration","scope":1954,"src":"34382:33:1","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_ExactOutputParams_$1945_calldata_ptr","typeString":"struct IV3SwapRouter.ExactOutputParams"},"typeName":{"id":1948,"nodeType":"UserDefinedTypeName","pathNode":{"id":1947,"name":"ExactOutputParams","nodeType":"IdentifierPath","referencedDeclaration":1945,"src":"34382:17:1"},"referencedDeclaration":1945,"src":"34382:17:1","typeDescriptions":{"typeIdentifier":"t_struct$_ExactOutputParams_$1945_storage_ptr","typeString":"struct IV3SwapRouter.ExactOutputParams"}},"visibility":"internal"}],"src":"34371:51:1"},"returnParameters":{"id":1953,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1952,"mutability":"mutable","name":"amountIn","nameLocation":"34457:8:1","nodeType":"VariableDeclaration","scope":1954,"src":"34449:16:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1951,"name":"uint256","nodeType":"ElementaryTypeName","src":"34449:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"34448:18:1"},"scope":1958,"src":"34351:116:1","stateMutability":"payable","virtual":false,"visibility":"external"},{"functionSelector":"12210e8a","id":1957,"implemented":false,"kind":"function","modifiers":[],"name":"refundETH","nameLocation":"34484:9:1","nodeType":"FunctionDefinition","parameters":{"id":1955,"nodeType":"ParameterList","parameters":[],"src":"34493:2:1"},"returnParameters":{"id":1956,"nodeType":"ParameterList","parameters":[],"src":"34512:0:1"},"scope":1958,"src":"34475:38:1","stateMutability":"payable","virtual":false,"visibility":"external"}],"scope":2845,"src":"31523:2993:1","usedErrors":[]},{"abstract":false,"baseContracts":[{"baseName":{"id":1959,"name":"Ownable","nodeType":"IdentifierPath","referencedDeclaration":892,"src":"34542:7:1"},"id":1960,"nodeType":"InheritanceSpecifier","src":"34542:7:1"}],"contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":2003,"linearizedBaseContracts":[2003,892,789],"name":"Claimable","nameLocation":"34529:9:1","nodeType":"ContractDefinition","nodes":[{"body":{"id":1978,"nodeType":"Block","src":"34659:65:1","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":1973,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":820,"src":"34700:5:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1974,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"34700:7:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1975,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1964,"src":"34709:6:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"id":1970,"name":"tokenAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1962,"src":"34677:12:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1969,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":768,"src":"34670:6:1","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20_$768_$","typeString":"type(contract IERC20)"}},"id":1971,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"34670:20:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$768","typeString":"contract IERC20"}},"id":1972,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"transfer","nodeType":"MemberAccess","referencedDeclaration":735,"src":"34670:29:1","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":1976,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"34670:46:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1977,"nodeType":"ExpressionStatement","src":"34670:46:1"}]},"functionSelector":"1698755f","id":1979,"implemented":true,"kind":"function","modifiers":[{"id":1967,"kind":"modifierInvocation","modifierName":{"id":1966,"name":"onlyOwner","nodeType":"IdentifierPath","referencedDeclaration":834,"src":"34649:9:1"},"nodeType":"ModifierInvocation","src":"34649:9:1"}],"name":"claimToken","nameLocation":"34566:10:1","nodeType":"FunctionDefinition","parameters":{"id":1965,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1962,"mutability":"mutable","name":"tokenAddress","nameLocation":"34595:12:1","nodeType":"VariableDeclaration","scope":1979,"src":"34587:20:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1961,"name":"address","nodeType":"ElementaryTypeName","src":"34587:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1964,"mutability":"mutable","name":"amount","nameLocation":"34626:6:1","nodeType":"VariableDeclaration","scope":1979,"src":"34618:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1963,"name":"uint256","nodeType":"ElementaryTypeName","src":"34618:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"34576:63:1"},"returnParameters":{"id":1968,"nodeType":"ParameterList","parameters":[],"src":"34659:0:1"},"scope":2003,"src":"34557:167:1","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":2001,"nodeType":"Block","src":"34785:114:1","statements":[{"assignments":[1987,null],"declarations":[{"constant":false,"id":1987,"mutability":"mutable","name":"sent","nameLocation":"34802:4:1","nodeType":"VariableDeclaration","scope":2001,"src":"34797:9:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1986,"name":"bool","nodeType":"ElementaryTypeName","src":"34797:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},null],"id":1995,"initialValue":{"arguments":[{"hexValue":"","id":1993,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"34840:2:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":1988,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":820,"src":"34812:5:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1989,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"34812:7:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1990,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"call","nodeType":"MemberAccess","src":"34812:12:1","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":1992,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":1991,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1981,"src":"34832:6:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"34812:27:1","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":1994,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"34812:31:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"34796:47:1"},{"expression":{"arguments":[{"id":1997,"name":"sent","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1987,"src":"34862:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4661696c656420746f2073656e64204574686572","id":1998,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"34868:22:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_445140255c9d889994129d349e64078d6f76b4b37ec896948f7e858f9b8a0dcb","typeString":"literal_string \"Failed to send Ether\""},"value":"Failed to send Ether"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_445140255c9d889994129d349e64078d6f76b4b37ec896948f7e858f9b8a0dcb","typeString":"literal_string \"Failed to send Ether\""}],"id":1996,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"34854:7:1","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1999,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"34854:37:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2000,"nodeType":"ExpressionStatement","src":"34854:37:1"}]},"functionSelector":"fe96973a","id":2002,"implemented":true,"kind":"function","modifiers":[{"id":1984,"kind":"modifierInvocation","modifierName":{"id":1983,"name":"onlyOwner","nodeType":"IdentifierPath","referencedDeclaration":834,"src":"34775:9:1"},"nodeType":"ModifierInvocation","src":"34775:9:1"}],"name":"claimETH","nameLocation":"34741:8:1","nodeType":"FunctionDefinition","parameters":{"id":1982,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1981,"mutability":"mutable","name":"amount","nameLocation":"34758:6:1","nodeType":"VariableDeclaration","scope":2002,"src":"34750:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1980,"name":"uint256","nodeType":"ElementaryTypeName","src":"34750:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"34749:16:1"},"returnParameters":{"id":1985,"nodeType":"ParameterList","parameters":[],"src":"34785:0:1"},"scope":2003,"src":"34732:167:1","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":2845,"src":"34520:382:1","usedErrors":[]},{"abstract":false,"baseContracts":[{"baseName":{"id":2004,"name":"Claimable","nodeType":"IdentifierPath","referencedDeclaration":2003,"src":"34926:9:1"},"id":2005,"nodeType":"InheritanceSpecifier","src":"34926:9:1"}],"contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":2844,"linearizedBaseContracts":[2844,2003,892,789],"name":"ProSwap","nameLocation":"34915:7:1","nodeType":"ContractDefinition","nodes":[{"id":2008,"libraryName":{"id":2006,"name":"SafeMath","nodeType":"IdentifierPath","referencedDeclaration":1203,"src":"34949:8:1"},"nodeType":"UsingForDirective","src":"34943:27:1","typeName":{"id":2007,"name":"uint256","nodeType":"ElementaryTypeName","src":"34962:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},{"id":2012,"libraryName":{"id":2009,"name":"SafeERC20","nodeType":"IdentifierPath","referencedDeclaration":1718,"src":"34982:9:1"},"nodeType":"UsingForDirective","src":"34976:27:1","typeName":{"id":2011,"nodeType":"UserDefinedTypeName","pathNode":{"id":2010,"name":"IERC20","nodeType":"IdentifierPath","referencedDeclaration":768,"src":"34996:6:1"},"referencedDeclaration":768,"src":"34996:6:1","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$768","typeString":"contract IERC20"}}},{"constant":false,"functionSelector":"7fd6f15c","id":2015,"mutability":"mutable","name":"feePercent","nameLocation":"35023:10:1","nodeType":"VariableDeclaration","scope":2844,"src":"35011:26:1","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2013,"name":"uint","nodeType":"ElementaryTypeName","src":"35011:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"30","id":2014,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"35036:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"visibility":"public"},{"constant":false,"functionSelector":"f7b2a7be","id":2018,"mutability":"mutable","name":"rewardAmount","nameLocation":"35070:12:1","nodeType":"VariableDeclaration","scope":2844,"src":"35055:50:1","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2016,"name":"uint256","nodeType":"ElementaryTypeName","src":"35055:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"3130303030303030303030303030303030303030","id":2017,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"35085:20:1","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000000_by_1","typeString":"int_const 10000000000000000000"},"value":"10000000000000000000"},"visibility":"public"},{"constant":false,"functionSelector":"8cf57cb9","id":2020,"mutability":"mutable","name":"rewardAddress","nameLocation":"35144:13:1","nodeType":"VariableDeclaration","scope":2844,"src":"35129:28:1","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2019,"name":"address","nodeType":"ElementaryTypeName","src":"35129:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"public"},{"constant":false,"functionSelector":"65e17c9d","id":2022,"mutability":"mutable","name":"feeAccount","nameLocation":"35179:10:1","nodeType":"VariableDeclaration","scope":2844,"src":"35164:25:1","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2021,"name":"address","nodeType":"ElementaryTypeName","src":"35164:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"public"},{"constant":false,"functionSelector":"f887ea40","id":2024,"mutability":"mutable","name":"router","nameLocation":"35211:6:1","nodeType":"VariableDeclaration","scope":2844,"src":"35196:21:1","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2023,"name":"address","nodeType":"ElementaryTypeName","src":"35196:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"public"},{"constant":false,"functionSelector":"117be4c2","id":2026,"mutability":"mutable","name":"wavax","nameLocation":"35239:5:1","nodeType":"VariableDeclaration","scope":2844,"src":"35224:20:1","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2025,"name":"address","nodeType":"ElementaryTypeName","src":"35224:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"public"},{"constant":false,"functionSelector":"3268cc56","id":2029,"mutability":"mutable","name":"routerAddress","nameLocation":"35268:13:1","nodeType":"VariableDeclaration","scope":2844,"src":"35253:73:1","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2027,"name":"address","nodeType":"ElementaryTypeName","src":"35253:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":{"hexValue":"307831336634454138334430626434304537354338323232323535626338353561393734353638446434","id":2028,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"35284:42:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"value":"0x13f4EA83D0bd40E75C8222255bc855a974568Dd4"},"visibility":"public"},{"constant":false,"functionSelector":"966dae0e","id":2032,"mutability":"mutable","name":"factoryAddress","nameLocation":"35348:14:1","nodeType":"VariableDeclaration","scope":2844,"src":"35333:74:1","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2030,"name":"address","nodeType":"ElementaryTypeName","src":"35333:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":{"hexValue":"307830424662434639666134663943353642304634306136373141643430453038303541303931383635","id":2031,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"35365:42:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"value":"0x0BFbCF9fa4f9C56B0F40a671Ad40E0805A091865"},"visibility":"public"},{"constant":false,"functionSelector":"63fe3e3a","id":2035,"mutability":"mutable","name":"wbnbAddress","nameLocation":"35429:11:1","nodeType":"VariableDeclaration","scope":2844,"src":"35414:71:1","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2033,"name":"address","nodeType":"ElementaryTypeName","src":"35414:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":{"hexValue":"307862623443644239434264333642303162443163426145424632446530386439313733626330393563","id":2034,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"35443:42:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"value":"0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c"},"visibility":"public"},{"constant":false,"id":2038,"mutability":"mutable","name":"poolFee","nameLocation":"35499:7:1","nodeType":"VariableDeclaration","scope":2844,"src":"35492:20:1","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"},"typeName":{"id":2036,"name":"uint24","nodeType":"ElementaryTypeName","src":"35492:6:1","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"}},"value":{"hexValue":"313030","id":2037,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"35509:3:1","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"value":"100"},"visibility":"internal"},{"constant":false,"id":2042,"mutability":"mutable","name":"airdropAddress","nameLocation":"35549:14:1","nodeType":"VariableDeclaration","scope":2844,"src":"35521:42:1","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"typeName":{"id":2041,"keyType":{"id":2039,"name":"address","nodeType":"ElementaryTypeName","src":"35529:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"35521:27:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"valueType":{"id":2040,"name":"uint256","nodeType":"ElementaryTypeName","src":"35540:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"internal"},{"constant":false,"id":2046,"mutability":"mutable","name":"airdropLastTime","nameLocation":"35598:15:1","nodeType":"VariableDeclaration","scope":2844,"src":"35570:43:1","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"typeName":{"id":2045,"keyType":{"id":2043,"name":"address","nodeType":"ElementaryTypeName","src":"35578:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"35570:27:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"valueType":{"id":2044,"name":"uint256","nodeType":"ElementaryTypeName","src":"35589:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"internal"},{"body":{"id":2073,"nodeType":"Block","src":"35755:136:1","statements":[{"expression":{"id":2059,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2057,"name":"feeAccount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2022,"src":"35766:10:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2058,"name":"_feeAccount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2048,"src":"35779:11:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"35766:24:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2060,"nodeType":"ExpressionStatement","src":"35766:24:1"},{"expression":{"id":2063,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2061,"name":"router","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2024,"src":"35801:6:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2062,"name":"_router","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2050,"src":"35810:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"35801:16:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2064,"nodeType":"ExpressionStatement","src":"35801:16:1"},{"expression":{"id":2067,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2065,"name":"wavax","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2026,"src":"35828:5:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2066,"name":"_wavax","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2052,"src":"35836:6:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"35828:14:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2068,"nodeType":"ExpressionStatement","src":"35828:14:1"},{"expression":{"id":2071,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2069,"name":"rewardAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2020,"src":"35853:13:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2070,"name":"_rewardAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2054,"src":"35869:14:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"35853:30:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2072,"nodeType":"ExpressionStatement","src":"35853:30:1"}]},"id":2074,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":2055,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2048,"mutability":"mutable","name":"_feeAccount","nameLocation":"35652:11:1","nodeType":"VariableDeclaration","scope":2074,"src":"35644:19:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2047,"name":"address","nodeType":"ElementaryTypeName","src":"35644:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2050,"mutability":"mutable","name":"_router","nameLocation":"35682:7:1","nodeType":"VariableDeclaration","scope":2074,"src":"35674:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2049,"name":"address","nodeType":"ElementaryTypeName","src":"35674:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2052,"mutability":"mutable","name":"_wavax","nameLocation":"35708:6:1","nodeType":"VariableDeclaration","scope":2074,"src":"35700:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2051,"name":"address","nodeType":"ElementaryTypeName","src":"35700:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2054,"mutability":"mutable","name":"_rewardAddress","nameLocation":"35733:14:1","nodeType":"VariableDeclaration","scope":2074,"src":"35725:22:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2053,"name":"address","nodeType":"ElementaryTypeName","src":"35725:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"35633:121:1"},"returnParameters":{"id":2056,"nodeType":"ParameterList","parameters":[],"src":"35755:0:1"},"scope":2844,"src":"35622:269:1","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":2120,"nodeType":"Block","src":"35927:419:1","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2086,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2083,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":2078,"name":"airdropAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2042,"src":"35960:14:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":2081,"indexExpression":{"expression":{"id":2079,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"35975:3:1","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2080,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"35975:10:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"35960:26:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"3836343030","id":2082,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"35989:5:1","typeDescriptions":{"typeIdentifier":"t_rational_86400_by_1","typeString":"int_const 86400"},"value":"86400"},"src":"35960:34:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"id":2084,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"35997:5:1","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":2085,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"timestamp","nodeType":"MemberAccess","src":"35997:15:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"35960:52:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"596f7520646964206e6f74207377617020696e20323420686f757273","id":2087,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"36027:30:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_797abde7c0639a1dc8346b8f598cbf1957cf783fc0005f1a141aeb4674e15c74","typeString":"literal_string \"You did not swap in 24 hours\""},"value":"You did not swap in 24 hours"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_797abde7c0639a1dc8346b8f598cbf1957cf783fc0005f1a141aeb4674e15c74","typeString":"literal_string \"You did not swap in 24 hours\""}],"id":2077,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"35938:7:1","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2088,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"35938:130:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2089,"nodeType":"ExpressionStatement","src":"35938:130:1"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2099,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2091,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"36103:5:1","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":2092,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"timestamp","nodeType":"MemberAccess","src":"36103:15:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2098,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":2093,"name":"airdropLastTime","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2046,"src":"36121:15:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":2096,"indexExpression":{"expression":{"id":2094,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"36137:3:1","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2095,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"36137:10:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"36121:27:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"3836343030","id":2097,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"36151:5:1","typeDescriptions":{"typeIdentifier":"t_rational_86400_by_1","typeString":"int_const 86400"},"value":"86400"},"src":"36121:35:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"36103:53:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"596f752061697264726f70656420696e20323420686f757273","id":2100,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"36171:27:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_8ff2a40bc13d030f2a459ef7b37b7fe78e1bb34bd7a7ef6ed1539774e9557e2d","typeString":"literal_string \"You airdroped in 24 hours\""},"value":"You airdroped in 24 hours"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_8ff2a40bc13d030f2a459ef7b37b7fe78e1bb34bd7a7ef6ed1539774e9557e2d","typeString":"literal_string \"You airdroped in 24 hours\""}],"id":2090,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"36081:7:1","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2101,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"36081:128:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2102,"nodeType":"ExpressionStatement","src":"36081:128:1"},{"expression":{"arguments":[{"expression":{"id":2107,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"36257:3:1","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2108,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"36257:10:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2109,"name":"rewardAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2018,"src":"36269:12:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"id":2104,"name":"rewardAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2020,"src":"36229:13:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2103,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":768,"src":"36222:6:1","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20_$768_$","typeString":"type(contract IERC20)"}},"id":2105,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"36222:21:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$768","typeString":"contract IERC20"}},"id":2106,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"safeTransfer","nodeType":"MemberAccess","referencedDeclaration":1525,"src":"36222:34:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$768_$_t_address_$_t_uint256_$returns$__$bound_to$_t_contract$_IERC20_$768_$","typeString":"function (contract IERC20,address,uint256)"}},"id":2110,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"36222:60:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2111,"nodeType":"ExpressionStatement","src":"36222:60:1"},{"expression":{"id":2118,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2112,"name":"airdropLastTime","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2046,"src":"36293:15:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":2115,"indexExpression":{"expression":{"id":2113,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"36309:3:1","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2114,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"36309:10:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"36293:27:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"id":2116,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"36323:5:1","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":2117,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"timestamp","nodeType":"MemberAccess","src":"36323:15:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"36293:45:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2119,"nodeType":"ExpressionStatement","src":"36293:45:1"}]},"functionSelector":"3884d635","id":2121,"implemented":true,"kind":"function","modifiers":[],"name":"airdrop","nameLocation":"35908:7:1","nodeType":"FunctionDefinition","parameters":{"id":2075,"nodeType":"ParameterList","parameters":[],"src":"35915:2:1"},"returnParameters":{"id":2076,"nodeType":"ParameterList","parameters":[],"src":"35927:0:1"},"scope":2844,"src":"35899:447:1","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":2209,"nodeType":"Block","src":"36480:479:1","statements":[{"expression":{"id":2136,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2130,"name":"airdropAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2042,"src":"36491:14:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":2133,"indexExpression":{"expression":{"id":2131,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"36506:3:1","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2132,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"36506:10:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"36491:26:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"id":2134,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"36520:5:1","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":2135,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"timestamp","nodeType":"MemberAccess","src":"36520:15:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"36491:44:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2137,"nodeType":"ExpressionStatement","src":"36491:44:1"},{"assignments":[2142],"declarations":[{"constant":false,"id":2142,"mutability":"mutable","name":"path","nameLocation":"36563:4:1","nodeType":"VariableDeclaration","scope":2209,"src":"36546:21:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":2140,"name":"address","nodeType":"ElementaryTypeName","src":"36546:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2141,"nodeType":"ArrayTypeName","src":"36546:9:1","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"}],"id":2148,"initialValue":{"arguments":[{"hexValue":"32","id":2146,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"36584:1:1","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"}],"id":2145,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"36570:13:1","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_address_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (address[] memory)"},"typeName":{"baseType":{"id":2143,"name":"address","nodeType":"ElementaryTypeName","src":"36574:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2144,"nodeType":"ArrayTypeName","src":"36574:9:1","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}}},"id":2147,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"36570:16:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"nodeType":"VariableDeclarationStatement","src":"36546:40:1"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2154,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2149,"name":"_tokenA","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2123,"src":"36601:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":2152,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"36620:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2151,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"36612:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2150,"name":"address","nodeType":"ElementaryTypeName","src":"36612:7:1","typeDescriptions":{}}},"id":2153,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"36612:10:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"36601:21:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2173,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2168,"name":"_tokenB","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2125,"src":"36708:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":2171,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"36727:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2170,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"36719:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2169,"name":"address","nodeType":"ElementaryTypeName","src":"36719:7:1","typeDescriptions":{}}},"id":2172,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"36719:10:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"36708:21:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":2199,"nodeType":"Block","src":"36811:76:1","statements":[{"expression":{"id":2191,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2187,"name":"path","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2142,"src":"36826:4:1","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"id":2189,"indexExpression":{"hexValue":"30","id":2188,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"36831:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"36826:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2190,"name":"_tokenA","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2123,"src":"36836:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"36826:17:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2192,"nodeType":"ExpressionStatement","src":"36826:17:1"},{"expression":{"id":2197,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2193,"name":"path","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2142,"src":"36858:4:1","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"id":2195,"indexExpression":{"hexValue":"31","id":2194,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"36863:1:1","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"36858:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2196,"name":"_tokenB","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2125,"src":"36868:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"36858:17:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2198,"nodeType":"ExpressionStatement","src":"36858:17:1"}]},"id":2200,"nodeType":"IfStatement","src":"36704:183:1","trueBody":{"id":2186,"nodeType":"Block","src":"36731:74:1","statements":[{"expression":{"id":2178,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2174,"name":"path","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2142,"src":"36746:4:1","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"id":2176,"indexExpression":{"hexValue":"30","id":2175,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"36751:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"36746:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2177,"name":"_tokenA","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2123,"src":"36756:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"36746:17:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2179,"nodeType":"ExpressionStatement","src":"36746:17:1"},{"expression":{"id":2184,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2180,"name":"path","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2142,"src":"36778:4:1","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"id":2182,"indexExpression":{"hexValue":"31","id":2181,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"36783:1:1","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"36778:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2183,"name":"wavax","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2026,"src":"36788:5:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"36778:15:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2185,"nodeType":"ExpressionStatement","src":"36778:15:1"}]}},"id":2201,"nodeType":"IfStatement","src":"36597:290:1","trueBody":{"id":2167,"nodeType":"Block","src":"36624:74:1","statements":[{"expression":{"id":2159,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2155,"name":"path","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2142,"src":"36639:4:1","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"id":2157,"indexExpression":{"hexValue":"30","id":2156,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"36644:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"36639:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2158,"name":"wavax","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2026,"src":"36649:5:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"36639:15:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2160,"nodeType":"ExpressionStatement","src":"36639:15:1"},{"expression":{"id":2165,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2161,"name":"path","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2142,"src":"36669:4:1","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"id":2163,"indexExpression":{"hexValue":"31","id":2162,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"36674:1:1","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"36669:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2164,"name":"_tokenB","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2125,"src":"36679:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"36669:17:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2166,"nodeType":"ExpressionStatement","src":"36669:17:1"}]}},{"expression":{"arguments":[{"id":2203,"name":"_tokenA","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2123,"src":"36917:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2204,"name":"_tokenB","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2125,"src":"36926:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2205,"name":"_amountIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2127,"src":"36935:9:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2206,"name":"path","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2142,"src":"36946:4:1","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}],"id":2202,"name":"_proceedToUniswap","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2426,"src":"36899:17:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_array$_t_address_$dyn_memory_ptr_$returns$__$","typeString":"function (address,address,uint256,address[] memory)"}},"id":2207,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"36899:52:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2208,"nodeType":"ExpressionStatement","src":"36899:52:1"}]},"functionSelector":"4ce222da","id":2210,"implemented":true,"kind":"function","modifiers":[],"name":"swapV2Tokens","nameLocation":"36363:12:1","nodeType":"FunctionDefinition","parameters":{"id":2128,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2123,"mutability":"mutable","name":"_tokenA","nameLocation":"36394:7:1","nodeType":"VariableDeclaration","scope":2210,"src":"36386:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2122,"name":"address","nodeType":"ElementaryTypeName","src":"36386:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2125,"mutability":"mutable","name":"_tokenB","nameLocation":"36420:7:1","nodeType":"VariableDeclaration","scope":2210,"src":"36412:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2124,"name":"address","nodeType":"ElementaryTypeName","src":"36412:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2127,"mutability":"mutable","name":"_amountIn","nameLocation":"36446:9:1","nodeType":"VariableDeclaration","scope":2210,"src":"36438:17:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2126,"name":"uint256","nodeType":"ElementaryTypeName","src":"36438:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"36375:87:1"},"returnParameters":{"id":2129,"nodeType":"ParameterList","parameters":[],"src":"36480:0:1"},"scope":2844,"src":"36354:605:1","stateMutability":"payable","virtual":false,"visibility":"external"},{"body":{"id":2300,"nodeType":"Block","src":"37129:674:1","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2227,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2222,"name":"_tokenA","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2212,"src":"37144:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":2225,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"37163:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2224,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"37155:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2223,"name":"address","nodeType":"ElementaryTypeName","src":"37155:7:1","typeDescriptions":{}}},"id":2226,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"37155:10:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"37144:21:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2252,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2247,"name":"_tokenB","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2214,"src":"37352:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":2250,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"37371:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2249,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"37363:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2248,"name":"address","nodeType":"ElementaryTypeName","src":"37363:7:1","typeDescriptions":{}}},"id":2251,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"37363:10:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"37352:21:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":2290,"nodeType":"Block","src":"37556:177:1","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2286,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2277,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2273,"name":"_tokenA","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2212,"src":"37597:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"baseExpression":{"id":2274,"name":"path","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2219,"src":"37608:4:1","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"id":2276,"indexExpression":{"hexValue":"30","id":2275,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"37613:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"37608:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"37597:18:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2285,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2278,"name":"_tokenB","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2214,"src":"37619:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"baseExpression":{"id":2279,"name":"path","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2219,"src":"37630:4:1","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"id":2284,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2283,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2280,"name":"path","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2219,"src":"37635:4:1","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"id":2281,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"37635:11:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":2282,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"37649:1:1","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"37635:15:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"37630:21:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"37619:32:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"37597:54:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"506174746965537761703a2050617468206d75737420626520737065636966696564","id":2287,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"37670:36:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_126adf17cba57bad3f5d489069f4b43a3c7599a72527e16e7e32dab66ae185ae","typeString":"literal_string \"PattieSwap: Path must be specified\""},"value":"PattieSwap: Path must be specified"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_126adf17cba57bad3f5d489069f4b43a3c7599a72527e16e7e32dab66ae185ae","typeString":"literal_string \"PattieSwap: Path must be specified\""}],"id":2272,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"37571:7:1","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2288,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"37571:150:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2289,"nodeType":"ExpressionStatement","src":"37571:150:1"}]},"id":2291,"nodeType":"IfStatement","src":"37348:385:1","trueBody":{"id":2271,"nodeType":"Block","src":"37375:175:1","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2267,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2258,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2254,"name":"_tokenA","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2212,"src":"37416:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"baseExpression":{"id":2255,"name":"path","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2219,"src":"37427:4:1","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"id":2257,"indexExpression":{"hexValue":"30","id":2256,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"37432:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"37427:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"37416:18:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2266,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2259,"name":"wavax","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2026,"src":"37438:5:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"baseExpression":{"id":2260,"name":"path","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2219,"src":"37447:4:1","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"id":2265,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2264,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2261,"name":"path","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2219,"src":"37452:4:1","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"id":2262,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"37452:11:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":2263,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"37466:1:1","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"37452:15:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"37447:21:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"37438:30:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"37416:52:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"506174746965537761703a2050617468206d75737420626520737065636966696564","id":2268,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"37487:36:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_126adf17cba57bad3f5d489069f4b43a3c7599a72527e16e7e32dab66ae185ae","typeString":"literal_string \"PattieSwap: Path must be specified\""},"value":"PattieSwap: Path must be specified"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_126adf17cba57bad3f5d489069f4b43a3c7599a72527e16e7e32dab66ae185ae","typeString":"literal_string \"PattieSwap: Path must be specified\""}],"id":2253,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"37390:7:1","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2269,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"37390:148:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2270,"nodeType":"ExpressionStatement","src":"37390:148:1"}]}},"id":2292,"nodeType":"IfStatement","src":"37140:593:1","trueBody":{"id":2246,"nodeType":"Block","src":"37167:175:1","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2242,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2233,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2229,"name":"wavax","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2026,"src":"37208:5:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"baseExpression":{"id":2230,"name":"path","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2219,"src":"37217:4:1","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"id":2232,"indexExpression":{"hexValue":"30","id":2231,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"37222:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"37217:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"37208:16:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2241,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2234,"name":"_tokenB","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2214,"src":"37228:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"baseExpression":{"id":2235,"name":"path","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2219,"src":"37239:4:1","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"id":2240,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2239,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2236,"name":"path","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2219,"src":"37244:4:1","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"id":2237,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"37244:11:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":2238,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"37258:1:1","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"37244:15:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"37239:21:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"37228:32:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"37208:52:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"506174746965537761703a2050617468206d75737420626520737065636966696564","id":2243,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"37279:36:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_126adf17cba57bad3f5d489069f4b43a3c7599a72527e16e7e32dab66ae185ae","typeString":"literal_string \"PattieSwap: Path must be specified\""},"value":"PattieSwap: Path must be specified"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_126adf17cba57bad3f5d489069f4b43a3c7599a72527e16e7e32dab66ae185ae","typeString":"literal_string \"PattieSwap: Path must be specified\""}],"id":2228,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"37182:7:1","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2244,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"37182:148:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2245,"nodeType":"ExpressionStatement","src":"37182:148:1"}]}},{"expression":{"arguments":[{"id":2294,"name":"_tokenA","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2212,"src":"37761:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2295,"name":"_tokenB","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2214,"src":"37770:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2296,"name":"_amountIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2216,"src":"37779:9:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2297,"name":"path","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2219,"src":"37790:4:1","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}],"id":2293,"name":"_proceedToUniswap","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2426,"src":"37743:17:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_array$_t_address_$dyn_memory_ptr_$returns$__$","typeString":"function (address,address,uint256,address[] memory)"}},"id":2298,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"37743:52:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2299,"nodeType":"ExpressionStatement","src":"37743:52:1"}]},"functionSelector":"9de2827b","id":2301,"implemented":true,"kind":"function","modifiers":[],"name":"customSwapTokens","nameLocation":"36976:16:1","nodeType":"FunctionDefinition","parameters":{"id":2220,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2212,"mutability":"mutable","name":"_tokenA","nameLocation":"37011:7:1","nodeType":"VariableDeclaration","scope":2301,"src":"37003:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2211,"name":"address","nodeType":"ElementaryTypeName","src":"37003:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2214,"mutability":"mutable","name":"_tokenB","nameLocation":"37037:7:1","nodeType":"VariableDeclaration","scope":2301,"src":"37029:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2213,"name":"address","nodeType":"ElementaryTypeName","src":"37029:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2216,"mutability":"mutable","name":"_amountIn","nameLocation":"37063:9:1","nodeType":"VariableDeclaration","scope":2301,"src":"37055:17:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2215,"name":"uint256","nodeType":"ElementaryTypeName","src":"37055:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2219,"mutability":"mutable","name":"path","nameLocation":"37100:4:1","nodeType":"VariableDeclaration","scope":2301,"src":"37083:21:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":2217,"name":"address","nodeType":"ElementaryTypeName","src":"37083:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2218,"nodeType":"ArrayTypeName","src":"37083:9:1","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"}],"src":"36992:119:1"},"returnParameters":{"id":2221,"nodeType":"ParameterList","parameters":[],"src":"37129:0:1"},"scope":2844,"src":"36967:836:1","stateMutability":"payable","virtual":false,"visibility":"external"},{"body":{"id":2425,"nodeType":"Block","src":"37966:1004:1","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2316,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2314,"name":"_amountIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2307,"src":"37985:9:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2315,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"37997:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"37985:13:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"506174746965537761703a20616d6f756e74496e206d7573742062652067726561746572207468616e2030","id":2317,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"38000:45:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_946fb9d4d3f17144c3d6e236e8acbd91334f49d924b06e35bc65e960716f6155","typeString":"literal_string \"PattieSwap: amountIn must be greater than 0\""},"value":"PattieSwap: amountIn must be greater than 0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_946fb9d4d3f17144c3d6e236e8acbd91334f49d924b06e35bc65e960716f6155","typeString":"literal_string \"PattieSwap: amountIn must be greater than 0\""}],"id":2313,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"37977:7:1","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2318,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"37977:69:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2319,"nodeType":"ExpressionStatement","src":"37977:69:1"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2325,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2320,"name":"_tokenA","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2303,"src":"38063:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":2323,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"38082:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2322,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"38074:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2321,"name":"address","nodeType":"ElementaryTypeName","src":"38074:7:1","typeDescriptions":{}}},"id":2324,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"38074:10:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"38063:21:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":2423,"nodeType":"Block","src":"38391:572:1","statements":[{"expression":{"arguments":[{"expression":{"id":2367,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"38457:3:1","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2368,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"38457:10:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"id":2371,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"38494:4:1","typeDescriptions":{"typeIdentifier":"t_contract$_ProSwap_$2844","typeString":"contract ProSwap"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_ProSwap_$2844","typeString":"contract ProSwap"}],"id":2370,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"38486:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2369,"name":"address","nodeType":"ElementaryTypeName","src":"38486:7:1","typeDescriptions":{}}},"id":2372,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"38486:13:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2373,"name":"_amountIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2307,"src":"38518:9:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"id":2364,"name":"_tokenA","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2303,"src":"38413:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2363,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":768,"src":"38406:6:1","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20_$768_$","typeString":"type(contract IERC20)"}},"id":2365,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"38406:15:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$768","typeString":"contract IERC20"}},"id":2366,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"safeTransferFrom","nodeType":"MemberAccess","referencedDeclaration":1551,"src":"38406:32:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$768_$_t_address_$_t_address_$_t_uint256_$returns$__$bound_to$_t_contract$_IERC20_$768_$","typeString":"function (contract IERC20,address,address,uint256)"}},"id":2374,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"38406:136:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2375,"nodeType":"ExpressionStatement","src":"38406:136:1"},{"assignments":[2377],"declarations":[{"constant":false,"id":2377,"mutability":"mutable","name":"fee","nameLocation":"38562:3:1","nodeType":"VariableDeclaration","scope":2423,"src":"38557:8:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2376,"name":"uint","nodeType":"ElementaryTypeName","src":"38557:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2384,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2383,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2380,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2378,"name":"_amountIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2307,"src":"38569:9:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2379,"name":"feePercent","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2015,"src":"38581:10:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"38569:22:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2381,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"38568:24:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"hexValue":"3130303030","id":2382,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"38595:5:1","typeDescriptions":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"},"value":"10000"},"src":"38568:32:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"38557:43:1"},{"expression":{"arguments":[{"id":2389,"name":"feeAccount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2022,"src":"38644:10:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2390,"name":"fee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2377,"src":"38656:3:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"id":2386,"name":"_tokenA","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2303,"src":"38622:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2385,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":768,"src":"38615:6:1","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20_$768_$","typeString":"type(contract IERC20)"}},"id":2387,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"38615:15:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$768","typeString":"contract IERC20"}},"id":2388,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"safeTransfer","nodeType":"MemberAccess","referencedDeclaration":1525,"src":"38615:28:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$768_$_t_address_$_t_uint256_$returns$__$bound_to$_t_contract$_IERC20_$768_$","typeString":"function (contract IERC20,address,uint256)"}},"id":2391,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"38615:45:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2392,"nodeType":"ExpressionStatement","src":"38615:45:1"},{"assignments":[2394],"declarations":[{"constant":false,"id":2394,"mutability":"mutable","name":"amountToSwap","nameLocation":"38680:12:1","nodeType":"VariableDeclaration","scope":2423,"src":"38675:17:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2393,"name":"uint","nodeType":"ElementaryTypeName","src":"38675:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2398,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2397,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2395,"name":"_amountIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2307,"src":"38695:9:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":2396,"name":"fee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2377,"src":"38707:3:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"38695:15:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"38675:35:1"},{"expression":{"arguments":[{"id":2400,"name":"_tokenA","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2303,"src":"38734:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2401,"name":"amountToSwap","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2394,"src":"38743:12:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2399,"name":"_approve","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2445,"src":"38725:8:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":2402,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"38725:31:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2403,"nodeType":"ExpressionStatement","src":"38725:31:1"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2409,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2404,"name":"_tokenB","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2305,"src":"38775:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":2407,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"38794:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2406,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"38786:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2405,"name":"address","nodeType":"ElementaryTypeName","src":"38786:7:1","typeDescriptions":{}}},"id":2408,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"38786:10:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"38775:21:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":2421,"nodeType":"Block","src":"38877:75:1","statements":[{"expression":{"arguments":[{"id":2417,"name":"amountToSwap","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2394,"src":"38917:12:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2418,"name":"path","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2310,"src":"38931:4:1","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}],"id":2416,"name":"_swapTokensForTokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2512,"src":"38896:20:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint256_$_t_array$_t_address_$dyn_memory_ptr_$returns$__$","typeString":"function (uint256,address[] memory)"}},"id":2419,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"38896:40:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2420,"nodeType":"ExpressionStatement","src":"38896:40:1"}]},"id":2422,"nodeType":"IfStatement","src":"38771:181:1","trueBody":{"id":2415,"nodeType":"Block","src":"38798:73:1","statements":[{"expression":{"arguments":[{"id":2411,"name":"amountToSwap","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2394,"src":"38836:12:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2412,"name":"path","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2310,"src":"38850:4:1","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}],"id":2410,"name":"_swapTokensForAVAX","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2467,"src":"38817:18:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint256_$_t_array$_t_address_$dyn_memory_ptr_$returns$__$","typeString":"function (uint256,address[] memory)"}},"id":2413,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"38817:38:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2414,"nodeType":"ExpressionStatement","src":"38817:38:1"}]}}]},"id":2424,"nodeType":"IfStatement","src":"38059:904:1","trueBody":{"id":2362,"nodeType":"Block","src":"38086:299:1","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2330,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2327,"name":"_amountIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2307,"src":"38109:9:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"expression":{"id":2328,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"38122:3:1","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2329,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"value","nodeType":"MemberAccess","src":"38122:9:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"38109:22:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"506174746965537761703a20496e73756666696369656e7420455448","id":2331,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"38133:30:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_01e87990a0dc07718ceddba976403cc2935fd21bf07b78a80df682aad724bf67","typeString":"literal_string \"PattieSwap: Insufficient ETH\""},"value":"PattieSwap: Insufficient ETH"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_01e87990a0dc07718ceddba976403cc2935fd21bf07b78a80df682aad724bf67","typeString":"literal_string \"PattieSwap: Insufficient ETH\""}],"id":2326,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"38101:7:1","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2332,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"38101:63:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2333,"nodeType":"ExpressionStatement","src":"38101:63:1"},{"assignments":[2335],"declarations":[{"constant":false,"id":2335,"mutability":"mutable","name":"fee","nameLocation":"38184:3:1","nodeType":"VariableDeclaration","scope":2362,"src":"38179:8:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2334,"name":"uint","nodeType":"ElementaryTypeName","src":"38179:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2342,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2341,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2338,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2336,"name":"_amountIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2307,"src":"38191:9:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2337,"name":"feePercent","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2015,"src":"38203:10:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"38191:22:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2339,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"38190:24:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"hexValue":"3130303030","id":2340,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"38217:5:1","typeDescriptions":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"},"value":"10000"},"src":"38190:32:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"38179:43:1"},{"expression":{"arguments":[{"id":2348,"name":"fee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2335,"src":"38266:3:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"id":2345,"name":"feeAccount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2022,"src":"38245:10:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2344,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"38237:8:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_payable_$","typeString":"type(address payable)"},"typeName":{"id":2343,"name":"address","nodeType":"ElementaryTypeName","src":"38237:8:1","stateMutability":"payable","typeDescriptions":{}}},"id":2346,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"38237:19:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":2347,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"transfer","nodeType":"MemberAccess","src":"38237:28:1","typeDescriptions":{"typeIdentifier":"t_function_transfer_nonpayable$_t_uint256_$returns$__$","typeString":"function (uint256)"}},"id":2349,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"38237:33:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2350,"nodeType":"ExpressionStatement","src":"38237:33:1"},{"assignments":[2352],"declarations":[{"constant":false,"id":2352,"mutability":"mutable","name":"amountToSwap","nameLocation":"38290:12:1","nodeType":"VariableDeclaration","scope":2362,"src":"38285:17:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2351,"name":"uint","nodeType":"ElementaryTypeName","src":"38285:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2356,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2355,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2353,"name":"_amountIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2307,"src":"38305:9:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":2354,"name":"fee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2335,"src":"38317:3:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"38305:15:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"38285:35:1"},{"expression":{"arguments":[{"id":2358,"name":"amountToSwap","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2352,"src":"38354:12:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2359,"name":"path","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2310,"src":"38368:4:1","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}],"id":2357,"name":"_swapAVAXForTokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2490,"src":"38335:18:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint256_$_t_array$_t_address_$dyn_memory_ptr_$returns$__$","typeString":"function (uint256,address[] memory)"}},"id":2360,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"38335:38:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2361,"nodeType":"ExpressionStatement","src":"38335:38:1"}]}}]},"id":2426,"implemented":true,"kind":"function","modifiers":[],"name":"_proceedToUniswap","nameLocation":"37820:17:1","nodeType":"FunctionDefinition","parameters":{"id":2311,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2303,"mutability":"mutable","name":"_tokenA","nameLocation":"37856:7:1","nodeType":"VariableDeclaration","scope":2426,"src":"37848:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2302,"name":"address","nodeType":"ElementaryTypeName","src":"37848:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2305,"mutability":"mutable","name":"_tokenB","nameLocation":"37882:7:1","nodeType":"VariableDeclaration","scope":2426,"src":"37874:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2304,"name":"address","nodeType":"ElementaryTypeName","src":"37874:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2307,"mutability":"mutable","name":"_amountIn","nameLocation":"37908:9:1","nodeType":"VariableDeclaration","scope":2426,"src":"37900:17:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2306,"name":"uint256","nodeType":"ElementaryTypeName","src":"37900:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2310,"mutability":"mutable","name":"path","nameLocation":"37945:4:1","nodeType":"VariableDeclaration","scope":2426,"src":"37928:21:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":2308,"name":"address","nodeType":"ElementaryTypeName","src":"37928:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2309,"nodeType":"ArrayTypeName","src":"37928:9:1","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"}],"src":"37837:119:1"},"returnParameters":{"id":2312,"nodeType":"ParameterList","parameters":[],"src":"37966:0:1"},"scope":2844,"src":"37811:1159:1","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2444,"nodeType":"Block","src":"39035:67:1","statements":[{"expression":{"arguments":[{"arguments":[{"id":2439,"name":"router","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2024,"src":"39077:6:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2438,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"39069:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2437,"name":"address","nodeType":"ElementaryTypeName","src":"39069:7:1","typeDescriptions":{}}},"id":2440,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"39069:15:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2441,"name":"_amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2430,"src":"39086:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"id":2434,"name":"_token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2428,"src":"39053:6:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2433,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":768,"src":"39046:6:1","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20_$768_$","typeString":"type(contract IERC20)"}},"id":2435,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"39046:14:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$768","typeString":"contract IERC20"}},"id":2436,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"approve","nodeType":"MemberAccess","referencedDeclaration":755,"src":"39046:22:1","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":2442,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"39046:48:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2443,"nodeType":"ExpressionStatement","src":"39046:48:1"}]},"id":2445,"implemented":true,"kind":"function","modifiers":[],"name":"_approve","nameLocation":"38987:8:1","nodeType":"FunctionDefinition","parameters":{"id":2431,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2428,"mutability":"mutable","name":"_token","nameLocation":"39004:6:1","nodeType":"VariableDeclaration","scope":2445,"src":"38996:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2427,"name":"address","nodeType":"ElementaryTypeName","src":"38996:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2430,"mutability":"mutable","name":"_amount","nameLocation":"39017:7:1","nodeType":"VariableDeclaration","scope":2445,"src":"39012:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2429,"name":"uint","nodeType":"ElementaryTypeName","src":"39012:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"38995:30:1"},"returnParameters":{"id":2432,"nodeType":"ParameterList","parameters":[],"src":"39035:0:1"},"scope":2844,"src":"38978:124:1","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2466,"nodeType":"Block","src":"39184:179:1","statements":[{"expression":{"arguments":[{"id":2457,"name":"_amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2447,"src":"39247:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"30","id":2458,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"39269:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"id":2459,"name":"path","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2450,"src":"39285:4:1","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},{"expression":{"id":2460,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"39304:3:1","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2461,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"39304:10:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":2462,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"39329:5:1","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":2463,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"timestamp","nodeType":"MemberAccess","src":"39329:15:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"id":2454,"name":"router","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2024,"src":"39203:6:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2453,"name":"IRouter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1780,"src":"39195:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IRouter_$1780_$","typeString":"type(contract IRouter)"}},"id":2455,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"39195:15:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IRouter_$1780","typeString":"contract IRouter"}},"id":2456,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"swapExactTokensForETH","nodeType":"MemberAccess","referencedDeclaration":1768,"src":"39195:37:1","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_uint256_$_t_uint256_$_t_array$_t_address_$dyn_memory_ptr_$_t_address_$_t_uint256_$returns$_t_array$_t_uint256_$dyn_memory_ptr_$","typeString":"function (uint256,uint256,address[] memory,address,uint256) external returns (uint256[] memory)"}},"id":2464,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"39195:160:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":2465,"nodeType":"ExpressionStatement","src":"39195:160:1"}]},"id":2467,"implemented":true,"kind":"function","modifiers":[],"name":"_swapTokensForAVAX","nameLocation":"39119:18:1","nodeType":"FunctionDefinition","parameters":{"id":2451,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2447,"mutability":"mutable","name":"_amount","nameLocation":"39143:7:1","nodeType":"VariableDeclaration","scope":2467,"src":"39138:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2446,"name":"uint","nodeType":"ElementaryTypeName","src":"39138:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2450,"mutability":"mutable","name":"path","nameLocation":"39169:4:1","nodeType":"VariableDeclaration","scope":2467,"src":"39152:21:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":2448,"name":"address","nodeType":"ElementaryTypeName","src":"39152:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2449,"nodeType":"ArrayTypeName","src":"39152:9:1","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"}],"src":"39137:37:1"},"returnParameters":{"id":2452,"nodeType":"ParameterList","parameters":[],"src":"39184:0:1"},"scope":2844,"src":"39110:253:1","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2489,"nodeType":"Block","src":"39445:173:1","statements":[{"expression":{"arguments":[{"hexValue":"30","id":2481,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"39524:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"id":2482,"name":"path","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2472,"src":"39540:4:1","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},{"expression":{"id":2483,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"39559:3:1","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2484,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"39559:10:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":2485,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"39584:5:1","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":2486,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"timestamp","nodeType":"MemberAccess","src":"39584:15:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"id":2476,"name":"router","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2024,"src":"39464:6:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2475,"name":"IRouter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1780,"src":"39456:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IRouter_$1780_$","typeString":"type(contract IRouter)"}},"id":2477,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"39456:15:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IRouter_$1780","typeString":"contract IRouter"}},"id":2478,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"swapExactETHForTokens","nodeType":"MemberAccess","referencedDeclaration":1751,"src":"39456:37:1","typeDescriptions":{"typeIdentifier":"t_function_external_payable$_t_uint256_$_t_array$_t_address_$dyn_memory_ptr_$_t_address_$_t_uint256_$returns$_t_array$_t_uint256_$dyn_memory_ptr_$","typeString":"function (uint256,address[] memory,address,uint256) payable external returns (uint256[] memory)"}},"id":2480,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":2479,"name":"_amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2469,"src":"39501:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"39456:53:1","typeDescriptions":{"typeIdentifier":"t_function_external_payable$_t_uint256_$_t_array$_t_address_$dyn_memory_ptr_$_t_address_$_t_uint256_$returns$_t_array$_t_uint256_$dyn_memory_ptr_$value","typeString":"function (uint256,address[] memory,address,uint256) payable external returns (uint256[] memory)"}},"id":2487,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"39456:154:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":2488,"nodeType":"ExpressionStatement","src":"39456:154:1"}]},"id":2490,"implemented":true,"kind":"function","modifiers":[],"name":"_swapAVAXForTokens","nameLocation":"39380:18:1","nodeType":"FunctionDefinition","parameters":{"id":2473,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2469,"mutability":"mutable","name":"_amount","nameLocation":"39404:7:1","nodeType":"VariableDeclaration","scope":2490,"src":"39399:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2468,"name":"uint","nodeType":"ElementaryTypeName","src":"39399:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2472,"mutability":"mutable","name":"path","nameLocation":"39430:4:1","nodeType":"VariableDeclaration","scope":2490,"src":"39413:21:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":2470,"name":"address","nodeType":"ElementaryTypeName","src":"39413:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2471,"nodeType":"ArrayTypeName","src":"39413:9:1","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"}],"src":"39398:37:1"},"returnParameters":{"id":2474,"nodeType":"ParameterList","parameters":[],"src":"39445:0:1"},"scope":2844,"src":"39371:247:1","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2511,"nodeType":"Block","src":"39727:182:1","statements":[{"expression":{"arguments":[{"id":2502,"name":"_amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2492,"src":"39793:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"30","id":2503,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"39815:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"id":2504,"name":"path","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2495,"src":"39831:4:1","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},{"expression":{"id":2505,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"39850:3:1","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2506,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"39850:10:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":2507,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"39875:5:1","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":2508,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"timestamp","nodeType":"MemberAccess","src":"39875:15:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"id":2499,"name":"router","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2024,"src":"39746:6:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2498,"name":"IRouter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1780,"src":"39738:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IRouter_$1780_$","typeString":"type(contract IRouter)"}},"id":2500,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"39738:15:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IRouter_$1780","typeString":"contract IRouter"}},"id":2501,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"swapExactTokensForTokens","nodeType":"MemberAccess","referencedDeclaration":1736,"src":"39738:40:1","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_uint256_$_t_uint256_$_t_array$_t_address_$dyn_memory_ptr_$_t_address_$_t_uint256_$returns$_t_array$_t_uint256_$dyn_memory_ptr_$","typeString":"function (uint256,uint256,address[] memory,address,uint256) external returns (uint256[] memory)"}},"id":2509,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"39738:163:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":2510,"nodeType":"ExpressionStatement","src":"39738:163:1"}]},"id":2512,"implemented":true,"kind":"function","modifiers":[],"name":"_swapTokensForTokens","nameLocation":"39635:20:1","nodeType":"FunctionDefinition","parameters":{"id":2496,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2492,"mutability":"mutable","name":"_amount","nameLocation":"39671:7:1","nodeType":"VariableDeclaration","scope":2512,"src":"39666:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2491,"name":"uint","nodeType":"ElementaryTypeName","src":"39666:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2495,"mutability":"mutable","name":"path","nameLocation":"39706:4:1","nodeType":"VariableDeclaration","scope":2512,"src":"39689:21:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":2493,"name":"address","nodeType":"ElementaryTypeName","src":"39689:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2494,"nodeType":"ArrayTypeName","src":"39689:9:1","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"}],"src":"39655:62:1"},"returnParameters":{"id":2497,"nodeType":"ParameterList","parameters":[],"src":"39727:0:1"},"scope":2844,"src":"39626:283:1","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2530,"nodeType":"Block","src":"39976:74:1","statements":[{"expression":{"arguments":[{"arguments":[{"id":2525,"name":"routerAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2029,"src":"40018:13:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2524,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"40010:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2523,"name":"address","nodeType":"ElementaryTypeName","src":"40010:7:1","typeDescriptions":{}}},"id":2526,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"40010:22:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2527,"name":"_amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2516,"src":"40034:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"id":2520,"name":"_token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2514,"src":"39994:6:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2519,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":768,"src":"39987:6:1","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20_$768_$","typeString":"type(contract IERC20)"}},"id":2521,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"39987:14:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$768","typeString":"contract IERC20"}},"id":2522,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"approve","nodeType":"MemberAccess","referencedDeclaration":755,"src":"39987:22:1","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":2528,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"39987:55:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2529,"nodeType":"ExpressionStatement","src":"39987:55:1"}]},"id":2531,"implemented":true,"kind":"function","modifiers":[],"name":"_v3Approve","nameLocation":"39926:10:1","nodeType":"FunctionDefinition","parameters":{"id":2517,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2514,"mutability":"mutable","name":"_token","nameLocation":"39945:6:1","nodeType":"VariableDeclaration","scope":2531,"src":"39937:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2513,"name":"address","nodeType":"ElementaryTypeName","src":"39937:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2516,"mutability":"mutable","name":"_amount","nameLocation":"39958:7:1","nodeType":"VariableDeclaration","scope":2531,"src":"39953:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2515,"name":"uint","nodeType":"ElementaryTypeName","src":"39953:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"39936:30:1"},"returnParameters":{"id":2518,"nodeType":"ParameterList","parameters":[],"src":"39976:0:1"},"scope":2844,"src":"39917:133:1","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2561,"nodeType":"Block","src":"40196:173:1","statements":[{"assignments":[2545],"declarations":[{"constant":false,"id":2545,"mutability":"mutable","name":"outputs","nameLocation":"40221:7:1","nodeType":"VariableDeclaration","scope":2561,"src":"40207:21:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":2543,"name":"uint","nodeType":"ElementaryTypeName","src":"40207:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2544,"nodeType":"ArrayTypeName","src":"40207:6:1","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"id":2553,"initialValue":{"arguments":[{"id":2550,"name":"inputAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2533,"src":"40275:11:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2551,"name":"path","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2536,"src":"40301:4:1","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}],"expression":{"arguments":[{"id":2547,"name":"router","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2024,"src":"40239:6:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2546,"name":"IRouter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1780,"src":"40231:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IRouter_$1780_$","typeString":"type(contract IRouter)"}},"id":2548,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"40231:15:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IRouter_$1780","typeString":"contract IRouter"}},"id":2549,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"getAmountsOut","nodeType":"MemberAccess","referencedDeclaration":1779,"src":"40231:29:1","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_uint256_$_t_array$_t_address_$dyn_memory_ptr_$returns$_t_array$_t_uint256_$dyn_memory_ptr_$","typeString":"function (uint256,address[] memory) view external returns (uint256[] memory)"}},"id":2552,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"40231:85:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"nodeType":"VariableDeclarationStatement","src":"40207:109:1"},{"expression":{"baseExpression":{"id":2554,"name":"outputs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2545,"src":"40334:7:1","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":2559,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2558,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2555,"name":"outputs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2545,"src":"40342:7:1","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":2556,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"40342:14:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":2557,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"40359:1:1","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"40342:18:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"40334:27:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2540,"id":2560,"nodeType":"Return","src":"40327:34:1"}]},"functionSelector":"d654e9a4","id":2562,"implemented":true,"kind":"function","modifiers":[],"name":"getOutputTokenAmount","nameLocation":"40067:20:1","nodeType":"FunctionDefinition","parameters":{"id":2537,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2533,"mutability":"mutable","name":"inputAmount","nameLocation":"40103:11:1","nodeType":"VariableDeclaration","scope":2562,"src":"40098:16:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2532,"name":"uint","nodeType":"ElementaryTypeName","src":"40098:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2536,"mutability":"mutable","name":"path","nameLocation":"40142:4:1","nodeType":"VariableDeclaration","scope":2562,"src":"40125:21:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":2534,"name":"address","nodeType":"ElementaryTypeName","src":"40125:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2535,"nodeType":"ArrayTypeName","src":"40125:9:1","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"}],"src":"40087:66:1"},"returnParameters":{"id":2540,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2539,"mutability":"mutable","name":"outputAmount","nameLocation":"40182:12:1","nodeType":"VariableDeclaration","scope":2562,"src":"40177:17:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2538,"name":"uint","nodeType":"ElementaryTypeName","src":"40177:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"40176:19:1"},"scope":2844,"src":"40058:311:1","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":2637,"nodeType":"Block","src":"40544:555:1","statements":[{"assignments":[2574],"declarations":[{"constant":false,"id":2574,"mutability":"mutable","name":"slotReturnValue","nameLocation":"40563:15:1","nodeType":"VariableDeclaration","scope":2637,"src":"40555:23:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2573,"name":"uint256","nodeType":"ElementaryTypeName","src":"40555:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2576,"initialValue":{"hexValue":"30","id":2575,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"40581:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"40555:27:1"},{"assignments":[2578],"declarations":[{"constant":false,"id":2578,"mutability":"mutable","name":"pairAddress","nameLocation":"40601:11:1","nodeType":"VariableDeclaration","scope":2637,"src":"40593:19:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2577,"name":"address","nodeType":"ElementaryTypeName","src":"40593:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":2587,"initialValue":{"arguments":[{"id":2583,"name":"_tokenIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2566,"src":"40671:8:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2584,"name":"_tokenOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2568,"src":"40694:9:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2585,"name":"poolFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2038,"src":"40718:7:1","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint24","typeString":"uint24"}],"expression":{"arguments":[{"id":2580,"name":"factoryAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2032,"src":"40633:14:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2579,"name":"IPancakeV3Factory","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1794,"src":"40615:17:1","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IPancakeV3Factory_$1794_$","typeString":"type(contract IPancakeV3Factory)"}},"id":2581,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"40615:33:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IPancakeV3Factory_$1794","typeString":"contract IPancakeV3Factory"}},"id":2582,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"getPool","nodeType":"MemberAccess","referencedDeclaration":1793,"src":"40615:41:1","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$_t_address_$_t_uint24_$returns$_t_address_$","typeString":"function (address,address,uint24) view external returns (address)"}},"id":2586,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"40615:121:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"40593:143:1"},{"expression":{"id":2595,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"components":[{"id":2588,"name":"slotReturnValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2574,"src":"40748:15:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},null,null,null,null,null,null],"id":2589,"isConstant":false,"isInlineArray":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"TupleExpression","src":"40747:29:1","typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$__$__$__$__$__$__$","typeString":"tuple(uint256,,,,,,)"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[{"id":2591,"name":"pairAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2578,"src":"40799:11:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2590,"name":"IPancakeV3PoolState","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1813,"src":"40779:19:1","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IPancakeV3PoolState_$1813_$","typeString":"type(contract IPancakeV3PoolState)"}},"id":2592,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"40779:32:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IPancakeV3PoolState_$1813","typeString":"contract IPancakeV3PoolState"}},"id":2593,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"slot0","nodeType":"MemberAccess","referencedDeclaration":1812,"src":"40779:52:1","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_uint160_$_t_int24_$_t_uint16_$_t_uint16_$_t_uint16_$_t_uint32_$_t_bool_$","typeString":"function () view external returns (uint160,int24,uint16,uint16,uint16,uint32,bool)"}},"id":2594,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"40779:54:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint160_$_t_int24_$_t_uint16_$_t_uint16_$_t_uint16_$_t_uint32_$_t_bool_$","typeString":"tuple(uint160,int24,uint16,uint16,uint16,uint32,bool)"}},"src":"40747:86:1","typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2596,"nodeType":"ExpressionStatement","src":"40747:86:1"},{"assignments":[2598],"declarations":[{"constant":false,"id":2598,"mutability":"mutable","name":"token0","nameLocation":"40852:6:1","nodeType":"VariableDeclaration","scope":2637,"src":"40844:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2597,"name":"address","nodeType":"ElementaryTypeName","src":"40844:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":2604,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[{"id":2600,"name":"pairAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2578,"src":"40876:11:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2599,"name":"IPancakeV3Pool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1855,"src":"40861:14:1","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IPancakeV3Pool_$1855_$","typeString":"type(contract IPancakeV3Pool)"}},"id":2601,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"40861:27:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IPancakeV3Pool_$1855","typeString":"contract IPancakeV3Pool"}},"id":2602,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"token0","nodeType":"MemberAccess","referencedDeclaration":1825,"src":"40861:34:1","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_address_$","typeString":"function () view external returns (address)"}},"id":2603,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"40861:36:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"40844:53:1"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2607,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2605,"name":"_tokenIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2566,"src":"40912:8:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":2606,"name":"token0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2598,"src":"40924:6:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"40912:18:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"expression":{"id":2634,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2622,"name":"outputAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2571,"src":"41026:12:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2632,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2627,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_rational_6277101735386680763835789423207666416102355444464034512896_by_1","typeString":"int_const 6277...(50 digits omitted)...2896"},"id":2625,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":2623,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"41043:1:1","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"313932","id":2624,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"41048:3:1","typeDescriptions":{"typeIdentifier":"t_rational_192_by_1","typeString":"int_const 192"},"value":"192"},"src":"41043:8:1","typeDescriptions":{"typeIdentifier":"t_rational_6277101735386680763835789423207666416102355444464034512896_by_1","typeString":"int_const 6277...(50 digits omitted)...2896"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2626,"name":"_inputAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2564,"src":"41054:12:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"41043:23:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2628,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"41042:25:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2631,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2629,"name":"slotReturnValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2574,"src":"41070:15:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"32","id":2630,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"41089:1:1","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"41070:20:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"41042:48:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2633,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"41041:50:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"41026:65:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2635,"nodeType":"ExpressionStatement","src":"41026:65:1"},"id":2636,"nodeType":"IfStatement","src":"40908:183:1","trueBody":{"expression":{"id":2620,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2608,"name":"outputAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2571,"src":"40945:12:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2618,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2613,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2611,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2609,"name":"slotReturnValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2574,"src":"40962:15:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"32","id":2610,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"40981:1:1","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"40962:20:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2612,"name":"_inputAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2564,"src":"40985:12:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"40962:35:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2614,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"40961:37:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"commonType":{"typeIdentifier":"t_rational_6277101735386680763835789423207666416102355444464034512896_by_1","typeString":"int_const 6277...(50 digits omitted)...2896"},"id":2617,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":2615,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"41001:1:1","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"313932","id":2616,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"41006:3:1","typeDescriptions":{"typeIdentifier":"t_rational_192_by_1","typeString":"int_const 192"},"value":"192"},"src":"41001:8:1","typeDescriptions":{"typeIdentifier":"t_rational_6277101735386680763835789423207666416102355444464034512896_by_1","typeString":"int_const 6277...(50 digits omitted)...2896"}},"src":"40961:48:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2619,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"40960:50:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"40945:65:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2621,"nodeType":"ExpressionStatement","src":"40945:65:1"}}]},"functionSelector":"c36c557f","id":2638,"implemented":true,"kind":"function","modifiers":[],"name":"getV3OutputTokenAmount","nameLocation":"40386:22:1","nodeType":"FunctionDefinition","parameters":{"id":2569,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2564,"mutability":"mutable","name":"_inputAmount","nameLocation":"40427:12:1","nodeType":"VariableDeclaration","scope":2638,"src":"40419:20:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2563,"name":"uint256","nodeType":"ElementaryTypeName","src":"40419:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2566,"mutability":"mutable","name":"_tokenIn","nameLocation":"40458:8:1","nodeType":"VariableDeclaration","scope":2638,"src":"40450:16:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2565,"name":"address","nodeType":"ElementaryTypeName","src":"40450:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2568,"mutability":"mutable","name":"_tokenOut","nameLocation":"40485:9:1","nodeType":"VariableDeclaration","scope":2638,"src":"40477:17:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2567,"name":"address","nodeType":"ElementaryTypeName","src":"40477:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"40408:93:1"},"returnParameters":{"id":2572,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2571,"mutability":"mutable","name":"outputAmount","nameLocation":"40530:12:1","nodeType":"VariableDeclaration","scope":2638,"src":"40525:17:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2570,"name":"uint","nodeType":"ElementaryTypeName","src":"40525:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"40524:19:1"},"scope":2844,"src":"40377:722:1","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":2649,"nodeType":"Block","src":"41167:43:1","statements":[{"expression":{"id":2647,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2645,"name":"feePercent","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2015,"src":"41178:10:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2646,"name":"_feePercent","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2640,"src":"41191:11:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"41178:24:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2648,"nodeType":"ExpressionStatement","src":"41178:24:1"}]},"functionSelector":"7ce3489b","id":2650,"implemented":true,"kind":"function","modifiers":[{"id":2643,"kind":"modifierInvocation","modifierName":{"id":2642,"name":"onlyOwner","nodeType":"IdentifierPath","referencedDeclaration":834,"src":"41157:9:1"},"nodeType":"ModifierInvocation","src":"41157:9:1"}],"name":"setFeePercent","nameLocation":"41116:13:1","nodeType":"FunctionDefinition","parameters":{"id":2641,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2640,"mutability":"mutable","name":"_feePercent","nameLocation":"41135:11:1","nodeType":"VariableDeclaration","scope":2650,"src":"41130:16:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2639,"name":"uint","nodeType":"ElementaryTypeName","src":"41130:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"41129:18:1"},"returnParameters":{"id":2644,"nodeType":"ParameterList","parameters":[],"src":"41167:0:1"},"scope":2844,"src":"41107:103:1","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":2661,"nodeType":"Block","src":"41279:41:1","statements":[{"expression":{"id":2659,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2657,"name":"rewardAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2018,"src":"41290:12:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2658,"name":"_amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2652,"src":"41305:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"41290:22:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2660,"nodeType":"ExpressionStatement","src":"41290:22:1"}]},"functionSelector":"a8a65a78","id":2662,"implemented":true,"kind":"function","modifiers":[{"id":2655,"kind":"modifierInvocation","modifierName":{"id":2654,"name":"onlyOwner","nodeType":"IdentifierPath","referencedDeclaration":834,"src":"41269:9:1"},"nodeType":"ModifierInvocation","src":"41269:9:1"}],"name":"setRewardAmount","nameLocation":"41227:15:1","nodeType":"FunctionDefinition","parameters":{"id":2653,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2652,"mutability":"mutable","name":"_amount","nameLocation":"41251:7:1","nodeType":"VariableDeclaration","scope":2662,"src":"41243:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2651,"name":"uint256","nodeType":"ElementaryTypeName","src":"41243:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"41242:17:1"},"returnParameters":{"id":2656,"nodeType":"ParameterList","parameters":[],"src":"41279:0:1"},"scope":2844,"src":"41218:102:1","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":2673,"nodeType":"Block","src":"41396:50:1","statements":[{"expression":{"id":2671,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2669,"name":"rewardAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2020,"src":"41407:13:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2670,"name":"_rewawrdAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2664,"src":"41423:15:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"41407:31:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2672,"nodeType":"ExpressionStatement","src":"41407:31:1"}]},"functionSelector":"8aee8127","id":2674,"implemented":true,"kind":"function","modifiers":[{"id":2667,"kind":"modifierInvocation","modifierName":{"id":2666,"name":"onlyOwner","nodeType":"IdentifierPath","referencedDeclaration":834,"src":"41386:9:1"},"nodeType":"ModifierInvocation","src":"41386:9:1"}],"name":"setRewardToken","nameLocation":"41337:14:1","nodeType":"FunctionDefinition","parameters":{"id":2665,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2664,"mutability":"mutable","name":"_rewawrdAddress","nameLocation":"41360:15:1","nodeType":"VariableDeclaration","scope":2674,"src":"41352:23:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2663,"name":"address","nodeType":"ElementaryTypeName","src":"41352:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"41351:25:1"},"returnParameters":{"id":2668,"nodeType":"ParameterList","parameters":[],"src":"41396:0:1"},"scope":2844,"src":"41328:118:1","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":2685,"nodeType":"Block","src":"41517:43:1","statements":[{"expression":{"id":2683,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2681,"name":"feeAccount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2022,"src":"41528:10:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2682,"name":"_feeAccount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2676,"src":"41541:11:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"41528:24:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2684,"nodeType":"ExpressionStatement","src":"41528:24:1"}]},"functionSelector":"4b023cf8","id":2686,"implemented":true,"kind":"function","modifiers":[{"id":2679,"kind":"modifierInvocation","modifierName":{"id":2678,"name":"onlyOwner","nodeType":"IdentifierPath","referencedDeclaration":834,"src":"41507:9:1"},"nodeType":"ModifierInvocation","src":"41507:9:1"}],"name":"setFeeAccount","nameLocation":"41463:13:1","nodeType":"FunctionDefinition","parameters":{"id":2677,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2676,"mutability":"mutable","name":"_feeAccount","nameLocation":"41485:11:1","nodeType":"VariableDeclaration","scope":2686,"src":"41477:19:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2675,"name":"address","nodeType":"ElementaryTypeName","src":"41477:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"41476:21:1"},"returnParameters":{"id":2680,"nodeType":"ParameterList","parameters":[],"src":"41517:0:1"},"scope":2844,"src":"41454:106:1","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":2703,"nodeType":"Block","src":"41669:60:1","statements":[{"expression":{"id":2697,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2695,"name":"router","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2024,"src":"41680:6:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2696,"name":"_router","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2688,"src":"41689:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"41680:16:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2698,"nodeType":"ExpressionStatement","src":"41680:16:1"},{"expression":{"id":2701,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2699,"name":"wavax","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2026,"src":"41707:5:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2700,"name":"_wavax","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2690,"src":"41715:6:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"41707:14:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2702,"nodeType":"ExpressionStatement","src":"41707:14:1"}]},"functionSelector":"9cf355ad","id":2704,"implemented":true,"kind":"function","modifiers":[{"id":2693,"kind":"modifierInvocation","modifierName":{"id":2692,"name":"onlyOwner","nodeType":"IdentifierPath","referencedDeclaration":834,"src":"41659:9:1"},"nodeType":"ModifierInvocation","src":"41659:9:1"}],"name":"setRouterWAVAX","nameLocation":"41577:14:1","nodeType":"FunctionDefinition","parameters":{"id":2691,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2688,"mutability":"mutable","name":"_router","nameLocation":"41610:7:1","nodeType":"VariableDeclaration","scope":2704,"src":"41602:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2687,"name":"address","nodeType":"ElementaryTypeName","src":"41602:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2690,"mutability":"mutable","name":"_wavax","nameLocation":"41636:6:1","nodeType":"VariableDeclaration","scope":2704,"src":"41628:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2689,"name":"address","nodeType":"ElementaryTypeName","src":"41628:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"41591:58:1"},"returnParameters":{"id":2694,"nodeType":"ParameterList","parameters":[],"src":"41669:0:1"},"scope":2844,"src":"41568:161:1","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":2722,"nodeType":"Block","src":"41838:67:1","statements":[{"expression":{"arguments":[{"expression":{"id":2717,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"41877:3:1","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2718,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"41877:10:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2719,"name":"_amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2708,"src":"41889:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"id":2714,"name":"_token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2706,"src":"41856:6:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2713,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":768,"src":"41849:6:1","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20_$768_$","typeString":"type(contract IERC20)"}},"id":2715,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"41849:14:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$768","typeString":"contract IERC20"}},"id":2716,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"safeTransfer","nodeType":"MemberAccess","referencedDeclaration":1525,"src":"41849:27:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$768_$_t_address_$_t_uint256_$returns$__$bound_to$_t_contract$_IERC20_$768_$","typeString":"function (contract IERC20,address,uint256)"}},"id":2720,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"41849:48:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2721,"nodeType":"ExpressionStatement","src":"41849:48:1"}]},"functionSelector":"95ccea67","id":2723,"implemented":true,"kind":"function","modifiers":[{"id":2711,"kind":"modifierInvocation","modifierName":{"id":2710,"name":"onlyOwner","nodeType":"IdentifierPath","referencedDeclaration":834,"src":"41828:9:1"},"nodeType":"ModifierInvocation","src":"41828:9:1"}],"name":"emergencyWithdraw","nameLocation":"41746:17:1","nodeType":"FunctionDefinition","parameters":{"id":2709,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2706,"mutability":"mutable","name":"_token","nameLocation":"41782:6:1","nodeType":"VariableDeclaration","scope":2723,"src":"41774:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2705,"name":"address","nodeType":"ElementaryTypeName","src":"41774:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2708,"mutability":"mutable","name":"_amount","nameLocation":"41804:7:1","nodeType":"VariableDeclaration","scope":2723,"src":"41799:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2707,"name":"uint","nodeType":"ElementaryTypeName","src":"41799:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"41763:55:1"},"returnParameters":{"id":2712,"nodeType":"ParameterList","parameters":[],"src":"41838:0:1"},"scope":2844,"src":"41737:168:1","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":2739,"nodeType":"Block","src":"41976:53:1","statements":[{"expression":{"arguments":[{"id":2736,"name":"_amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2725,"src":"42013:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":2732,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":820,"src":"41995:5:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":2733,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"41995:7:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2731,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"41987:8:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_payable_$","typeString":"type(address payable)"},"typeName":{"id":2730,"name":"address","nodeType":"ElementaryTypeName","src":"41987:8:1","stateMutability":"payable","typeDescriptions":{}}},"id":2734,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"41987:16:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":2735,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"transfer","nodeType":"MemberAccess","src":"41987:25:1","typeDescriptions":{"typeIdentifier":"t_function_transfer_nonpayable$_t_uint256_$returns$__$","typeString":"function (uint256)"}},"id":2737,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"41987:34:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2738,"nodeType":"ExpressionStatement","src":"41987:34:1"}]},"functionSelector":"6b792c4b","id":2740,"implemented":true,"kind":"function","modifiers":[{"id":2728,"kind":"modifierInvocation","modifierName":{"id":2727,"name":"onlyOwner","nodeType":"IdentifierPath","referencedDeclaration":834,"src":"41966:9:1"},"nodeType":"ModifierInvocation","src":"41966:9:1"}],"name":"emergencyWithdrawETH","nameLocation":"41922:20:1","nodeType":"FunctionDefinition","parameters":{"id":2726,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2725,"mutability":"mutable","name":"_amount","nameLocation":"41948:7:1","nodeType":"VariableDeclaration","scope":2740,"src":"41943:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2724,"name":"uint","nodeType":"ElementaryTypeName","src":"41943:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"41942:14:1"},"returnParameters":{"id":2729,"nodeType":"ParameterList","parameters":[],"src":"41976:0:1"},"scope":2844,"src":"41913:116:1","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":2842,"nodeType":"Block","src":"42164:1083:1","statements":[{"expression":{"id":2755,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2749,"name":"airdropAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2042,"src":"42175:14:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":2752,"indexExpression":{"expression":{"id":2750,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"42190:3:1","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2751,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"42190:10:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"42175:26:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"id":2753,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"42204:5:1","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":2754,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"timestamp","nodeType":"MemberAccess","src":"42204:15:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"42175:44:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2756,"nodeType":"ExpressionStatement","src":"42175:44:1"},{"assignments":[2761],"declarations":[{"constant":false,"id":2761,"mutability":"mutable","name":"params","nameLocation":"42274:6:1","nodeType":"VariableDeclaration","scope":2842,"src":"42230:50:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_ExactInputSingleParams_$1885_memory_ptr","typeString":"struct IV3SwapRouter.ExactInputSingleParams"},"typeName":{"id":2760,"nodeType":"UserDefinedTypeName","pathNode":{"id":2759,"name":"IV3SwapRouter.ExactInputSingleParams","nodeType":"IdentifierPath","referencedDeclaration":1885,"src":"42230:36:1"},"referencedDeclaration":1885,"src":"42230:36:1","typeDescriptions":{"typeIdentifier":"t_struct$_ExactInputSingleParams_$1885_storage_ptr","typeString":"struct IV3SwapRouter.ExactInputSingleParams"}},"visibility":"internal"}],"id":2773,"initialValue":{"arguments":[{"id":2764,"name":"_tokenIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2742,"src":"42352:8:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2765,"name":"_tokenOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2744,"src":"42379:9:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2766,"name":"poolFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2038,"src":"42407:7:1","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"}},{"expression":{"id":2767,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"42433:3:1","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2768,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"42433:10:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2769,"name":"_amountIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2746,"src":"42462:9:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"30","id":2770,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"42490:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"30","id":2771,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"42510:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint24","typeString":"uint24"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"expression":{"id":2762,"name":"IV3SwapRouter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1958,"src":"42283:13:1","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IV3SwapRouter_$1958_$","typeString":"type(contract IV3SwapRouter)"}},"id":2763,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"ExactInputSingleParams","nodeType":"MemberAccess","referencedDeclaration":1885,"src":"42283:50:1","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_ExactInputSingleParams_$1885_storage_ptr_$","typeString":"type(struct IV3SwapRouter.ExactInputSingleParams storage pointer)"}},"id":2772,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"42283:243:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_ExactInputSingleParams_$1885_memory_ptr","typeString":"struct IV3SwapRouter.ExactInputSingleParams memory"}},"nodeType":"VariableDeclarationStatement","src":"42230:296:1"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2776,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2774,"name":"_tokenIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2742,"src":"42541:8:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":2775,"name":"wbnbAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2035,"src":"42553:11:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"42541:23:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":2815,"nodeType":"Block","src":"42698:328:1","statements":[{"expression":{"arguments":[{"expression":{"id":2791,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"42765:3:1","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2792,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"42765:10:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"id":2795,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"42802:4:1","typeDescriptions":{"typeIdentifier":"t_contract$_ProSwap_$2844","typeString":"contract ProSwap"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_ProSwap_$2844","typeString":"contract ProSwap"}],"id":2794,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"42794:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2793,"name":"address","nodeType":"ElementaryTypeName","src":"42794:7:1","typeDescriptions":{}}},"id":2796,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"42794:13:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2797,"name":"_amountIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2746,"src":"42826:9:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"id":2788,"name":"_tokenIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2742,"src":"42720:8:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2787,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":768,"src":"42713:6:1","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20_$768_$","typeString":"type(contract IERC20)"}},"id":2789,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"42713:16:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$768","typeString":"contract IERC20"}},"id":2790,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"safeTransferFrom","nodeType":"MemberAccess","referencedDeclaration":1551,"src":"42713:33:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$768_$_t_address_$_t_address_$_t_uint256_$returns$__$bound_to$_t_contract$_IERC20_$768_$","typeString":"function (contract IERC20,address,address,uint256)"}},"id":2798,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"42713:137:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2799,"nodeType":"ExpressionStatement","src":"42713:137:1"},{"expression":{"arguments":[{"id":2801,"name":"_tokenIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2742,"src":"42876:8:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2802,"name":"_amountIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2746,"src":"42886:9:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2800,"name":"_v3Approve","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2531,"src":"42865:10:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":2803,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"42865:31:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2804,"nodeType":"ExpressionStatement","src":"42865:31:1"},{"expression":{"arguments":[{"id":2812,"name":"params","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2761,"src":"42993:6:1","typeDescriptions":{"typeIdentifier":"t_struct$_ExactInputSingleParams_$1885_memory_ptr","typeString":"struct IV3SwapRouter.ExactInputSingleParams memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_ExactInputSingleParams_$1885_memory_ptr","typeString":"struct IV3SwapRouter.ExactInputSingleParams memory"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_ExactInputSingleParams_$1885_memory_ptr","typeString":"struct IV3SwapRouter.ExactInputSingleParams memory"}],"expression":{"arguments":[{"id":2806,"name":"routerAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2029,"src":"42925:13:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2805,"name":"IV3SwapRouter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1958,"src":"42911:13:1","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IV3SwapRouter_$1958_$","typeString":"type(contract IV3SwapRouter)"}},"id":2807,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"42911:28:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IV3SwapRouter_$1958","typeString":"contract IV3SwapRouter"}},"id":2808,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"exactInputSingle","nodeType":"MemberAccess","referencedDeclaration":1894,"src":"42911:45:1","typeDescriptions":{"typeIdentifier":"t_function_external_payable$_t_struct$_ExactInputSingleParams_$1885_memory_ptr_$returns$_t_uint256_$","typeString":"function (struct IV3SwapRouter.ExactInputSingleParams memory) payable external returns (uint256)"}},"id":2811,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"expression":{"id":2809,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"42964:3:1","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2810,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"value","nodeType":"MemberAccess","src":"42964:9:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"42911:63:1","typeDescriptions":{"typeIdentifier":"t_function_external_payable$_t_struct$_ExactInputSingleParams_$1885_memory_ptr_$returns$_t_uint256_$value","typeString":"function (struct IV3SwapRouter.ExactInputSingleParams memory) payable external returns (uint256)"}},"id":2813,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"42911:103:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2814,"nodeType":"ExpressionStatement","src":"42911:103:1"}]},"id":2816,"nodeType":"IfStatement","src":"42537:489:1","trueBody":{"expression":{"arguments":[{"id":2784,"name":"params","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2761,"src":"42661:6:1","typeDescriptions":{"typeIdentifier":"t_struct$_ExactInputSingleParams_$1885_memory_ptr","typeString":"struct IV3SwapRouter.ExactInputSingleParams memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_ExactInputSingleParams_$1885_memory_ptr","typeString":"struct IV3SwapRouter.ExactInputSingleParams memory"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_ExactInputSingleParams_$1885_memory_ptr","typeString":"struct IV3SwapRouter.ExactInputSingleParams memory"}],"expression":{"arguments":[{"id":2778,"name":"routerAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2029,"src":"42593:13:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2777,"name":"IV3SwapRouter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1958,"src":"42579:13:1","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IV3SwapRouter_$1958_$","typeString":"type(contract IV3SwapRouter)"}},"id":2779,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"42579:28:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IV3SwapRouter_$1958","typeString":"contract IV3SwapRouter"}},"id":2780,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"exactInputSingle","nodeType":"MemberAccess","referencedDeclaration":1894,"src":"42579:45:1","typeDescriptions":{"typeIdentifier":"t_function_external_payable$_t_struct$_ExactInputSingleParams_$1885_memory_ptr_$returns$_t_uint256_$","typeString":"function (struct IV3SwapRouter.ExactInputSingleParams memory) payable external returns (uint256)"}},"id":2783,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"expression":{"id":2781,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"42632:3:1","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2782,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"value","nodeType":"MemberAccess","src":"42632:9:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"42579:63:1","typeDescriptions":{"typeIdentifier":"t_function_external_payable$_t_struct$_ExactInputSingleParams_$1885_memory_ptr_$returns$_t_uint256_$value","typeString":"function (struct IV3SwapRouter.ExactInputSingleParams memory) payable external returns (uint256)"}},"id":2785,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"42579:103:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2786,"nodeType":"ExpressionStatement","src":"42579:103:1"}},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[{"id":2818,"name":"routerAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2029,"src":"43050:13:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2817,"name":"IV3SwapRouter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1958,"src":"43036:13:1","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IV3SwapRouter_$1958_$","typeString":"type(contract IV3SwapRouter)"}},"id":2819,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"43036:28:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IV3SwapRouter_$1958","typeString":"contract IV3SwapRouter"}},"id":2820,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"refundETH","nodeType":"MemberAccess","referencedDeclaration":1957,"src":"43036:38:1","typeDescriptions":{"typeIdentifier":"t_function_external_payable$__$returns$__$","typeString":"function () payable external"}},"id":2821,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"43036:40:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2822,"nodeType":"ExpressionStatement","src":"43036:40:1"},{"assignments":[2824,null],"declarations":[{"constant":false,"id":2824,"mutability":"mutable","name":"success","nameLocation":"43133:7:1","nodeType":"VariableDeclaration","scope":2842,"src":"43128:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2823,"name":"bool","nodeType":"ElementaryTypeName","src":"43128:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},null],"id":2836,"initialValue":{"arguments":[{"hexValue":"","id":2834,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"43192:2:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"expression":{"id":2825,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"43146:3:1","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2826,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"43146:10:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2827,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"call","nodeType":"MemberAccess","src":"43146:15:1","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":2833,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"expression":{"arguments":[{"id":2830,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"43177:4:1","typeDescriptions":{"typeIdentifier":"t_contract$_ProSwap_$2844","typeString":"contract ProSwap"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_ProSwap_$2844","typeString":"contract ProSwap"}],"id":2829,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"43169:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2828,"name":"address","nodeType":"ElementaryTypeName","src":"43169:7:1","typeDescriptions":{}}},"id":2831,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"43169:13:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2832,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"balance","nodeType":"MemberAccess","src":"43169:21:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"43146:45:1","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":2835,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"43146:49:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"43127:68:1"},{"expression":{"arguments":[{"id":2838,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2824,"src":"43214:7:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"726566756e64206661696c6564","id":2839,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"43223:15:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_f9239079da98909f815170ee967acd53b4cf9b37ced6a4dd9f2f25df9bc54bf5","typeString":"literal_string \"refund failed\""},"value":"refund failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_f9239079da98909f815170ee967acd53b4cf9b37ced6a4dd9f2f25df9bc54bf5","typeString":"literal_string \"refund failed\""}],"id":2837,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"43206:7:1","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2840,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"43206:33:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2841,"nodeType":"ExpressionStatement","src":"43206:33:1"}]},"functionSelector":"ec6cc0cc","id":2843,"implemented":true,"kind":"function","modifiers":[],"name":"swapTokens","nameLocation":"42046:10:1","nodeType":"FunctionDefinition","parameters":{"id":2747,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2742,"mutability":"mutable","name":"_tokenIn","nameLocation":"42075:8:1","nodeType":"VariableDeclaration","scope":2843,"src":"42067:16:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2741,"name":"address","nodeType":"ElementaryTypeName","src":"42067:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2744,"mutability":"mutable","name":"_tokenOut","nameLocation":"42102:9:1","nodeType":"VariableDeclaration","scope":2843,"src":"42094:17:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2743,"name":"address","nodeType":"ElementaryTypeName","src":"42094:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2746,"mutability":"mutable","name":"_amountIn","nameLocation":"42130:9:1","nodeType":"VariableDeclaration","scope":2843,"src":"42122:17:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2745,"name":"uint256","nodeType":"ElementaryTypeName","src":"42122:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"42056:90:1"},"returnParameters":{"id":2748,"nodeType":"ParameterList","parameters":[],"src":"42164:0:1"},"scope":2844,"src":"42037:1210:1","stateMutability":"payable","virtual":false,"visibility":"external"}],"scope":2845,"src":"34906:8344:1","usedErrors":[]}],"src":"0:43252:1"},"id":1},"contracts/v3dex.sol":{"ast":{"absolutePath":"contracts/v3dex.sol","exportedSymbols":{"Address":[3645],"Context":[2941],"IERC20":[3720],"IPancakeV3Factory":[2859],"IPancakeV3Pool":[2920],"IPancakeV3PoolImmutables":[2915],"IPancakeV3PoolState":[2878],"IPancakeV3SwapCallback":[3952],"IV3SwapRouter":[4042],"Ownable":[3044],"SafeERC20":[3939],"SafeMath":[3353],"V3Swap":[4256]},"id":4257,"license":"GPL-2.0-or-later","nodeType":"SourceUnit","nodes":[{"id":2846,"literals":["solidity",">=","0.5",".0"],"nodeType":"PragmaDirective","src":"46:24:2"},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"interface","documentation":{"id":2847,"nodeType":"StructuredDocumentation","src":"74:177:2","text":"@title The interface for the PancakeSwap V3 Factory\n @notice The PancakeSwap V3 Factory facilitates creation of PancakeSwap V3 pools and control over the protocol fees"},"fullyImplemented":false,"id":2859,"linearizedBaseContracts":[2859],"name":"IPancakeV3Factory","nameLocation":"261:17:2","nodeType":"ContractDefinition","nodes":[{"functionSelector":"1698ee82","id":2858,"implemented":false,"kind":"function","modifiers":[],"name":"getPool","nameLocation":"295:7:2","nodeType":"FunctionDefinition","parameters":{"id":2854,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2849,"mutability":"mutable","name":"tokenA","nameLocation":"321:6:2","nodeType":"VariableDeclaration","scope":2858,"src":"313:14:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2848,"name":"address","nodeType":"ElementaryTypeName","src":"313:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2851,"mutability":"mutable","name":"tokenB","nameLocation":"346:6:2","nodeType":"VariableDeclaration","scope":2858,"src":"338:14:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2850,"name":"address","nodeType":"ElementaryTypeName","src":"338:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2853,"mutability":"mutable","name":"fee","nameLocation":"370:3:2","nodeType":"VariableDeclaration","scope":2858,"src":"363:10:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"},"typeName":{"id":2852,"name":"uint24","nodeType":"ElementaryTypeName","src":"363:6:2","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"}},"visibility":"internal"}],"src":"302:78:2"},"returnParameters":{"id":2857,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2856,"mutability":"mutable","name":"pool","nameLocation":"412:4:2","nodeType":"VariableDeclaration","scope":2858,"src":"404:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2855,"name":"address","nodeType":"ElementaryTypeName","src":"404:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"403:14:2"},"scope":2859,"src":"286:132:2","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":4257,"src":"251:170:2","usedErrors":[]},{"id":2860,"literals":["solidity",">=","0.5",".0"],"nodeType":"PragmaDirective","src":"423:24:2"},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":2878,"linearizedBaseContracts":[2878],"name":"IPancakeV3PoolState","nameLocation":"461:19:2","nodeType":"ContractDefinition","nodes":[{"functionSelector":"3850c7bd","id":2877,"implemented":false,"kind":"function","modifiers":[],"name":"slot0","nameLocation":"497:5:2","nodeType":"FunctionDefinition","parameters":{"id":2861,"nodeType":"ParameterList","parameters":[],"src":"502:2:2"},"returnParameters":{"id":2876,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2863,"mutability":"mutable","name":"sqrtPriceX96","nameLocation":"577:12:2","nodeType":"VariableDeclaration","scope":2877,"src":"569:20:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"},"typeName":{"id":2862,"name":"uint160","nodeType":"ElementaryTypeName","src":"569:7:2","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"visibility":"internal"},{"constant":false,"id":2865,"mutability":"mutable","name":"tick","nameLocation":"610:4:2","nodeType":"VariableDeclaration","scope":2877,"src":"604:10:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"},"typeName":{"id":2864,"name":"int24","nodeType":"ElementaryTypeName","src":"604:5:2","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"visibility":"internal"},{"constant":false,"id":2867,"mutability":"mutable","name":"observationIndex","nameLocation":"636:16:2","nodeType":"VariableDeclaration","scope":2877,"src":"629:23:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":2866,"name":"uint16","nodeType":"ElementaryTypeName","src":"629:6:2","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":2869,"mutability":"mutable","name":"observationCardinality","nameLocation":"674:22:2","nodeType":"VariableDeclaration","scope":2877,"src":"667:29:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":2868,"name":"uint16","nodeType":"ElementaryTypeName","src":"667:6:2","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":2871,"mutability":"mutable","name":"observationCardinalityNext","nameLocation":"718:26:2","nodeType":"VariableDeclaration","scope":2877,"src":"711:33:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":2870,"name":"uint16","nodeType":"ElementaryTypeName","src":"711:6:2","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":2873,"mutability":"mutable","name":"feeProtocol","nameLocation":"766:11:2","nodeType":"VariableDeclaration","scope":2877,"src":"759:18:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":2872,"name":"uint32","nodeType":"ElementaryTypeName","src":"759:6:2","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":2875,"mutability":"mutable","name":"unlocked","nameLocation":"797:8:2","nodeType":"VariableDeclaration","scope":2877,"src":"792:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2874,"name":"bool","nodeType":"ElementaryTypeName","src":"792:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"554:262:2"},"scope":2878,"src":"488:329:2","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":4257,"src":"451:369:2","usedErrors":[]},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":2915,"linearizedBaseContracts":[2915],"name":"IPancakeV3PoolImmutables","nameLocation":"834:24:2","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":2879,"nodeType":"StructuredDocumentation","src":"866:139:2","text":"@notice The contract that deployed the pool, which must adhere to the IPancakeV3Factory interface\n @return The contract address"},"functionSelector":"c45a0155","id":2884,"implemented":false,"kind":"function","modifiers":[],"name":"factory","nameLocation":"1020:7:2","nodeType":"FunctionDefinition","parameters":{"id":2880,"nodeType":"ParameterList","parameters":[],"src":"1027:2:2"},"returnParameters":{"id":2883,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2882,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2884,"src":"1053:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2881,"name":"address","nodeType":"ElementaryTypeName","src":"1053:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1052:9:2"},"scope":2915,"src":"1011:51:2","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2885,"nodeType":"StructuredDocumentation","src":"1070:114:2","text":"@notice The first of the two tokens of the pool, sorted by address\n @return The token contract address"},"functionSelector":"0dfe1681","id":2890,"implemented":false,"kind":"function","modifiers":[],"name":"token0","nameLocation":"1199:6:2","nodeType":"FunctionDefinition","parameters":{"id":2886,"nodeType":"ParameterList","parameters":[],"src":"1205:2:2"},"returnParameters":{"id":2889,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2888,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2890,"src":"1231:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2887,"name":"address","nodeType":"ElementaryTypeName","src":"1231:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1230:9:2"},"scope":2915,"src":"1190:50:2","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2891,"nodeType":"StructuredDocumentation","src":"1248:115:2","text":"@notice The second of the two tokens of the pool, sorted by address\n @return The token contract address"},"functionSelector":"d21220a7","id":2896,"implemented":false,"kind":"function","modifiers":[],"name":"token1","nameLocation":"1378:6:2","nodeType":"FunctionDefinition","parameters":{"id":2892,"nodeType":"ParameterList","parameters":[],"src":"1384:2:2"},"returnParameters":{"id":2895,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2894,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2896,"src":"1410:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2893,"name":"address","nodeType":"ElementaryTypeName","src":"1410:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1409:9:2"},"scope":2915,"src":"1369:50:2","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2897,"nodeType":"StructuredDocumentation","src":"1427:85:2","text":"@notice The pool's fee in hundredths of a bip, i.e. 1e-6\n @return The fee"},"functionSelector":"ddca3f43","id":2902,"implemented":false,"kind":"function","modifiers":[],"name":"fee","nameLocation":"1527:3:2","nodeType":"FunctionDefinition","parameters":{"id":2898,"nodeType":"ParameterList","parameters":[],"src":"1530:2:2"},"returnParameters":{"id":2901,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2900,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2902,"src":"1556:6:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"},"typeName":{"id":2899,"name":"uint24","nodeType":"ElementaryTypeName","src":"1556:6:2","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"}},"visibility":"internal"}],"src":"1555:8:2"},"scope":2915,"src":"1518:46:2","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2903,"nodeType":"StructuredDocumentation","src":"1572:362:2","text":"@notice The pool tick spacing\n @dev Ticks can only be used at multiples of this value, minimum of 1 and always positive\n e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ...\n This value is an int24 to avoid casting even though it is always positive.\n @return The tick spacing"},"functionSelector":"d0c93a7c","id":2908,"implemented":false,"kind":"function","modifiers":[],"name":"tickSpacing","nameLocation":"1949:11:2","nodeType":"FunctionDefinition","parameters":{"id":2904,"nodeType":"ParameterList","parameters":[],"src":"1960:2:2"},"returnParameters":{"id":2907,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2906,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2908,"src":"1986:5:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"},"typeName":{"id":2905,"name":"int24","nodeType":"ElementaryTypeName","src":"1986:5:2","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"visibility":"internal"}],"src":"1985:7:2"},"scope":2915,"src":"1940:53:2","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2909,"nodeType":"StructuredDocumentation","src":"2001:366:2","text":"@notice The maximum amount of position liquidity that can use any tick in the range\n @dev This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and\n also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\n @return The max amount of liquidity per tick"},"functionSelector":"70cf754a","id":2914,"implemented":false,"kind":"function","modifiers":[],"name":"maxLiquidityPerTick","nameLocation":"2382:19:2","nodeType":"FunctionDefinition","parameters":{"id":2910,"nodeType":"ParameterList","parameters":[],"src":"2401:2:2"},"returnParameters":{"id":2913,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2912,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2914,"src":"2427:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":2911,"name":"uint128","nodeType":"ElementaryTypeName","src":"2427:7:2","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"visibility":"internal"}],"src":"2426:9:2"},"scope":2915,"src":"2373:63:2","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":4257,"src":"824:1615:2","usedErrors":[]},{"abstract":false,"baseContracts":[{"baseName":{"id":2916,"name":"IPancakeV3PoolState","nodeType":"IdentifierPath","referencedDeclaration":2878,"src":"2471:19:2"},"id":2917,"nodeType":"InheritanceSpecifier","src":"2471:19:2"},{"baseName":{"id":2918,"name":"IPancakeV3PoolImmutables","nodeType":"IdentifierPath","referencedDeclaration":2915,"src":"2492:24:2"},"id":2919,"nodeType":"InheritanceSpecifier","src":"2492:24:2"}],"contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":2920,"linearizedBaseContracts":[2920,2915,2878],"name":"IPancakeV3Pool","nameLocation":"2453:14:2","nodeType":"ContractDefinition","nodes":[],"scope":4257,"src":"2443:76:2","usedErrors":[]},{"id":2921,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"2523:23:2"},{"abstract":true,"baseContracts":[],"contractDependencies":[],"contractKind":"contract","documentation":{"id":2922,"nodeType":"StructuredDocumentation","src":"2550:505:2","text":" @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."},"fullyImplemented":true,"id":2941,"linearizedBaseContracts":[2941],"name":"Context","nameLocation":"3075:7:2","nodeType":"ContractDefinition","nodes":[{"body":{"id":2930,"nodeType":"Block","src":"3152:36:2","statements":[{"expression":{"expression":{"id":2927,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"3170:3:2","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2928,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"3170:10:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":2926,"id":2929,"nodeType":"Return","src":"3163:17:2"}]},"id":2931,"implemented":true,"kind":"function","modifiers":[],"name":"_msgSender","nameLocation":"3099:10:2","nodeType":"FunctionDefinition","parameters":{"id":2923,"nodeType":"ParameterList","parameters":[],"src":"3109:2:2"},"returnParameters":{"id":2926,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2925,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2931,"src":"3143:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2924,"name":"address","nodeType":"ElementaryTypeName","src":"3143:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3142:9:2"},"scope":2941,"src":"3090:98:2","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":2939,"nodeType":"Block","src":"3263:34:2","statements":[{"expression":{"expression":{"id":2936,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"3281:3:2","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2937,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"data","nodeType":"MemberAccess","src":"3281:8:2","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"functionReturnParameters":2935,"id":2938,"nodeType":"Return","src":"3274:15:2"}]},"id":2940,"implemented":true,"kind":"function","modifiers":[],"name":"_msgData","nameLocation":"3205:8:2","nodeType":"FunctionDefinition","parameters":{"id":2932,"nodeType":"ParameterList","parameters":[],"src":"3213:2:2"},"returnParameters":{"id":2935,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2934,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2940,"src":"3247:14:2","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":2933,"name":"bytes","nodeType":"ElementaryTypeName","src":"3247:5:2","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3246:16:2"},"scope":2941,"src":"3196:101:2","stateMutability":"view","virtual":true,"visibility":"internal"}],"scope":4257,"src":"3057:243:2","usedErrors":[]},{"id":2942,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"3422:23:2"},{"abstract":true,"baseContracts":[{"baseName":{"id":2944,"name":"Context","nodeType":"IdentifierPath","referencedDeclaration":2941,"src":"3985:7:2"},"id":2945,"nodeType":"InheritanceSpecifier","src":"3985:7:2"}],"contractDependencies":[],"contractKind":"contract","documentation":{"id":2943,"nodeType":"StructuredDocumentation","src":"3449:505:2","text":" @dev Contract module which provides a basic access control mechanism, where\n there is an account (an owner) that can be granted exclusive access to\n specific functions.\n By default, the owner account will be the one that deploys the contract. This\n can later be changed with {transferOwnership}.\n This module is used through inheritance. It will make available the modifier\n `onlyOwner`, which can be applied to your functions to restrict their use to\n the owner."},"fullyImplemented":true,"id":3044,"linearizedBaseContracts":[3044,2941],"name":"Ownable","nameLocation":"3974:7:2","nodeType":"ContractDefinition","nodes":[{"constant":false,"id":2947,"mutability":"mutable","name":"_owner","nameLocation":"4016:6:2","nodeType":"VariableDeclaration","scope":3044,"src":"4000:22:2","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2946,"name":"address","nodeType":"ElementaryTypeName","src":"4000:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"private"},{"anonymous":false,"id":2953,"name":"OwnershipTransferred","nameLocation":"4037:20:2","nodeType":"EventDefinition","parameters":{"id":2952,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2949,"indexed":true,"mutability":"mutable","name":"previousOwner","nameLocation":"4084:13:2","nodeType":"VariableDeclaration","scope":2953,"src":"4068:29:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2948,"name":"address","nodeType":"ElementaryTypeName","src":"4068:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2951,"indexed":true,"mutability":"mutable","name":"newOwner","nameLocation":"4124:8:2","nodeType":"VariableDeclaration","scope":2953,"src":"4108:24:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2950,"name":"address","nodeType":"ElementaryTypeName","src":"4108:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4057:82:2"},"src":"4031:109:2"},{"body":{"id":2962,"nodeType":"Block","src":"4261:51:2","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":2958,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2931,"src":"4291:10:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":2959,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4291:12:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2957,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3043,"src":"4272:18:2","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":2960,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4272:32:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2961,"nodeType":"ExpressionStatement","src":"4272:32:2"}]},"documentation":{"id":2954,"nodeType":"StructuredDocumentation","src":"4148:93:2","text":" @dev Initializes the contract setting the deployer as the initial owner."},"id":2963,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":2955,"nodeType":"ParameterList","parameters":[],"src":"4258:2:2"},"returnParameters":{"id":2956,"nodeType":"ParameterList","parameters":[],"src":"4261:0:2"},"scope":3044,"src":"4247:65:2","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2971,"nodeType":"Block","src":"4448:32:2","statements":[{"expression":{"id":2969,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2947,"src":"4466:6:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":2968,"id":2970,"nodeType":"Return","src":"4459:13:2"}]},"documentation":{"id":2964,"nodeType":"StructuredDocumentation","src":"4320:67:2","text":" @dev Returns the address of the current owner."},"functionSelector":"8da5cb5b","id":2972,"implemented":true,"kind":"function","modifiers":[],"name":"owner","nameLocation":"4402:5:2","nodeType":"FunctionDefinition","parameters":{"id":2965,"nodeType":"ParameterList","parameters":[],"src":"4407:2:2"},"returnParameters":{"id":2968,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2967,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2972,"src":"4439:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2966,"name":"address","nodeType":"ElementaryTypeName","src":"4439:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4438:9:2"},"scope":3044,"src":"4393:87:2","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":2985,"nodeType":"Block","src":"4594:99:2","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2980,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":2976,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2972,"src":"4613:5:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":2977,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4613:7:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":2978,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2931,"src":"4624:10:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":2979,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4624:12:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4613:23:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572","id":2981,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4638:34:2","typeDescriptions":{"typeIdentifier":"t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe","typeString":"literal_string \"Ownable: caller is not the owner\""},"value":"Ownable: caller is not the owner"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe","typeString":"literal_string \"Ownable: caller is not the owner\""}],"id":2975,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4605:7:2","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2982,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4605:68:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2983,"nodeType":"ExpressionStatement","src":"4605:68:2"},{"id":2984,"nodeType":"PlaceholderStatement","src":"4684:1:2"}]},"documentation":{"id":2973,"nodeType":"StructuredDocumentation","src":"4488:79:2","text":" @dev Throws if called by any account other than the owner."},"id":2986,"name":"onlyOwner","nameLocation":"4582:9:2","nodeType":"ModifierDefinition","parameters":{"id":2974,"nodeType":"ParameterList","parameters":[],"src":"4591:2:2"},"src":"4573:120:2","virtual":false,"visibility":"internal"},{"body":{"id":2999,"nodeType":"Block","src":"5098:49:2","statements":[{"expression":{"arguments":[{"arguments":[{"hexValue":"30","id":2995,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5136:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2994,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5128:7:2","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2993,"name":"address","nodeType":"ElementaryTypeName","src":"5128:7:2","typeDescriptions":{}}},"id":2996,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5128:10:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2992,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3043,"src":"5109:18:2","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":2997,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5109:30:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2998,"nodeType":"ExpressionStatement","src":"5109:30:2"}]},"documentation":{"id":2987,"nodeType":"StructuredDocumentation","src":"4701:337:2","text":" @dev Leaves the contract without owner. It will not be possible to call\n `onlyOwner` functions anymore. Can only be called by the current owner.\n NOTE: Renouncing ownership will leave the contract without an owner,\n thereby removing any functionality that is only available to the owner."},"functionSelector":"715018a6","id":3000,"implemented":true,"kind":"function","modifiers":[{"id":2990,"kind":"modifierInvocation","modifierName":{"id":2989,"name":"onlyOwner","nodeType":"IdentifierPath","referencedDeclaration":2986,"src":"5088:9:2"},"nodeType":"ModifierInvocation","src":"5088:9:2"}],"name":"renounceOwnership","nameLocation":"5053:17:2","nodeType":"FunctionDefinition","parameters":{"id":2988,"nodeType":"ParameterList","parameters":[],"src":"5070:2:2"},"returnParameters":{"id":2991,"nodeType":"ParameterList","parameters":[],"src":"5098:0:2"},"scope":3044,"src":"5044:103:2","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":3022,"nodeType":"Block","src":"5372:168:2","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3014,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3009,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3003,"src":"5405:8:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":3012,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5425:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3011,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5417:7:2","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3010,"name":"address","nodeType":"ElementaryTypeName","src":"5417:7:2","typeDescriptions":{}}},"id":3013,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5417:10:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"5405:22:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373","id":3015,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5442:40:2","typeDescriptions":{"typeIdentifier":"t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe","typeString":"literal_string \"Ownable: new owner is the zero address\""},"value":"Ownable: new owner is the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe","typeString":"literal_string \"Ownable: new owner is the zero address\""}],"id":3008,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5383:7:2","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3016,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5383:110:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3017,"nodeType":"ExpressionStatement","src":"5383:110:2"},{"expression":{"arguments":[{"id":3019,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3003,"src":"5523:8:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3018,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3043,"src":"5504:18:2","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":3020,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5504:28:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3021,"nodeType":"ExpressionStatement","src":"5504:28:2"}]},"documentation":{"id":3001,"nodeType":"StructuredDocumentation","src":"5155:141:2","text":" @dev Transfers ownership of the contract to a new account (`newOwner`).\n Can only be called by the current owner."},"functionSelector":"f2fde38b","id":3023,"implemented":true,"kind":"function","modifiers":[{"id":3006,"kind":"modifierInvocation","modifierName":{"id":3005,"name":"onlyOwner","nodeType":"IdentifierPath","referencedDeclaration":2986,"src":"5362:9:2"},"nodeType":"ModifierInvocation","src":"5362:9:2"}],"name":"transferOwnership","nameLocation":"5311:17:2","nodeType":"FunctionDefinition","parameters":{"id":3004,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3003,"mutability":"mutable","name":"newOwner","nameLocation":"5337:8:2","nodeType":"VariableDeclaration","scope":3023,"src":"5329:16:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3002,"name":"address","nodeType":"ElementaryTypeName","src":"5329:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5328:18:2"},"returnParameters":{"id":3007,"nodeType":"ParameterList","parameters":[],"src":"5372:0:2"},"scope":3044,"src":"5302:238:2","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":3042,"nodeType":"Block","src":"5763:128:2","statements":[{"assignments":[3030],"declarations":[{"constant":false,"id":3030,"mutability":"mutable","name":"oldOwner","nameLocation":"5782:8:2","nodeType":"VariableDeclaration","scope":3042,"src":"5774:16:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3029,"name":"address","nodeType":"ElementaryTypeName","src":"5774:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":3032,"initialValue":{"id":3031,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2947,"src":"5793:6:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"5774:25:2"},{"expression":{"id":3035,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3033,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2947,"src":"5810:6:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3034,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3026,"src":"5819:8:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"5810:17:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3036,"nodeType":"ExpressionStatement","src":"5810:17:2"},{"eventCall":{"arguments":[{"id":3038,"name":"oldOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3030,"src":"5864:8:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3039,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3026,"src":"5874:8:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":3037,"name":"OwnershipTransferred","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2953,"src":"5843:20:2","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$returns$__$","typeString":"function (address,address)"}},"id":3040,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5843:40:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3041,"nodeType":"EmitStatement","src":"5838:45:2"}]},"documentation":{"id":3024,"nodeType":"StructuredDocumentation","src":"5548:146:2","text":" @dev Transfers ownership of the contract to a new account (`newOwner`).\n Internal function without access restriction."},"id":3043,"implemented":true,"kind":"function","modifiers":[],"name":"_transferOwnership","nameLocation":"5709:18:2","nodeType":"FunctionDefinition","parameters":{"id":3027,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3026,"mutability":"mutable","name":"newOwner","nameLocation":"5736:8:2","nodeType":"VariableDeclaration","scope":3043,"src":"5728:16:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3025,"name":"address","nodeType":"ElementaryTypeName","src":"5728:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5727:18:2"},"returnParameters":{"id":3028,"nodeType":"ParameterList","parameters":[],"src":"5763:0:2"},"scope":3044,"src":"5700:191:2","stateMutability":"nonpayable","virtual":true,"visibility":"internal"}],"scope":4257,"src":"3956:1938:2","usedErrors":[]},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"library","fullyImplemented":true,"id":3353,"linearizedBaseContracts":[3353],"name":"SafeMath","nameLocation":"5906:8:2","nodeType":"ContractDefinition","nodes":[{"body":{"id":3075,"nodeType":"Block","src":"6164:146:2","statements":[{"id":3074,"nodeType":"UncheckedBlock","src":"6175:128:2","statements":[{"assignments":[3057],"declarations":[{"constant":false,"id":3057,"mutability":"mutable","name":"c","nameLocation":"6208:1:2","nodeType":"VariableDeclaration","scope":3074,"src":"6200:9:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3056,"name":"uint256","nodeType":"ElementaryTypeName","src":"6200:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3061,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3060,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3058,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3047,"src":"6212:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":3059,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3049,"src":"6216:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6212:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"6200:17:2"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3064,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3062,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3057,"src":"6236:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":3063,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3047,"src":"6240:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6236:5:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3069,"nodeType":"IfStatement","src":"6232:28:2","trueBody":{"expression":{"components":[{"hexValue":"66616c7365","id":3065,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"6251:5:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"30","id":3066,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6258:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":3067,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"6250:10:2","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":3055,"id":3068,"nodeType":"Return","src":"6243:17:2"}},{"expression":{"components":[{"hexValue":"74727565","id":3070,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"6283:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"id":3071,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3057,"src":"6289:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3072,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"6282:9:2","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"functionReturnParameters":3055,"id":3073,"nodeType":"Return","src":"6275:16:2"}]}]},"documentation":{"id":3045,"nodeType":"StructuredDocumentation","src":"5922:135:2","text":" @dev Returns the addition of two unsigned integers, with an overflow flag.\n _Available since v3.4._"},"id":3076,"implemented":true,"kind":"function","modifiers":[],"name":"tryAdd","nameLocation":"6072:6:2","nodeType":"FunctionDefinition","parameters":{"id":3050,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3047,"mutability":"mutable","name":"a","nameLocation":"6097:1:2","nodeType":"VariableDeclaration","scope":3076,"src":"6089:9:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3046,"name":"uint256","nodeType":"ElementaryTypeName","src":"6089:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3049,"mutability":"mutable","name":"b","nameLocation":"6117:1:2","nodeType":"VariableDeclaration","scope":3076,"src":"6109:9:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3048,"name":"uint256","nodeType":"ElementaryTypeName","src":"6109:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6078:47:2"},"returnParameters":{"id":3055,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3052,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3076,"src":"6149:4:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3051,"name":"bool","nodeType":"ElementaryTypeName","src":"6149:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":3054,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3076,"src":"6155:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3053,"name":"uint256","nodeType":"ElementaryTypeName","src":"6155:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6148:15:2"},"scope":3353,"src":"6063:247:2","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3103,"nodeType":"Block","src":"6563:118:2","statements":[{"id":3102,"nodeType":"UncheckedBlock","src":"6574:100:2","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3090,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3088,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3081,"src":"6603:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":3089,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3079,"src":"6607:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6603:5:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3095,"nodeType":"IfStatement","src":"6599:28:2","trueBody":{"expression":{"components":[{"hexValue":"66616c7365","id":3091,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"6618:5:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"30","id":3092,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6625:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":3093,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"6617:10:2","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":3087,"id":3094,"nodeType":"Return","src":"6610:17:2"}},{"expression":{"components":[{"hexValue":"74727565","id":3096,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"6650:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3099,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3097,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3079,"src":"6656:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":3098,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3081,"src":"6660:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6656:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3100,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"6649:13:2","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"functionReturnParameters":3087,"id":3101,"nodeType":"Return","src":"6642:20:2"}]}]},"documentation":{"id":3077,"nodeType":"StructuredDocumentation","src":"6318:138:2","text":" @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n _Available since v3.4._"},"id":3104,"implemented":true,"kind":"function","modifiers":[],"name":"trySub","nameLocation":"6471:6:2","nodeType":"FunctionDefinition","parameters":{"id":3082,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3079,"mutability":"mutable","name":"a","nameLocation":"6496:1:2","nodeType":"VariableDeclaration","scope":3104,"src":"6488:9:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3078,"name":"uint256","nodeType":"ElementaryTypeName","src":"6488:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3081,"mutability":"mutable","name":"b","nameLocation":"6516:1:2","nodeType":"VariableDeclaration","scope":3104,"src":"6508:9:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3080,"name":"uint256","nodeType":"ElementaryTypeName","src":"6508:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6477:47:2"},"returnParameters":{"id":3087,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3084,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3104,"src":"6548:4:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3083,"name":"bool","nodeType":"ElementaryTypeName","src":"6548:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":3086,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3104,"src":"6554:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3085,"name":"uint256","nodeType":"ElementaryTypeName","src":"6554:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6547:15:2"},"scope":3353,"src":"6462:219:2","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3145,"nodeType":"Block","src":"6937:427:2","statements":[{"id":3144,"nodeType":"UncheckedBlock","src":"6948:409:2","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3118,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3116,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3107,"src":"7210:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":3117,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7215:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"7210:6:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3123,"nodeType":"IfStatement","src":"7206:28:2","trueBody":{"expression":{"components":[{"hexValue":"74727565","id":3119,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"7226:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"hexValue":"30","id":3120,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7232:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":3121,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"7225:9:2","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":3115,"id":3122,"nodeType":"Return","src":"7218:16:2"}},{"assignments":[3125],"declarations":[{"constant":false,"id":3125,"mutability":"mutable","name":"c","nameLocation":"7257:1:2","nodeType":"VariableDeclaration","scope":3144,"src":"7249:9:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3124,"name":"uint256","nodeType":"ElementaryTypeName","src":"7249:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3129,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3128,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3126,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3107,"src":"7261:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3127,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3109,"src":"7265:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7261:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"7249:17:2"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3134,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3132,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3130,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3125,"src":"7285:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3131,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3107,"src":"7289:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7285:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":3133,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3109,"src":"7294:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7285:10:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3139,"nodeType":"IfStatement","src":"7281:33:2","trueBody":{"expression":{"components":[{"hexValue":"66616c7365","id":3135,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"7305:5:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"30","id":3136,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7312:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":3137,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"7304:10:2","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":3115,"id":3138,"nodeType":"Return","src":"7297:17:2"}},{"expression":{"components":[{"hexValue":"74727565","id":3140,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"7337:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"id":3141,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3125,"src":"7343:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3142,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7336:9:2","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"functionReturnParameters":3115,"id":3143,"nodeType":"Return","src":"7329:16:2"}]}]},"documentation":{"id":3105,"nodeType":"StructuredDocumentation","src":"6689:141:2","text":" @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n _Available since v3.4._"},"id":3146,"implemented":true,"kind":"function","modifiers":[],"name":"tryMul","nameLocation":"6845:6:2","nodeType":"FunctionDefinition","parameters":{"id":3110,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3107,"mutability":"mutable","name":"a","nameLocation":"6870:1:2","nodeType":"VariableDeclaration","scope":3146,"src":"6862:9:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3106,"name":"uint256","nodeType":"ElementaryTypeName","src":"6862:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3109,"mutability":"mutable","name":"b","nameLocation":"6890:1:2","nodeType":"VariableDeclaration","scope":3146,"src":"6882:9:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3108,"name":"uint256","nodeType":"ElementaryTypeName","src":"6882:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6851:47:2"},"returnParameters":{"id":3115,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3112,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3146,"src":"6922:4:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3111,"name":"bool","nodeType":"ElementaryTypeName","src":"6922:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":3114,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3146,"src":"6928:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3113,"name":"uint256","nodeType":"ElementaryTypeName","src":"6928:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6921:15:2"},"scope":3353,"src":"6836:528:2","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3173,"nodeType":"Block","src":"7621:119:2","statements":[{"id":3172,"nodeType":"UncheckedBlock","src":"7632:101:2","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3160,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3158,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3151,"src":"7661:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":3159,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7666:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"7661:6:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3165,"nodeType":"IfStatement","src":"7657:29:2","trueBody":{"expression":{"components":[{"hexValue":"66616c7365","id":3161,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"7677:5:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"30","id":3162,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7684:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":3163,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"7676:10:2","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":3157,"id":3164,"nodeType":"Return","src":"7669:17:2"}},{"expression":{"components":[{"hexValue":"74727565","id":3166,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"7709:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3169,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3167,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3149,"src":"7715:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3168,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3151,"src":"7719:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7715:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3170,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7708:13:2","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"functionReturnParameters":3157,"id":3171,"nodeType":"Return","src":"7701:20:2"}]}]},"documentation":{"id":3147,"nodeType":"StructuredDocumentation","src":"7372:142:2","text":" @dev Returns the division of two unsigned integers, with a division by zero flag.\n _Available since v3.4._"},"id":3174,"implemented":true,"kind":"function","modifiers":[],"name":"tryDiv","nameLocation":"7529:6:2","nodeType":"FunctionDefinition","parameters":{"id":3152,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3149,"mutability":"mutable","name":"a","nameLocation":"7554:1:2","nodeType":"VariableDeclaration","scope":3174,"src":"7546:9:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3148,"name":"uint256","nodeType":"ElementaryTypeName","src":"7546:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3151,"mutability":"mutable","name":"b","nameLocation":"7574:1:2","nodeType":"VariableDeclaration","scope":3174,"src":"7566:9:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3150,"name":"uint256","nodeType":"ElementaryTypeName","src":"7566:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7535:47:2"},"returnParameters":{"id":3157,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3154,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3174,"src":"7606:4:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3153,"name":"bool","nodeType":"ElementaryTypeName","src":"7606:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":3156,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3174,"src":"7612:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3155,"name":"uint256","nodeType":"ElementaryTypeName","src":"7612:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7605:15:2"},"scope":3353,"src":"7520:220:2","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3201,"nodeType":"Block","src":"8007:119:2","statements":[{"id":3200,"nodeType":"UncheckedBlock","src":"8018:101:2","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3188,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3186,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3179,"src":"8047:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":3187,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8052:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8047:6:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3193,"nodeType":"IfStatement","src":"8043:29:2","trueBody":{"expression":{"components":[{"hexValue":"66616c7365","id":3189,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"8063:5:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"30","id":3190,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8070:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":3191,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"8062:10:2","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":3185,"id":3192,"nodeType":"Return","src":"8055:17:2"}},{"expression":{"components":[{"hexValue":"74727565","id":3194,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"8095:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3197,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3195,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3177,"src":"8101:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"%","rightExpression":{"id":3196,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3179,"src":"8105:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8101:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3198,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"8094:13:2","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"functionReturnParameters":3185,"id":3199,"nodeType":"Return","src":"8087:20:2"}]}]},"documentation":{"id":3175,"nodeType":"StructuredDocumentation","src":"7748:152:2","text":" @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n _Available since v3.4._"},"id":3202,"implemented":true,"kind":"function","modifiers":[],"name":"tryMod","nameLocation":"7915:6:2","nodeType":"FunctionDefinition","parameters":{"id":3180,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3177,"mutability":"mutable","name":"a","nameLocation":"7940:1:2","nodeType":"VariableDeclaration","scope":3202,"src":"7932:9:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3176,"name":"uint256","nodeType":"ElementaryTypeName","src":"7932:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3179,"mutability":"mutable","name":"b","nameLocation":"7960:1:2","nodeType":"VariableDeclaration","scope":3202,"src":"7952:9:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3178,"name":"uint256","nodeType":"ElementaryTypeName","src":"7952:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7921:47:2"},"returnParameters":{"id":3185,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3182,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3202,"src":"7992:4:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3181,"name":"bool","nodeType":"ElementaryTypeName","src":"7992:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":3184,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3202,"src":"7998:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3183,"name":"uint256","nodeType":"ElementaryTypeName","src":"7998:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7991:15:2"},"scope":3353,"src":"7906:220:2","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3216,"nodeType":"Block","src":"8440:31:2","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3214,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3212,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3205,"src":"8458:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":3213,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3207,"src":"8462:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8458:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3211,"id":3215,"nodeType":"Return","src":"8451:12:2"}]},"documentation":{"id":3203,"nodeType":"StructuredDocumentation","src":"8134:233:2","text":" @dev Returns the addition of two unsigned integers, reverting on\n overflow.\n Counterpart to Solidity's `+` operator.\n Requirements:\n - Addition cannot overflow."},"id":3217,"implemented":true,"kind":"function","modifiers":[],"name":"add","nameLocation":"8382:3:2","nodeType":"FunctionDefinition","parameters":{"id":3208,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3205,"mutability":"mutable","name":"a","nameLocation":"8394:1:2","nodeType":"VariableDeclaration","scope":3217,"src":"8386:9:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3204,"name":"uint256","nodeType":"ElementaryTypeName","src":"8386:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3207,"mutability":"mutable","name":"b","nameLocation":"8405:1:2","nodeType":"VariableDeclaration","scope":3217,"src":"8397:9:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3206,"name":"uint256","nodeType":"ElementaryTypeName","src":"8397:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8385:22:2"},"returnParameters":{"id":3211,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3210,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3217,"src":"8431:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3209,"name":"uint256","nodeType":"ElementaryTypeName","src":"8431:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8430:9:2"},"scope":3353,"src":"8373:98:2","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3231,"nodeType":"Block","src":"8821:31:2","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3229,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3227,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3220,"src":"8839:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":3228,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3222,"src":"8843:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8839:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3226,"id":3230,"nodeType":"Return","src":"8832:12:2"}]},"documentation":{"id":3218,"nodeType":"StructuredDocumentation","src":"8479:269:2","text":" @dev Returns the subtraction of two unsigned integers, reverting on\n overflow (when the result is negative).\n Counterpart to Solidity's `-` operator.\n Requirements:\n - Subtraction cannot overflow."},"id":3232,"implemented":true,"kind":"function","modifiers":[],"name":"sub","nameLocation":"8763:3:2","nodeType":"FunctionDefinition","parameters":{"id":3223,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3220,"mutability":"mutable","name":"a","nameLocation":"8775:1:2","nodeType":"VariableDeclaration","scope":3232,"src":"8767:9:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3219,"name":"uint256","nodeType":"ElementaryTypeName","src":"8767:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3222,"mutability":"mutable","name":"b","nameLocation":"8786:1:2","nodeType":"VariableDeclaration","scope":3232,"src":"8778:9:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3221,"name":"uint256","nodeType":"ElementaryTypeName","src":"8778:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8766:22:2"},"returnParameters":{"id":3226,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3225,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3232,"src":"8812:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3224,"name":"uint256","nodeType":"ElementaryTypeName","src":"8812:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8811:9:2"},"scope":3353,"src":"8754:98:2","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3246,"nodeType":"Block","src":"9178:31:2","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3244,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3242,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3235,"src":"9196:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3243,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3237,"src":"9200:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9196:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3241,"id":3245,"nodeType":"Return","src":"9189:12:2"}]},"documentation":{"id":3233,"nodeType":"StructuredDocumentation","src":"8860:245:2","text":" @dev Returns the multiplication of two unsigned integers, reverting on\n overflow.\n Counterpart to Solidity's `*` operator.\n Requirements:\n - Multiplication cannot overflow."},"id":3247,"implemented":true,"kind":"function","modifiers":[],"name":"mul","nameLocation":"9120:3:2","nodeType":"FunctionDefinition","parameters":{"id":3238,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3235,"mutability":"mutable","name":"a","nameLocation":"9132:1:2","nodeType":"VariableDeclaration","scope":3247,"src":"9124:9:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3234,"name":"uint256","nodeType":"ElementaryTypeName","src":"9124:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3237,"mutability":"mutable","name":"b","nameLocation":"9143:1:2","nodeType":"VariableDeclaration","scope":3247,"src":"9135:9:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3236,"name":"uint256","nodeType":"ElementaryTypeName","src":"9135:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9123:22:2"},"returnParameters":{"id":3241,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3240,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3247,"src":"9169:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3239,"name":"uint256","nodeType":"ElementaryTypeName","src":"9169:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9168:9:2"},"scope":3353,"src":"9111:98:2","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3261,"nodeType":"Block","src":"9577:31:2","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3259,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3257,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3250,"src":"9595:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3258,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3252,"src":"9599:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9595:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3256,"id":3260,"nodeType":"Return","src":"9588:12:2"}]},"documentation":{"id":3248,"nodeType":"StructuredDocumentation","src":"9217:287:2","text":" @dev Returns the integer division of two unsigned integers, reverting on\n division by zero. The result is rounded towards zero.\n Counterpart to Solidity's `/` operator.\n Requirements:\n - The divisor cannot be zero."},"id":3262,"implemented":true,"kind":"function","modifiers":[],"name":"div","nameLocation":"9519:3:2","nodeType":"FunctionDefinition","parameters":{"id":3253,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3250,"mutability":"mutable","name":"a","nameLocation":"9531:1:2","nodeType":"VariableDeclaration","scope":3262,"src":"9523:9:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3249,"name":"uint256","nodeType":"ElementaryTypeName","src":"9523:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3252,"mutability":"mutable","name":"b","nameLocation":"9542:1:2","nodeType":"VariableDeclaration","scope":3262,"src":"9534:9:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3251,"name":"uint256","nodeType":"ElementaryTypeName","src":"9534:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9522:22:2"},"returnParameters":{"id":3256,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3255,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3262,"src":"9568:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3254,"name":"uint256","nodeType":"ElementaryTypeName","src":"9568:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9567:9:2"},"scope":3353,"src":"9510:98:2","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3276,"nodeType":"Block","src":"10142:31:2","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3274,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3272,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3265,"src":"10160:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"%","rightExpression":{"id":3273,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3267,"src":"10164:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10160:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3271,"id":3275,"nodeType":"Return","src":"10153:12:2"}]},"documentation":{"id":3263,"nodeType":"StructuredDocumentation","src":"9616:453:2","text":" @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n reverting when dividing by zero.\n Counterpart to Solidity's `%` operator. This function uses a `revert`\n opcode (which leaves remaining gas untouched) while Solidity uses an\n invalid opcode to revert (consuming all remaining gas).\n Requirements:\n - The divisor cannot be zero."},"id":3277,"implemented":true,"kind":"function","modifiers":[],"name":"mod","nameLocation":"10084:3:2","nodeType":"FunctionDefinition","parameters":{"id":3268,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3265,"mutability":"mutable","name":"a","nameLocation":"10096:1:2","nodeType":"VariableDeclaration","scope":3277,"src":"10088:9:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3264,"name":"uint256","nodeType":"ElementaryTypeName","src":"10088:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3267,"mutability":"mutable","name":"b","nameLocation":"10107:1:2","nodeType":"VariableDeclaration","scope":3277,"src":"10099:9:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3266,"name":"uint256","nodeType":"ElementaryTypeName","src":"10099:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10087:22:2"},"returnParameters":{"id":3271,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3270,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3277,"src":"10133:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3269,"name":"uint256","nodeType":"ElementaryTypeName","src":"10133:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10132:9:2"},"scope":3353,"src":"10075:98:2","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3301,"nodeType":"Block","src":"10781:111:2","statements":[{"id":3300,"nodeType":"UncheckedBlock","src":"10792:93:2","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3292,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3290,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3282,"src":"10825:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"id":3291,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3280,"src":"10830:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10825:6:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":3293,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3284,"src":"10833:12:2","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":3289,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"10817:7:2","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3294,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"10817:29:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3295,"nodeType":"ExpressionStatement","src":"10817:29:2"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3298,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3296,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3280,"src":"10868:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":3297,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3282,"src":"10872:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10868:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3288,"id":3299,"nodeType":"Return","src":"10861:12:2"}]}]},"documentation":{"id":3278,"nodeType":"StructuredDocumentation","src":"10181:465:2","text":" @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n overflow (when the result is negative).\n CAUTION: This function is deprecated because it requires allocating memory for the error\n message unnecessarily. For custom revert reasons use {trySub}.\n Counterpart to Solidity's `-` operator.\n Requirements:\n - Subtraction cannot overflow."},"id":3302,"implemented":true,"kind":"function","modifiers":[],"name":"sub","nameLocation":"10661:3:2","nodeType":"FunctionDefinition","parameters":{"id":3285,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3280,"mutability":"mutable","name":"a","nameLocation":"10683:1:2","nodeType":"VariableDeclaration","scope":3302,"src":"10675:9:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3279,"name":"uint256","nodeType":"ElementaryTypeName","src":"10675:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3282,"mutability":"mutable","name":"b","nameLocation":"10703:1:2","nodeType":"VariableDeclaration","scope":3302,"src":"10695:9:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3281,"name":"uint256","nodeType":"ElementaryTypeName","src":"10695:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3284,"mutability":"mutable","name":"errorMessage","nameLocation":"10729:12:2","nodeType":"VariableDeclaration","scope":3302,"src":"10715:26:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3283,"name":"string","nodeType":"ElementaryTypeName","src":"10715:6:2","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"10664:84:2"},"returnParameters":{"id":3288,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3287,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3302,"src":"10772:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3286,"name":"uint256","nodeType":"ElementaryTypeName","src":"10772:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10771:9:2"},"scope":3353,"src":"10652:240:2","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3326,"nodeType":"Block","src":"11519:110:2","statements":[{"id":3325,"nodeType":"UncheckedBlock","src":"11530:92:2","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3317,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3315,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3307,"src":"11563:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3316,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11567:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11563:5:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":3318,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3309,"src":"11570:12:2","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":3314,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"11555:7:2","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3319,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"11555:28:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3320,"nodeType":"ExpressionStatement","src":"11555:28:2"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3323,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3321,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3305,"src":"11605:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3322,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3307,"src":"11609:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11605:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3313,"id":3324,"nodeType":"Return","src":"11598:12:2"}]}]},"documentation":{"id":3303,"nodeType":"StructuredDocumentation","src":"10900:484:2","text":" @dev Returns the integer division of two unsigned integers, reverting with custom message on\n division by zero. The result is rounded towards zero.\n Counterpart to Solidity's `/` operator. Note: this function uses a\n `revert` opcode (which leaves remaining gas untouched) while Solidity\n uses an invalid opcode to revert (consuming all remaining gas).\n Requirements:\n - The divisor cannot be zero."},"id":3327,"implemented":true,"kind":"function","modifiers":[],"name":"div","nameLocation":"11399:3:2","nodeType":"FunctionDefinition","parameters":{"id":3310,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3305,"mutability":"mutable","name":"a","nameLocation":"11421:1:2","nodeType":"VariableDeclaration","scope":3327,"src":"11413:9:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3304,"name":"uint256","nodeType":"ElementaryTypeName","src":"11413:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3307,"mutability":"mutable","name":"b","nameLocation":"11441:1:2","nodeType":"VariableDeclaration","scope":3327,"src":"11433:9:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3306,"name":"uint256","nodeType":"ElementaryTypeName","src":"11433:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3309,"mutability":"mutable","name":"errorMessage","nameLocation":"11467:12:2","nodeType":"VariableDeclaration","scope":3327,"src":"11453:26:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3308,"name":"string","nodeType":"ElementaryTypeName","src":"11453:6:2","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"11402:84:2"},"returnParameters":{"id":3313,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3312,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3327,"src":"11510:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3311,"name":"uint256","nodeType":"ElementaryTypeName","src":"11510:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11509:9:2"},"scope":3353,"src":"11390:239:2","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3351,"nodeType":"Block","src":"12421:110:2","statements":[{"id":3350,"nodeType":"UncheckedBlock","src":"12432:92:2","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3342,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3340,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3332,"src":"12465:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3341,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12469:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"12465:5:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":3343,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3334,"src":"12472:12:2","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":3339,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"12457:7:2","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3344,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"12457:28:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3345,"nodeType":"ExpressionStatement","src":"12457:28:2"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3348,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3346,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3330,"src":"12507:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"%","rightExpression":{"id":3347,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3332,"src":"12511:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12507:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3338,"id":3349,"nodeType":"Return","src":"12500:12:2"}]}]},"documentation":{"id":3328,"nodeType":"StructuredDocumentation","src":"11637:649:2","text":" @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n reverting with custom message when dividing by zero.\n CAUTION: This function is deprecated because it requires allocating memory for the error\n message unnecessarily. For custom revert reasons use {tryMod}.\n Counterpart to Solidity's `%` operator. This function uses a `revert`\n opcode (which leaves remaining gas untouched) while Solidity uses an\n invalid opcode to revert (consuming all remaining gas).\n Requirements:\n - The divisor cannot be zero."},"id":3352,"implemented":true,"kind":"function","modifiers":[],"name":"mod","nameLocation":"12301:3:2","nodeType":"FunctionDefinition","parameters":{"id":3335,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3330,"mutability":"mutable","name":"a","nameLocation":"12323:1:2","nodeType":"VariableDeclaration","scope":3352,"src":"12315:9:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3329,"name":"uint256","nodeType":"ElementaryTypeName","src":"12315:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3332,"mutability":"mutable","name":"b","nameLocation":"12343:1:2","nodeType":"VariableDeclaration","scope":3352,"src":"12335:9:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3331,"name":"uint256","nodeType":"ElementaryTypeName","src":"12335:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3334,"mutability":"mutable","name":"errorMessage","nameLocation":"12369:12:2","nodeType":"VariableDeclaration","scope":3352,"src":"12355:26:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3333,"name":"string","nodeType":"ElementaryTypeName","src":"12355:6:2","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"12304:84:2"},"returnParameters":{"id":3338,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3337,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3352,"src":"12412:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3336,"name":"uint256","nodeType":"ElementaryTypeName","src":"12412:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12411:9:2"},"scope":3353,"src":"12292:239:2","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":4257,"src":"5898:6636:2","usedErrors":[]},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"library","fullyImplemented":true,"id":3645,"linearizedBaseContracts":[3645],"name":"Address","nameLocation":"12546:7:2","nodeType":"ContractDefinition","nodes":[{"body":{"id":3367,"nodeType":"Block","src":"13612:260:2","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3365,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"id":3361,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3356,"src":"13841:7:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3362,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"code","nodeType":"MemberAccess","src":"13841:12:2","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":3363,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"13841:19:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3364,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13863:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"13841:23:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":3360,"id":3366,"nodeType":"Return","src":"13834:30:2"}]},"documentation":{"id":3354,"nodeType":"StructuredDocumentation","src":"12561:979:2","text":" @dev Returns true if `account` is a contract.\n [IMPORTANT]\n ====\n It is unsafe to assume that an address for which this function returns\n false is an externally-owned account (EOA) and not a contract.\n Among others, `isContract` will return false for the following\n types of addresses:\n  - an externally-owned account\n  - a contract in construction\n  - an address where a contract will be created\n  - an address where a contract lived, but was destroyed\n ====\n [IMPORTANT]\n ====\n You shouldn't rely on `isContract` to protect against flash loan attacks!\n Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n constructor.\n ===="},"id":3368,"implemented":true,"kind":"function","modifiers":[],"name":"isContract","nameLocation":"13555:10:2","nodeType":"FunctionDefinition","parameters":{"id":3357,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3356,"mutability":"mutable","name":"account","nameLocation":"13574:7:2","nodeType":"VariableDeclaration","scope":3368,"src":"13566:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3355,"name":"address","nodeType":"ElementaryTypeName","src":"13566:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"13565:17:2"},"returnParameters":{"id":3360,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3359,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3368,"src":"13606:4:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3358,"name":"bool","nodeType":"ElementaryTypeName","src":"13606:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"13605:6:2"},"scope":3645,"src":"13546:326:2","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":3401,"nodeType":"Block","src":"14878:320:2","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3383,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":3379,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"14919:4:2","typeDescriptions":{"typeIdentifier":"t_contract$_Address_$3645","typeString":"library Address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Address_$3645","typeString":"library Address"}],"id":3378,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"14911:7:2","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3377,"name":"address","nodeType":"ElementaryTypeName","src":"14911:7:2","typeDescriptions":{}}},"id":3380,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"14911:13:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3381,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"balance","nodeType":"MemberAccess","src":"14911:21:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":3382,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3373,"src":"14936:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"14911:31:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20696e73756666696369656e742062616c616e6365","id":3384,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"14957:31:2","typeDescriptions":{"typeIdentifier":"t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9","typeString":"literal_string \"Address: insufficient balance\""},"value":"Address: insufficient balance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9","typeString":"literal_string \"Address: insufficient balance\""}],"id":3376,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"14889:7:2","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3385,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"14889:110:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3386,"nodeType":"ExpressionStatement","src":"14889:110:2"},{"assignments":[3388,null],"declarations":[{"constant":false,"id":3388,"mutability":"mutable","name":"success","nameLocation":"15018:7:2","nodeType":"VariableDeclaration","scope":3401,"src":"15013:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3387,"name":"bool","nodeType":"ElementaryTypeName","src":"15013:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},null],"id":3395,"initialValue":{"arguments":[{"hexValue":"","id":3393,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"15061:2:2","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"id":3389,"name":"recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3371,"src":"15031:9:2","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":3390,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"call","nodeType":"MemberAccess","src":"15031:14:2","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":3392,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":3391,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3373,"src":"15053:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"15031:29:2","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":3394,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"15031:33:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"15012:52:2"},{"expression":{"arguments":[{"id":3397,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3388,"src":"15097:7:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20756e61626c6520746f2073656e642076616c75652c20726563697069656e74206d61792068617665207265766572746564","id":3398,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"15119:60:2","typeDescriptions":{"typeIdentifier":"t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae","typeString":"literal_string \"Address: unable to send value, recipient may have reverted\""},"value":"Address: unable to send value, recipient may have reverted"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae","typeString":"literal_string \"Address: unable to send value, recipient may have reverted\""}],"id":3396,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"15075:7:2","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3399,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"15075:115:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3400,"nodeType":"ExpressionStatement","src":"15075:115:2"}]},"documentation":{"id":3369,"nodeType":"StructuredDocumentation","src":"13880:921:2","text":" @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n `recipient`, forwarding all available gas and reverting on errors.\n https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n of certain opcodes, possibly making contracts go over the 2300 gas limit\n imposed by `transfer`, making them unable to receive funds via\n `transfer`. {sendValue} removes this limitation.\n https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n IMPORTANT: because control is transferred to `recipient`, care must be\n taken to not create reentrancy vulnerabilities. Consider using\n {ReentrancyGuard} or the\n https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern]."},"id":3402,"implemented":true,"kind":"function","modifiers":[],"name":"sendValue","nameLocation":"14816:9:2","nodeType":"FunctionDefinition","parameters":{"id":3374,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3371,"mutability":"mutable","name":"recipient","nameLocation":"14842:9:2","nodeType":"VariableDeclaration","scope":3402,"src":"14826:25:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":3370,"name":"address","nodeType":"ElementaryTypeName","src":"14826:15:2","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"},{"constant":false,"id":3373,"mutability":"mutable","name":"amount","nameLocation":"14861:6:2","nodeType":"VariableDeclaration","scope":3402,"src":"14853:14:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3372,"name":"uint256","nodeType":"ElementaryTypeName","src":"14853:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"14825:43:2"},"returnParameters":{"id":3375,"nodeType":"ParameterList","parameters":[],"src":"14878:0:2"},"scope":3645,"src":"14807:391:2","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3418,"nodeType":"Block","src":"16074:86:2","statements":[{"expression":{"arguments":[{"id":3413,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3405,"src":"16105:6:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3414,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3407,"src":"16113:4:2","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"416464726573733a206c6f772d6c6576656c2063616c6c206661696c6564","id":3415,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"16119:32:2","typeDescriptions":{"typeIdentifier":"t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df","typeString":"literal_string \"Address: low-level call failed\""},"value":"Address: low-level call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df","typeString":"literal_string \"Address: low-level call failed\""}],"id":3412,"name":"functionCall","nodeType":"Identifier","overloadedDeclarations":[3419,3439],"referencedDeclaration":3439,"src":"16092:12:2","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,string memory) returns (bytes memory)"}},"id":3416,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"16092:60:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":3411,"id":3417,"nodeType":"Return","src":"16085:67:2"}]},"documentation":{"id":3403,"nodeType":"StructuredDocumentation","src":"15206:748:2","text":" @dev Performs a Solidity function call using a low level `call`. A\n plain `call` is an unsafe replacement for a function call: use this\n function instead.\n If `target` reverts with a revert reason, it is bubbled up by this\n function (like regular Solidity function calls).\n Returns the raw returned data. To convert to the expected return value,\n use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n Requirements:\n - `target` must be a contract.\n - calling `target` with `data` must not revert.\n _Available since v3.1._"},"id":3419,"implemented":true,"kind":"function","modifiers":[],"name":"functionCall","nameLocation":"15969:12:2","nodeType":"FunctionDefinition","parameters":{"id":3408,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3405,"mutability":"mutable","name":"target","nameLocation":"16000:6:2","nodeType":"VariableDeclaration","scope":3419,"src":"15992:14:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3404,"name":"address","nodeType":"ElementaryTypeName","src":"15992:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3407,"mutability":"mutable","name":"data","nameLocation":"16030:4:2","nodeType":"VariableDeclaration","scope":3419,"src":"16017:17:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3406,"name":"bytes","nodeType":"ElementaryTypeName","src":"16017:5:2","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"15981:60:2"},"returnParameters":{"id":3411,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3410,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3419,"src":"16060:12:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3409,"name":"bytes","nodeType":"ElementaryTypeName","src":"16060:5:2","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"16059:14:2"},"scope":3645,"src":"15960:200:2","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3438,"nodeType":"Block","src":"16541:78:2","statements":[{"expression":{"arguments":[{"id":3432,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3422,"src":"16581:6:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3433,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3424,"src":"16589:4:2","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"30","id":3434,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"16595:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"id":3435,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3426,"src":"16598:12:2","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":3431,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[3459,3509],"referencedDeclaration":3509,"src":"16559:21:2","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":3436,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"16559:52:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":3430,"id":3437,"nodeType":"Return","src":"16552:59:2"}]},"documentation":{"id":3420,"nodeType":"StructuredDocumentation","src":"16168:216:2","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"},"id":3439,"implemented":true,"kind":"function","modifiers":[],"name":"functionCall","nameLocation":"16399:12:2","nodeType":"FunctionDefinition","parameters":{"id":3427,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3422,"mutability":"mutable","name":"target","nameLocation":"16430:6:2","nodeType":"VariableDeclaration","scope":3439,"src":"16422:14:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3421,"name":"address","nodeType":"ElementaryTypeName","src":"16422:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3424,"mutability":"mutable","name":"data","nameLocation":"16460:4:2","nodeType":"VariableDeclaration","scope":3439,"src":"16447:17:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3423,"name":"bytes","nodeType":"ElementaryTypeName","src":"16447:5:2","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":3426,"mutability":"mutable","name":"errorMessage","nameLocation":"16489:12:2","nodeType":"VariableDeclaration","scope":3439,"src":"16475:26:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3425,"name":"string","nodeType":"ElementaryTypeName","src":"16475:6:2","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"16411:97:2"},"returnParameters":{"id":3430,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3429,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3439,"src":"16527:12:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3428,"name":"bytes","nodeType":"ElementaryTypeName","src":"16527:5:2","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"16526:14:2"},"scope":3645,"src":"16390:229:2","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3458,"nodeType":"Block","src":"17141:209:2","statements":[{"expression":{"arguments":[{"id":3452,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3442,"src":"17212:6:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3453,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3444,"src":"17237:4:2","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":3454,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3446,"src":"17260:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"416464726573733a206c6f772d6c6576656c2063616c6c20776974682076616c7565206661696c6564","id":3455,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"17284:43:2","typeDescriptions":{"typeIdentifier":"t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc","typeString":"literal_string \"Address: low-level call with value failed\""},"value":"Address: low-level call with value failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc","typeString":"literal_string \"Address: low-level call with value failed\""}],"id":3451,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[3459,3509],"referencedDeclaration":3509,"src":"17172:21:2","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":3456,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"17172:170:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":3450,"id":3457,"nodeType":"Return","src":"17152:190:2"}]},"documentation":{"id":3440,"nodeType":"StructuredDocumentation","src":"16627:361:2","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but also transferring `value` wei to `target`.\n Requirements:\n - the calling contract must have an ETH balance of at least `value`.\n - the called Solidity function must be `payable`.\n _Available since v3.1._"},"id":3459,"implemented":true,"kind":"function","modifiers":[],"name":"functionCallWithValue","nameLocation":"17003:21:2","nodeType":"FunctionDefinition","parameters":{"id":3447,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3442,"mutability":"mutable","name":"target","nameLocation":"17043:6:2","nodeType":"VariableDeclaration","scope":3459,"src":"17035:14:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3441,"name":"address","nodeType":"ElementaryTypeName","src":"17035:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3444,"mutability":"mutable","name":"data","nameLocation":"17073:4:2","nodeType":"VariableDeclaration","scope":3459,"src":"17060:17:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3443,"name":"bytes","nodeType":"ElementaryTypeName","src":"17060:5:2","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":3446,"mutability":"mutable","name":"value","nameLocation":"17096:5:2","nodeType":"VariableDeclaration","scope":3459,"src":"17088:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3445,"name":"uint256","nodeType":"ElementaryTypeName","src":"17088:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"17024:84:2"},"returnParameters":{"id":3450,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3449,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3459,"src":"17127:12:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3448,"name":"bytes","nodeType":"ElementaryTypeName","src":"17127:5:2","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"17126:14:2"},"scope":3645,"src":"16994:356:2","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3508,"nodeType":"Block","src":"17790:387:2","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3480,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":3476,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"17831:4:2","typeDescriptions":{"typeIdentifier":"t_contract$_Address_$3645","typeString":"library Address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Address_$3645","typeString":"library Address"}],"id":3475,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"17823:7:2","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3474,"name":"address","nodeType":"ElementaryTypeName","src":"17823:7:2","typeDescriptions":{}}},"id":3477,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"17823:13:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3478,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"balance","nodeType":"MemberAccess","src":"17823:21:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":3479,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3466,"src":"17848:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"17823:30:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c","id":3481,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"17868:40:2","typeDescriptions":{"typeIdentifier":"t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c","typeString":"literal_string \"Address: insufficient balance for call\""},"value":"Address: insufficient balance for call"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c","typeString":"literal_string \"Address: insufficient balance for call\""}],"id":3473,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"17801:7:2","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3482,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"17801:118:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3483,"nodeType":"ExpressionStatement","src":"17801:118:2"},{"expression":{"arguments":[{"arguments":[{"id":3486,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3462,"src":"17949:6:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3485,"name":"isContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3368,"src":"17938:10:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":3487,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"17938:18:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374","id":3488,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"17958:31:2","typeDescriptions":{"typeIdentifier":"t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad","typeString":"literal_string \"Address: call to non-contract\""},"value":"Address: call to non-contract"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad","typeString":"literal_string \"Address: call to non-contract\""}],"id":3484,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"17930:7:2","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3489,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"17930:60:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3490,"nodeType":"ExpressionStatement","src":"17930:60:2"},{"assignments":[3492,3494],"declarations":[{"constant":false,"id":3492,"mutability":"mutable","name":"success","nameLocation":"18009:7:2","nodeType":"VariableDeclaration","scope":3508,"src":"18004:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3491,"name":"bool","nodeType":"ElementaryTypeName","src":"18004:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":3494,"mutability":"mutable","name":"returndata","nameLocation":"18031:10:2","nodeType":"VariableDeclaration","scope":3508,"src":"18018:23:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3493,"name":"bytes","nodeType":"ElementaryTypeName","src":"18018:5:2","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":3501,"initialValue":{"arguments":[{"id":3499,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3464,"src":"18085:4:2","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":3495,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3462,"src":"18045:6:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3496,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"call","nodeType":"MemberAccess","src":"18045:11:2","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":3498,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":3497,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3466,"src":"18064:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"18045:25:2","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":3500,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"18045:55:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"18003:97:2"},{"expression":{"arguments":[{"id":3503,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3492,"src":"18135:7:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":3504,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3494,"src":"18144:10:2","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":3505,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3468,"src":"18156:12:2","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":3502,"name":"verifyCallResult","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3644,"src":"18118:16:2","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (bool,bytes memory,string memory) pure returns (bytes memory)"}},"id":3506,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"18118:51:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":3472,"id":3507,"nodeType":"Return","src":"18111:58:2"}]},"documentation":{"id":3460,"nodeType":"StructuredDocumentation","src":"17358:242:2","text":" @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n with `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"},"id":3509,"implemented":true,"kind":"function","modifiers":[],"name":"functionCallWithValue","nameLocation":"17615:21:2","nodeType":"FunctionDefinition","parameters":{"id":3469,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3462,"mutability":"mutable","name":"target","nameLocation":"17655:6:2","nodeType":"VariableDeclaration","scope":3509,"src":"17647:14:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3461,"name":"address","nodeType":"ElementaryTypeName","src":"17647:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3464,"mutability":"mutable","name":"data","nameLocation":"17685:4:2","nodeType":"VariableDeclaration","scope":3509,"src":"17672:17:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3463,"name":"bytes","nodeType":"ElementaryTypeName","src":"17672:5:2","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":3466,"mutability":"mutable","name":"value","nameLocation":"17708:5:2","nodeType":"VariableDeclaration","scope":3509,"src":"17700:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3465,"name":"uint256","nodeType":"ElementaryTypeName","src":"17700:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3468,"mutability":"mutable","name":"errorMessage","nameLocation":"17738:12:2","nodeType":"VariableDeclaration","scope":3509,"src":"17724:26:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3467,"name":"string","nodeType":"ElementaryTypeName","src":"17724:6:2","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"17636:121:2"},"returnParameters":{"id":3472,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3471,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3509,"src":"17776:12:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3470,"name":"bytes","nodeType":"ElementaryTypeName","src":"17776:5:2","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"17775:14:2"},"scope":3645,"src":"17606:571:2","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3525,"nodeType":"Block","src":"18487:178:2","statements":[{"expression":{"arguments":[{"id":3520,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3512,"src":"18555:6:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3521,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3514,"src":"18580:4:2","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"416464726573733a206c6f772d6c6576656c207374617469632063616c6c206661696c6564","id":3522,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"18603:39:2","typeDescriptions":{"typeIdentifier":"t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0","typeString":"literal_string \"Address: low-level static call failed\""},"value":"Address: low-level static call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0","typeString":"literal_string \"Address: low-level static call failed\""}],"id":3519,"name":"functionStaticCall","nodeType":"Identifier","overloadedDeclarations":[3526,3561],"referencedDeclaration":3561,"src":"18518:18:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,string memory) view returns (bytes memory)"}},"id":3523,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"18518:139:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":3518,"id":3524,"nodeType":"Return","src":"18498:159:2"}]},"documentation":{"id":3510,"nodeType":"StructuredDocumentation","src":"18185:171:2","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"},"id":3526,"implemented":true,"kind":"function","modifiers":[],"name":"functionStaticCall","nameLocation":"18371:18:2","nodeType":"FunctionDefinition","parameters":{"id":3515,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3512,"mutability":"mutable","name":"target","nameLocation":"18408:6:2","nodeType":"VariableDeclaration","scope":3526,"src":"18400:14:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3511,"name":"address","nodeType":"ElementaryTypeName","src":"18400:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3514,"mutability":"mutable","name":"data","nameLocation":"18438:4:2","nodeType":"VariableDeclaration","scope":3526,"src":"18425:17:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3513,"name":"bytes","nodeType":"ElementaryTypeName","src":"18425:5:2","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"18389:60:2"},"returnParameters":{"id":3518,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3517,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3526,"src":"18473:12:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3516,"name":"bytes","nodeType":"ElementaryTypeName","src":"18473:5:2","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"18472:14:2"},"scope":3645,"src":"18362:303:2","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":3560,"nodeType":"Block","src":"19019:233:2","statements":[{"expression":{"arguments":[{"arguments":[{"id":3540,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3529,"src":"19049:6:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3539,"name":"isContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3368,"src":"19038:10:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":3541,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"19038:18:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a207374617469632063616c6c20746f206e6f6e2d636f6e7472616374","id":3542,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"19058:38:2","typeDescriptions":{"typeIdentifier":"t_stringliteral_c79cc78e4f16ce3933a42b84c73868f93bb4a59c031a0acf576679de98c608a9","typeString":"literal_string \"Address: static call to non-contract\""},"value":"Address: static call to non-contract"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_c79cc78e4f16ce3933a42b84c73868f93bb4a59c031a0acf576679de98c608a9","typeString":"literal_string \"Address: static call to non-contract\""}],"id":3538,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"19030:7:2","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3543,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"19030:67:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3544,"nodeType":"ExpressionStatement","src":"19030:67:2"},{"assignments":[3546,3548],"declarations":[{"constant":false,"id":3546,"mutability":"mutable","name":"success","nameLocation":"19116:7:2","nodeType":"VariableDeclaration","scope":3560,"src":"19111:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3545,"name":"bool","nodeType":"ElementaryTypeName","src":"19111:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":3548,"mutability":"mutable","name":"returndata","nameLocation":"19138:10:2","nodeType":"VariableDeclaration","scope":3560,"src":"19125:23:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3547,"name":"bytes","nodeType":"ElementaryTypeName","src":"19125:5:2","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":3553,"initialValue":{"arguments":[{"id":3551,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3531,"src":"19170:4:2","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":3549,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3529,"src":"19152:6:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3550,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"staticcall","nodeType":"MemberAccess","src":"19152:17:2","typeDescriptions":{"typeIdentifier":"t_function_barestaticcall_view$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) view returns (bool,bytes memory)"}},"id":3552,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"19152:23:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"19110:65:2"},{"expression":{"arguments":[{"id":3555,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3546,"src":"19210:7:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":3556,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3548,"src":"19219:10:2","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":3557,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3533,"src":"19231:12:2","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":3554,"name":"verifyCallResult","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3644,"src":"19193:16:2","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (bool,bytes memory,string memory) pure returns (bytes memory)"}},"id":3558,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"19193:51:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":3537,"id":3559,"nodeType":"Return","src":"19186:58:2"}]},"documentation":{"id":3527,"nodeType":"StructuredDocumentation","src":"18673:178:2","text":" @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"},"id":3561,"implemented":true,"kind":"function","modifiers":[],"name":"functionStaticCall","nameLocation":"18866:18:2","nodeType":"FunctionDefinition","parameters":{"id":3534,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3529,"mutability":"mutable","name":"target","nameLocation":"18903:6:2","nodeType":"VariableDeclaration","scope":3561,"src":"18895:14:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3528,"name":"address","nodeType":"ElementaryTypeName","src":"18895:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3531,"mutability":"mutable","name":"data","nameLocation":"18933:4:2","nodeType":"VariableDeclaration","scope":3561,"src":"18920:17:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3530,"name":"bytes","nodeType":"ElementaryTypeName","src":"18920:5:2","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":3533,"mutability":"mutable","name":"errorMessage","nameLocation":"18962:12:2","nodeType":"VariableDeclaration","scope":3561,"src":"18948:26:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3532,"name":"string","nodeType":"ElementaryTypeName","src":"18948:6:2","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"18884:97:2"},"returnParameters":{"id":3537,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3536,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3561,"src":"19005:12:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3535,"name":"bytes","nodeType":"ElementaryTypeName","src":"19005:5:2","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"19004:14:2"},"scope":3645,"src":"18857:395:2","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":3577,"nodeType":"Block","src":"19561:182:2","statements":[{"expression":{"arguments":[{"id":3572,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3564,"src":"19631:6:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3573,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3566,"src":"19656:4:2","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564","id":3574,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"19679:41:2","typeDescriptions":{"typeIdentifier":"t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398","typeString":"literal_string \"Address: low-level delegate call failed\""},"value":"Address: low-level delegate call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398","typeString":"literal_string \"Address: low-level delegate call failed\""}],"id":3571,"name":"functionDelegateCall","nodeType":"Identifier","overloadedDeclarations":[3578,3613],"referencedDeclaration":3613,"src":"19592:20:2","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,string memory) returns (bytes memory)"}},"id":3575,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"19592:143:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":3570,"id":3576,"nodeType":"Return","src":"19572:163:2"}]},"documentation":{"id":3562,"nodeType":"StructuredDocumentation","src":"19260:173:2","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"},"id":3578,"implemented":true,"kind":"function","modifiers":[],"name":"functionDelegateCall","nameLocation":"19448:20:2","nodeType":"FunctionDefinition","parameters":{"id":3567,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3564,"mutability":"mutable","name":"target","nameLocation":"19487:6:2","nodeType":"VariableDeclaration","scope":3578,"src":"19479:14:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3563,"name":"address","nodeType":"ElementaryTypeName","src":"19479:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3566,"mutability":"mutable","name":"data","nameLocation":"19517:4:2","nodeType":"VariableDeclaration","scope":3578,"src":"19504:17:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3565,"name":"bytes","nodeType":"ElementaryTypeName","src":"19504:5:2","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"19468:60:2"},"returnParameters":{"id":3570,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3569,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3578,"src":"19547:12:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3568,"name":"bytes","nodeType":"ElementaryTypeName","src":"19547:5:2","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"19546:14:2"},"scope":3645,"src":"19439:304:2","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3612,"nodeType":"Block","src":"20096:237:2","statements":[{"expression":{"arguments":[{"arguments":[{"id":3592,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3581,"src":"20126:6:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3591,"name":"isContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3368,"src":"20115:10:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":3593,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"20115:18:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6e7472616374","id":3594,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"20135:40:2","typeDescriptions":{"typeIdentifier":"t_stringliteral_b94ded0918034cf8f896e19fa3cfdef1188cd569c577264a3622e49152f88520","typeString":"literal_string \"Address: delegate call to non-contract\""},"value":"Address: delegate call to non-contract"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_b94ded0918034cf8f896e19fa3cfdef1188cd569c577264a3622e49152f88520","typeString":"literal_string \"Address: delegate call to non-contract\""}],"id":3590,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"20107:7:2","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3595,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"20107:69:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3596,"nodeType":"ExpressionStatement","src":"20107:69:2"},{"assignments":[3598,3600],"declarations":[{"constant":false,"id":3598,"mutability":"mutable","name":"success","nameLocation":"20195:7:2","nodeType":"VariableDeclaration","scope":3612,"src":"20190:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3597,"name":"bool","nodeType":"ElementaryTypeName","src":"20190:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":3600,"mutability":"mutable","name":"returndata","nameLocation":"20217:10:2","nodeType":"VariableDeclaration","scope":3612,"src":"20204:23:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3599,"name":"bytes","nodeType":"ElementaryTypeName","src":"20204:5:2","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":3605,"initialValue":{"arguments":[{"id":3603,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3583,"src":"20251:4:2","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":3601,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3581,"src":"20231:6:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3602,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"delegatecall","nodeType":"MemberAccess","src":"20231:19:2","typeDescriptions":{"typeIdentifier":"t_function_baredelegatecall_nonpayable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) returns (bool,bytes memory)"}},"id":3604,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"20231:25:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"20189:67:2"},{"expression":{"arguments":[{"id":3607,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3598,"src":"20291:7:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":3608,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3600,"src":"20300:10:2","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":3609,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3585,"src":"20312:12:2","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":3606,"name":"verifyCallResult","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3644,"src":"20274:16:2","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (bool,bytes memory,string memory) pure returns (bytes memory)"}},"id":3610,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"20274:51:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":3589,"id":3611,"nodeType":"Return","src":"20267:58:2"}]},"documentation":{"id":3579,"nodeType":"StructuredDocumentation","src":"19751:180:2","text":" @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"},"id":3613,"implemented":true,"kind":"function","modifiers":[],"name":"functionDelegateCall","nameLocation":"19946:20:2","nodeType":"FunctionDefinition","parameters":{"id":3586,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3581,"mutability":"mutable","name":"target","nameLocation":"19985:6:2","nodeType":"VariableDeclaration","scope":3613,"src":"19977:14:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3580,"name":"address","nodeType":"ElementaryTypeName","src":"19977:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3583,"mutability":"mutable","name":"data","nameLocation":"20015:4:2","nodeType":"VariableDeclaration","scope":3613,"src":"20002:17:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3582,"name":"bytes","nodeType":"ElementaryTypeName","src":"20002:5:2","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":3585,"mutability":"mutable","name":"errorMessage","nameLocation":"20044:12:2","nodeType":"VariableDeclaration","scope":3613,"src":"20030:26:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3584,"name":"string","nodeType":"ElementaryTypeName","src":"20030:6:2","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"19966:97:2"},"returnParameters":{"id":3589,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3588,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3613,"src":"20082:12:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3587,"name":"bytes","nodeType":"ElementaryTypeName","src":"20082:5:2","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"20081:14:2"},"scope":3645,"src":"19937:396:2","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3643,"nodeType":"Block","src":"20725:548:2","statements":[{"condition":{"id":3625,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3616,"src":"20740:7:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":3641,"nodeType":"Block","src":"20799:467:2","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3632,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3629,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3618,"src":"20885:10:2","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":3630,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"20885:17:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3631,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"20905:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"20885:21:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":3639,"nodeType":"Block","src":"21200:55:2","statements":[{"expression":{"arguments":[{"id":3636,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3620,"src":"21226:12:2","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":3635,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"21219:6:2","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":3637,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"21219:20:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3638,"nodeType":"ExpressionStatement","src":"21219:20:2"}]},"id":3640,"nodeType":"IfStatement","src":"20881:374:2","trueBody":{"id":3634,"nodeType":"Block","src":"20908:286:2","statements":[{"AST":{"nodeType":"YulBlock","src":"21031:148:2","statements":[{"nodeType":"YulVariableDeclaration","src":"21054:40:2","value":{"arguments":[{"name":"returndata","nodeType":"YulIdentifier","src":"21083:10:2"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"21077:5:2"},"nodeType":"YulFunctionCall","src":"21077:17:2"},"variables":[{"name":"returndata_size","nodeType":"YulTypedName","src":"21058:15:2","type":""}]},{"expression":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"21127:2:2","type":"","value":"32"},{"name":"returndata","nodeType":"YulIdentifier","src":"21131:10:2"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21123:3:2"},"nodeType":"YulFunctionCall","src":"21123:19:2"},{"name":"returndata_size","nodeType":"YulIdentifier","src":"21144:15:2"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"21116:6:2"},"nodeType":"YulFunctionCall","src":"21116:44:2"},"nodeType":"YulExpressionStatement","src":"21116:44:2"}]},"evmVersion":"istanbul","externalReferences":[{"declaration":3618,"isOffset":false,"isSlot":false,"src":"21083:10:2","valueSize":1},{"declaration":3618,"isOffset":false,"isSlot":false,"src":"21131:10:2","valueSize":1}],"id":3633,"nodeType":"InlineAssembly","src":"21022:157:2"}]}}]},"id":3642,"nodeType":"IfStatement","src":"20736:530:2","trueBody":{"id":3628,"nodeType":"Block","src":"20749:44:2","statements":[{"expression":{"id":3626,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3618,"src":"20771:10:2","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":3624,"id":3627,"nodeType":"Return","src":"20764:17:2"}]}}]},"documentation":{"id":3614,"nodeType":"StructuredDocumentation","src":"20341:214:2","text":" @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n revert reason using the provided one.\n _Available since v4.3._"},"id":3644,"implemented":true,"kind":"function","modifiers":[],"name":"verifyCallResult","nameLocation":"20570:16:2","nodeType":"FunctionDefinition","parameters":{"id":3621,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3616,"mutability":"mutable","name":"success","nameLocation":"20602:7:2","nodeType":"VariableDeclaration","scope":3644,"src":"20597:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3615,"name":"bool","nodeType":"ElementaryTypeName","src":"20597:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":3618,"mutability":"mutable","name":"returndata","nameLocation":"20633:10:2","nodeType":"VariableDeclaration","scope":3644,"src":"20620:23:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3617,"name":"bytes","nodeType":"ElementaryTypeName","src":"20620:5:2","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":3620,"mutability":"mutable","name":"errorMessage","nameLocation":"20668:12:2","nodeType":"VariableDeclaration","scope":3644,"src":"20654:26:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3619,"name":"string","nodeType":"ElementaryTypeName","src":"20654:6:2","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"20586:101:2"},"returnParameters":{"id":3624,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3623,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3644,"src":"20711:12:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3622,"name":"bytes","nodeType":"ElementaryTypeName","src":"20711:5:2","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"20710:14:2"},"scope":3645,"src":"20561:712:2","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":4257,"src":"12538:8738:2","usedErrors":[]},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":3720,"linearizedBaseContracts":[3720],"name":"IERC20","nameLocation":"21290:6:2","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":3646,"nodeType":"StructuredDocumentation","src":"21304:163:2","text":" @dev Emitted when `value` tokens are moved from one account (`from`) to\n another (`to`).\n Note that `value` may be zero."},"id":3654,"name":"Transfer","nameLocation":"21479:8:2","nodeType":"EventDefinition","parameters":{"id":3653,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3648,"indexed":true,"mutability":"mutable","name":"from","nameLocation":"21504:4:2","nodeType":"VariableDeclaration","scope":3654,"src":"21488:20:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3647,"name":"address","nodeType":"ElementaryTypeName","src":"21488:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3650,"indexed":true,"mutability":"mutable","name":"to","nameLocation":"21526:2:2","nodeType":"VariableDeclaration","scope":3654,"src":"21510:18:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3649,"name":"address","nodeType":"ElementaryTypeName","src":"21510:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3652,"indexed":false,"mutability":"mutable","name":"value","nameLocation":"21538:5:2","nodeType":"VariableDeclaration","scope":3654,"src":"21530:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3651,"name":"uint256","nodeType":"ElementaryTypeName","src":"21530:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"21487:57:2"},"src":"21473:72:2"},{"anonymous":false,"documentation":{"id":3655,"nodeType":"StructuredDocumentation","src":"21553:151:2","text":" @dev Emitted when the allowance of a `spender` for an `owner` is set by\n a call to {approve}. `value` is the new allowance."},"id":3663,"name":"Approval","nameLocation":"21716:8:2","nodeType":"EventDefinition","parameters":{"id":3662,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3657,"indexed":true,"mutability":"mutable","name":"owner","nameLocation":"21751:5:2","nodeType":"VariableDeclaration","scope":3663,"src":"21735:21:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3656,"name":"address","nodeType":"ElementaryTypeName","src":"21735:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3659,"indexed":true,"mutability":"mutable","name":"spender","nameLocation":"21783:7:2","nodeType":"VariableDeclaration","scope":3663,"src":"21767:23:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3658,"name":"address","nodeType":"ElementaryTypeName","src":"21767:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3661,"indexed":false,"mutability":"mutable","name":"value","nameLocation":"21809:5:2","nodeType":"VariableDeclaration","scope":3663,"src":"21801:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3660,"name":"uint256","nodeType":"ElementaryTypeName","src":"21801:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"21724:97:2"},"src":"21710:112:2"},{"documentation":{"id":3664,"nodeType":"StructuredDocumentation","src":"21830:68:2","text":" @dev Returns the amount of tokens in existence."},"functionSelector":"18160ddd","id":3669,"implemented":false,"kind":"function","modifiers":[],"name":"totalSupply","nameLocation":"21913:11:2","nodeType":"FunctionDefinition","parameters":{"id":3665,"nodeType":"ParameterList","parameters":[],"src":"21924:2:2"},"returnParameters":{"id":3668,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3667,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3669,"src":"21950:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3666,"name":"uint256","nodeType":"ElementaryTypeName","src":"21950:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"21949:9:2"},"scope":3720,"src":"21904:55:2","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":3670,"nodeType":"StructuredDocumentation","src":"21967:74:2","text":" @dev Returns the amount of tokens owned by `account`."},"functionSelector":"70a08231","id":3677,"implemented":false,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"22056:9:2","nodeType":"FunctionDefinition","parameters":{"id":3673,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3672,"mutability":"mutable","name":"account","nameLocation":"22074:7:2","nodeType":"VariableDeclaration","scope":3677,"src":"22066:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3671,"name":"address","nodeType":"ElementaryTypeName","src":"22066:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"22065:17:2"},"returnParameters":{"id":3676,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3675,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3677,"src":"22106:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3674,"name":"uint256","nodeType":"ElementaryTypeName","src":"22106:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"22105:9:2"},"scope":3720,"src":"22047:68:2","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":3678,"nodeType":"StructuredDocumentation","src":"22123:208:2","text":" @dev Moves `amount` tokens from the caller's account to `to`.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."},"functionSelector":"a9059cbb","id":3687,"implemented":false,"kind":"function","modifiers":[],"name":"transfer","nameLocation":"22346:8:2","nodeType":"FunctionDefinition","parameters":{"id":3683,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3680,"mutability":"mutable","name":"to","nameLocation":"22363:2:2","nodeType":"VariableDeclaration","scope":3687,"src":"22355:10:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3679,"name":"address","nodeType":"ElementaryTypeName","src":"22355:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3682,"mutability":"mutable","name":"amount","nameLocation":"22375:6:2","nodeType":"VariableDeclaration","scope":3687,"src":"22367:14:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3681,"name":"uint256","nodeType":"ElementaryTypeName","src":"22367:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"22354:28:2"},"returnParameters":{"id":3686,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3685,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3687,"src":"22401:4:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3684,"name":"bool","nodeType":"ElementaryTypeName","src":"22401:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"22400:6:2"},"scope":3720,"src":"22337:70:2","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":3688,"nodeType":"StructuredDocumentation","src":"22415:270:2","text":" @dev Returns the remaining number of tokens that `spender` will be\n allowed to spend on behalf of `owner` through {transferFrom}. This is\n zero by default.\n This value changes when {approve} or {transferFrom} are called."},"functionSelector":"dd62ed3e","id":3697,"implemented":false,"kind":"function","modifiers":[],"name":"allowance","nameLocation":"22700:9:2","nodeType":"FunctionDefinition","parameters":{"id":3693,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3690,"mutability":"mutable","name":"owner","nameLocation":"22728:5:2","nodeType":"VariableDeclaration","scope":3697,"src":"22720:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3689,"name":"address","nodeType":"ElementaryTypeName","src":"22720:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3692,"mutability":"mutable","name":"spender","nameLocation":"22752:7:2","nodeType":"VariableDeclaration","scope":3697,"src":"22744:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3691,"name":"address","nodeType":"ElementaryTypeName","src":"22744:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"22709:57:2"},"returnParameters":{"id":3696,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3695,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3697,"src":"22790:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3694,"name":"uint256","nodeType":"ElementaryTypeName","src":"22790:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"22789:9:2"},"scope":3720,"src":"22691:108:2","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":3698,"nodeType":"StructuredDocumentation","src":"22807:655:2","text":" @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n Returns a boolean value indicating whether the operation succeeded.\n IMPORTANT: Beware that changing an allowance with this method brings the risk\n that someone may use both the old and the new allowance by unfortunate\n transaction ordering. One possible solution to mitigate this race\n condition is to first reduce the spender's allowance to 0 and set the\n desired value afterwards:\n https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n Emits an {Approval} event."},"functionSelector":"095ea7b3","id":3707,"implemented":false,"kind":"function","modifiers":[],"name":"approve","nameLocation":"23477:7:2","nodeType":"FunctionDefinition","parameters":{"id":3703,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3700,"mutability":"mutable","name":"spender","nameLocation":"23493:7:2","nodeType":"VariableDeclaration","scope":3707,"src":"23485:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3699,"name":"address","nodeType":"ElementaryTypeName","src":"23485:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3702,"mutability":"mutable","name":"amount","nameLocation":"23510:6:2","nodeType":"VariableDeclaration","scope":3707,"src":"23502:14:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3701,"name":"uint256","nodeType":"ElementaryTypeName","src":"23502:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"23484:33:2"},"returnParameters":{"id":3706,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3705,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3707,"src":"23536:4:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3704,"name":"bool","nodeType":"ElementaryTypeName","src":"23536:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"23535:6:2"},"scope":3720,"src":"23468:74:2","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":3708,"nodeType":"StructuredDocumentation","src":"23550:295:2","text":" @dev Moves `amount` tokens from `from` to `to` using the\n allowance mechanism. `amount` is then deducted from the caller's\n allowance.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."},"functionSelector":"23b872dd","id":3719,"implemented":false,"kind":"function","modifiers":[],"name":"transferFrom","nameLocation":"23860:12:2","nodeType":"FunctionDefinition","parameters":{"id":3715,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3710,"mutability":"mutable","name":"from","nameLocation":"23891:4:2","nodeType":"VariableDeclaration","scope":3719,"src":"23883:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3709,"name":"address","nodeType":"ElementaryTypeName","src":"23883:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3712,"mutability":"mutable","name":"to","nameLocation":"23914:2:2","nodeType":"VariableDeclaration","scope":3719,"src":"23906:10:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3711,"name":"address","nodeType":"ElementaryTypeName","src":"23906:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3714,"mutability":"mutable","name":"amount","nameLocation":"23935:6:2","nodeType":"VariableDeclaration","scope":3719,"src":"23927:14:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3713,"name":"uint256","nodeType":"ElementaryTypeName","src":"23927:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"23872:76:2"},"returnParameters":{"id":3718,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3717,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3719,"src":"23967:4:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3716,"name":"bool","nodeType":"ElementaryTypeName","src":"23967:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"23966:6:2"},"scope":3720,"src":"23851:122:2","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":4257,"src":"21280:2696:2","usedErrors":[]},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"library","fullyImplemented":true,"id":3939,"linearizedBaseContracts":[3939],"name":"SafeERC20","nameLocation":"23988:9:2","nodeType":"ContractDefinition","nodes":[{"id":3723,"libraryName":{"id":3721,"name":"Address","nodeType":"IdentifierPath","referencedDeclaration":3645,"src":"24011:7:2"},"nodeType":"UsingForDirective","src":"24005:26:2","typeName":{"id":3722,"name":"address","nodeType":"ElementaryTypeName","src":"24023:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}},{"body":{"id":3745,"nodeType":"Block","src":"24111:142:2","statements":[{"expression":{"arguments":[{"id":3734,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3726,"src":"24156:5:2","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3720","typeString":"contract IERC20"}},{"arguments":[{"expression":{"expression":{"id":3737,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3726,"src":"24199:5:2","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3720","typeString":"contract IERC20"}},"id":3738,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"transfer","nodeType":"MemberAccess","referencedDeclaration":3687,"src":"24199:14:2","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":3739,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"selector","nodeType":"MemberAccess","src":"24199:23:2","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":3740,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3728,"src":"24224:2:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3741,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3730,"src":"24228:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":3735,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"24176:3:2","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":3736,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"24176:22:2","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":3742,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"24176:58:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$3720","typeString":"contract IERC20"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3733,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3938,"src":"24122:19:2","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$3720_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20,bytes memory)"}},"id":3743,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"24122:123:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3744,"nodeType":"ExpressionStatement","src":"24122:123:2"}]},"id":3746,"implemented":true,"kind":"function","modifiers":[],"name":"safeTransfer","nameLocation":"24048:12:2","nodeType":"FunctionDefinition","parameters":{"id":3731,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3726,"mutability":"mutable","name":"token","nameLocation":"24068:5:2","nodeType":"VariableDeclaration","scope":3746,"src":"24061:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3720","typeString":"contract IERC20"},"typeName":{"id":3725,"nodeType":"UserDefinedTypeName","pathNode":{"id":3724,"name":"IERC20","nodeType":"IdentifierPath","referencedDeclaration":3720,"src":"24061:6:2"},"referencedDeclaration":3720,"src":"24061:6:2","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3720","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":3728,"mutability":"mutable","name":"to","nameLocation":"24083:2:2","nodeType":"VariableDeclaration","scope":3746,"src":"24075:10:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3727,"name":"address","nodeType":"ElementaryTypeName","src":"24075:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3730,"mutability":"mutable","name":"value","nameLocation":"24095:5:2","nodeType":"VariableDeclaration","scope":3746,"src":"24087:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3729,"name":"uint256","nodeType":"ElementaryTypeName","src":"24087:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"24060:41:2"},"returnParameters":{"id":3732,"nodeType":"ParameterList","parameters":[],"src":"24111:0:2"},"scope":3939,"src":"24039:214:2","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3771,"nodeType":"Block","src":"24394:152:2","statements":[{"expression":{"arguments":[{"id":3759,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3749,"src":"24439:5:2","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3720","typeString":"contract IERC20"}},{"arguments":[{"expression":{"expression":{"id":3762,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3749,"src":"24482:5:2","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3720","typeString":"contract IERC20"}},"id":3763,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"transferFrom","nodeType":"MemberAccess","referencedDeclaration":3719,"src":"24482:18:2","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,address,uint256) external returns (bool)"}},"id":3764,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"selector","nodeType":"MemberAccess","src":"24482:27:2","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":3765,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3751,"src":"24511:4:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3766,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3753,"src":"24517:2:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3767,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3755,"src":"24521:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":3760,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"24459:3:2","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":3761,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"24459:22:2","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":3768,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"24459:68:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$3720","typeString":"contract IERC20"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3758,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3938,"src":"24405:19:2","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$3720_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20,bytes memory)"}},"id":3769,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"24405:133:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3770,"nodeType":"ExpressionStatement","src":"24405:133:2"}]},"id":3772,"implemented":true,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"24270:16:2","nodeType":"FunctionDefinition","parameters":{"id":3756,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3749,"mutability":"mutable","name":"token","nameLocation":"24304:5:2","nodeType":"VariableDeclaration","scope":3772,"src":"24297:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3720","typeString":"contract IERC20"},"typeName":{"id":3748,"nodeType":"UserDefinedTypeName","pathNode":{"id":3747,"name":"IERC20","nodeType":"IdentifierPath","referencedDeclaration":3720,"src":"24297:6:2"},"referencedDeclaration":3720,"src":"24297:6:2","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3720","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":3751,"mutability":"mutable","name":"from","nameLocation":"24328:4:2","nodeType":"VariableDeclaration","scope":3772,"src":"24320:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3750,"name":"address","nodeType":"ElementaryTypeName","src":"24320:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3753,"mutability":"mutable","name":"to","nameLocation":"24351:2:2","nodeType":"VariableDeclaration","scope":3772,"src":"24343:10:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3752,"name":"address","nodeType":"ElementaryTypeName","src":"24343:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3755,"mutability":"mutable","name":"value","nameLocation":"24372:5:2","nodeType":"VariableDeclaration","scope":3772,"src":"24364:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3754,"name":"uint256","nodeType":"ElementaryTypeName","src":"24364:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"24286:98:2"},"returnParameters":{"id":3757,"nodeType":"ParameterList","parameters":[],"src":"24394:0:2"},"scope":3939,"src":"24261:285:2","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3815,"nodeType":"Block","src":"24925:543:2","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3799,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3786,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3784,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3780,"src":"25179:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":3785,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"25188:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"25179:10:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":3787,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"25178:12:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3797,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"id":3792,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"25219:4:2","typeDescriptions":{"typeIdentifier":"t_contract$_SafeERC20_$3939","typeString":"library SafeERC20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_SafeERC20_$3939","typeString":"library SafeERC20"}],"id":3791,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"25211:7:2","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3790,"name":"address","nodeType":"ElementaryTypeName","src":"25211:7:2","typeDescriptions":{}}},"id":3793,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"25211:13:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3794,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3778,"src":"25226:7:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":3788,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3776,"src":"25195:5:2","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3720","typeString":"contract IERC20"}},"id":3789,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"allowance","nodeType":"MemberAccess","referencedDeclaration":3697,"src":"25195:15:2","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$","typeString":"function (address,address) view external returns (uint256)"}},"id":3795,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"25195:39:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":3796,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"25238:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"25195:44:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":3798,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"25194:46:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"25178:62:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f20746f206e6f6e2d7a65726f20616c6c6f77616e6365","id":3800,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"25255:56:2","typeDescriptions":{"typeIdentifier":"t_stringliteral_ef945ddb1bfdc0da870feb4560d868b047642b4ac7f2fb7f8b7c51cb4a411e25","typeString":"literal_string \"SafeERC20: approve from non-zero to non-zero allowance\""},"value":"SafeERC20: approve from non-zero to non-zero allowance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_ef945ddb1bfdc0da870feb4560d868b047642b4ac7f2fb7f8b7c51cb4a411e25","typeString":"literal_string \"SafeERC20: approve from non-zero to non-zero allowance\""}],"id":3783,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"25156:7:2","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3801,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"25156:166:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3802,"nodeType":"ExpressionStatement","src":"25156:166:2"},{"expression":{"arguments":[{"id":3804,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3776,"src":"25367:5:2","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3720","typeString":"contract IERC20"}},{"arguments":[{"expression":{"expression":{"id":3807,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3776,"src":"25410:5:2","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3720","typeString":"contract IERC20"}},"id":3808,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"approve","nodeType":"MemberAccess","referencedDeclaration":3707,"src":"25410:13:2","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":3809,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"selector","nodeType":"MemberAccess","src":"25410:22:2","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":3810,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3778,"src":"25434:7:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3811,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3780,"src":"25443:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":3805,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"25387:3:2","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":3806,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"25387:22:2","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":3812,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"25387:62:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$3720","typeString":"contract IERC20"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3803,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3938,"src":"25333:19:2","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$3720_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20,bytes memory)"}},"id":3813,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"25333:127:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3814,"nodeType":"ExpressionStatement","src":"25333:127:2"}]},"documentation":{"id":3773,"nodeType":"StructuredDocumentation","src":"24554:255:2","text":" @dev Deprecated. This function has issues similar to the ones found in\n {IERC20-approve}, and its usage is discouraged.\n Whenever possible, use {safeIncreaseAllowance} and\n {safeDecreaseAllowance} instead."},"id":3816,"implemented":true,"kind":"function","modifiers":[],"name":"safeApprove","nameLocation":"24824:11:2","nodeType":"FunctionDefinition","parameters":{"id":3781,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3776,"mutability":"mutable","name":"token","nameLocation":"24853:5:2","nodeType":"VariableDeclaration","scope":3816,"src":"24846:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3720","typeString":"contract IERC20"},"typeName":{"id":3775,"nodeType":"UserDefinedTypeName","pathNode":{"id":3774,"name":"IERC20","nodeType":"IdentifierPath","referencedDeclaration":3720,"src":"24846:6:2"},"referencedDeclaration":3720,"src":"24846:6:2","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3720","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":3778,"mutability":"mutable","name":"spender","nameLocation":"24877:7:2","nodeType":"VariableDeclaration","scope":3816,"src":"24869:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3777,"name":"address","nodeType":"ElementaryTypeName","src":"24869:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3780,"mutability":"mutable","name":"value","nameLocation":"24903:5:2","nodeType":"VariableDeclaration","scope":3816,"src":"24895:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3779,"name":"uint256","nodeType":"ElementaryTypeName","src":"24895:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"24835:80:2"},"returnParameters":{"id":3782,"nodeType":"ParameterList","parameters":[],"src":"24925:0:2"},"scope":3939,"src":"24815:653:2","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3851,"nodeType":"Block","src":"25596:300:2","statements":[{"assignments":[3827],"declarations":[{"constant":false,"id":3827,"mutability":"mutable","name":"newAllowance","nameLocation":"25615:12:2","nodeType":"VariableDeclaration","scope":3851,"src":"25607:20:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3826,"name":"uint256","nodeType":"ElementaryTypeName","src":"25607:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3838,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3837,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"id":3832,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"25654:4:2","typeDescriptions":{"typeIdentifier":"t_contract$_SafeERC20_$3939","typeString":"library SafeERC20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_SafeERC20_$3939","typeString":"library SafeERC20"}],"id":3831,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"25646:7:2","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3830,"name":"address","nodeType":"ElementaryTypeName","src":"25646:7:2","typeDescriptions":{}}},"id":3833,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"25646:13:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3834,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3821,"src":"25661:7:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":3828,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3819,"src":"25630:5:2","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3720","typeString":"contract IERC20"}},"id":3829,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"allowance","nodeType":"MemberAccess","referencedDeclaration":3697,"src":"25630:15:2","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$","typeString":"function (address,address) view external returns (uint256)"}},"id":3835,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"25630:39:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":3836,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3823,"src":"25672:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"25630:47:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"25607:70:2"},{"expression":{"arguments":[{"id":3840,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3819,"src":"25722:5:2","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3720","typeString":"contract IERC20"}},{"arguments":[{"expression":{"expression":{"id":3843,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3819,"src":"25783:5:2","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3720","typeString":"contract IERC20"}},"id":3844,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"approve","nodeType":"MemberAccess","referencedDeclaration":3707,"src":"25783:13:2","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":3845,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"selector","nodeType":"MemberAccess","src":"25783:22:2","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":3846,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3821,"src":"25824:7:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3847,"name":"newAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3827,"src":"25850:12:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":3841,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"25742:3:2","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":3842,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"25742:22:2","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":3848,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"25742:135:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$3720","typeString":"contract IERC20"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3839,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3938,"src":"25688:19:2","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$3720_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20,bytes memory)"}},"id":3849,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"25688:200:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3850,"nodeType":"ExpressionStatement","src":"25688:200:2"}]},"id":3852,"implemented":true,"kind":"function","modifiers":[],"name":"safeIncreaseAllowance","nameLocation":"25485:21:2","nodeType":"FunctionDefinition","parameters":{"id":3824,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3819,"mutability":"mutable","name":"token","nameLocation":"25524:5:2","nodeType":"VariableDeclaration","scope":3852,"src":"25517:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3720","typeString":"contract IERC20"},"typeName":{"id":3818,"nodeType":"UserDefinedTypeName","pathNode":{"id":3817,"name":"IERC20","nodeType":"IdentifierPath","referencedDeclaration":3720,"src":"25517:6:2"},"referencedDeclaration":3720,"src":"25517:6:2","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3720","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":3821,"mutability":"mutable","name":"spender","nameLocation":"25548:7:2","nodeType":"VariableDeclaration","scope":3852,"src":"25540:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3820,"name":"address","nodeType":"ElementaryTypeName","src":"25540:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3823,"mutability":"mutable","name":"value","nameLocation":"25574:5:2","nodeType":"VariableDeclaration","scope":3852,"src":"25566:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3822,"name":"uint256","nodeType":"ElementaryTypeName","src":"25566:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"25506:80:2"},"returnParameters":{"id":3825,"nodeType":"ParameterList","parameters":[],"src":"25596:0:2"},"scope":3939,"src":"25476:420:2","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3899,"nodeType":"Block","src":"26024:557:2","statements":[{"id":3898,"nodeType":"UncheckedBlock","src":"26035:539:2","statements":[{"assignments":[3863],"declarations":[{"constant":false,"id":3863,"mutability":"mutable","name":"oldAllowance","nameLocation":"26068:12:2","nodeType":"VariableDeclaration","scope":3898,"src":"26060:20:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3862,"name":"uint256","nodeType":"ElementaryTypeName","src":"26060:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3872,"initialValue":{"arguments":[{"arguments":[{"id":3868,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"26107:4:2","typeDescriptions":{"typeIdentifier":"t_contract$_SafeERC20_$3939","typeString":"library SafeERC20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_SafeERC20_$3939","typeString":"library SafeERC20"}],"id":3867,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"26099:7:2","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3866,"name":"address","nodeType":"ElementaryTypeName","src":"26099:7:2","typeDescriptions":{}}},"id":3869,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"26099:13:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3870,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3857,"src":"26114:7:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":3864,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3855,"src":"26083:5:2","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3720","typeString":"contract IERC20"}},"id":3865,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"allowance","nodeType":"MemberAccess","referencedDeclaration":3697,"src":"26083:15:2","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$","typeString":"function (address,address) view external returns (uint256)"}},"id":3871,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"26083:39:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"26060:62:2"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3876,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3874,"name":"oldAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3863,"src":"26163:12:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":3875,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3859,"src":"26179:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"26163:21:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5361666545524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726f","id":3877,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"26203:43:2","typeDescriptions":{"typeIdentifier":"t_stringliteral_2c3af60974a758b7e72e108c9bf0943ecc9e4f2e8af4695da5f52fbf57a63d3a","typeString":"literal_string \"SafeERC20: decreased allowance below zero\""},"value":"SafeERC20: decreased allowance below zero"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_2c3af60974a758b7e72e108c9bf0943ecc9e4f2e8af4695da5f52fbf57a63d3a","typeString":"literal_string \"SafeERC20: decreased allowance below zero\""}],"id":3873,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"26137:7:2","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3878,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"26137:124:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3879,"nodeType":"ExpressionStatement","src":"26137:124:2"},{"assignments":[3881],"declarations":[{"constant":false,"id":3881,"mutability":"mutable","name":"newAllowance","nameLocation":"26284:12:2","nodeType":"VariableDeclaration","scope":3898,"src":"26276:20:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3880,"name":"uint256","nodeType":"ElementaryTypeName","src":"26276:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3885,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3884,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3882,"name":"oldAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3863,"src":"26299:12:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":3883,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3859,"src":"26314:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"26299:20:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"26276:43:2"},{"expression":{"arguments":[{"id":3887,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3855,"src":"26372:5:2","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3720","typeString":"contract IERC20"}},{"arguments":[{"expression":{"expression":{"id":3890,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3855,"src":"26441:5:2","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3720","typeString":"contract IERC20"}},"id":3891,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"approve","nodeType":"MemberAccess","referencedDeclaration":3707,"src":"26441:13:2","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":3892,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"selector","nodeType":"MemberAccess","src":"26441:22:2","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":3893,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3857,"src":"26486:7:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3894,"name":"newAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3881,"src":"26516:12:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":3888,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"26396:3:2","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":3889,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"26396:22:2","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":3895,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"26396:151:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$3720","typeString":"contract IERC20"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3886,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3938,"src":"26334:19:2","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$3720_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20,bytes memory)"}},"id":3896,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"26334:228:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3897,"nodeType":"ExpressionStatement","src":"26334:228:2"}]}]},"id":3900,"implemented":true,"kind":"function","modifiers":[],"name":"safeDecreaseAllowance","nameLocation":"25913:21:2","nodeType":"FunctionDefinition","parameters":{"id":3860,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3855,"mutability":"mutable","name":"token","nameLocation":"25952:5:2","nodeType":"VariableDeclaration","scope":3900,"src":"25945:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3720","typeString":"contract IERC20"},"typeName":{"id":3854,"nodeType":"UserDefinedTypeName","pathNode":{"id":3853,"name":"IERC20","nodeType":"IdentifierPath","referencedDeclaration":3720,"src":"25945:6:2"},"referencedDeclaration":3720,"src":"25945:6:2","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3720","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":3857,"mutability":"mutable","name":"spender","nameLocation":"25976:7:2","nodeType":"VariableDeclaration","scope":3900,"src":"25968:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3856,"name":"address","nodeType":"ElementaryTypeName","src":"25968:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3859,"mutability":"mutable","name":"value","nameLocation":"26002:5:2","nodeType":"VariableDeclaration","scope":3900,"src":"25994:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3858,"name":"uint256","nodeType":"ElementaryTypeName","src":"25994:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"25934:80:2"},"returnParameters":{"id":3861,"nodeType":"ParameterList","parameters":[],"src":"26024:0:2"},"scope":3939,"src":"25904:677:2","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3937,"nodeType":"Block","src":"27042:732:2","statements":[{"assignments":[3910],"declarations":[{"constant":false,"id":3910,"mutability":"mutable","name":"returndata","nameLocation":"27409:10:2","nodeType":"VariableDeclaration","scope":3937,"src":"27396:23:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3909,"name":"bytes","nodeType":"ElementaryTypeName","src":"27396:5:2","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":3919,"initialValue":{"arguments":[{"id":3916,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3906,"src":"27464:4:2","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564","id":3917,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"27483:34:2","typeDescriptions":{"typeIdentifier":"t_stringliteral_47fb62c2c272651d2f0f342bac006756b8ba07f21cc5cb87e0fbb9d50c0c585b","typeString":"literal_string \"SafeERC20: low-level call failed\""},"value":"SafeERC20: low-level call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_stringliteral_47fb62c2c272651d2f0f342bac006756b8ba07f21cc5cb87e0fbb9d50c0c585b","typeString":"literal_string \"SafeERC20: low-level call failed\""}],"expression":{"arguments":[{"id":3913,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3904,"src":"27430:5:2","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3720","typeString":"contract IERC20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$3720","typeString":"contract IERC20"}],"id":3912,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"27422:7:2","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3911,"name":"address","nodeType":"ElementaryTypeName","src":"27422:7:2","typeDescriptions":{}}},"id":3914,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"27422:14:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3915,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"functionCall","nodeType":"MemberAccess","referencedDeclaration":3439,"src":"27422:27:2","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$bound_to$_t_address_$","typeString":"function (address,bytes memory,string memory) returns (bytes memory)"}},"id":3918,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"27422:106:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"27396:132:2"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3923,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3920,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3910,"src":"27543:10:2","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":3921,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"27543:17:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3922,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"27563:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"27543:21:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3936,"nodeType":"IfStatement","src":"27539:228:2","trueBody":{"id":3935,"nodeType":"Block","src":"27566:201:2","statements":[{"expression":{"arguments":[{"arguments":[{"id":3927,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3910,"src":"27658:10:2","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"components":[{"id":3929,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"27671:4:2","typeDescriptions":{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"},"typeName":{"id":3928,"name":"bool","nodeType":"ElementaryTypeName","src":"27671:4:2","typeDescriptions":{}}}],"id":3930,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"27670:6:2","typeDescriptions":{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"}],"expression":{"id":3925,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"27647:3:2","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":3926,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"decode","nodeType":"MemberAccess","src":"27647:10:2","typeDescriptions":{"typeIdentifier":"t_function_abidecode_pure$__$returns$__$","typeString":"function () pure"}},"id":3931,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"27647:30:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564","id":3932,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"27696:44:2","typeDescriptions":{"typeIdentifier":"t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd","typeString":"literal_string \"SafeERC20: ERC20 operation did not succeed\""},"value":"SafeERC20: ERC20 operation did not succeed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd","typeString":"literal_string \"SafeERC20: ERC20 operation did not succeed\""}],"id":3924,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"27621:7:2","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3933,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"27621:134:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3934,"nodeType":"ExpressionStatement","src":"27621:134:2"}]}}]},"documentation":{"id":3901,"nodeType":"StructuredDocumentation","src":"26589:377:2","text":" @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n on the return value: the return value is optional (but if data is returned, it must not be false).\n @param token The token targeted by the call.\n @param data The call data (encoded using abi.encode or one of its variants)."},"id":3938,"implemented":true,"kind":"function","modifiers":[],"name":"_callOptionalReturn","nameLocation":"26981:19:2","nodeType":"FunctionDefinition","parameters":{"id":3907,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3904,"mutability":"mutable","name":"token","nameLocation":"27008:5:2","nodeType":"VariableDeclaration","scope":3938,"src":"27001:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3720","typeString":"contract IERC20"},"typeName":{"id":3903,"nodeType":"UserDefinedTypeName","pathNode":{"id":3902,"name":"IERC20","nodeType":"IdentifierPath","referencedDeclaration":3720,"src":"27001:6:2"},"referencedDeclaration":3720,"src":"27001:6:2","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3720","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":3906,"mutability":"mutable","name":"data","nameLocation":"27028:4:2","nodeType":"VariableDeclaration","scope":3938,"src":"27015:17:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3905,"name":"bytes","nodeType":"ElementaryTypeName","src":"27015:5:2","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"27000:33:2"},"returnParameters":{"id":3908,"nodeType":"ParameterList","parameters":[],"src":"27042:0:2"},"scope":3939,"src":"26972:802:2","stateMutability":"nonpayable","virtual":false,"visibility":"private"}],"scope":4257,"src":"23980:3797:2","usedErrors":[]},{"id":3940,"literals":["solidity",">=","0.5",".0"],"nodeType":"PragmaDirective","src":"27779:24:2"},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"interface","documentation":{"id":3941,"nodeType":"StructuredDocumentation","src":"27807:146:2","text":"@title Callback for IPancakeV3PoolActions#swap\n @notice Any contract that calls IPancakeV3PoolActions#swap must implement this interface"},"fullyImplemented":false,"id":3952,"linearizedBaseContracts":[3952],"name":"IPancakeV3SwapCallback","nameLocation":"27963:22:2","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":3942,"nodeType":"StructuredDocumentation","src":"27993:906:2","text":"@notice Called to `msg.sender` after executing a swap via IPancakeV3Pool#swap.\n @dev In the implementation you must pay the pool tokens owed for the swap.\n The caller of this method must be checked to be a PancakeV3Pool deployed by the canonical PancakeV3Factory.\n amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\n @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\n the end of the swap. If positive, the callback must send that amount of token0 to the pool.\n @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\n the end of the swap. If positive, the callback must send that amount of token1 to the pool.\n @param data Any data passed through by the caller via the IPancakeV3PoolActions#swap call"},"functionSelector":"23a69e75","id":3951,"implemented":false,"kind":"function","modifiers":[],"name":"pancakeV3SwapCallback","nameLocation":"28914:21:2","nodeType":"FunctionDefinition","parameters":{"id":3949,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3944,"mutability":"mutable","name":"amount0Delta","nameLocation":"28953:12:2","nodeType":"VariableDeclaration","scope":3951,"src":"28946:19:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3943,"name":"int256","nodeType":"ElementaryTypeName","src":"28946:6:2","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":3946,"mutability":"mutable","name":"amount1Delta","nameLocation":"28983:12:2","nodeType":"VariableDeclaration","scope":3951,"src":"28976:19:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3945,"name":"int256","nodeType":"ElementaryTypeName","src":"28976:6:2","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":3948,"mutability":"mutable","name":"data","nameLocation":"29021:4:2","nodeType":"VariableDeclaration","scope":3951,"src":"29006:19:2","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":3947,"name":"bytes","nodeType":"ElementaryTypeName","src":"29006:5:2","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"28935:97:2"},"returnParameters":{"id":3950,"nodeType":"ParameterList","parameters":[],"src":"29041:0:2"},"scope":3952,"src":"28905:137:2","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":4257,"src":"27953:1092:2","usedErrors":[]},{"abstract":false,"baseContracts":[{"baseName":{"id":3953,"name":"IPancakeV3SwapCallback","nodeType":"IdentifierPath","referencedDeclaration":3952,"src":"29076:22:2"},"id":3954,"nodeType":"InheritanceSpecifier","src":"29076:22:2"}],"contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":4042,"linearizedBaseContracts":[4042,3952],"name":"IV3SwapRouter","nameLocation":"29059:13:2","nodeType":"ContractDefinition","nodes":[{"canonicalName":"IV3SwapRouter.ExactInputSingleParams","id":3969,"members":[{"constant":false,"id":3956,"mutability":"mutable","name":"tokenIn","nameLocation":"29155:7:2","nodeType":"VariableDeclaration","scope":3969,"src":"29147:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3955,"name":"address","nodeType":"ElementaryTypeName","src":"29147:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3958,"mutability":"mutable","name":"tokenOut","nameLocation":"29181:8:2","nodeType":"VariableDeclaration","scope":3969,"src":"29173:16:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3957,"name":"address","nodeType":"ElementaryTypeName","src":"29173:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3960,"mutability":"mutable","name":"fee","nameLocation":"29207:3:2","nodeType":"VariableDeclaration","scope":3969,"src":"29200:10:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"},"typeName":{"id":3959,"name":"uint24","nodeType":"ElementaryTypeName","src":"29200:6:2","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"}},"visibility":"internal"},{"constant":false,"id":3962,"mutability":"mutable","name":"recipient","nameLocation":"29229:9:2","nodeType":"VariableDeclaration","scope":3969,"src":"29221:17:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3961,"name":"address","nodeType":"ElementaryTypeName","src":"29221:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3964,"mutability":"mutable","name":"amountIn","nameLocation":"29257:8:2","nodeType":"VariableDeclaration","scope":3969,"src":"29249:16:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3963,"name":"uint256","nodeType":"ElementaryTypeName","src":"29249:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3966,"mutability":"mutable","name":"amountOutMinimum","nameLocation":"29284:16:2","nodeType":"VariableDeclaration","scope":3969,"src":"29276:24:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3965,"name":"uint256","nodeType":"ElementaryTypeName","src":"29276:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3968,"mutability":"mutable","name":"sqrtPriceLimitX96","nameLocation":"29319:17:2","nodeType":"VariableDeclaration","scope":3969,"src":"29311:25:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"},"typeName":{"id":3967,"name":"uint160","nodeType":"ElementaryTypeName","src":"29311:7:2","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"visibility":"internal"}],"name":"ExactInputSingleParams","nameLocation":"29113:22:2","nodeType":"StructDefinition","scope":4042,"src":"29106:238:2","visibility":"public"},{"documentation":{"id":3970,"nodeType":"StructuredDocumentation","src":"29352:443:2","text":"@notice Swaps `amountIn` of one token for as much as possible of another token\n @dev Setting `amountIn` to 0 will cause the contract to look up its own balance,\n and swap the entire amount, enabling contracts to send tokens before calling this function.\n @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\n @return amountOut The amount of the received token"},"functionSelector":"04e45aaf","id":3978,"implemented":false,"kind":"function","modifiers":[],"name":"exactInputSingle","nameLocation":"29810:16:2","nodeType":"FunctionDefinition","parameters":{"id":3974,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3973,"mutability":"mutable","name":"params","nameLocation":"29869:6:2","nodeType":"VariableDeclaration","scope":3978,"src":"29837:38:2","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_ExactInputSingleParams_$3969_calldata_ptr","typeString":"struct IV3SwapRouter.ExactInputSingleParams"},"typeName":{"id":3972,"nodeType":"UserDefinedTypeName","pathNode":{"id":3971,"name":"ExactInputSingleParams","nodeType":"IdentifierPath","referencedDeclaration":3969,"src":"29837:22:2"},"referencedDeclaration":3969,"src":"29837:22:2","typeDescriptions":{"typeIdentifier":"t_struct$_ExactInputSingleParams_$3969_storage_ptr","typeString":"struct IV3SwapRouter.ExactInputSingleParams"}},"visibility":"internal"}],"src":"29826:56:2"},"returnParameters":{"id":3977,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3976,"mutability":"mutable","name":"amountOut","nameLocation":"29917:9:2","nodeType":"VariableDeclaration","scope":3978,"src":"29909:17:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3975,"name":"uint256","nodeType":"ElementaryTypeName","src":"29909:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"29908:19:2"},"scope":4042,"src":"29801:127:2","stateMutability":"payable","virtual":false,"visibility":"external"},{"canonicalName":"IV3SwapRouter.ExactInputParams","id":3987,"members":[{"constant":false,"id":3980,"mutability":"mutable","name":"path","nameLocation":"29977:4:2","nodeType":"VariableDeclaration","scope":3987,"src":"29971:10:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":3979,"name":"bytes","nodeType":"ElementaryTypeName","src":"29971:5:2","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":3982,"mutability":"mutable","name":"recipient","nameLocation":"30000:9:2","nodeType":"VariableDeclaration","scope":3987,"src":"29992:17:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3981,"name":"address","nodeType":"ElementaryTypeName","src":"29992:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3984,"mutability":"mutable","name":"amountIn","nameLocation":"30028:8:2","nodeType":"VariableDeclaration","scope":3987,"src":"30020:16:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3983,"name":"uint256","nodeType":"ElementaryTypeName","src":"30020:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3986,"mutability":"mutable","name":"amountOutMinimum","nameLocation":"30055:16:2","nodeType":"VariableDeclaration","scope":3987,"src":"30047:24:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3985,"name":"uint256","nodeType":"ElementaryTypeName","src":"30047:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"ExactInputParams","nameLocation":"29943:16:2","nodeType":"StructDefinition","scope":4042,"src":"29936:143:2","visibility":"public"},{"documentation":{"id":3988,"nodeType":"StructuredDocumentation","src":"30087:466:2","text":"@notice Swaps `amountIn` of one token for as much as possible of another along the specified path\n @dev Setting `amountIn` to 0 will cause the contract to look up its own balance,\n and swap the entire amount, enabling contracts to send tokens before calling this function.\n @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\n @return amountOut The amount of the received token"},"functionSelector":"b858183f","id":3996,"implemented":false,"kind":"function","modifiers":[],"name":"exactInput","nameLocation":"30568:10:2","nodeType":"FunctionDefinition","parameters":{"id":3992,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3991,"mutability":"mutable","name":"params","nameLocation":"30615:6:2","nodeType":"VariableDeclaration","scope":3996,"src":"30589:32:2","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_ExactInputParams_$3987_calldata_ptr","typeString":"struct IV3SwapRouter.ExactInputParams"},"typeName":{"id":3990,"nodeType":"UserDefinedTypeName","pathNode":{"id":3989,"name":"ExactInputParams","nodeType":"IdentifierPath","referencedDeclaration":3987,"src":"30589:16:2"},"referencedDeclaration":3987,"src":"30589:16:2","typeDescriptions":{"typeIdentifier":"t_struct$_ExactInputParams_$3987_storage_ptr","typeString":"struct IV3SwapRouter.ExactInputParams"}},"visibility":"internal"}],"src":"30578:50:2"},"returnParameters":{"id":3995,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3994,"mutability":"mutable","name":"amountOut","nameLocation":"30663:9:2","nodeType":"VariableDeclaration","scope":3996,"src":"30655:17:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3993,"name":"uint256","nodeType":"ElementaryTypeName","src":"30655:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"30654:19:2"},"scope":4042,"src":"30559:115:2","stateMutability":"payable","virtual":false,"visibility":"external"},{"canonicalName":"IV3SwapRouter.ExactOutputSingleParams","id":4011,"members":[{"constant":false,"id":3998,"mutability":"mutable","name":"tokenIn","nameLocation":"30732:7:2","nodeType":"VariableDeclaration","scope":4011,"src":"30724:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3997,"name":"address","nodeType":"ElementaryTypeName","src":"30724:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4000,"mutability":"mutable","name":"tokenOut","nameLocation":"30758:8:2","nodeType":"VariableDeclaration","scope":4011,"src":"30750:16:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3999,"name":"address","nodeType":"ElementaryTypeName","src":"30750:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4002,"mutability":"mutable","name":"fee","nameLocation":"30784:3:2","nodeType":"VariableDeclaration","scope":4011,"src":"30777:10:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"},"typeName":{"id":4001,"name":"uint24","nodeType":"ElementaryTypeName","src":"30777:6:2","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"}},"visibility":"internal"},{"constant":false,"id":4004,"mutability":"mutable","name":"recipient","nameLocation":"30806:9:2","nodeType":"VariableDeclaration","scope":4011,"src":"30798:17:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4003,"name":"address","nodeType":"ElementaryTypeName","src":"30798:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4006,"mutability":"mutable","name":"amountOut","nameLocation":"30834:9:2","nodeType":"VariableDeclaration","scope":4011,"src":"30826:17:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4005,"name":"uint256","nodeType":"ElementaryTypeName","src":"30826:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4008,"mutability":"mutable","name":"amountInMaximum","nameLocation":"30862:15:2","nodeType":"VariableDeclaration","scope":4011,"src":"30854:23:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4007,"name":"uint256","nodeType":"ElementaryTypeName","src":"30854:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4010,"mutability":"mutable","name":"sqrtPriceLimitX96","nameLocation":"30896:17:2","nodeType":"VariableDeclaration","scope":4011,"src":"30888:25:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"},"typeName":{"id":4009,"name":"uint160","nodeType":"ElementaryTypeName","src":"30888:7:2","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"visibility":"internal"}],"name":"ExactOutputSingleParams","nameLocation":"30689:23:2","nodeType":"StructDefinition","scope":4042,"src":"30682:239:2","visibility":"public"},{"documentation":{"id":4012,"nodeType":"StructuredDocumentation","src":"30929:307:2","text":"@notice Swaps as little as possible of one token for `amountOut` of another token\n that may remain in the router after the swap.\n @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\n @return amountIn The amount of the input token"},"functionSelector":"5023b4df","id":4020,"implemented":false,"kind":"function","modifiers":[],"name":"exactOutputSingle","nameLocation":"31251:17:2","nodeType":"FunctionDefinition","parameters":{"id":4016,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4015,"mutability":"mutable","name":"params","nameLocation":"31312:6:2","nodeType":"VariableDeclaration","scope":4020,"src":"31279:39:2","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_ExactOutputSingleParams_$4011_calldata_ptr","typeString":"struct IV3SwapRouter.ExactOutputSingleParams"},"typeName":{"id":4014,"nodeType":"UserDefinedTypeName","pathNode":{"id":4013,"name":"ExactOutputSingleParams","nodeType":"IdentifierPath","referencedDeclaration":4011,"src":"31279:23:2"},"referencedDeclaration":4011,"src":"31279:23:2","typeDescriptions":{"typeIdentifier":"t_struct$_ExactOutputSingleParams_$4011_storage_ptr","typeString":"struct IV3SwapRouter.ExactOutputSingleParams"}},"visibility":"internal"}],"src":"31268:57:2"},"returnParameters":{"id":4019,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4018,"mutability":"mutable","name":"amountIn","nameLocation":"31360:8:2","nodeType":"VariableDeclaration","scope":4020,"src":"31352:16:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4017,"name":"uint256","nodeType":"ElementaryTypeName","src":"31352:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"31351:18:2"},"scope":4042,"src":"31242:128:2","stateMutability":"payable","virtual":false,"visibility":"external"},{"canonicalName":"IV3SwapRouter.ExactOutputParams","id":4029,"members":[{"constant":false,"id":4022,"mutability":"mutable","name":"path","nameLocation":"31420:4:2","nodeType":"VariableDeclaration","scope":4029,"src":"31414:10:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":4021,"name":"bytes","nodeType":"ElementaryTypeName","src":"31414:5:2","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":4024,"mutability":"mutable","name":"recipient","nameLocation":"31443:9:2","nodeType":"VariableDeclaration","scope":4029,"src":"31435:17:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4023,"name":"address","nodeType":"ElementaryTypeName","src":"31435:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4026,"mutability":"mutable","name":"amountOut","nameLocation":"31471:9:2","nodeType":"VariableDeclaration","scope":4029,"src":"31463:17:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4025,"name":"uint256","nodeType":"ElementaryTypeName","src":"31463:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4028,"mutability":"mutable","name":"amountInMaximum","nameLocation":"31499:15:2","nodeType":"VariableDeclaration","scope":4029,"src":"31491:23:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4027,"name":"uint256","nodeType":"ElementaryTypeName","src":"31491:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"ExactOutputParams","nameLocation":"31385:17:2","nodeType":"StructDefinition","scope":4042,"src":"31378:144:2","visibility":"public"},{"documentation":{"id":4030,"nodeType":"StructuredDocumentation","src":"31530:341:2","text":"@notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\n that may remain in the router after the swap.\n @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\n @return amountIn The amount of the input token"},"functionSelector":"09b81346","id":4038,"implemented":false,"kind":"function","modifiers":[],"name":"exactOutput","nameLocation":"31886:11:2","nodeType":"FunctionDefinition","parameters":{"id":4034,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4033,"mutability":"mutable","name":"params","nameLocation":"31935:6:2","nodeType":"VariableDeclaration","scope":4038,"src":"31908:33:2","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_ExactOutputParams_$4029_calldata_ptr","typeString":"struct IV3SwapRouter.ExactOutputParams"},"typeName":{"id":4032,"nodeType":"UserDefinedTypeName","pathNode":{"id":4031,"name":"ExactOutputParams","nodeType":"IdentifierPath","referencedDeclaration":4029,"src":"31908:17:2"},"referencedDeclaration":4029,"src":"31908:17:2","typeDescriptions":{"typeIdentifier":"t_struct$_ExactOutputParams_$4029_storage_ptr","typeString":"struct IV3SwapRouter.ExactOutputParams"}},"visibility":"internal"}],"src":"31897:51:2"},"returnParameters":{"id":4037,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4036,"mutability":"mutable","name":"amountIn","nameLocation":"31983:8:2","nodeType":"VariableDeclaration","scope":4038,"src":"31975:16:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4035,"name":"uint256","nodeType":"ElementaryTypeName","src":"31975:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"31974:18:2"},"scope":4042,"src":"31877:116:2","stateMutability":"payable","virtual":false,"visibility":"external"},{"functionSelector":"12210e8a","id":4041,"implemented":false,"kind":"function","modifiers":[],"name":"refundETH","nameLocation":"32011:9:2","nodeType":"FunctionDefinition","parameters":{"id":4039,"nodeType":"ParameterList","parameters":[],"src":"32020:2:2"},"returnParameters":{"id":4040,"nodeType":"ParameterList","parameters":[],"src":"32039:0:2"},"scope":4042,"src":"32002:38:2","stateMutability":"payable","virtual":false,"visibility":"external"}],"scope":4257,"src":"29049:2994:2","usedErrors":[]},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":4256,"linearizedBaseContracts":[4256],"name":"V3Swap","nameLocation":"32056:6:2","nodeType":"ContractDefinition","nodes":[{"id":4045,"libraryName":{"id":4043,"name":"SafeMath","nodeType":"IdentifierPath","referencedDeclaration":3353,"src":"32076:8:2"},"nodeType":"UsingForDirective","src":"32070:27:2","typeName":{"id":4044,"name":"uint256","nodeType":"ElementaryTypeName","src":"32089:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},{"id":4049,"libraryName":{"id":4046,"name":"SafeERC20","nodeType":"IdentifierPath","referencedDeclaration":3939,"src":"32109:9:2"},"nodeType":"UsingForDirective","src":"32103:27:2","typeName":{"id":4048,"nodeType":"UserDefinedTypeName","pathNode":{"id":4047,"name":"IERC20","nodeType":"IdentifierPath","referencedDeclaration":3720,"src":"32123:6:2"},"referencedDeclaration":3720,"src":"32123:6:2","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3720","typeString":"contract IERC20"}}},{"constant":false,"functionSelector":"3268cc56","id":4052,"mutability":"mutable","name":"routerAddress","nameLocation":"32151:13:2","nodeType":"VariableDeclaration","scope":4256,"src":"32136:73:2","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4050,"name":"address","nodeType":"ElementaryTypeName","src":"32136:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":{"hexValue":"307831336634454138334430626434304537354338323232323535626338353561393734353638446434","id":4051,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"32167:42:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"value":"0x13f4EA83D0bd40E75C8222255bc855a974568Dd4"},"visibility":"public"},{"constant":false,"functionSelector":"966dae0e","id":4055,"mutability":"mutable","name":"factoryAddress","nameLocation":"32231:14:2","nodeType":"VariableDeclaration","scope":4256,"src":"32216:74:2","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4053,"name":"address","nodeType":"ElementaryTypeName","src":"32216:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":{"hexValue":"307830424662434639666134663943353642304634306136373141643430453038303541303931383635","id":4054,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"32248:42:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"value":"0x0BFbCF9fa4f9C56B0F40a671Ad40E0805A091865"},"visibility":"public"},{"constant":false,"functionSelector":"63fe3e3a","id":4058,"mutability":"mutable","name":"wbnbAddress","nameLocation":"32312:11:2","nodeType":"VariableDeclaration","scope":4256,"src":"32297:71:2","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4056,"name":"address","nodeType":"ElementaryTypeName","src":"32297:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":{"hexValue":"307862623443644239434264333642303162443163426145424632446530386439313733626330393563","id":4057,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"32326:42:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"value":"0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c"},"visibility":"public"},{"constant":false,"id":4061,"mutability":"mutable","name":"fee","nameLocation":"32382:3:2","nodeType":"VariableDeclaration","scope":4256,"src":"32375:16:2","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"},"typeName":{"id":4059,"name":"uint24","nodeType":"ElementaryTypeName","src":"32375:6:2","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"}},"value":{"hexValue":"313030","id":4060,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"32388:3:2","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"value":"100"},"visibility":"internal"},{"body":{"id":4064,"nodeType":"Block","src":"32414:2:2","statements":[]},"id":4065,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":4062,"nodeType":"ParameterList","parameters":[],"src":"32411:2:2"},"returnParameters":{"id":4063,"nodeType":"ParameterList","parameters":[],"src":"32414:0:2"},"scope":4256,"src":"32400:16:2","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":4140,"nodeType":"Block","src":"32589:551:2","statements":[{"assignments":[4077],"declarations":[{"constant":false,"id":4077,"mutability":"mutable","name":"slotReturnValue","nameLocation":"32608:15:2","nodeType":"VariableDeclaration","scope":4140,"src":"32600:23:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4076,"name":"uint256","nodeType":"ElementaryTypeName","src":"32600:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4079,"initialValue":{"hexValue":"30","id":4078,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"32626:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"32600:27:2"},{"assignments":[4081],"declarations":[{"constant":false,"id":4081,"mutability":"mutable","name":"pairAddress","nameLocation":"32646:11:2","nodeType":"VariableDeclaration","scope":4140,"src":"32638:19:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4080,"name":"address","nodeType":"ElementaryTypeName","src":"32638:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":4090,"initialValue":{"arguments":[{"id":4086,"name":"_tokenIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4069,"src":"32716:8:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4087,"name":"_tokenOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4071,"src":"32739:9:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4088,"name":"fee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4061,"src":"32763:3:2","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint24","typeString":"uint24"}],"expression":{"arguments":[{"id":4083,"name":"factoryAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4055,"src":"32678:14:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4082,"name":"IPancakeV3Factory","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2859,"src":"32660:17:2","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IPancakeV3Factory_$2859_$","typeString":"type(contract IPancakeV3Factory)"}},"id":4084,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"32660:33:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IPancakeV3Factory_$2859","typeString":"contract IPancakeV3Factory"}},"id":4085,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"getPool","nodeType":"MemberAccess","referencedDeclaration":2858,"src":"32660:41:2","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$_t_address_$_t_uint24_$returns$_t_address_$","typeString":"function (address,address,uint24) view external returns (address)"}},"id":4089,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"32660:117:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"32638:139:2"},{"expression":{"id":4098,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"components":[{"id":4091,"name":"slotReturnValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4077,"src":"32789:15:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},null,null,null,null,null,null],"id":4092,"isConstant":false,"isInlineArray":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"TupleExpression","src":"32788:29:2","typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$__$__$__$__$__$__$","typeString":"tuple(uint256,,,,,,)"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[{"id":4094,"name":"pairAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4081,"src":"32840:11:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4093,"name":"IPancakeV3PoolState","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2878,"src":"32820:19:2","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IPancakeV3PoolState_$2878_$","typeString":"type(contract IPancakeV3PoolState)"}},"id":4095,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"32820:32:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IPancakeV3PoolState_$2878","typeString":"contract IPancakeV3PoolState"}},"id":4096,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"slot0","nodeType":"MemberAccess","referencedDeclaration":2877,"src":"32820:52:2","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_uint160_$_t_int24_$_t_uint16_$_t_uint16_$_t_uint16_$_t_uint32_$_t_bool_$","typeString":"function () view external returns (uint160,int24,uint16,uint16,uint16,uint32,bool)"}},"id":4097,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"32820:54:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint160_$_t_int24_$_t_uint16_$_t_uint16_$_t_uint16_$_t_uint32_$_t_bool_$","typeString":"tuple(uint160,int24,uint16,uint16,uint16,uint32,bool)"}},"src":"32788:86:2","typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4099,"nodeType":"ExpressionStatement","src":"32788:86:2"},{"assignments":[4101],"declarations":[{"constant":false,"id":4101,"mutability":"mutable","name":"token0","nameLocation":"32893:6:2","nodeType":"VariableDeclaration","scope":4140,"src":"32885:14:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4100,"name":"address","nodeType":"ElementaryTypeName","src":"32885:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":4107,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[{"id":4103,"name":"pairAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4081,"src":"32917:11:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4102,"name":"IPancakeV3Pool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2920,"src":"32902:14:2","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IPancakeV3Pool_$2920_$","typeString":"type(contract IPancakeV3Pool)"}},"id":4104,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"32902:27:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IPancakeV3Pool_$2920","typeString":"contract IPancakeV3Pool"}},"id":4105,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"token0","nodeType":"MemberAccess","referencedDeclaration":2890,"src":"32902:34:2","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_address_$","typeString":"function () view external returns (address)"}},"id":4106,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"32902:36:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"32885:53:2"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":4110,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4108,"name":"_tokenIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4069,"src":"32953:8:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":4109,"name":"token0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4101,"src":"32965:6:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"32953:18:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"expression":{"id":4137,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4125,"name":"outputAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4074,"src":"33067:12:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4135,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4130,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_rational_6277101735386680763835789423207666416102355444464034512896_by_1","typeString":"int_const 6277...(50 digits omitted)...2896"},"id":4128,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":4126,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"33084:1:2","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"313932","id":4127,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"33089:3:2","typeDescriptions":{"typeIdentifier":"t_rational_192_by_1","typeString":"int_const 192"},"value":"192"},"src":"33084:8:2","typeDescriptions":{"typeIdentifier":"t_rational_6277101735386680763835789423207666416102355444464034512896_by_1","typeString":"int_const 6277...(50 digits omitted)...2896"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":4129,"name":"_inputAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4067,"src":"33095:12:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"33084:23:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4131,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"33083:25:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4134,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4132,"name":"slotReturnValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4077,"src":"33111:15:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"32","id":4133,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"33130:1:2","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"33111:20:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"33083:48:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4136,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"33082:50:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"33067:65:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4138,"nodeType":"ExpressionStatement","src":"33067:65:2"},"id":4139,"nodeType":"IfStatement","src":"32949:183:2","trueBody":{"expression":{"id":4123,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4111,"name":"outputAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4074,"src":"32986:12:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4121,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4116,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4114,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4112,"name":"slotReturnValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4077,"src":"33003:15:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"32","id":4113,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"33022:1:2","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"33003:20:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":4115,"name":"_inputAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4067,"src":"33026:12:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"33003:35:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4117,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"33002:37:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"commonType":{"typeIdentifier":"t_rational_6277101735386680763835789423207666416102355444464034512896_by_1","typeString":"int_const 6277...(50 digits omitted)...2896"},"id":4120,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":4118,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"33042:1:2","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"313932","id":4119,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"33047:3:2","typeDescriptions":{"typeIdentifier":"t_rational_192_by_1","typeString":"int_const 192"},"value":"192"},"src":"33042:8:2","typeDescriptions":{"typeIdentifier":"t_rational_6277101735386680763835789423207666416102355444464034512896_by_1","typeString":"int_const 6277...(50 digits omitted)...2896"}},"src":"33002:48:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4122,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"33001:50:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"32986:65:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4124,"nodeType":"ExpressionStatement","src":"32986:65:2"}}]},"functionSelector":"a189d648","id":4141,"implemented":true,"kind":"function","modifiers":[],"name":"getOutputTokenAmount","nameLocation":"32433:20:2","nodeType":"FunctionDefinition","parameters":{"id":4072,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4067,"mutability":"mutable","name":"_inputAmount","nameLocation":"32472:12:2","nodeType":"VariableDeclaration","scope":4141,"src":"32464:20:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4066,"name":"uint256","nodeType":"ElementaryTypeName","src":"32464:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4069,"mutability":"mutable","name":"_tokenIn","nameLocation":"32503:8:2","nodeType":"VariableDeclaration","scope":4141,"src":"32495:16:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4068,"name":"address","nodeType":"ElementaryTypeName","src":"32495:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4071,"mutability":"mutable","name":"_tokenOut","nameLocation":"32530:9:2","nodeType":"VariableDeclaration","scope":4141,"src":"32522:17:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4070,"name":"address","nodeType":"ElementaryTypeName","src":"32522:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"32453:93:2"},"returnParameters":{"id":4075,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4074,"mutability":"mutable","name":"outputAmount","nameLocation":"32575:12:2","nodeType":"VariableDeclaration","scope":4141,"src":"32570:17:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4073,"name":"uint","nodeType":"ElementaryTypeName","src":"32570:4:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"32569:19:2"},"scope":4256,"src":"32424:716:2","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":4159,"nodeType":"Block","src":"33205:74:2","statements":[{"expression":{"arguments":[{"arguments":[{"id":4154,"name":"routerAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4052,"src":"33247:13:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4153,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"33239:7:2","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4152,"name":"address","nodeType":"ElementaryTypeName","src":"33239:7:2","typeDescriptions":{}}},"id":4155,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"33239:22:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4156,"name":"_amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4145,"src":"33263:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"id":4149,"name":"_token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4143,"src":"33223:6:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4148,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3720,"src":"33216:6:2","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20_$3720_$","typeString":"type(contract IERC20)"}},"id":4150,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"33216:14:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3720","typeString":"contract IERC20"}},"id":4151,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"approve","nodeType":"MemberAccess","referencedDeclaration":3707,"src":"33216:22:2","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":4157,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"33216:55:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4158,"nodeType":"ExpressionStatement","src":"33216:55:2"}]},"id":4160,"implemented":true,"kind":"function","modifiers":[],"name":"_approve","nameLocation":"33157:8:2","nodeType":"FunctionDefinition","parameters":{"id":4146,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4143,"mutability":"mutable","name":"_token","nameLocation":"33174:6:2","nodeType":"VariableDeclaration","scope":4160,"src":"33166:14:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4142,"name":"address","nodeType":"ElementaryTypeName","src":"33166:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4145,"mutability":"mutable","name":"_amount","nameLocation":"33187:7:2","nodeType":"VariableDeclaration","scope":4160,"src":"33182:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4144,"name":"uint","nodeType":"ElementaryTypeName","src":"33182:4:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"33165:30:2"},"returnParameters":{"id":4147,"nodeType":"ParameterList","parameters":[],"src":"33205:0:2"},"scope":4256,"src":"33148:131:2","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":4254,"nodeType":"Block","src":"33414:1021:2","statements":[{"assignments":[4173],"declarations":[{"constant":false,"id":4173,"mutability":"mutable","name":"params","nameLocation":"33469:6:2","nodeType":"VariableDeclaration","scope":4254,"src":"33425:50:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_ExactInputSingleParams_$3969_memory_ptr","typeString":"struct IV3SwapRouter.ExactInputSingleParams"},"typeName":{"id":4172,"nodeType":"UserDefinedTypeName","pathNode":{"id":4171,"name":"IV3SwapRouter.ExactInputSingleParams","nodeType":"IdentifierPath","referencedDeclaration":3969,"src":"33425:36:2"},"referencedDeclaration":3969,"src":"33425:36:2","typeDescriptions":{"typeIdentifier":"t_struct$_ExactInputSingleParams_$3969_storage_ptr","typeString":"struct IV3SwapRouter.ExactInputSingleParams"}},"visibility":"internal"}],"id":4185,"initialValue":{"arguments":[{"id":4176,"name":"_tokenIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4162,"src":"33547:8:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4177,"name":"_tokenOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4164,"src":"33574:9:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4178,"name":"fee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4061,"src":"33602:3:2","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"}},{"expression":{"id":4179,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"33624:3:2","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":4180,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"33624:10:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4181,"name":"_amountIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4166,"src":"33653:9:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"30","id":4182,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"33681:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"30","id":4183,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"33701:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint24","typeString":"uint24"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"expression":{"id":4174,"name":"IV3SwapRouter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4042,"src":"33478:13:2","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IV3SwapRouter_$4042_$","typeString":"type(contract IV3SwapRouter)"}},"id":4175,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"ExactInputSingleParams","nodeType":"MemberAccess","referencedDeclaration":3969,"src":"33478:50:2","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_ExactInputSingleParams_$3969_storage_ptr_$","typeString":"type(struct IV3SwapRouter.ExactInputSingleParams storage pointer)"}},"id":4184,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"33478:239:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_ExactInputSingleParams_$3969_memory_ptr","typeString":"struct IV3SwapRouter.ExactInputSingleParams memory"}},"nodeType":"VariableDeclarationStatement","src":"33425:292:2"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":4188,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4186,"name":"_tokenIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4162,"src":"33732:8:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":4187,"name":"wbnbAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4058,"src":"33744:11:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"33732:23:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":4227,"nodeType":"Block","src":"33889:325:2","statements":[{"expression":{"arguments":[{"expression":{"id":4203,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"33956:3:2","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":4204,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"33956:10:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"id":4207,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"33993:4:2","typeDescriptions":{"typeIdentifier":"t_contract$_V3Swap_$4256","typeString":"contract V3Swap"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_V3Swap_$4256","typeString":"contract V3Swap"}],"id":4206,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"33985:7:2","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4205,"name":"address","nodeType":"ElementaryTypeName","src":"33985:7:2","typeDescriptions":{}}},"id":4208,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"33985:13:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4209,"name":"_amountIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4166,"src":"34017:9:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"id":4200,"name":"_tokenIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4162,"src":"33911:8:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4199,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3720,"src":"33904:6:2","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20_$3720_$","typeString":"type(contract IERC20)"}},"id":4201,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"33904:16:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3720","typeString":"contract IERC20"}},"id":4202,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"safeTransferFrom","nodeType":"MemberAccess","referencedDeclaration":3772,"src":"33904:33:2","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$3720_$_t_address_$_t_address_$_t_uint256_$returns$__$bound_to$_t_contract$_IERC20_$3720_$","typeString":"function (contract IERC20,address,address,uint256)"}},"id":4210,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"33904:137:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4211,"nodeType":"ExpressionStatement","src":"33904:137:2"},{"expression":{"arguments":[{"id":4213,"name":"_tokenIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4162,"src":"34065:8:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4214,"name":"_amountIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4166,"src":"34074:9:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4212,"name":"_approve","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4160,"src":"34056:8:2","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":4215,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"34056:28:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4216,"nodeType":"ExpressionStatement","src":"34056:28:2"},{"expression":{"arguments":[{"id":4224,"name":"params","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4173,"src":"34181:6:2","typeDescriptions":{"typeIdentifier":"t_struct$_ExactInputSingleParams_$3969_memory_ptr","typeString":"struct IV3SwapRouter.ExactInputSingleParams memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_ExactInputSingleParams_$3969_memory_ptr","typeString":"struct IV3SwapRouter.ExactInputSingleParams memory"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_ExactInputSingleParams_$3969_memory_ptr","typeString":"struct IV3SwapRouter.ExactInputSingleParams memory"}],"expression":{"arguments":[{"id":4218,"name":"routerAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4052,"src":"34113:13:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4217,"name":"IV3SwapRouter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4042,"src":"34099:13:2","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IV3SwapRouter_$4042_$","typeString":"type(contract IV3SwapRouter)"}},"id":4219,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"34099:28:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IV3SwapRouter_$4042","typeString":"contract IV3SwapRouter"}},"id":4220,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"exactInputSingle","nodeType":"MemberAccess","referencedDeclaration":3978,"src":"34099:45:2","typeDescriptions":{"typeIdentifier":"t_function_external_payable$_t_struct$_ExactInputSingleParams_$3969_memory_ptr_$returns$_t_uint256_$","typeString":"function (struct IV3SwapRouter.ExactInputSingleParams memory) payable external returns (uint256)"}},"id":4223,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"expression":{"id":4221,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"34152:3:2","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":4222,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"value","nodeType":"MemberAccess","src":"34152:9:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"34099:63:2","typeDescriptions":{"typeIdentifier":"t_function_external_payable$_t_struct$_ExactInputSingleParams_$3969_memory_ptr_$returns$_t_uint256_$value","typeString":"function (struct IV3SwapRouter.ExactInputSingleParams memory) payable external returns (uint256)"}},"id":4225,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"34099:103:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4226,"nodeType":"ExpressionStatement","src":"34099:103:2"}]},"id":4228,"nodeType":"IfStatement","src":"33728:486:2","trueBody":{"expression":{"arguments":[{"id":4196,"name":"params","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4173,"src":"33852:6:2","typeDescriptions":{"typeIdentifier":"t_struct$_ExactInputSingleParams_$3969_memory_ptr","typeString":"struct IV3SwapRouter.ExactInputSingleParams memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_ExactInputSingleParams_$3969_memory_ptr","typeString":"struct IV3SwapRouter.ExactInputSingleParams memory"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_ExactInputSingleParams_$3969_memory_ptr","typeString":"struct IV3SwapRouter.ExactInputSingleParams memory"}],"expression":{"arguments":[{"id":4190,"name":"routerAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4052,"src":"33784:13:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4189,"name":"IV3SwapRouter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4042,"src":"33770:13:2","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IV3SwapRouter_$4042_$","typeString":"type(contract IV3SwapRouter)"}},"id":4191,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"33770:28:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IV3SwapRouter_$4042","typeString":"contract IV3SwapRouter"}},"id":4192,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"exactInputSingle","nodeType":"MemberAccess","referencedDeclaration":3978,"src":"33770:45:2","typeDescriptions":{"typeIdentifier":"t_function_external_payable$_t_struct$_ExactInputSingleParams_$3969_memory_ptr_$returns$_t_uint256_$","typeString":"function (struct IV3SwapRouter.ExactInputSingleParams memory) payable external returns (uint256)"}},"id":4195,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"expression":{"id":4193,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"33823:3:2","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":4194,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"value","nodeType":"MemberAccess","src":"33823:9:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"33770:63:2","typeDescriptions":{"typeIdentifier":"t_function_external_payable$_t_struct$_ExactInputSingleParams_$3969_memory_ptr_$returns$_t_uint256_$value","typeString":"function (struct IV3SwapRouter.ExactInputSingleParams memory) payable external returns (uint256)"}},"id":4197,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"33770:103:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4198,"nodeType":"ExpressionStatement","src":"33770:103:2"}},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[{"id":4230,"name":"routerAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4052,"src":"34238:13:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4229,"name":"IV3SwapRouter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4042,"src":"34224:13:2","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IV3SwapRouter_$4042_$","typeString":"type(contract IV3SwapRouter)"}},"id":4231,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"34224:28:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IV3SwapRouter_$4042","typeString":"contract IV3SwapRouter"}},"id":4232,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"refundETH","nodeType":"MemberAccess","referencedDeclaration":4041,"src":"34224:38:2","typeDescriptions":{"typeIdentifier":"t_function_external_payable$__$returns$__$","typeString":"function () payable external"}},"id":4233,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"34224:40:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4234,"nodeType":"ExpressionStatement","src":"34224:40:2"},{"assignments":[4236,null],"declarations":[{"constant":false,"id":4236,"mutability":"mutable","name":"success","nameLocation":"34321:7:2","nodeType":"VariableDeclaration","scope":4254,"src":"34316:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4235,"name":"bool","nodeType":"ElementaryTypeName","src":"34316:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},null],"id":4248,"initialValue":{"arguments":[{"hexValue":"","id":4246,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"34380:2:2","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"expression":{"id":4237,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"34334:3:2","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":4238,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"34334:10:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":4239,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"call","nodeType":"MemberAccess","src":"34334:15:2","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":4245,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"expression":{"arguments":[{"id":4242,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"34365:4:2","typeDescriptions":{"typeIdentifier":"t_contract$_V3Swap_$4256","typeString":"contract V3Swap"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_V3Swap_$4256","typeString":"contract V3Swap"}],"id":4241,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"34357:7:2","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4240,"name":"address","nodeType":"ElementaryTypeName","src":"34357:7:2","typeDescriptions":{}}},"id":4243,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"34357:13:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":4244,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"balance","nodeType":"MemberAccess","src":"34357:21:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"34334:45:2","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":4247,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"34334:49:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"34315:68:2"},{"expression":{"arguments":[{"id":4250,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4236,"src":"34402:7:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"726566756e64206661696c6564","id":4251,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"34411:15:2","typeDescriptions":{"typeIdentifier":"t_stringliteral_f9239079da98909f815170ee967acd53b4cf9b37ced6a4dd9f2f25df9bc54bf5","typeString":"literal_string \"refund failed\""},"value":"refund failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_f9239079da98909f815170ee967acd53b4cf9b37ced6a4dd9f2f25df9bc54bf5","typeString":"literal_string \"refund failed\""}],"id":4249,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"34394:7:2","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4252,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"34394:33:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4253,"nodeType":"ExpressionStatement","src":"34394:33:2"}]},"functionSelector":"ec6cc0cc","id":4255,"implemented":true,"kind":"function","modifiers":[],"name":"swapTokens","nameLocation":"33296:10:2","nodeType":"FunctionDefinition","parameters":{"id":4167,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4162,"mutability":"mutable","name":"_tokenIn","nameLocation":"33325:8:2","nodeType":"VariableDeclaration","scope":4255,"src":"33317:16:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4161,"name":"address","nodeType":"ElementaryTypeName","src":"33317:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4164,"mutability":"mutable","name":"_tokenOut","nameLocation":"33352:9:2","nodeType":"VariableDeclaration","scope":4255,"src":"33344:17:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4163,"name":"address","nodeType":"ElementaryTypeName","src":"33344:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4166,"mutability":"mutable","name":"_amountIn","nameLocation":"33380:9:2","nodeType":"VariableDeclaration","scope":4255,"src":"33372:17:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4165,"name":"uint256","nodeType":"ElementaryTypeName","src":"33372:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"33306:90:2"},"returnParameters":{"id":4168,"nodeType":"ParameterList","parameters":[],"src":"33414:0:2"},"scope":4256,"src":"33287:1148:2","stateMutability":"payable","virtual":false,"visibility":"external"}],"scope":4257,"src":"32047:2391:2","usedErrors":[]}],"src":"46:34394:2"},"id":2}},"contracts":{"contracts/IExchange_latest.sol":{"IDexFactory":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"token0","type":"address"},{"indexed":true,"internalType":"address","name":"token1","type":"address"},{"indexed":false,"internalType":"address","name":"pair","type":"address"},{"indexed":false,"internalType":"uint256","name":"","type":"uint256"}],"name":"PairCreated","type":"event"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"allPairs","outputs":[{"internalType":"address","name":"pair","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"allPairsLength","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"tokenA","type":"address"},{"internalType":"address","name":"tokenB","type":"address"}],"name":"createPair","outputs":[{"internalType":"address","name":"pair","type":"address"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"feeTo","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"feeToSetter","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"tokenA","type":"address"},{"internalType":"address","name":"tokenB","type":"address"}],"name":"getPair","outputs":[{"internalType":"address","name":"pair","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"setFeeTo","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"setFeeToSetter","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"allPairs(uint256)":"1e3dd18b","allPairsLength()":"574f2ba3","createPair(address,address)":"c9c65396","feeTo()":"017e7e58","feeToSetter()":"094b7415","getPair(address,address)":"e6a43905","setFeeTo(address)":"f46901ed","setFeeToSetter(address)":"a2e74af6"}},"metadata":"{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"PairCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allPairs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allPairsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"}],\"name\":\"createPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeTo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeToSetter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"}],\"name\":\"getPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"setFeeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"setFeeToSetter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/IExchange_latest.sol\":\"IDexFactory\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/IExchange_latest.sol\":{\"content\":\"\\r\\n//SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\ninterface IDexFactory {\\r\\n\\t\\tevent PairCreated(address indexed token0, address indexed token1, address pair, uint);\\r\\n\\r\\n\\t\\tfunction feeTo() external view returns (address);\\r\\n\\t\\tfunction feeToSetter() external view returns (address);\\r\\n\\r\\n\\t\\tfunction getPair(address tokenA, address tokenB) external view returns (address pair);\\r\\n\\t\\tfunction allPairs(uint) external view returns (address pair);\\r\\n\\t\\tfunction allPairsLength() external view returns (uint);\\r\\n\\r\\n\\t\\tfunction createPair(address tokenA, address tokenB) external returns (address pair);\\r\\n\\r\\n\\t\\tfunction setFeeTo(address) external;\\r\\n\\t\\tfunction setFeeToSetter(address) external;\\r\\n}\\r\\n\\r\\ninterface IDexPair {\\r\\n\\t\\tevent Approval(address indexed owner, address indexed spender, uint value);\\r\\n\\t\\tevent Transfer(address indexed from, address indexed to, uint value);\\r\\n\\r\\n\\t\\tfunction name() external pure returns (string memory);\\r\\n\\t\\tfunction symbol() external pure returns (string memory);\\r\\n\\t\\tfunction decimals() external pure returns (uint8);\\r\\n\\t\\tfunction totalSupply() external view returns (uint);\\r\\n\\t\\tfunction balanceOf(address owner) external view returns (uint);\\r\\n\\t\\tfunction allowance(address owner, address spender) external view returns (uint);\\r\\n\\r\\n\\t\\tfunction approve(address spender, uint value) external returns (bool);\\r\\n\\t\\tfunction transfer(address to, uint value) external returns (bool);\\r\\n\\t\\tfunction transferFrom(address from, address to, uint value) external returns (bool);\\r\\n\\r\\n\\t\\tfunction DOMAIN_SEPARATOR() external view returns (bytes32);\\r\\n\\t\\tfunction PERMIT_TYPEHASH() external pure returns (bytes32);\\r\\n\\t\\tfunction nonces(address owner) external view returns (uint);\\r\\n\\r\\n\\t\\tfunction permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\r\\n\\r\\n\\t\\tevent Mint(address indexed sender, uint amount0, uint amount1);\\r\\n\\t\\tevent Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\r\\n\\t\\tevent Swap(\\r\\n\\t\\t\\t\\taddress indexed sender,\\r\\n\\t\\t\\t\\tuint amount0In,\\r\\n\\t\\t\\t\\tuint amount1In,\\r\\n\\t\\t\\t\\tuint amount0Out,\\r\\n\\t\\t\\t\\tuint amount1Out,\\r\\n\\t\\t\\t\\taddress indexed to\\r\\n\\t\\t);\\r\\n\\t\\tevent Sync(uint112 reserve0, uint112 reserve1);\\r\\n\\r\\n\\t\\tfunction MINIMUM_LIQUIDITY() external pure returns (uint);\\r\\n\\t\\tfunction factory() external view returns (address);\\r\\n\\t\\tfunction token0() external view returns (address);\\r\\n\\t\\tfunction token1() external view returns (address);\\r\\n\\t\\tfunction getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\r\\n\\t\\tfunction price0CumulativeLast() external view returns (uint);\\r\\n\\t\\tfunction price1CumulativeLast() external view returns (uint);\\r\\n\\t\\tfunction kLast() external view returns (uint);\\r\\n\\r\\n\\t\\tfunction mint(address to) external returns (uint liquidity);\\r\\n\\t\\tfunction burn(address to) external returns (uint amount0, uint amount1);\\r\\n\\t\\tfunction swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\r\\n\\t\\tfunction skim(address to) external;\\r\\n\\t\\tfunction sync() external;\\r\\n\\r\\n\\t\\tfunction initialize(address, address) external;\\r\\n}\\r\\n\\r\\ninterface IDexRouter{\\r\\n\\t\\tfunction factory() external pure returns (address);\\r\\n\\t\\tfunction WETH() external pure returns (address);\\r\\n\\r\\n\\t\\tfunction addLiquidity(\\r\\n\\t\\t\\t\\taddress tokenA,\\r\\n\\t\\t\\t\\taddress tokenB,\\r\\n\\t\\t\\t\\tuint amountADesired,\\r\\n\\t\\t\\t\\tuint amountBDesired,\\r\\n\\t\\t\\t\\tuint amountAMin,\\r\\n\\t\\t\\t\\tuint amountBMin,\\r\\n\\t\\t\\t\\taddress to,\\r\\n\\t\\t\\t\\tuint deadline\\r\\n\\t\\t) external returns (uint amountA, uint amountB, uint liquidity);\\r\\n\\t\\tfunction addLiquidityETH(\\r\\n\\t\\t\\t\\taddress token,\\r\\n\\t\\t\\t\\tuint amountTokenDesired,\\r\\n\\t\\t\\t\\tuint amountTokenMin,\\r\\n\\t\\t\\t\\tuint amountETHMin,\\r\\n\\t\\t\\t\\taddress to,\\r\\n\\t\\t\\t\\tuint deadline\\r\\n\\t\\t) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\r\\n\\t\\tfunction removeLiquidity(\\r\\n\\t\\t\\t\\taddress tokenA,\\r\\n\\t\\t\\t\\taddress tokenB,\\r\\n\\t\\t\\t\\tuint liquidity,\\r\\n\\t\\t\\t\\tuint amountAMin,\\r\\n\\t\\t\\t\\tuint amountBMin,\\r\\n\\t\\t\\t\\taddress to,\\r\\n\\t\\t\\t\\tuint deadline\\r\\n\\t\\t) external returns (uint amountA, uint amountB);\\r\\n\\t\\tfunction removeLiquidityETH(\\r\\n\\t\\t\\t\\taddress token,\\r\\n\\t\\t\\t\\tuint liquidity,\\r\\n\\t\\t\\t\\tuint amountTokenMin,\\r\\n\\t\\t\\t\\tuint amountETHMin,\\r\\n\\t\\t\\t\\taddress to,\\r\\n\\t\\t\\t\\tuint deadline\\r\\n\\t\\t) external returns (uint amountToken, uint amountETH);\\r\\n\\t\\tfunction removeLiquidityWithPermit(\\r\\n\\t\\t\\t\\taddress tokenA,\\r\\n\\t\\t\\t\\taddress tokenB,\\r\\n\\t\\t\\t\\tuint liquidity,\\r\\n\\t\\t\\t\\tuint amountAMin,\\r\\n\\t\\t\\t\\tuint amountBMin,\\r\\n\\t\\t\\t\\taddress to,\\r\\n\\t\\t\\t\\tuint deadline,\\r\\n\\t\\t\\t\\tbool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n\\t\\t) external returns (uint amountA, uint amountB);\\r\\n\\t\\tfunction removeLiquidityETHWithPermit(\\r\\n\\t\\t\\t\\taddress token,\\r\\n\\t\\t\\t\\tuint liquidity,\\r\\n\\t\\t\\t\\tuint amountTokenMin,\\r\\n\\t\\t\\t\\tuint amountETHMin,\\r\\n\\t\\t\\t\\taddress to,\\r\\n\\t\\t\\t\\tuint deadline,\\r\\n\\t\\t\\t\\tbool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n\\t\\t) external returns (uint amountToken, uint amountETH);\\r\\n\\t\\tfunction swapExactTokensForTokens(\\r\\n\\t\\t\\t\\tuint amountIn,\\r\\n\\t\\t\\t\\tuint amountOutMin,\\r\\n\\t\\t\\t\\taddress[] calldata path,\\r\\n\\t\\t\\t\\taddress to,\\r\\n\\t\\t\\t\\tuint deadline\\r\\n\\t\\t) external returns (uint[] memory amounts);\\r\\n\\t\\tfunction swapTokensForExactTokens(\\r\\n\\t\\t\\t\\tuint amountOut,\\r\\n\\t\\t\\t\\tuint amountInMax,\\r\\n\\t\\t\\t\\taddress[] calldata path,\\r\\n\\t\\t\\t\\taddress to,\\r\\n\\t\\t\\t\\tuint deadline\\r\\n\\t\\t) external returns (uint[] memory amounts);\\r\\n\\t\\tfunction swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\r\\n\\t\\t\\t\\texternal\\r\\n\\t\\t\\t\\tpayable\\r\\n\\t\\t\\t\\treturns (uint[] memory amounts);\\r\\n\\t\\tfunction swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\r\\n\\t\\t\\t\\texternal\\r\\n\\t\\t\\t\\treturns (uint[] memory amounts);\\r\\n\\t\\tfunction swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\r\\n\\t\\t\\t\\texternal\\r\\n\\t\\t\\t\\treturns (uint[] memory amounts);\\r\\n\\t\\tfunction swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\r\\n\\t\\t\\t\\texternal\\r\\n\\t\\t\\t\\tpayable\\r\\n\\t\\t\\t\\treturns (uint[] memory amounts);\\r\\n\\r\\n\\t\\tfunction quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\r\\n\\t\\tfunction getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\r\\n\\t\\tfunction getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\r\\n\\t\\tfunction getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\r\\n\\t\\tfunction getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\r\\n\\t\\tfunction removeLiquidityETHSupportingFeeOnTransferTokens(\\r\\n\\t\\t\\taddress token,\\r\\n\\t\\t\\tuint liquidity,\\r\\n\\t\\t\\tuint amountTokenMin,\\r\\n\\t\\t\\tuint amountETHMin,\\r\\n\\t\\t\\taddress to,\\r\\n\\t\\t\\tuint deadline\\r\\n\\t\\t) external returns (uint amountETH);\\r\\n\\t\\tfunction removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\r\\n\\t\\t\\taddress token,\\r\\n\\t\\t\\tuint liquidity,\\r\\n\\t\\t\\tuint amountTokenMin,\\r\\n\\t\\t\\tuint amountETHMin,\\r\\n\\t\\t\\taddress to,\\r\\n\\t\\t\\tuint deadline,\\r\\n\\t\\t\\tbool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n\\t\\t) external returns (uint amountETH);\\r\\n\\t\\r\\n\\t\\tfunction swapExactTokensForTokensSupportingFeeOnTransferTokens(\\r\\n\\t\\t\\tuint amountIn,\\r\\n\\t\\t\\tuint amountOutMin,\\r\\n\\t\\t\\taddress[] calldata path,\\r\\n\\t\\t\\taddress to,\\r\\n\\t\\t\\tuint deadline\\r\\n\\t\\t) external;\\r\\n\\t\\tfunction swapExactETHForTokensSupportingFeeOnTransferTokens(\\r\\n\\t\\t\\tuint amountOutMin,\\r\\n\\t\\t\\taddress[] calldata path,\\r\\n\\t\\t\\taddress to,\\r\\n\\t\\t\\tuint deadline\\r\\n\\t\\t) external payable;\\r\\n\\t\\tfunction swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n\\t\\t\\tuint amountIn,\\r\\n\\t\\t\\tuint amountOutMin,\\r\\n\\t\\t\\taddress[] calldata path,\\r\\n\\t\\t\\taddress to,\\r\\n\\t\\t\\tuint deadline\\r\\n\\t\\t) external;\\r\\n}\",\"keccak256\":\"0x1d6452e3cdc4843d3e1b53f71f7e48d06c8f3c3437529e3f173abda567cbbc80\",\"license\":\"UNLICENSED\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}},"IDexPair":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"sender","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount0","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"amount1","type":"uint256"},{"indexed":true,"internalType":"address","name":"to","type":"address"}],"name":"Burn","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"sender","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount0","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"amount1","type":"uint256"}],"name":"Mint","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"sender","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount0In","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"amount1In","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"amount0Out","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"amount1Out","type":"uint256"},{"indexed":true,"internalType":"address","name":"to","type":"address"}],"name":"Swap","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint112","name":"reserve0","type":"uint112"},{"indexed":false,"internalType":"uint112","name":"reserve1","type":"uint112"}],"name":"Sync","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[],"name":"DOMAIN_SEPARATOR","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"MINIMUM_LIQUIDITY","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"pure","type":"function"},{"inputs":[],"name":"PERMIT_TYPEHASH","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"}],"name":"burn","outputs":[{"internalType":"uint256","name":"amount0","type":"uint256"},{"internalType":"uint256","name":"amount1","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"decimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"pure","type":"function"},{"inputs":[],"name":"factory","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getReserves","outputs":[{"internalType":"uint112","name":"reserve0","type":"uint112"},{"internalType":"uint112","name":"reserve1","type":"uint112"},{"internalType":"uint32","name":"blockTimestampLast","type":"uint32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"address","name":"","type":"address"}],"name":"initialize","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"kLast","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"}],"name":"mint","outputs":[{"internalType":"uint256","name":"liquidity","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"nonces","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"uint256","name":"deadline","type":"uint256"},{"internalType":"uint8","name":"v","type":"uint8"},{"internalType":"bytes32","name":"r","type":"bytes32"},{"internalType":"bytes32","name":"s","type":"bytes32"}],"name":"permit","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"price0CumulativeLast","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"price1CumulativeLast","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"}],"name":"skim","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"amount0Out","type":"uint256"},{"internalType":"uint256","name":"amount1Out","type":"uint256"},{"internalType":"address","name":"to","type":"address"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"swap","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"pure","type":"function"},{"inputs":[],"name":"sync","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"token0","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"token1","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"DOMAIN_SEPARATOR()":"3644e515","MINIMUM_LIQUIDITY()":"ba9a7a56","PERMIT_TYPEHASH()":"30adf81f","allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","burn(address)":"89afcb44","decimals()":"313ce567","factory()":"c45a0155","getReserves()":"0902f1ac","initialize(address,address)":"485cc955","kLast()":"7464fc3d","mint(address)":"6a627842","name()":"06fdde03","nonces(address)":"7ecebe00","permit(address,address,uint256,uint256,uint8,bytes32,bytes32)":"d505accf","price0CumulativeLast()":"5909c0d5","price1CumulativeLast()":"5a3d5493","skim(address)":"bc25cf77","swap(uint256,uint256,address,bytes)":"022c0d9f","symbol()":"95d89b41","sync()":"fff6cae9","token0()":"0dfe1681","token1()":"d21220a7","totalSupply()":"18160ddd","transfer(address,uint256)":"a9059cbb","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0In\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1In\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0Out\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1Out\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"Swap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint112\",\"name\":\"reserve0\",\"type\":\"uint112\"},{\"indexed\":false,\"internalType\":\"uint112\",\"name\":\"reserve1\",\"type\":\"uint112\"}],\"name\":\"Sync\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINIMUM_LIQUIDITY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERMIT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReserves\",\"outputs\":[{\"internalType\":\"uint112\",\"name\":\"reserve0\",\"type\":\"uint112\"},{\"internalType\":\"uint112\",\"name\":\"reserve1\",\"type\":\"uint112\"},{\"internalType\":\"uint32\",\"name\":\"blockTimestampLast\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"kLast\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price0CumulativeLast\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price1CumulativeLast\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"skim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount0Out\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1Out\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"swap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sync\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token0\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token1\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/IExchange_latest.sol\":\"IDexPair\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/IExchange_latest.sol\":{\"content\":\"\\r\\n//SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\ninterface IDexFactory {\\r\\n\\t\\tevent PairCreated(address indexed token0, address indexed token1, address pair, uint);\\r\\n\\r\\n\\t\\tfunction feeTo() external view returns (address);\\r\\n\\t\\tfunction feeToSetter() external view returns (address);\\r\\n\\r\\n\\t\\tfunction getPair(address tokenA, address tokenB) external view returns (address pair);\\r\\n\\t\\tfunction allPairs(uint) external view returns (address pair);\\r\\n\\t\\tfunction allPairsLength() external view returns (uint);\\r\\n\\r\\n\\t\\tfunction createPair(address tokenA, address tokenB) external returns (address pair);\\r\\n\\r\\n\\t\\tfunction setFeeTo(address) external;\\r\\n\\t\\tfunction setFeeToSetter(address) external;\\r\\n}\\r\\n\\r\\ninterface IDexPair {\\r\\n\\t\\tevent Approval(address indexed owner, address indexed spender, uint value);\\r\\n\\t\\tevent Transfer(address indexed from, address indexed to, uint value);\\r\\n\\r\\n\\t\\tfunction name() external pure returns (string memory);\\r\\n\\t\\tfunction symbol() external pure returns (string memory);\\r\\n\\t\\tfunction decimals() external pure returns (uint8);\\r\\n\\t\\tfunction totalSupply() external view returns (uint);\\r\\n\\t\\tfunction balanceOf(address owner) external view returns (uint);\\r\\n\\t\\tfunction allowance(address owner, address spender) external view returns (uint);\\r\\n\\r\\n\\t\\tfunction approve(address spender, uint value) external returns (bool);\\r\\n\\t\\tfunction transfer(address to, uint value) external returns (bool);\\r\\n\\t\\tfunction transferFrom(address from, address to, uint value) external returns (bool);\\r\\n\\r\\n\\t\\tfunction DOMAIN_SEPARATOR() external view returns (bytes32);\\r\\n\\t\\tfunction PERMIT_TYPEHASH() external pure returns (bytes32);\\r\\n\\t\\tfunction nonces(address owner) external view returns (uint);\\r\\n\\r\\n\\t\\tfunction permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\r\\n\\r\\n\\t\\tevent Mint(address indexed sender, uint amount0, uint amount1);\\r\\n\\t\\tevent Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\r\\n\\t\\tevent Swap(\\r\\n\\t\\t\\t\\taddress indexed sender,\\r\\n\\t\\t\\t\\tuint amount0In,\\r\\n\\t\\t\\t\\tuint amount1In,\\r\\n\\t\\t\\t\\tuint amount0Out,\\r\\n\\t\\t\\t\\tuint amount1Out,\\r\\n\\t\\t\\t\\taddress indexed to\\r\\n\\t\\t);\\r\\n\\t\\tevent Sync(uint112 reserve0, uint112 reserve1);\\r\\n\\r\\n\\t\\tfunction MINIMUM_LIQUIDITY() external pure returns (uint);\\r\\n\\t\\tfunction factory() external view returns (address);\\r\\n\\t\\tfunction token0() external view returns (address);\\r\\n\\t\\tfunction token1() external view returns (address);\\r\\n\\t\\tfunction getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\r\\n\\t\\tfunction price0CumulativeLast() external view returns (uint);\\r\\n\\t\\tfunction price1CumulativeLast() external view returns (uint);\\r\\n\\t\\tfunction kLast() external view returns (uint);\\r\\n\\r\\n\\t\\tfunction mint(address to) external returns (uint liquidity);\\r\\n\\t\\tfunction burn(address to) external returns (uint amount0, uint amount1);\\r\\n\\t\\tfunction swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\r\\n\\t\\tfunction skim(address to) external;\\r\\n\\t\\tfunction sync() external;\\r\\n\\r\\n\\t\\tfunction initialize(address, address) external;\\r\\n}\\r\\n\\r\\ninterface IDexRouter{\\r\\n\\t\\tfunction factory() external pure returns (address);\\r\\n\\t\\tfunction WETH() external pure returns (address);\\r\\n\\r\\n\\t\\tfunction addLiquidity(\\r\\n\\t\\t\\t\\taddress tokenA,\\r\\n\\t\\t\\t\\taddress tokenB,\\r\\n\\t\\t\\t\\tuint amountADesired,\\r\\n\\t\\t\\t\\tuint amountBDesired,\\r\\n\\t\\t\\t\\tuint amountAMin,\\r\\n\\t\\t\\t\\tuint amountBMin,\\r\\n\\t\\t\\t\\taddress to,\\r\\n\\t\\t\\t\\tuint deadline\\r\\n\\t\\t) external returns (uint amountA, uint amountB, uint liquidity);\\r\\n\\t\\tfunction addLiquidityETH(\\r\\n\\t\\t\\t\\taddress token,\\r\\n\\t\\t\\t\\tuint amountTokenDesired,\\r\\n\\t\\t\\t\\tuint amountTokenMin,\\r\\n\\t\\t\\t\\tuint amountETHMin,\\r\\n\\t\\t\\t\\taddress to,\\r\\n\\t\\t\\t\\tuint deadline\\r\\n\\t\\t) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\r\\n\\t\\tfunction removeLiquidity(\\r\\n\\t\\t\\t\\taddress tokenA,\\r\\n\\t\\t\\t\\taddress tokenB,\\r\\n\\t\\t\\t\\tuint liquidity,\\r\\n\\t\\t\\t\\tuint amountAMin,\\r\\n\\t\\t\\t\\tuint amountBMin,\\r\\n\\t\\t\\t\\taddress to,\\r\\n\\t\\t\\t\\tuint deadline\\r\\n\\t\\t) external returns (uint amountA, uint amountB);\\r\\n\\t\\tfunction removeLiquidityETH(\\r\\n\\t\\t\\t\\taddress token,\\r\\n\\t\\t\\t\\tuint liquidity,\\r\\n\\t\\t\\t\\tuint amountTokenMin,\\r\\n\\t\\t\\t\\tuint amountETHMin,\\r\\n\\t\\t\\t\\taddress to,\\r\\n\\t\\t\\t\\tuint deadline\\r\\n\\t\\t) external returns (uint amountToken, uint amountETH);\\r\\n\\t\\tfunction removeLiquidityWithPermit(\\r\\n\\t\\t\\t\\taddress tokenA,\\r\\n\\t\\t\\t\\taddress tokenB,\\r\\n\\t\\t\\t\\tuint liquidity,\\r\\n\\t\\t\\t\\tuint amountAMin,\\r\\n\\t\\t\\t\\tuint amountBMin,\\r\\n\\t\\t\\t\\taddress to,\\r\\n\\t\\t\\t\\tuint deadline,\\r\\n\\t\\t\\t\\tbool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n\\t\\t) external returns (uint amountA, uint amountB);\\r\\n\\t\\tfunction removeLiquidityETHWithPermit(\\r\\n\\t\\t\\t\\taddress token,\\r\\n\\t\\t\\t\\tuint liquidity,\\r\\n\\t\\t\\t\\tuint amountTokenMin,\\r\\n\\t\\t\\t\\tuint amountETHMin,\\r\\n\\t\\t\\t\\taddress to,\\r\\n\\t\\t\\t\\tuint deadline,\\r\\n\\t\\t\\t\\tbool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n\\t\\t) external returns (uint amountToken, uint amountETH);\\r\\n\\t\\tfunction swapExactTokensForTokens(\\r\\n\\t\\t\\t\\tuint amountIn,\\r\\n\\t\\t\\t\\tuint amountOutMin,\\r\\n\\t\\t\\t\\taddress[] calldata path,\\r\\n\\t\\t\\t\\taddress to,\\r\\n\\t\\t\\t\\tuint deadline\\r\\n\\t\\t) external returns (uint[] memory amounts);\\r\\n\\t\\tfunction swapTokensForExactTokens(\\r\\n\\t\\t\\t\\tuint amountOut,\\r\\n\\t\\t\\t\\tuint amountInMax,\\r\\n\\t\\t\\t\\taddress[] calldata path,\\r\\n\\t\\t\\t\\taddress to,\\r\\n\\t\\t\\t\\tuint deadline\\r\\n\\t\\t) external returns (uint[] memory amounts);\\r\\n\\t\\tfunction swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\r\\n\\t\\t\\t\\texternal\\r\\n\\t\\t\\t\\tpayable\\r\\n\\t\\t\\t\\treturns (uint[] memory amounts);\\r\\n\\t\\tfunction swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\r\\n\\t\\t\\t\\texternal\\r\\n\\t\\t\\t\\treturns (uint[] memory amounts);\\r\\n\\t\\tfunction swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\r\\n\\t\\t\\t\\texternal\\r\\n\\t\\t\\t\\treturns (uint[] memory amounts);\\r\\n\\t\\tfunction swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\r\\n\\t\\t\\t\\texternal\\r\\n\\t\\t\\t\\tpayable\\r\\n\\t\\t\\t\\treturns (uint[] memory amounts);\\r\\n\\r\\n\\t\\tfunction quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\r\\n\\t\\tfunction getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\r\\n\\t\\tfunction getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\r\\n\\t\\tfunction getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\r\\n\\t\\tfunction getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\r\\n\\t\\tfunction removeLiquidityETHSupportingFeeOnTransferTokens(\\r\\n\\t\\t\\taddress token,\\r\\n\\t\\t\\tuint liquidity,\\r\\n\\t\\t\\tuint amountTokenMin,\\r\\n\\t\\t\\tuint amountETHMin,\\r\\n\\t\\t\\taddress to,\\r\\n\\t\\t\\tuint deadline\\r\\n\\t\\t) external returns (uint amountETH);\\r\\n\\t\\tfunction removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\r\\n\\t\\t\\taddress token,\\r\\n\\t\\t\\tuint liquidity,\\r\\n\\t\\t\\tuint amountTokenMin,\\r\\n\\t\\t\\tuint amountETHMin,\\r\\n\\t\\t\\taddress to,\\r\\n\\t\\t\\tuint deadline,\\r\\n\\t\\t\\tbool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n\\t\\t) external returns (uint amountETH);\\r\\n\\t\\r\\n\\t\\tfunction swapExactTokensForTokensSupportingFeeOnTransferTokens(\\r\\n\\t\\t\\tuint amountIn,\\r\\n\\t\\t\\tuint amountOutMin,\\r\\n\\t\\t\\taddress[] calldata path,\\r\\n\\t\\t\\taddress to,\\r\\n\\t\\t\\tuint deadline\\r\\n\\t\\t) external;\\r\\n\\t\\tfunction swapExactETHForTokensSupportingFeeOnTransferTokens(\\r\\n\\t\\t\\tuint amountOutMin,\\r\\n\\t\\t\\taddress[] calldata path,\\r\\n\\t\\t\\taddress to,\\r\\n\\t\\t\\tuint deadline\\r\\n\\t\\t) external payable;\\r\\n\\t\\tfunction swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n\\t\\t\\tuint amountIn,\\r\\n\\t\\t\\tuint amountOutMin,\\r\\n\\t\\t\\taddress[] calldata path,\\r\\n\\t\\t\\taddress to,\\r\\n\\t\\t\\tuint deadline\\r\\n\\t\\t) external;\\r\\n}\",\"keccak256\":\"0x1d6452e3cdc4843d3e1b53f71f7e48d06c8f3c3437529e3f173abda567cbbc80\",\"license\":\"UNLICENSED\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}},"IDexRouter":{"abi":[{"inputs":[],"name":"WETH","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"address","name":"tokenA","type":"address"},{"internalType":"address","name":"tokenB","type":"address"},{"internalType":"uint256","name":"amountADesired","type":"uint256"},{"internalType":"uint256","name":"amountBDesired","type":"uint256"},{"internalType":"uint256","name":"amountAMin","type":"uint256"},{"internalType":"uint256","name":"amountBMin","type":"uint256"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"deadline","type":"uint256"}],"name":"addLiquidity","outputs":[{"internalType":"uint256","name":"amountA","type":"uint256"},{"internalType":"uint256","name":"amountB","type":"uint256"},{"internalType":"uint256","name":"liquidity","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"token","type":"address"},{"internalType":"uint256","name":"amountTokenDesired","type":"uint256"},{"internalType":"uint256","name":"amountTokenMin","type":"uint256"},{"internalType":"uint256","name":"amountETHMin","type":"uint256"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"deadline","type":"uint256"}],"name":"addLiquidityETH","outputs":[{"internalType":"uint256","name":"amountToken","type":"uint256"},{"internalType":"uint256","name":"amountETH","type":"uint256"},{"internalType":"uint256","name":"liquidity","type":"uint256"}],"stateMutability":"payable","type":"function"},{"inputs":[],"name":"factory","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"uint256","name":"amountOut","type":"uint256"},{"internalType":"uint256","name":"reserveIn","type":"uint256"},{"internalType":"uint256","name":"reserveOut","type":"uint256"}],"name":"getAmountIn","outputs":[{"internalType":"uint256","name":"amountIn","type":"uint256"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"uint256","name":"amountIn","type":"uint256"},{"internalType":"uint256","name":"reserveIn","type":"uint256"},{"internalType":"uint256","name":"reserveOut","type":"uint256"}],"name":"getAmountOut","outputs":[{"internalType":"uint256","name":"amountOut","type":"uint256"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"uint256","name":"amountOut","type":"uint256"},{"internalType":"address[]","name":"path","type":"address[]"}],"name":"getAmountsIn","outputs":[{"internalType":"uint256[]","name":"amounts","type":"uint256[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"amountIn","type":"uint256"},{"internalType":"address[]","name":"path","type":"address[]"}],"name":"getAmountsOut","outputs":[{"internalType":"uint256[]","name":"amounts","type":"uint256[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"amountA","type":"uint256"},{"internalType":"uint256","name":"reserveA","type":"uint256"},{"internalType":"uint256","name":"reserveB","type":"uint256"}],"name":"quote","outputs":[{"internalType":"uint256","name":"amountB","type":"uint256"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"address","name":"tokenA","type":"address"},{"internalType":"address","name":"tokenB","type":"address"},{"internalType":"uint256","name":"liquidity","type":"uint256"},{"internalType":"uint256","name":"amountAMin","type":"uint256"},{"internalType":"uint256","name":"amountBMin","type":"uint256"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"deadline","type":"uint256"}],"name":"removeLiquidity","outputs":[{"internalType":"uint256","name":"amountA","type":"uint256"},{"internalType":"uint256","name":"amountB","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"token","type":"address"},{"internalType":"uint256","name":"liquidity","type":"uint256"},{"internalType":"uint256","name":"amountTokenMin","type":"uint256"},{"internalType":"uint256","name":"amountETHMin","type":"uint256"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"deadline","type":"uint256"}],"name":"removeLiquidityETH","outputs":[{"internalType":"uint256","name":"amountToken","type":"uint256"},{"internalType":"uint256","name":"amountETH","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"token","type":"address"},{"internalType":"uint256","name":"liquidity","type":"uint256"},{"internalType":"uint256","name":"amountTokenMin","type":"uint256"},{"internalType":"uint256","name":"amountETHMin","type":"uint256"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"deadline","type":"uint256"}],"name":"removeLiquidityETHSupportingFeeOnTransferTokens","outputs":[{"internalType":"uint256","name":"amountETH","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"token","type":"address"},{"internalType":"uint256","name":"liquidity","type":"uint256"},{"internalType":"uint256","name":"amountTokenMin","type":"uint256"},{"internalType":"uint256","name":"amountETHMin","type":"uint256"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"deadline","type":"uint256"},{"internalType":"bool","name":"approveMax","type":"bool"},{"internalType":"uint8","name":"v","type":"uint8"},{"internalType":"bytes32","name":"r","type":"bytes32"},{"internalType":"bytes32","name":"s","type":"bytes32"}],"name":"removeLiquidityETHWithPermit","outputs":[{"internalType":"uint256","name":"amountToken","type":"uint256"},{"internalType":"uint256","name":"amountETH","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"token","type":"address"},{"internalType":"uint256","name":"liquidity","type":"uint256"},{"internalType":"uint256","name":"amountTokenMin","type":"uint256"},{"internalType":"uint256","name":"amountETHMin","type":"uint256"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"deadline","type":"uint256"},{"internalType":"bool","name":"approveMax","type":"bool"},{"internalType":"uint8","name":"v","type":"uint8"},{"internalType":"bytes32","name":"r","type":"bytes32"},{"internalType":"bytes32","name":"s","type":"bytes32"}],"name":"removeLiquidityETHWithPermitSupportingFeeOnTransferTokens","outputs":[{"internalType":"uint256","name":"amountETH","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"tokenA","type":"address"},{"internalType":"address","name":"tokenB","type":"address"},{"internalType":"uint256","name":"liquidity","type":"uint256"},{"internalType":"uint256","name":"amountAMin","type":"uint256"},{"internalType":"uint256","name":"amountBMin","type":"uint256"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"deadline","type":"uint256"},{"internalType":"bool","name":"approveMax","type":"bool"},{"internalType":"uint8","name":"v","type":"uint8"},{"internalType":"bytes32","name":"r","type":"bytes32"},{"internalType":"bytes32","name":"s","type":"bytes32"}],"name":"removeLiquidityWithPermit","outputs":[{"internalType":"uint256","name":"amountA","type":"uint256"},{"internalType":"uint256","name":"amountB","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"amountOut","type":"uint256"},{"internalType":"address[]","name":"path","type":"address[]"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"deadline","type":"uint256"}],"name":"swapETHForExactTokens","outputs":[{"internalType":"uint256[]","name":"amounts","type":"uint256[]"}],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"uint256","name":"amountOutMin","type":"uint256"},{"internalType":"address[]","name":"path","type":"address[]"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"deadline","type":"uint256"}],"name":"swapExactETHForTokens","outputs":[{"internalType":"uint256[]","name":"amounts","type":"uint256[]"}],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"uint256","name":"amountOutMin","type":"uint256"},{"internalType":"address[]","name":"path","type":"address[]"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"deadline","type":"uint256"}],"name":"swapExactETHForTokensSupportingFeeOnTransferTokens","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"uint256","name":"amountIn","type":"uint256"},{"internalType":"uint256","name":"amountOutMin","type":"uint256"},{"internalType":"address[]","name":"path","type":"address[]"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"deadline","type":"uint256"}],"name":"swapExactTokensForETH","outputs":[{"internalType":"uint256[]","name":"amounts","type":"uint256[]"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"amountIn","type":"uint256"},{"internalType":"uint256","name":"amountOutMin","type":"uint256"},{"internalType":"address[]","name":"path","type":"address[]"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"deadline","type":"uint256"}],"name":"swapExactTokensForETHSupportingFeeOnTransferTokens","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"amountIn","type":"uint256"},{"internalType":"uint256","name":"amountOutMin","type":"uint256"},{"internalType":"address[]","name":"path","type":"address[]"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"deadline","type":"uint256"}],"name":"swapExactTokensForTokens","outputs":[{"internalType":"uint256[]","name":"amounts","type":"uint256[]"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"amountIn","type":"uint256"},{"internalType":"uint256","name":"amountOutMin","type":"uint256"},{"internalType":"address[]","name":"path","type":"address[]"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"deadline","type":"uint256"}],"name":"swapExactTokensForTokensSupportingFeeOnTransferTokens","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"amountOut","type":"uint256"},{"internalType":"uint256","name":"amountInMax","type":"uint256"},{"internalType":"address[]","name":"path","type":"address[]"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"deadline","type":"uint256"}],"name":"swapTokensForExactETH","outputs":[{"internalType":"uint256[]","name":"amounts","type":"uint256[]"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"amountOut","type":"uint256"},{"internalType":"uint256","name":"amountInMax","type":"uint256"},{"internalType":"address[]","name":"path","type":"address[]"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"deadline","type":"uint256"}],"name":"swapTokensForExactTokens","outputs":[{"internalType":"uint256[]","name":"amounts","type":"uint256[]"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"WETH()":"ad5c4648","addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)":"e8e33700","addLiquidityETH(address,uint256,uint256,uint256,address,uint256)":"f305d719","factory()":"c45a0155","getAmountIn(uint256,uint256,uint256)":"85f8c259","getAmountOut(uint256,uint256,uint256)":"054d50d4","getAmountsIn(uint256,address[])":"1f00ca74","getAmountsOut(uint256,address[])":"d06ca61f","quote(uint256,uint256,uint256)":"ad615dec","removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)":"baa2abde","removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)":"02751cec","removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)":"af2979eb","removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)":"ded9382a","removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)":"5b0d5984","removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)":"2195995c","swapETHForExactTokens(uint256,address[],address,uint256)":"fb3bdb41","swapExactETHForTokens(uint256,address[],address,uint256)":"7ff36ab5","swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)":"b6f9de95","swapExactTokensForETH(uint256,uint256,address[],address,uint256)":"18cbafe5","swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)":"791ac947","swapExactTokensForTokens(uint256,uint256,address[],address,uint256)":"38ed1739","swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)":"5c11d795","swapTokensForExactETH(uint256,uint256,address[],address,uint256)":"4a25d94a","swapTokensForExactTokens(uint256,uint256,address[],address,uint256)":"8803dbee"}},"metadata":"{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountADesired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBDesired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountAMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"addLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountTokenDesired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountTokenMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountETHMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"addLiquidityETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountETH\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveOut\",\"type\":\"uint256\"}],\"name\":\"getAmountIn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveOut\",\"type\":\"uint256\"}],\"name\":\"getAmountOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"name\":\"getAmountsIn\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"name\":\"getAmountsOut\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveB\",\"type\":\"uint256\"}],\"name\":\"quote\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountAMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"removeLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountTokenMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountETHMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"removeLiquidityETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountETH\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountTokenMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountETHMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"removeLiquidityETHSupportingFeeOnTransferTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountETH\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountTokenMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountETHMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"approveMax\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"removeLiquidityETHWithPermit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountETH\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountTokenMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountETHMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"approveMax\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"removeLiquidityETHWithPermitSupportingFeeOnTransferTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountETH\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountAMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"approveMax\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"removeLiquidityWithPermit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapETHForExactTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactETHForTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactETHForTokensSupportingFeeOnTransferTokens\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactTokensForETH\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactTokensForETHSupportingFeeOnTransferTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactTokensForTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactTokensForTokensSupportingFeeOnTransferTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInMax\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapTokensForExactETH\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInMax\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapTokensForExactTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/IExchange_latest.sol\":\"IDexRouter\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/IExchange_latest.sol\":{\"content\":\"\\r\\n//SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\ninterface IDexFactory {\\r\\n\\t\\tevent PairCreated(address indexed token0, address indexed token1, address pair, uint);\\r\\n\\r\\n\\t\\tfunction feeTo() external view returns (address);\\r\\n\\t\\tfunction feeToSetter() external view returns (address);\\r\\n\\r\\n\\t\\tfunction getPair(address tokenA, address tokenB) external view returns (address pair);\\r\\n\\t\\tfunction allPairs(uint) external view returns (address pair);\\r\\n\\t\\tfunction allPairsLength() external view returns (uint);\\r\\n\\r\\n\\t\\tfunction createPair(address tokenA, address tokenB) external returns (address pair);\\r\\n\\r\\n\\t\\tfunction setFeeTo(address) external;\\r\\n\\t\\tfunction setFeeToSetter(address) external;\\r\\n}\\r\\n\\r\\ninterface IDexPair {\\r\\n\\t\\tevent Approval(address indexed owner, address indexed spender, uint value);\\r\\n\\t\\tevent Transfer(address indexed from, address indexed to, uint value);\\r\\n\\r\\n\\t\\tfunction name() external pure returns (string memory);\\r\\n\\t\\tfunction symbol() external pure returns (string memory);\\r\\n\\t\\tfunction decimals() external pure returns (uint8);\\r\\n\\t\\tfunction totalSupply() external view returns (uint);\\r\\n\\t\\tfunction balanceOf(address owner) external view returns (uint);\\r\\n\\t\\tfunction allowance(address owner, address spender) external view returns (uint);\\r\\n\\r\\n\\t\\tfunction approve(address spender, uint value) external returns (bool);\\r\\n\\t\\tfunction transfer(address to, uint value) external returns (bool);\\r\\n\\t\\tfunction transferFrom(address from, address to, uint value) external returns (bool);\\r\\n\\r\\n\\t\\tfunction DOMAIN_SEPARATOR() external view returns (bytes32);\\r\\n\\t\\tfunction PERMIT_TYPEHASH() external pure returns (bytes32);\\r\\n\\t\\tfunction nonces(address owner) external view returns (uint);\\r\\n\\r\\n\\t\\tfunction permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\r\\n\\r\\n\\t\\tevent Mint(address indexed sender, uint amount0, uint amount1);\\r\\n\\t\\tevent Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\r\\n\\t\\tevent Swap(\\r\\n\\t\\t\\t\\taddress indexed sender,\\r\\n\\t\\t\\t\\tuint amount0In,\\r\\n\\t\\t\\t\\tuint amount1In,\\r\\n\\t\\t\\t\\tuint amount0Out,\\r\\n\\t\\t\\t\\tuint amount1Out,\\r\\n\\t\\t\\t\\taddress indexed to\\r\\n\\t\\t);\\r\\n\\t\\tevent Sync(uint112 reserve0, uint112 reserve1);\\r\\n\\r\\n\\t\\tfunction MINIMUM_LIQUIDITY() external pure returns (uint);\\r\\n\\t\\tfunction factory() external view returns (address);\\r\\n\\t\\tfunction token0() external view returns (address);\\r\\n\\t\\tfunction token1() external view returns (address);\\r\\n\\t\\tfunction getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\r\\n\\t\\tfunction price0CumulativeLast() external view returns (uint);\\r\\n\\t\\tfunction price1CumulativeLast() external view returns (uint);\\r\\n\\t\\tfunction kLast() external view returns (uint);\\r\\n\\r\\n\\t\\tfunction mint(address to) external returns (uint liquidity);\\r\\n\\t\\tfunction burn(address to) external returns (uint amount0, uint amount1);\\r\\n\\t\\tfunction swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\r\\n\\t\\tfunction skim(address to) external;\\r\\n\\t\\tfunction sync() external;\\r\\n\\r\\n\\t\\tfunction initialize(address, address) external;\\r\\n}\\r\\n\\r\\ninterface IDexRouter{\\r\\n\\t\\tfunction factory() external pure returns (address);\\r\\n\\t\\tfunction WETH() external pure returns (address);\\r\\n\\r\\n\\t\\tfunction addLiquidity(\\r\\n\\t\\t\\t\\taddress tokenA,\\r\\n\\t\\t\\t\\taddress tokenB,\\r\\n\\t\\t\\t\\tuint amountADesired,\\r\\n\\t\\t\\t\\tuint amountBDesired,\\r\\n\\t\\t\\t\\tuint amountAMin,\\r\\n\\t\\t\\t\\tuint amountBMin,\\r\\n\\t\\t\\t\\taddress to,\\r\\n\\t\\t\\t\\tuint deadline\\r\\n\\t\\t) external returns (uint amountA, uint amountB, uint liquidity);\\r\\n\\t\\tfunction addLiquidityETH(\\r\\n\\t\\t\\t\\taddress token,\\r\\n\\t\\t\\t\\tuint amountTokenDesired,\\r\\n\\t\\t\\t\\tuint amountTokenMin,\\r\\n\\t\\t\\t\\tuint amountETHMin,\\r\\n\\t\\t\\t\\taddress to,\\r\\n\\t\\t\\t\\tuint deadline\\r\\n\\t\\t) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\r\\n\\t\\tfunction removeLiquidity(\\r\\n\\t\\t\\t\\taddress tokenA,\\r\\n\\t\\t\\t\\taddress tokenB,\\r\\n\\t\\t\\t\\tuint liquidity,\\r\\n\\t\\t\\t\\tuint amountAMin,\\r\\n\\t\\t\\t\\tuint amountBMin,\\r\\n\\t\\t\\t\\taddress to,\\r\\n\\t\\t\\t\\tuint deadline\\r\\n\\t\\t) external returns (uint amountA, uint amountB);\\r\\n\\t\\tfunction removeLiquidityETH(\\r\\n\\t\\t\\t\\taddress token,\\r\\n\\t\\t\\t\\tuint liquidity,\\r\\n\\t\\t\\t\\tuint amountTokenMin,\\r\\n\\t\\t\\t\\tuint amountETHMin,\\r\\n\\t\\t\\t\\taddress to,\\r\\n\\t\\t\\t\\tuint deadline\\r\\n\\t\\t) external returns (uint amountToken, uint amountETH);\\r\\n\\t\\tfunction removeLiquidityWithPermit(\\r\\n\\t\\t\\t\\taddress tokenA,\\r\\n\\t\\t\\t\\taddress tokenB,\\r\\n\\t\\t\\t\\tuint liquidity,\\r\\n\\t\\t\\t\\tuint amountAMin,\\r\\n\\t\\t\\t\\tuint amountBMin,\\r\\n\\t\\t\\t\\taddress to,\\r\\n\\t\\t\\t\\tuint deadline,\\r\\n\\t\\t\\t\\tbool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n\\t\\t) external returns (uint amountA, uint amountB);\\r\\n\\t\\tfunction removeLiquidityETHWithPermit(\\r\\n\\t\\t\\t\\taddress token,\\r\\n\\t\\t\\t\\tuint liquidity,\\r\\n\\t\\t\\t\\tuint amountTokenMin,\\r\\n\\t\\t\\t\\tuint amountETHMin,\\r\\n\\t\\t\\t\\taddress to,\\r\\n\\t\\t\\t\\tuint deadline,\\r\\n\\t\\t\\t\\tbool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n\\t\\t) external returns (uint amountToken, uint amountETH);\\r\\n\\t\\tfunction swapExactTokensForTokens(\\r\\n\\t\\t\\t\\tuint amountIn,\\r\\n\\t\\t\\t\\tuint amountOutMin,\\r\\n\\t\\t\\t\\taddress[] calldata path,\\r\\n\\t\\t\\t\\taddress to,\\r\\n\\t\\t\\t\\tuint deadline\\r\\n\\t\\t) external returns (uint[] memory amounts);\\r\\n\\t\\tfunction swapTokensForExactTokens(\\r\\n\\t\\t\\t\\tuint amountOut,\\r\\n\\t\\t\\t\\tuint amountInMax,\\r\\n\\t\\t\\t\\taddress[] calldata path,\\r\\n\\t\\t\\t\\taddress to,\\r\\n\\t\\t\\t\\tuint deadline\\r\\n\\t\\t) external returns (uint[] memory amounts);\\r\\n\\t\\tfunction swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\r\\n\\t\\t\\t\\texternal\\r\\n\\t\\t\\t\\tpayable\\r\\n\\t\\t\\t\\treturns (uint[] memory amounts);\\r\\n\\t\\tfunction swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\r\\n\\t\\t\\t\\texternal\\r\\n\\t\\t\\t\\treturns (uint[] memory amounts);\\r\\n\\t\\tfunction swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\r\\n\\t\\t\\t\\texternal\\r\\n\\t\\t\\t\\treturns (uint[] memory amounts);\\r\\n\\t\\tfunction swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\r\\n\\t\\t\\t\\texternal\\r\\n\\t\\t\\t\\tpayable\\r\\n\\t\\t\\t\\treturns (uint[] memory amounts);\\r\\n\\r\\n\\t\\tfunction quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\r\\n\\t\\tfunction getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\r\\n\\t\\tfunction getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\r\\n\\t\\tfunction getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\r\\n\\t\\tfunction getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\r\\n\\t\\tfunction removeLiquidityETHSupportingFeeOnTransferTokens(\\r\\n\\t\\t\\taddress token,\\r\\n\\t\\t\\tuint liquidity,\\r\\n\\t\\t\\tuint amountTokenMin,\\r\\n\\t\\t\\tuint amountETHMin,\\r\\n\\t\\t\\taddress to,\\r\\n\\t\\t\\tuint deadline\\r\\n\\t\\t) external returns (uint amountETH);\\r\\n\\t\\tfunction removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\r\\n\\t\\t\\taddress token,\\r\\n\\t\\t\\tuint liquidity,\\r\\n\\t\\t\\tuint amountTokenMin,\\r\\n\\t\\t\\tuint amountETHMin,\\r\\n\\t\\t\\taddress to,\\r\\n\\t\\t\\tuint deadline,\\r\\n\\t\\t\\tbool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n\\t\\t) external returns (uint amountETH);\\r\\n\\t\\r\\n\\t\\tfunction swapExactTokensForTokensSupportingFeeOnTransferTokens(\\r\\n\\t\\t\\tuint amountIn,\\r\\n\\t\\t\\tuint amountOutMin,\\r\\n\\t\\t\\taddress[] calldata path,\\r\\n\\t\\t\\taddress to,\\r\\n\\t\\t\\tuint deadline\\r\\n\\t\\t) external;\\r\\n\\t\\tfunction swapExactETHForTokensSupportingFeeOnTransferTokens(\\r\\n\\t\\t\\tuint amountOutMin,\\r\\n\\t\\t\\taddress[] calldata path,\\r\\n\\t\\t\\taddress to,\\r\\n\\t\\t\\tuint deadline\\r\\n\\t\\t) external payable;\\r\\n\\t\\tfunction swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n\\t\\t\\tuint amountIn,\\r\\n\\t\\t\\tuint amountOutMin,\\r\\n\\t\\t\\taddress[] calldata path,\\r\\n\\t\\t\\taddress to,\\r\\n\\t\\t\\tuint deadline\\r\\n\\t\\t) external;\\r\\n}\",\"keccak256\":\"0x1d6452e3cdc4843d3e1b53f71f7e48d06c8f3c3437529e3f173abda567cbbc80\",\"license\":\"UNLICENSED\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/swap.sol":{"Address":{"abi":[],"devdoc":{"details":"Collection of functions related to the address type","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220d766ea3defe59c883d5fb3bd9adf07c1e5e083192821173a1e0bd0dc39e1f61e64736f6c63430008040033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xD7 PUSH7 0xEA3DEFE59C883D 0x5F 0xB3 0xBD SWAP11 0xDF SMOD 0xC1 0xE5 0xE0 DUP4 NOT 0x28 0x21 OR GASPRICE 0x1E SIGNEXTEND 0xD0 0xDC CODECOPY 0xE1 0xF6 0x1E PUSH5 0x736F6C6343 STOP ADDMOD DIV STOP CALLER ","sourceMap":"13691:8738:1:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;13691:8738:1;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220d766ea3defe59c883d5fb3bd9adf07c1e5e083192821173a1e0bd0dc39e1f61e64736f6c63430008040033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xD7 PUSH7 0xEA3DEFE59C883D 0x5F 0xB3 0xBD SWAP11 0xDF SMOD 0xC1 0xE5 0xE0 DUP4 NOT 0x28 0x21 OR GASPRICE 0x1E SIGNEXTEND 0xD0 0xDC CODECOPY 0xE1 0xF6 0x1E PUSH5 0x736F6C6343 STOP ADDMOD DIV STOP CALLER ","sourceMap":"13691:8738:1:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"functionCall(address,bytes memory)":"infinite","functionCall(address,bytes memory,string memory)":"infinite","functionCallWithValue(address,bytes memory,uint256)":"infinite","functionCallWithValue(address,bytes memory,uint256,string memory)":"infinite","functionDelegateCall(address,bytes memory)":"infinite","functionDelegateCall(address,bytes memory,string memory)":"infinite","functionStaticCall(address,bytes memory)":"infinite","functionStaticCall(address,bytes memory,string memory)":"infinite","isContract(address)":"infinite","sendValue(address payable,uint256)":"infinite","verifyCallResult(bool,bytes memory,string memory)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Collection of functions related to the address type\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/swap.sol\":\"Address\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/swap.sol\":{\"content\":\"pragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\r\\n */\\r\\ninterface IERC20 {\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(\\r\\n        address indexed owner,\\r\\n        address indexed spender,\\r\\n        uint256 value\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address to, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(\\r\\n        address owner,\\r\\n        address spender\\r\\n    ) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender's allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller's\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n}\\r\\n\\r\\n// File @openzeppelin/contracts/utils/Context.sol@v4.6.0\\r\\n\\r\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Provides information about the current execution context, including the\\r\\n * sender of the transaction and its data. While these are generally available\\r\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\r\\n * manner, since when dealing with meta-transactions the account sending and\\r\\n * paying for execution may not be the actual sender (as far as an application\\r\\n * is concerned).\\r\\n *\\r\\n * This contract is only required for intermediate, library-like contracts.\\r\\n */\\r\\nabstract contract Context {\\r\\n    function _msgSender() internal view virtual returns (address) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view virtual returns (bytes calldata) {\\r\\n        return msg.data;\\r\\n    }\\r\\n}\\r\\n\\r\\n// File @openzeppelin/contracts/access/Ownable.sol@v4.6.0\\r\\n\\r\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Contract module which provides a basic access control mechanism, where\\r\\n * there is an account (an owner) that can be granted exclusive access to\\r\\n * specific functions.\\r\\n *\\r\\n * By default, the owner account will be the one that deploys the contract. This\\r\\n * can later be changed with {transferOwnership}.\\r\\n *\\r\\n * This module is used through inheritance. It will make available the modifier\\r\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\r\\n * the owner.\\r\\n */\\r\\nabstract contract Ownable is Context {\\r\\n    address private _owner;\\r\\n\\r\\n    event OwnershipTransferred(\\r\\n        address indexed previousOwner,\\r\\n        address indexed newOwner\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\r\\n     */\\r\\n    constructor() {\\r\\n        _transferOwnership(_msgSender());\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current owner.\\r\\n     */\\r\\n    function owner() public view virtual returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier onlyOwner() {\\r\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Leaves the contract without owner. It will not be possible to call\\r\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\r\\n     *\\r\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\r\\n     * thereby removing any functionality that is only available to the owner.\\r\\n     */\\r\\n    function renounceOwnership() public virtual onlyOwner {\\r\\n        _transferOwnership(address(0));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n        require(\\r\\n            newOwner != address(0),\\r\\n            \\\"Ownable: new owner is the zero address\\\"\\r\\n        );\\r\\n        _transferOwnership(newOwner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Internal function without access restriction.\\r\\n     */\\r\\n    function _transferOwnership(address newOwner) internal virtual {\\r\\n        address oldOwner = _owner;\\r\\n        _owner = newOwner;\\r\\n        emit OwnershipTransferred(oldOwner, newOwner);\\r\\n    }\\r\\n}\\r\\n\\r\\n// File @openzeppelin/contracts/utils/math/SafeMath.sol@v4.6.0\\r\\n\\r\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n// CAUTION\\r\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\r\\n// because it relies on the compiler's built in overflow checks.\\r\\n\\r\\n/**\\r\\n * @dev Wrappers over Solidity's arithmetic operations.\\r\\n *\\r\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\r\\n * now has built in overflow checking.\\r\\n */\\r\\nlibrary SafeMath {\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryAdd(\\r\\n        uint256 a,\\r\\n        uint256 b\\r\\n    ) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            uint256 c = a + b;\\r\\n            if (c < a) return (false, 0);\\r\\n            return (true, c);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function trySub(\\r\\n        uint256 a,\\r\\n        uint256 b\\r\\n    ) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            if (b > a) return (false, 0);\\r\\n            return (true, a - b);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryMul(\\r\\n        uint256 a,\\r\\n        uint256 b\\r\\n    ) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\r\\n            // benefit is lost if 'b' is also tested.\\r\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\r\\n            if (a == 0) return (true, 0);\\r\\n            uint256 c = a * b;\\r\\n            if (c / a != b) return (false, 0);\\r\\n            return (true, c);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryDiv(\\r\\n        uint256 a,\\r\\n        uint256 b\\r\\n    ) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            if (b == 0) return (false, 0);\\r\\n            return (true, a / b);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryMod(\\r\\n        uint256 a,\\r\\n        uint256 b\\r\\n    ) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            if (b == 0) return (false, 0);\\r\\n            return (true, a % b);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity's `+` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Addition cannot overflow.\\r\\n     */\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a + b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity's `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a - b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity's `*` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Multiplication cannot overflow.\\r\\n     */\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a * b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `/` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a / b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * reverting when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a % b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\r\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\r\\n     *\\r\\n     * Counterpart to Solidity's `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            require(b <= a, errorMessage);\\r\\n            return a - b;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            require(b > 0, errorMessage);\\r\\n            return a / b;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * reverting with custom message when dividing by zero.\\r\\n     *\\r\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\r\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\r\\n     *\\r\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            require(b > 0, errorMessage);\\r\\n            return a % b;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\n// File @openzeppelin/contracts/utils/Address.sol@v4.6.0\\r\\n\\r\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\r\\n\\r\\npragma solidity ^0.8.1;\\r\\n\\r\\n/**\\r\\n * @dev Collection of functions related to the address type\\r\\n */\\r\\nlibrary Address {\\r\\n    /**\\r\\n     * @dev Returns true if `account` is a contract.\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * It is unsafe to assume that an address for which this function returns\\r\\n     * false is an externally-owned account (EOA) and not a contract.\\r\\n     *\\r\\n     * Among others, `isContract` will return false for the following\\r\\n     * types of addresses:\\r\\n     *\\r\\n     *  - an externally-owned account\\r\\n     *  - a contract in construction\\r\\n     *  - an address where a contract will be created\\r\\n     *  - an address where a contract lived, but was destroyed\\r\\n     * ====\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\r\\n     *\\r\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\r\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\r\\n     * constructor.\\r\\n     * ====\\r\\n     */\\r\\n    function isContract(address account) internal view returns (bool) {\\r\\n        // This method relies on extcodesize/address.code.length, which returns 0\\r\\n        // for contracts in construction, since the code is only stored at the end\\r\\n        // of the constructor execution.\\r\\n\\r\\n        return account.code.length > 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\r\\n     * `recipient`, forwarding all available gas and reverting on errors.\\r\\n     *\\r\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\r\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\r\\n     * imposed by `transfer`, making them unable to receive funds via\\r\\n     * `transfer`. {sendValue} removes this limitation.\\r\\n     *\\r\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\r\\n     *\\r\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\r\\n     * taken to not create reentrancy vulnerabilities. Consider using\\r\\n     * {ReentrancyGuard} or the\\r\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\r\\n     */\\r\\n    function sendValue(address payable recipient, uint256 amount) internal {\\r\\n        require(\\r\\n            address(this).balance >= amount,\\r\\n            \\\"Address: insufficient balance\\\"\\r\\n        );\\r\\n\\r\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\r\\n        require(\\r\\n            success,\\r\\n            \\\"Address: unable to send value, recipient may have reverted\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Performs a Solidity function call using a low level `call`. A\\r\\n     * plain `call` is an unsafe replacement for a function call: use this\\r\\n     * function instead.\\r\\n     *\\r\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\r\\n     * function (like regular Solidity function calls).\\r\\n     *\\r\\n     * Returns the raw returned data. To convert to the expected return value,\\r\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `target` must be a contract.\\r\\n     * - calling `target` with `data` must not revert.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(\\r\\n        address target,\\r\\n        bytes memory data\\r\\n    ) internal returns (bytes memory) {\\r\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\r\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, 0, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but also transferring `value` wei to `target`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the calling contract must have an ETH balance of at least `value`.\\r\\n     * - the called Solidity function must be `payable`.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        uint256 value\\r\\n    ) internal returns (bytes memory) {\\r\\n        return\\r\\n            functionCallWithValue(\\r\\n                target,\\r\\n                data,\\r\\n                value,\\r\\n                \\\"Address: low-level call with value failed\\\"\\r\\n            );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\r\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        uint256 value,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        require(\\r\\n            address(this).balance >= value,\\r\\n            \\\"Address: insufficient balance for call\\\"\\r\\n        );\\r\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\r\\n\\r\\n        (bool success, bytes memory returndata) = target.call{value: value}(\\r\\n            data\\r\\n        );\\r\\n        return verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(\\r\\n        address target,\\r\\n        bytes memory data\\r\\n    ) internal view returns (bytes memory) {\\r\\n        return\\r\\n            functionStaticCall(\\r\\n                target,\\r\\n                data,\\r\\n                \\\"Address: low-level static call failed\\\"\\r\\n            );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal view returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\r\\n\\r\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\r\\n        return verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function functionDelegateCall(\\r\\n        address target,\\r\\n        bytes memory data\\r\\n    ) internal returns (bytes memory) {\\r\\n        return\\r\\n            functionDelegateCall(\\r\\n                target,\\r\\n                data,\\r\\n                \\\"Address: low-level delegate call failed\\\"\\r\\n            );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function functionDelegateCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\r\\n\\r\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\r\\n        return verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\r\\n     * revert reason using the provided one.\\r\\n     *\\r\\n     * _Available since v4.3._\\r\\n     */\\r\\n    function verifyCallResult(\\r\\n        bool success,\\r\\n        bytes memory returndata,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (bytes memory) {\\r\\n        if (success) {\\r\\n            return returndata;\\r\\n        } else {\\r\\n            // Look for revert reason and bubble it up if present\\r\\n            if (returndata.length > 0) {\\r\\n                // The easiest way to bubble the revert reason is using memory via assembly\\r\\n\\r\\n                assembly {\\r\\n                    let returndata_size := mload(returndata)\\r\\n                    revert(add(32, returndata), returndata_size)\\r\\n                }\\r\\n            } else {\\r\\n                revert(errorMessage);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\n// File @openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol@v4.6.0\\r\\n\\r\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @title SafeERC20\\r\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\r\\n * contract returns false). Tokens that return no value (and instead revert or\\r\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\r\\n * successful.\\r\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\r\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\r\\n */\\r\\nlibrary SafeERC20 {\\r\\n    using Address for address;\\r\\n\\r\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\r\\n        _callOptionalReturn(\\r\\n            token,\\r\\n            abi.encodeWithSelector(token.transfer.selector, to, value)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function safeTransferFrom(\\r\\n        IERC20 token,\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        _callOptionalReturn(\\r\\n            token,\\r\\n            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Deprecated. This function has issues similar to the ones found in\\r\\n     * {IERC20-approve}, and its usage is discouraged.\\r\\n     *\\r\\n     * Whenever possible, use {safeIncreaseAllowance} and\\r\\n     * {safeDecreaseAllowance} instead.\\r\\n     */\\r\\n    function safeApprove(\\r\\n        IERC20 token,\\r\\n        address spender,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        // safeApprove should only be called when setting an initial allowance,\\r\\n        // or when resetting it to zero. To increase and decrease it, use\\r\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\r\\n        require(\\r\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\r\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\r\\n        );\\r\\n        _callOptionalReturn(\\r\\n            token,\\r\\n            abi.encodeWithSelector(token.approve.selector, spender, value)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function safeIncreaseAllowance(\\r\\n        IERC20 token,\\r\\n        address spender,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\r\\n        _callOptionalReturn(\\r\\n            token,\\r\\n            abi.encodeWithSelector(\\r\\n                token.approve.selector,\\r\\n                spender,\\r\\n                newAllowance\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function safeDecreaseAllowance(\\r\\n        IERC20 token,\\r\\n        address spender,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        unchecked {\\r\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\r\\n            require(\\r\\n                oldAllowance >= value,\\r\\n                \\\"SafeERC20: decreased allowance below zero\\\"\\r\\n            );\\r\\n            uint256 newAllowance = oldAllowance - value;\\r\\n            _callOptionalReturn(\\r\\n                token,\\r\\n                abi.encodeWithSelector(\\r\\n                    token.approve.selector,\\r\\n                    spender,\\r\\n                    newAllowance\\r\\n                )\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\r\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\r\\n     * @param token The token targeted by the call.\\r\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\r\\n     */\\r\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\r\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\r\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\r\\n        // the target address contains contract code and also asserts for success in the low-level call.\\r\\n\\r\\n        bytes memory returndata = address(token).functionCall(\\r\\n            data,\\r\\n            \\\"SafeERC20: low-level call failed\\\"\\r\\n        );\\r\\n        if (returndata.length > 0) {\\r\\n            // Return data is optional\\r\\n            require(\\r\\n                abi.decode(returndata, (bool)),\\r\\n                \\\"SafeERC20: ERC20 operation did not succeed\\\"\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\n// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IRouter {\\r\\n    function swapExactTokensForTokens(\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256[] memory amounts);\\r\\n\\r\\n    function swapExactETHForTokens(\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external payable returns (uint256[] memory amounts);\\r\\n\\r\\n    function swapExactTokensForETH(\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256[] memory amounts);\\r\\n\\r\\n    function getAmountsOut(\\r\\n        uint256 amountIn,\\r\\n        address[] calldata path\\r\\n    ) external view returns (uint256[] memory amounts);\\r\\n}\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\n/// @title The interface for the PancakeSwap V3 Factory\\r\\n/// @notice The PancakeSwap V3 Factory facilitates creation of PancakeSwap V3 pools and control over the protocol fees\\r\\ninterface IPancakeV3Factory {\\r\\n    function getPool(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint24 fee\\r\\n    ) external view returns (address pool);\\r\\n}\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\ninterface IPancakeV3PoolState {\\r\\n    function slot0()\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            uint160 sqrtPriceX96,\\r\\n            int24 tick,\\r\\n            uint16 observationIndex,\\r\\n            uint16 observationCardinality,\\r\\n            uint16 observationCardinalityNext,\\r\\n            uint32 feeProtocol,\\r\\n            bool unlocked\\r\\n        );\\r\\n}\\r\\n\\r\\ninterface IPancakeV3PoolImmutables {\\r\\n    /// @notice The contract that deployed the pool, which must adhere to the IPancakeV3Factory interface\\r\\n    /// @return The contract address\\r\\n    function factory() external view returns (address);\\r\\n\\r\\n    /// @notice The first of the two tokens of the pool, sorted by address\\r\\n    /// @return The token contract address\\r\\n    function token0() external view returns (address);\\r\\n\\r\\n    /// @notice The second of the two tokens of the pool, sorted by address\\r\\n    /// @return The token contract address\\r\\n    function token1() external view returns (address);\\r\\n\\r\\n    /// @notice The pool's fee in hundredths of a bip, i.e. 1e-6\\r\\n    /// @return The fee\\r\\n    function fee() external view returns (uint24);\\r\\n\\r\\n    /// @notice The pool tick spacing\\r\\n    /// @dev Ticks can only be used at multiples of this value, minimum of 1 and always positive\\r\\n    /// e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ...\\r\\n    /// This value is an int24 to avoid casting even though it is always positive.\\r\\n    /// @return The tick spacing\\r\\n    function tickSpacing() external view returns (int24);\\r\\n\\r\\n    /// @notice The maximum amount of position liquidity that can use any tick in the range\\r\\n    /// @dev This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and\\r\\n    /// also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\\r\\n    /// @return The max amount of liquidity per tick\\r\\n    function maxLiquidityPerTick() external view returns (uint128);\\r\\n}\\r\\n\\r\\ninterface IPancakeV3Pool is IPancakeV3PoolState, IPancakeV3PoolImmutables {}\\r\\n\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\n/// @title Callback for IPancakeV3PoolActions#swap\\r\\n/// @notice Any contract that calls IPancakeV3PoolActions#swap must implement this interface\\r\\ninterface IPancakeV3SwapCallback {\\r\\n    /// @notice Called to `msg.sender` after executing a swap via IPancakeV3Pool#swap.\\r\\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\\r\\n    /// The caller of this method must be checked to be a PancakeV3Pool deployed by the canonical PancakeV3Factory.\\r\\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\\r\\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\\r\\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\\r\\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\\r\\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\\r\\n    /// @param data Any data passed through by the caller via the IPancakeV3PoolActions#swap call\\r\\n    function pancakeV3SwapCallback(\\r\\n        int256 amount0Delta,\\r\\n        int256 amount1Delta,\\r\\n        bytes calldata data\\r\\n    ) external;\\r\\n}\\r\\n\\r\\ninterface IV3SwapRouter is IPancakeV3SwapCallback {\\r\\n    struct ExactInputSingleParams {\\r\\n        address tokenIn;\\r\\n        address tokenOut;\\r\\n        uint24 fee;\\r\\n        address recipient;\\r\\n        uint256 amountIn;\\r\\n        uint256 amountOutMinimum;\\r\\n        uint160 sqrtPriceLimitX96;\\r\\n    }\\r\\n\\r\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\\r\\n    /// @dev Setting `amountIn` to 0 will cause the contract to look up its own balance,\\r\\n    /// and swap the entire amount, enabling contracts to send tokens before calling this function.\\r\\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\\r\\n    /// @return amountOut The amount of the received token\\r\\n    function exactInputSingle(\\r\\n        ExactInputSingleParams calldata params\\r\\n    ) external payable returns (uint256 amountOut);\\r\\n\\r\\n    struct ExactInputParams {\\r\\n        bytes path;\\r\\n        address recipient;\\r\\n        uint256 amountIn;\\r\\n        uint256 amountOutMinimum;\\r\\n    }\\r\\n\\r\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\\r\\n    /// @dev Setting `amountIn` to 0 will cause the contract to look up its own balance,\\r\\n    /// and swap the entire amount, enabling contracts to send tokens before calling this function.\\r\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\\r\\n    /// @return amountOut The amount of the received token\\r\\n    function exactInput(\\r\\n        ExactInputParams calldata params\\r\\n    ) external payable returns (uint256 amountOut);\\r\\n\\r\\n    struct ExactOutputSingleParams {\\r\\n        address tokenIn;\\r\\n        address tokenOut;\\r\\n        uint24 fee;\\r\\n        address recipient;\\r\\n        uint256 amountOut;\\r\\n        uint256 amountInMaximum;\\r\\n        uint160 sqrtPriceLimitX96;\\r\\n    }\\r\\n\\r\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\\r\\n    /// that may remain in the router after the swap.\\r\\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\\r\\n    /// @return amountIn The amount of the input token\\r\\n    function exactOutputSingle(\\r\\n        ExactOutputSingleParams calldata params\\r\\n    ) external payable returns (uint256 amountIn);\\r\\n\\r\\n    struct ExactOutputParams {\\r\\n        bytes path;\\r\\n        address recipient;\\r\\n        uint256 amountOut;\\r\\n        uint256 amountInMaximum;\\r\\n    }\\r\\n\\r\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\\r\\n    /// that may remain in the router after the swap.\\r\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\\r\\n    /// @return amountIn The amount of the input token\\r\\n    function exactOutput(\\r\\n        ExactOutputParams calldata params\\r\\n    ) external payable returns (uint256 amountIn);\\r\\n\\r\\n    function refundETH() external payable;\\r\\n}\\r\\n\\r\\ncontract Claimable is Ownable {\\r\\n    function claimToken(\\r\\n        address tokenAddress,\\r\\n        uint256 amount\\r\\n    ) external onlyOwner {\\r\\n        IERC20(tokenAddress).transfer(owner(), amount);\\r\\n    }\\r\\n\\r\\n    function claimETH(uint256 amount) external onlyOwner {\\r\\n        (bool sent, ) = owner().call{value: amount}(\\\"\\\");\\r\\n        require(sent, \\\"Failed to send Ether\\\");\\r\\n    }\\r\\n}\\r\\n\\r\\ncontract ProSwap is Claimable {\\r\\n    using SafeMath for uint256;\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    uint public feePercent = 0; //10:0.25%\\r\\n    uint256 public rewardAmount = 10000000000000000000; //10 to tokens\\r\\n\\r\\n    address public rewardAddress;\\r\\n    address public feeAccount;\\r\\n    address public router;\\r\\n    address public wavax;\\r\\n\\r\\n    address public routerAddress = 0x13f4EA83D0bd40E75C8222255bc855a974568Dd4;\\r\\n    address public factoryAddress = 0x0BFbCF9fa4f9C56B0F40a671Ad40E0805A091865;\\r\\n    address public wbnbAddress = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;\\r\\n    uint24 poolFee = 100;\\r\\n\\r\\n    mapping(address => uint256) airdropAddress;\\r\\n    mapping(address => uint256) airdropLastTime;\\r\\n\\r\\n    constructor(\\r\\n        address _feeAccount,\\r\\n        address _router,\\r\\n        address _wavax,\\r\\n        address _rewardAddress\\r\\n    ) {\\r\\n        feeAccount = _feeAccount;\\r\\n        router = _router;\\r\\n        wavax = _wavax;\\r\\n        rewardAddress = _rewardAddress;\\r\\n    }\\r\\n\\r\\n    function airdrop() external {\\r\\n        require(\\r\\n            airdropAddress[msg.sender] + 86400 > block.timestamp,\\r\\n            \\\"You did not swap in 24 hours\\\"\\r\\n        );\\r\\n\\r\\n        require(\\r\\n            block.timestamp > airdropLastTime[msg.sender] + 86400,\\r\\n            \\\"You airdroped in 24 hours\\\"\\r\\n        );\\r\\n\\r\\n        IERC20(rewardAddress).safeTransfer(msg.sender, rewardAmount);\\r\\n        airdropLastTime[msg.sender] = block.timestamp;\\r\\n    }\\r\\n\\r\\n    function swapV2Tokens(\\r\\n        address _tokenA,\\r\\n        address _tokenB,\\r\\n        uint256 _amountIn\\r\\n    ) external payable {\\r\\n        airdropAddress[msg.sender] = block.timestamp;\\r\\n        address[] memory path = new address[](2);\\r\\n        if (_tokenA == address(0)) {\\r\\n            path[0] = wavax;\\r\\n            path[1] = _tokenB;\\r\\n        } else if (_tokenB == address(0)) {\\r\\n            path[0] = _tokenA;\\r\\n            path[1] = wavax;\\r\\n        } else {\\r\\n            path[0] = _tokenA;\\r\\n            path[1] = _tokenB;\\r\\n        }\\r\\n\\r\\n        _proceedToUniswap(_tokenA, _tokenB, _amountIn, path);\\r\\n    }\\r\\n\\r\\n    function customSwapTokens(\\r\\n        address _tokenA,\\r\\n        address _tokenB,\\r\\n        uint256 _amountIn,\\r\\n        address[] memory path\\r\\n    ) external payable {\\r\\n        if (_tokenA == address(0)) {\\r\\n            require(\\r\\n                wavax == path[0] && _tokenB == path[path.length - 1],\\r\\n                \\\"PattieSwap: Path must be specified\\\"\\r\\n            );\\r\\n        } else if (_tokenB == address(0)) {\\r\\n            require(\\r\\n                _tokenA == path[0] && wavax == path[path.length - 1],\\r\\n                \\\"PattieSwap: Path must be specified\\\"\\r\\n            );\\r\\n        } else {\\r\\n            require(\\r\\n                _tokenA == path[0] && _tokenB == path[path.length - 1],\\r\\n                \\\"PattieSwap: Path must be specified\\\"\\r\\n            );\\r\\n        }\\r\\n        _proceedToUniswap(_tokenA, _tokenB, _amountIn, path);\\r\\n    }\\r\\n\\r\\n    function _proceedToUniswap(\\r\\n        address _tokenA,\\r\\n        address _tokenB,\\r\\n        uint256 _amountIn,\\r\\n        address[] memory path\\r\\n    ) internal {\\r\\n        require(_amountIn > 0, \\\"PattieSwap: amountIn must be greater than 0\\\");\\r\\n\\r\\n        if (_tokenA == address(0)) {\\r\\n            require(_amountIn >= msg.value, \\\"PattieSwap: Insufficient ETH\\\");\\r\\n            uint fee = (_amountIn * feePercent) / 10000;\\r\\n            payable(feeAccount).transfer(fee);\\r\\n            uint amountToSwap = _amountIn - fee;\\r\\n            _swapAVAXForTokens(amountToSwap, path);\\r\\n        } else {\\r\\n            IERC20(_tokenA).safeTransferFrom(\\r\\n                msg.sender,\\r\\n                address(this),\\r\\n                _amountIn\\r\\n            );\\r\\n            uint fee = (_amountIn * feePercent) / 10000;\\r\\n            IERC20(_tokenA).safeTransfer(feeAccount, fee);\\r\\n            uint amountToSwap = _amountIn - fee;\\r\\n            _approve(_tokenA, amountToSwap);\\r\\n            if (_tokenB == address(0)) {\\r\\n                _swapTokensForAVAX(amountToSwap, path);\\r\\n            } else {\\r\\n                _swapTokensForTokens(amountToSwap, path);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _approve(address _token, uint _amount) internal {\\r\\n        IERC20(_token).approve(address(router), _amount);\\r\\n    }\\r\\n\\r\\n    function _swapTokensForAVAX(uint _amount, address[] memory path) internal {\\r\\n        IRouter(router).swapExactTokensForETH(\\r\\n            _amount,\\r\\n            0,\\r\\n            path,\\r\\n            msg.sender,\\r\\n            block.timestamp\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function _swapAVAXForTokens(uint _amount, address[] memory path) internal {\\r\\n        IRouter(router).swapExactETHForTokens{value: _amount}(\\r\\n            0,\\r\\n            path,\\r\\n            msg.sender,\\r\\n            block.timestamp\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function _swapTokensForTokens(\\r\\n        uint _amount,\\r\\n        address[] memory path\\r\\n    ) internal {\\r\\n        IRouter(router).swapExactTokensForTokens(\\r\\n            _amount,\\r\\n            0,\\r\\n            path,\\r\\n            msg.sender,\\r\\n            block.timestamp\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function _v3Approve(address _token, uint _amount) internal {\\r\\n        IERC20(_token).approve(address(routerAddress), _amount);\\r\\n    }\\r\\n\\r\\n    function getOutputTokenAmount(\\r\\n        uint inputAmount,\\r\\n        address[] memory path\\r\\n    ) external view returns (uint outputAmount) {\\r\\n        uint[] memory outputs = IRouter(router).getAmountsOut(\\r\\n            inputAmount,\\r\\n            path\\r\\n        );\\r\\n        return outputs[outputs.length - 1];\\r\\n    }\\r\\n\\r\\n    function getV3OutputTokenAmount(\\r\\n        uint256 _inputAmount,\\r\\n        address _tokenIn,\\r\\n        address _tokenOut\\r\\n    ) external view returns (uint outputAmount) {\\r\\n        uint256 slotReturnValue = 0;\\r\\n        address pairAddress = IPancakeV3Factory(factoryAddress).getPool(\\r\\n            _tokenIn,\\r\\n            _tokenOut,\\r\\n            poolFee\\r\\n        );\\r\\n        (slotReturnValue, , , , , , ) = IPancakeV3PoolState(pairAddress)\\r\\n            .slot0();\\r\\n        address token0 = IPancakeV3Pool(pairAddress).token0();\\r\\n        if (_tokenIn == token0)\\r\\n            outputAmount = ((slotReturnValue ** 2 * _inputAmount) / 2 ** 192);\\r\\n        else outputAmount = ((2 ** 192 * _inputAmount) / slotReturnValue ** 2);\\r\\n    }\\r\\n\\r\\n    function setFeePercent(uint _feePercent) external onlyOwner {\\r\\n        feePercent = _feePercent;\\r\\n    }\\r\\n\\r\\n    function setRewardAmount(uint256 _amount) external onlyOwner {\\r\\n        rewardAmount = _amount;\\r\\n    }\\r\\n\\r\\n    function setRewardToken(address _rewawrdAddress) external onlyOwner {\\r\\n        rewardAddress = _rewawrdAddress;\\r\\n    }\\r\\n\\r\\n    function setFeeAccount(address _feeAccount) external onlyOwner {\\r\\n        feeAccount = _feeAccount;\\r\\n    }\\r\\n\\r\\n    function setRouterWAVAX(\\r\\n        address _router,\\r\\n        address _wavax\\r\\n    ) external onlyOwner {\\r\\n        router = _router;\\r\\n        wavax = _wavax;\\r\\n    }\\r\\n\\r\\n    function emergencyWithdraw(\\r\\n        address _token,\\r\\n        uint _amount\\r\\n    ) external onlyOwner {\\r\\n        IERC20(_token).safeTransfer(msg.sender, _amount);\\r\\n    }\\r\\n\\r\\n    function emergencyWithdrawETH(uint _amount) external onlyOwner {\\r\\n        payable(owner()).transfer(_amount);\\r\\n    }\\r\\n\\r\\n    function swapTokens(\\r\\n        address _tokenIn,\\r\\n        address _tokenOut,\\r\\n        uint256 _amountIn\\r\\n    ) external payable {\\r\\n        airdropAddress[msg.sender] = block.timestamp;\\r\\n        IV3SwapRouter.ExactInputSingleParams memory params = IV3SwapRouter\\r\\n            .ExactInputSingleParams(\\r\\n                _tokenIn,\\r\\n                _tokenOut,\\r\\n                poolFee,\\r\\n                msg.sender,\\r\\n                _amountIn,\\r\\n                0,\\r\\n                0\\r\\n            );\\r\\n        if (_tokenIn == wbnbAddress)\\r\\n            IV3SwapRouter(routerAddress).exactInputSingle{value: msg.value}(\\r\\n                params\\r\\n            );\\r\\n        else {\\r\\n            IERC20(_tokenIn).safeTransferFrom(\\r\\n                msg.sender,\\r\\n                address(this),\\r\\n                _amountIn\\r\\n            );\\r\\n            _v3Approve(_tokenIn, _amountIn);\\r\\n            IV3SwapRouter(routerAddress).exactInputSingle{value: msg.value}(\\r\\n                params\\r\\n            );\\r\\n        }\\r\\n        IV3SwapRouter(routerAddress).refundETH();\\r\\n        // refund leftover ETH to user\\r\\n        (bool success, ) = msg.sender.call{value: address(this).balance}(\\\"\\\");\\r\\n        require(success, \\\"refund failed\\\");\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x014ebbd50111dbe2ffd46bfee0dca5b1dbbc4785ff10cb323cef7317398427ea\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}},"Claimable":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"claimETH","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"tokenAddress","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"claimToken","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{"owner()":{"details":"Returns the address of the current owner."},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}},"version":1},"evm":{"bytecode":{"generatedSources":[],"linkReferences":{},"object":"608060405234801561001057600080fd5b5061001a3361001f565b61006f565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6104898061007e6000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c80631698755f1461005c578063715018a6146100715780638da5cb5b14610079578063f2fde38b14610098578063fe96973a146100ab575b600080fd5b61006f61006a3660046103bd565b6100be565b005b61006f610197565b600054604080516001600160a01b039092168252519081900360200190f35b61006f6100a636600461039c565b6101cd565b61006f6100b9366004610406565b610268565b6000546001600160a01b031633146100f15760405162461bcd60e51b81526004016100e89061041e565b60405180910390fd5b816001600160a01b031663a9059cbb6101126000546001600160a01b031690565b6040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260248101849052604401602060405180830381600087803b15801561015a57600080fd5b505af115801561016e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061019291906103e6565b505050565b6000546001600160a01b031633146101c15760405162461bcd60e51b81526004016100e89061041e565b6101cb6000610330565b565b6000546001600160a01b031633146101f75760405162461bcd60e51b81526004016100e89061041e565b6001600160a01b03811661025c5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016100e8565b61026581610330565b50565b6000546001600160a01b031633146102925760405162461bcd60e51b81526004016100e89061041e565b600080546040516001600160a01b039091169083908381818185875af1925050503d80600081146102df576040519150601f19603f3d011682016040523d82523d6000602084013e6102e4565b606091505b505090508061032c5760405162461bcd60e51b81526020600482015260146024820152732330b4b632b2103a379039b2b7321022ba3432b960611b60448201526064016100e8565b5050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80356001600160a01b038116811461039757600080fd5b919050565b6000602082840312156103ad578081fd5b6103b682610380565b9392505050565b600080604083850312156103cf578081fd5b6103d883610380565b946020939093013593505050565b6000602082840312156103f7578081fd5b815180151581146103b6578182fd5b600060208284031215610417578081fd5b5035919050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260408201526060019056fea26469706673582212206c622ddbcebce94fd11738531e8e47b558752a289ac18055acfb45a02941b6af64736f6c63430008040033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1A CALLER PUSH2 0x1F JUMP JUMPDEST PUSH2 0x6F JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR DUP5 SSTORE PUSH1 0x40 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP3 DUP4 SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH2 0x489 DUP1 PUSH2 0x7E PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x57 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x1698755F EQ PUSH2 0x5C JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x71 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x79 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x98 JUMPI DUP1 PUSH4 0xFE96973A EQ PUSH2 0xAB JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x6F PUSH2 0x6A CALLDATASIZE PUSH1 0x4 PUSH2 0x3BD JUMP JUMPDEST PUSH2 0xBE JUMP JUMPDEST STOP JUMPDEST PUSH2 0x6F PUSH2 0x197 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH2 0x6F PUSH2 0xA6 CALLDATASIZE PUSH1 0x4 PUSH2 0x39C JUMP JUMPDEST PUSH2 0x1CD JUMP JUMPDEST PUSH2 0x6F PUSH2 0xB9 CALLDATASIZE PUSH1 0x4 PUSH2 0x406 JUMP JUMPDEST PUSH2 0x268 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xF1 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xE8 SWAP1 PUSH2 0x41E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xA9059CBB PUSH2 0x112 PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT PUSH1 0xE0 DUP5 SWAP1 SHL AND DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x15A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x16E JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x192 SWAP2 SWAP1 PUSH2 0x3E6 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x1C1 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xE8 SWAP1 PUSH2 0x41E JUMP JUMPDEST PUSH2 0x1CB PUSH1 0x0 PUSH2 0x330 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x1F7 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xE8 SWAP1 PUSH2 0x41E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x25C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x646472657373 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xE8 JUMP JUMPDEST PUSH2 0x265 DUP2 PUSH2 0x330 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x292 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xE8 SWAP1 PUSH2 0x41E JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 DUP4 SWAP1 DUP4 DUP2 DUP2 DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x2DF JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x2E4 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0x32C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH20 0x2330B4B632B2103A379039B2B7321022BA3432B9 PUSH1 0x61 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xE8 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR DUP5 SSTORE PUSH1 0x40 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP3 DUP4 SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 SWAP1 LOG3 POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x397 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3AD JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x3B6 DUP3 PUSH2 0x380 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x3CF JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x3D8 DUP4 PUSH2 0x380 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3F7 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x3B6 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x417 JUMPI DUP1 DUP2 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 DUP2 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH13 0x622DDBCEBCE94FD11738531E8E SELFBALANCE 0xB5 PC PUSH22 0x2A289AC18055ACFB45A02941B6AF64736F6C63430008 DIV STOP CALLER ","sourceMap":"34520:382:1:-:0;;;;;;;;;;;;-1:-1:-1;4666:32:1;3564:10;4666:18;:32::i;:::-;34520:382;;6094:191;6168:16;6187:6;;-1:-1:-1;;;;;6204:17:1;;;-1:-1:-1;;;;;;6204:17:1;;;;;;6237:40;;6187:6;;;;;;;6237:40;;6168:16;6237:40;6094:191;;:::o;34520:382::-;;;;;;;"},"deployedBytecode":{"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:2970:3","statements":[{"nodeType":"YulBlock","src":"6:3:3","statements":[]},{"body":{"nodeType":"YulBlock","src":"63:124:3","statements":[{"nodeType":"YulAssignment","src":"73:29:3","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"95:6:3"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"82:12:3"},"nodeType":"YulFunctionCall","src":"82:20:3"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"73:5:3"}]},{"body":{"nodeType":"YulBlock","src":"165:16:3","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"174:1:3","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"177:1:3","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"167:6:3"},"nodeType":"YulFunctionCall","src":"167:12:3"},"nodeType":"YulExpressionStatement","src":"167:12:3"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"124:5:3"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"135:5:3"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"150:3:3","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"155:1:3","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"146:3:3"},"nodeType":"YulFunctionCall","src":"146:11:3"},{"kind":"number","nodeType":"YulLiteral","src":"159:1:3","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"142:3:3"},"nodeType":"YulFunctionCall","src":"142:19:3"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"131:3:3"},"nodeType":"YulFunctionCall","src":"131:31:3"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"121:2:3"},"nodeType":"YulFunctionCall","src":"121:42:3"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"114:6:3"},"nodeType":"YulFunctionCall","src":"114:50:3"},"nodeType":"YulIf","src":"111:2:3"}]},"name":"abi_decode_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"42:6:3","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"53:5:3","type":""}],"src":"14:173:3"},{"body":{"nodeType":"YulBlock","src":"262:126:3","statements":[{"body":{"nodeType":"YulBlock","src":"308:26:3","statements":[{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"317:6:3"},{"name":"value0","nodeType":"YulIdentifier","src":"325:6:3"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"310:6:3"},"nodeType":"YulFunctionCall","src":"310:22:3"},"nodeType":"YulExpressionStatement","src":"310:22:3"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"283:7:3"},{"name":"headStart","nodeType":"YulIdentifier","src":"292:9:3"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"279:3:3"},"nodeType":"YulFunctionCall","src":"279:23:3"},{"kind":"number","nodeType":"YulLiteral","src":"304:2:3","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"275:3:3"},"nodeType":"YulFunctionCall","src":"275:32:3"},"nodeType":"YulIf","src":"272:2:3"},{"nodeType":"YulAssignment","src":"343:39:3","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"372:9:3"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"353:18:3"},"nodeType":"YulFunctionCall","src":"353:29:3"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"343:6:3"}]}]},"name":"abi_decode_tuple_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"228:9:3","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"239:7:3","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"251:6:3","type":""}],"src":"192:196:3"},{"body":{"nodeType":"YulBlock","src":"480:177:3","statements":[{"body":{"nodeType":"YulBlock","src":"526:26:3","statements":[{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"535:6:3"},{"name":"value1","nodeType":"YulIdentifier","src":"543:6:3"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"528:6:3"},"nodeType":"YulFunctionCall","src":"528:22:3"},"nodeType":"YulExpressionStatement","src":"528:22:3"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"501:7:3"},{"name":"headStart","nodeType":"YulIdentifier","src":"510:9:3"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"497:3:3"},"nodeType":"YulFunctionCall","src":"497:23:3"},{"kind":"number","nodeType":"YulLiteral","src":"522:2:3","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"493:3:3"},"nodeType":"YulFunctionCall","src":"493:32:3"},"nodeType":"YulIf","src":"490:2:3"},{"nodeType":"YulAssignment","src":"561:39:3","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"590:9:3"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"571:18:3"},"nodeType":"YulFunctionCall","src":"571:29:3"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"561:6:3"}]},{"nodeType":"YulAssignment","src":"609:42:3","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"636:9:3"},{"kind":"number","nodeType":"YulLiteral","src":"647:2:3","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"632:3:3"},"nodeType":"YulFunctionCall","src":"632:18:3"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"619:12:3"},"nodeType":"YulFunctionCall","src":"619:32:3"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"609:6:3"}]}]},"name":"abi_decode_tuple_t_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"438:9:3","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"449:7:3","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"461:6:3","type":""},{"name":"value1","nodeType":"YulTypedName","src":"469:6:3","type":""}],"src":"393:264:3"},{"body":{"nodeType":"YulBlock","src":"740:219:3","statements":[{"body":{"nodeType":"YulBlock","src":"786:26:3","statements":[{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"795:6:3"},{"name":"value0","nodeType":"YulIdentifier","src":"803:6:3"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"788:6:3"},"nodeType":"YulFunctionCall","src":"788:22:3"},"nodeType":"YulExpressionStatement","src":"788:22:3"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"761:7:3"},{"name":"headStart","nodeType":"YulIdentifier","src":"770:9:3"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"757:3:3"},"nodeType":"YulFunctionCall","src":"757:23:3"},{"kind":"number","nodeType":"YulLiteral","src":"782:2:3","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"753:3:3"},"nodeType":"YulFunctionCall","src":"753:32:3"},"nodeType":"YulIf","src":"750:2:3"},{"nodeType":"YulVariableDeclaration","src":"821:29:3","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"840:9:3"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"834:5:3"},"nodeType":"YulFunctionCall","src":"834:16:3"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"825:5:3","type":""}]},{"body":{"nodeType":"YulBlock","src":"903:26:3","statements":[{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"912:6:3"},{"name":"value0","nodeType":"YulIdentifier","src":"920:6:3"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"905:6:3"},"nodeType":"YulFunctionCall","src":"905:22:3"},"nodeType":"YulExpressionStatement","src":"905:22:3"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"872:5:3"},{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"893:5:3"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"886:6:3"},"nodeType":"YulFunctionCall","src":"886:13:3"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"879:6:3"},"nodeType":"YulFunctionCall","src":"879:21:3"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"869:2:3"},"nodeType":"YulFunctionCall","src":"869:32:3"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"862:6:3"},"nodeType":"YulFunctionCall","src":"862:40:3"},"nodeType":"YulIf","src":"859:2:3"},{"nodeType":"YulAssignment","src":"938:15:3","value":{"name":"value","nodeType":"YulIdentifier","src":"948:5:3"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"938:6:3"}]}]},"name":"abi_decode_tuple_t_bool_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"706:9:3","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"717:7:3","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"729:6:3","type":""}],"src":"662:297:3"},{"body":{"nodeType":"YulBlock","src":"1034:120:3","statements":[{"body":{"nodeType":"YulBlock","src":"1080:26:3","statements":[{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1089:6:3"},{"name":"value0","nodeType":"YulIdentifier","src":"1097:6:3"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1082:6:3"},"nodeType":"YulFunctionCall","src":"1082:22:3"},"nodeType":"YulExpressionStatement","src":"1082:22:3"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1055:7:3"},{"name":"headStart","nodeType":"YulIdentifier","src":"1064:9:3"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1051:3:3"},"nodeType":"YulFunctionCall","src":"1051:23:3"},{"kind":"number","nodeType":"YulLiteral","src":"1076:2:3","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1047:3:3"},"nodeType":"YulFunctionCall","src":"1047:32:3"},"nodeType":"YulIf","src":"1044:2:3"},{"nodeType":"YulAssignment","src":"1115:33:3","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1138:9:3"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1125:12:3"},"nodeType":"YulFunctionCall","src":"1125:23:3"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1115:6:3"}]}]},"name":"abi_decode_tuple_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1000:9:3","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1011:7:3","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1023:6:3","type":""}],"src":"964:190:3"},{"body":{"nodeType":"YulBlock","src":"1350:14:3","statements":[{"nodeType":"YulAssignment","src":"1352:10:3","value":{"name":"pos","nodeType":"YulIdentifier","src":"1359:3:3"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"1352:3:3"}]}]},"name":"abi_encode_tuple_packed_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"1334:3:3","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"1342:3:3","type":""}],"src":"1159:205:3"},{"body":{"nodeType":"YulBlock","src":"1470:102:3","statements":[{"nodeType":"YulAssignment","src":"1480:26:3","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1492:9:3"},{"kind":"number","nodeType":"YulLiteral","src":"1503:2:3","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1488:3:3"},"nodeType":"YulFunctionCall","src":"1488:18:3"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1480:4:3"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1522:9:3"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1537:6:3"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1553:3:3","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"1558:1:3","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"1549:3:3"},"nodeType":"YulFunctionCall","src":"1549:11:3"},{"kind":"number","nodeType":"YulLiteral","src":"1562:1:3","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1545:3:3"},"nodeType":"YulFunctionCall","src":"1545:19:3"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1533:3:3"},"nodeType":"YulFunctionCall","src":"1533:32:3"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1515:6:3"},"nodeType":"YulFunctionCall","src":"1515:51:3"},"nodeType":"YulExpressionStatement","src":"1515:51:3"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1439:9:3","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1450:6:3","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1461:4:3","type":""}],"src":"1369:203:3"},{"body":{"nodeType":"YulBlock","src":"1706:145:3","statements":[{"nodeType":"YulAssignment","src":"1716:26:3","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1728:9:3"},{"kind":"number","nodeType":"YulLiteral","src":"1739:2:3","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1724:3:3"},"nodeType":"YulFunctionCall","src":"1724:18:3"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1716:4:3"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1758:9:3"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1773:6:3"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1789:3:3","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"1794:1:3","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"1785:3:3"},"nodeType":"YulFunctionCall","src":"1785:11:3"},{"kind":"number","nodeType":"YulLiteral","src":"1798:1:3","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1781:3:3"},"nodeType":"YulFunctionCall","src":"1781:19:3"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1769:3:3"},"nodeType":"YulFunctionCall","src":"1769:32:3"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1751:6:3"},"nodeType":"YulFunctionCall","src":"1751:51:3"},"nodeType":"YulExpressionStatement","src":"1751:51:3"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1822:9:3"},{"kind":"number","nodeType":"YulLiteral","src":"1833:2:3","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1818:3:3"},"nodeType":"YulFunctionCall","src":"1818:18:3"},{"name":"value1","nodeType":"YulIdentifier","src":"1838:6:3"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1811:6:3"},"nodeType":"YulFunctionCall","src":"1811:34:3"},"nodeType":"YulExpressionStatement","src":"1811:34:3"}]},"name":"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1667:9:3","type":""},{"name":"value1","nodeType":"YulTypedName","src":"1678:6:3","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1686:6:3","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1697:4:3","type":""}],"src":"1577:274:3"},{"body":{"nodeType":"YulBlock","src":"2030:228:3","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2047:9:3"},{"kind":"number","nodeType":"YulLiteral","src":"2058:2:3","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2040:6:3"},"nodeType":"YulFunctionCall","src":"2040:21:3"},"nodeType":"YulExpressionStatement","src":"2040:21:3"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2081:9:3"},{"kind":"number","nodeType":"YulLiteral","src":"2092:2:3","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2077:3:3"},"nodeType":"YulFunctionCall","src":"2077:18:3"},{"kind":"number","nodeType":"YulLiteral","src":"2097:2:3","type":"","value":"38"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2070:6:3"},"nodeType":"YulFunctionCall","src":"2070:30:3"},"nodeType":"YulExpressionStatement","src":"2070:30:3"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2120:9:3"},{"kind":"number","nodeType":"YulLiteral","src":"2131:2:3","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2116:3:3"},"nodeType":"YulFunctionCall","src":"2116:18:3"},{"kind":"string","nodeType":"YulLiteral","src":"2136:34:3","type":"","value":"Ownable: new owner is the zero a"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2109:6:3"},"nodeType":"YulFunctionCall","src":"2109:62:3"},"nodeType":"YulExpressionStatement","src":"2109:62:3"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2191:9:3"},{"kind":"number","nodeType":"YulLiteral","src":"2202:2:3","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2187:3:3"},"nodeType":"YulFunctionCall","src":"2187:18:3"},{"kind":"string","nodeType":"YulLiteral","src":"2207:8:3","type":"","value":"ddress"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2180:6:3"},"nodeType":"YulFunctionCall","src":"2180:36:3"},"nodeType":"YulExpressionStatement","src":"2180:36:3"},{"nodeType":"YulAssignment","src":"2225:27:3","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2237:9:3"},{"kind":"number","nodeType":"YulLiteral","src":"2248:3:3","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2233:3:3"},"nodeType":"YulFunctionCall","src":"2233:19:3"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"2225:4:3"}]}]},"name":"abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2007:9:3","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"2021:4:3","type":""}],"src":"1856:402:3"},{"body":{"nodeType":"YulBlock","src":"2437:170:3","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2454:9:3"},{"kind":"number","nodeType":"YulLiteral","src":"2465:2:3","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2447:6:3"},"nodeType":"YulFunctionCall","src":"2447:21:3"},"nodeType":"YulExpressionStatement","src":"2447:21:3"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2488:9:3"},{"kind":"number","nodeType":"YulLiteral","src":"2499:2:3","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2484:3:3"},"nodeType":"YulFunctionCall","src":"2484:18:3"},{"kind":"number","nodeType":"YulLiteral","src":"2504:2:3","type":"","value":"20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2477:6:3"},"nodeType":"YulFunctionCall","src":"2477:30:3"},"nodeType":"YulExpressionStatement","src":"2477:30:3"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2527:9:3"},{"kind":"number","nodeType":"YulLiteral","src":"2538:2:3","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2523:3:3"},"nodeType":"YulFunctionCall","src":"2523:18:3"},{"kind":"string","nodeType":"YulLiteral","src":"2543:22:3","type":"","value":"Failed to send Ether"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2516:6:3"},"nodeType":"YulFunctionCall","src":"2516:50:3"},"nodeType":"YulExpressionStatement","src":"2516:50:3"},{"nodeType":"YulAssignment","src":"2575:26:3","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2587:9:3"},{"kind":"number","nodeType":"YulLiteral","src":"2598:2:3","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2583:3:3"},"nodeType":"YulFunctionCall","src":"2583:18:3"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"2575:4:3"}]}]},"name":"abi_encode_tuple_t_stringliteral_445140255c9d889994129d349e64078d6f76b4b37ec896948f7e858f9b8a0dcb__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2414:9:3","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"2428:4:3","type":""}],"src":"2263:344:3"},{"body":{"nodeType":"YulBlock","src":"2786:182:3","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2803:9:3"},{"kind":"number","nodeType":"YulLiteral","src":"2814:2:3","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2796:6:3"},"nodeType":"YulFunctionCall","src":"2796:21:3"},"nodeType":"YulExpressionStatement","src":"2796:21:3"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2837:9:3"},{"kind":"number","nodeType":"YulLiteral","src":"2848:2:3","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2833:3:3"},"nodeType":"YulFunctionCall","src":"2833:18:3"},{"kind":"number","nodeType":"YulLiteral","src":"2853:2:3","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2826:6:3"},"nodeType":"YulFunctionCall","src":"2826:30:3"},"nodeType":"YulExpressionStatement","src":"2826:30:3"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2876:9:3"},{"kind":"number","nodeType":"YulLiteral","src":"2887:2:3","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2872:3:3"},"nodeType":"YulFunctionCall","src":"2872:18:3"},{"kind":"string","nodeType":"YulLiteral","src":"2892:34:3","type":"","value":"Ownable: caller is not the owner"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2865:6:3"},"nodeType":"YulFunctionCall","src":"2865:62:3"},"nodeType":"YulExpressionStatement","src":"2865:62:3"},{"nodeType":"YulAssignment","src":"2936:26:3","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2948:9:3"},{"kind":"number","nodeType":"YulLiteral","src":"2959:2:3","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2944:3:3"},"nodeType":"YulFunctionCall","src":"2944:18:3"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"2936:4:3"}]}]},"name":"abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2763:9:3","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"2777:4:3","type":""}],"src":"2612:356:3"}]},"contents":"{\n    { }\n    function abi_decode_address(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        value0 := abi_decode_address(headStart)\n    }\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(value1, value1) }\n        value0 := abi_decode_address(headStart)\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_decode_tuple_t_bool_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        let value := mload(headStart)\n        if iszero(eq(value, iszero(iszero(value)))) { revert(value0, value0) }\n        value0 := value\n    }\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_encode_tuple_packed_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos) -> end\n    { end := pos }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"Ownable: new owner is the zero a\")\n        mstore(add(headStart, 96), \"ddress\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_445140255c9d889994129d349e64078d6f76b4b37ec896948f7e858f9b8a0dcb__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 20)\n        mstore(add(headStart, 64), \"Failed to send Ether\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 32)\n        mstore(add(headStart, 64), \"Ownable: caller is not the owner\")\n        tail := add(headStart, 96)\n    }\n}","id":3,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"608060405234801561001057600080fd5b50600436106100575760003560e01c80631698755f1461005c578063715018a6146100715780638da5cb5b14610079578063f2fde38b14610098578063fe96973a146100ab575b600080fd5b61006f61006a3660046103bd565b6100be565b005b61006f610197565b600054604080516001600160a01b039092168252519081900360200190f35b61006f6100a636600461039c565b6101cd565b61006f6100b9366004610406565b610268565b6000546001600160a01b031633146100f15760405162461bcd60e51b81526004016100e89061041e565b60405180910390fd5b816001600160a01b031663a9059cbb6101126000546001600160a01b031690565b6040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260248101849052604401602060405180830381600087803b15801561015a57600080fd5b505af115801561016e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061019291906103e6565b505050565b6000546001600160a01b031633146101c15760405162461bcd60e51b81526004016100e89061041e565b6101cb6000610330565b565b6000546001600160a01b031633146101f75760405162461bcd60e51b81526004016100e89061041e565b6001600160a01b03811661025c5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016100e8565b61026581610330565b50565b6000546001600160a01b031633146102925760405162461bcd60e51b81526004016100e89061041e565b600080546040516001600160a01b039091169083908381818185875af1925050503d80600081146102df576040519150601f19603f3d011682016040523d82523d6000602084013e6102e4565b606091505b505090508061032c5760405162461bcd60e51b81526020600482015260146024820152732330b4b632b2103a379039b2b7321022ba3432b960611b60448201526064016100e8565b5050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80356001600160a01b038116811461039757600080fd5b919050565b6000602082840312156103ad578081fd5b6103b682610380565b9392505050565b600080604083850312156103cf578081fd5b6103d883610380565b946020939093013593505050565b6000602082840312156103f7578081fd5b815180151581146103b6578182fd5b600060208284031215610417578081fd5b5035919050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260408201526060019056fea26469706673582212206c622ddbcebce94fd11738531e8e47b558752a289ac18055acfb45a02941b6af64736f6c63430008040033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x57 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x1698755F EQ PUSH2 0x5C JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x71 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x79 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x98 JUMPI DUP1 PUSH4 0xFE96973A EQ PUSH2 0xAB JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x6F PUSH2 0x6A CALLDATASIZE PUSH1 0x4 PUSH2 0x3BD JUMP JUMPDEST PUSH2 0xBE JUMP JUMPDEST STOP JUMPDEST PUSH2 0x6F PUSH2 0x197 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH2 0x6F PUSH2 0xA6 CALLDATASIZE PUSH1 0x4 PUSH2 0x39C JUMP JUMPDEST PUSH2 0x1CD JUMP JUMPDEST PUSH2 0x6F PUSH2 0xB9 CALLDATASIZE PUSH1 0x4 PUSH2 0x406 JUMP JUMPDEST PUSH2 0x268 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xF1 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xE8 SWAP1 PUSH2 0x41E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xA9059CBB PUSH2 0x112 PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT PUSH1 0xE0 DUP5 SWAP1 SHL AND DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x15A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x16E JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x192 SWAP2 SWAP1 PUSH2 0x3E6 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x1C1 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xE8 SWAP1 PUSH2 0x41E JUMP JUMPDEST PUSH2 0x1CB PUSH1 0x0 PUSH2 0x330 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x1F7 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xE8 SWAP1 PUSH2 0x41E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x25C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x646472657373 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xE8 JUMP JUMPDEST PUSH2 0x265 DUP2 PUSH2 0x330 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x292 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xE8 SWAP1 PUSH2 0x41E JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 DUP4 SWAP1 DUP4 DUP2 DUP2 DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x2DF JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x2E4 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0x32C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH20 0x2330B4B632B2103A379039B2B7321022BA3432B9 PUSH1 0x61 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xE8 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR DUP5 SSTORE PUSH1 0x40 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP3 DUP4 SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 SWAP1 LOG3 POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x397 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3AD JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x3B6 DUP3 PUSH2 0x380 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x3CF JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x3D8 DUP4 PUSH2 0x380 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3F7 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x3B6 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x417 JUMPI DUP1 DUP2 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 DUP2 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH13 0x622DDBCEBCE94FD11738531E8E SELFBALANCE 0xB5 PC PUSH22 0x2A289AC18055ACFB45A02941B6AF64736F6C63430008 DIV STOP CALLER ","sourceMap":"34520:382:1:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;34557:167;;;;;;:::i;:::-;;:::i;:::-;;5438:103;;;:::i;4787:87::-;4833:7;4860:6;4787:87;;;-1:-1:-1;;;;;4860:6:1;;;1515:51:3;;4787:87:1;;;;;1503:2:3;4787:87:1;;;5696:238;;;;;;:::i;:::-;;:::i;34732:167::-;;;;;;:::i;:::-;;:::i;34557:::-;4833:7;4860:6;-1:-1:-1;;;;;4860:6:1;3564:10;5007:23;4999:68;;;;-1:-1:-1;;;4999:68:1;;;;;;;:::i;:::-;;;;;;;;;34677:12:::1;-1:-1:-1::0;;;;;34670:29:1::1;;34700:7;4833::::0;4860:6;-1:-1:-1;;;;;4860:6:1;;4787:87;34700:7:::1;34670:46;::::0;-1:-1:-1;;;;;;34670:46:1::1;::::0;;;;;;-1:-1:-1;;;;;1769:32:3;;;34670:46:1::1;::::0;::::1;1751:51:3::0;1818:18;;;1811:34;;;1724:18;;34670:46:1::1;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;34557:167:::0;;:::o;5438:103::-;4833:7;4860:6;-1:-1:-1;;;;;4860:6:1;3564:10;5007:23;4999:68;;;;-1:-1:-1;;;4999:68:1;;;;;;;:::i;:::-;5503:30:::1;5530:1;5503:18;:30::i;:::-;5438:103::o:0;5696:238::-;4833:7;4860:6;-1:-1:-1;;;;;4860:6:1;3564:10;5007:23;4999:68;;;;-1:-1:-1;;;4999:68:1;;;;;;;:::i;:::-;-1:-1:-1;;;;;5799:22:1;::::1;5777:110;;;::::0;-1:-1:-1;;;5777:110:1;;2058:2:3;5777:110:1::1;::::0;::::1;2040:21:3::0;2097:2;2077:18;;;2070:30;2136:34;2116:18;;;2109:62;-1:-1:-1;;;2187:18:3;;;2180:36;2233:19;;5777:110:1::1;2030:228:3::0;5777:110:1::1;5898:28;5917:8;5898:18;:28::i;:::-;5696:238:::0;:::o;34732:167::-;4833:7;4860:6;-1:-1:-1;;;;;4860:6:1;3564:10;5007:23;4999:68;;;;-1:-1:-1;;;4999:68:1;;;;;;;:::i;:::-;34797:9:::1;4860:6:::0;;34812:31:::1;::::0;-1:-1:-1;;;;;4860:6:1;;;;34832;;34797:9;34812:31;34797:9;34812:31;34832:6;4860;34812:31:::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;34796:47;;;34862:4;34854:37;;;::::0;-1:-1:-1;;;34854:37:1;;2465:2:3;34854:37:1::1;::::0;::::1;2447:21:3::0;2504:2;2484:18;;;2477:30;-1:-1:-1;;;2523:18:3;;;2516:50;2583:18;;34854:37:1::1;2437:170:3::0;34854:37:1::1;5078:1;34732:167:::0;:::o;6094:191::-;6168:16;6187:6;;-1:-1:-1;;;;;6204:17:1;;;-1:-1:-1;;;;;;6204:17:1;;;;;;6237:40;;6187:6;;;;;;;6237:40;;6168:16;6237:40;6094:191;;:::o;14:173:3:-;82:20;;-1:-1:-1;;;;;131:31:3;;121:42;;111:2;;177:1;174;167:12;111:2;63:124;;;:::o;192:196::-;251:6;304:2;292:9;283:7;279:23;275:32;272:2;;;325:6;317;310:22;272:2;353:29;372:9;353:29;:::i;:::-;343:39;262:126;-1:-1:-1;;;262:126:3:o;393:264::-;461:6;469;522:2;510:9;501:7;497:23;493:32;490:2;;;543:6;535;528:22;490:2;571:29;590:9;571:29;:::i;:::-;561:39;647:2;632:18;;;;619:32;;-1:-1:-1;;;480:177:3:o;662:297::-;729:6;782:2;770:9;761:7;757:23;753:32;750:2;;;803:6;795;788:22;750:2;840:9;834:16;893:5;886:13;879:21;872:5;869:32;859:2;;920:6;912;905:22;964:190;1023:6;1076:2;1064:9;1055:7;1051:23;1047:32;1044:2;;;1097:6;1089;1082:22;1044:2;-1:-1:-1;1125:23:3;;1034:120;-1:-1:-1;1034:120:3:o;2612:356::-;2814:2;2796:21;;;2833:18;;;2826:30;2892:34;2887:2;2872:18;;2865:62;2959:2;2944:18;;2786:182::o"},"gasEstimates":{"creation":{"codeDepositCost":"232200","executionCost":"22716","totalCost":"254916"},"external":{"claimETH(uint256)":"infinite","claimToken(address,uint256)":"infinite","owner()":"1014","renounceOwnership()":"23414","transferOwnership(address)":"23653"}},"methodIdentifiers":{"claimETH(uint256)":"fe96973a","claimToken(address,uint256)":"1698755f","owner()":"8da5cb5b","renounceOwnership()":"715018a6","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"claimETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"claimToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/swap.sol\":\"Claimable\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/swap.sol\":{\"content\":\"pragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\r\\n */\\r\\ninterface IERC20 {\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(\\r\\n        address indexed owner,\\r\\n        address indexed spender,\\r\\n        uint256 value\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address to, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(\\r\\n        address owner,\\r\\n        address spender\\r\\n    ) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender's allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller's\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n}\\r\\n\\r\\n// File @openzeppelin/contracts/utils/Context.sol@v4.6.0\\r\\n\\r\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Provides information about the current execution context, including the\\r\\n * sender of the transaction and its data. While these are generally available\\r\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\r\\n * manner, since when dealing with meta-transactions the account sending and\\r\\n * paying for execution may not be the actual sender (as far as an application\\r\\n * is concerned).\\r\\n *\\r\\n * This contract is only required for intermediate, library-like contracts.\\r\\n */\\r\\nabstract contract Context {\\r\\n    function _msgSender() internal view virtual returns (address) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view virtual returns (bytes calldata) {\\r\\n        return msg.data;\\r\\n    }\\r\\n}\\r\\n\\r\\n// File @openzeppelin/contracts/access/Ownable.sol@v4.6.0\\r\\n\\r\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Contract module which provides a basic access control mechanism, where\\r\\n * there is an account (an owner) that can be granted exclusive access to\\r\\n * specific functions.\\r\\n *\\r\\n * By default, the owner account will be the one that deploys the contract. This\\r\\n * can later be changed with {transferOwnership}.\\r\\n *\\r\\n * This module is used through inheritance. It will make available the modifier\\r\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\r\\n * the owner.\\r\\n */\\r\\nabstract contract Ownable is Context {\\r\\n    address private _owner;\\r\\n\\r\\n    event OwnershipTransferred(\\r\\n        address indexed previousOwner,\\r\\n        address indexed newOwner\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\r\\n     */\\r\\n    constructor() {\\r\\n        _transferOwnership(_msgSender());\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current owner.\\r\\n     */\\r\\n    function owner() public view virtual returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier onlyOwner() {\\r\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Leaves the contract without owner. It will not be possible to call\\r\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\r\\n     *\\r\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\r\\n     * thereby removing any functionality that is only available to the owner.\\r\\n     */\\r\\n    function renounceOwnership() public virtual onlyOwner {\\r\\n        _transferOwnership(address(0));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n        require(\\r\\n            newOwner != address(0),\\r\\n            \\\"Ownable: new owner is the zero address\\\"\\r\\n        );\\r\\n        _transferOwnership(newOwner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Internal function without access restriction.\\r\\n     */\\r\\n    function _transferOwnership(address newOwner) internal virtual {\\r\\n        address oldOwner = _owner;\\r\\n        _owner = newOwner;\\r\\n        emit OwnershipTransferred(oldOwner, newOwner);\\r\\n    }\\r\\n}\\r\\n\\r\\n// File @openzeppelin/contracts/utils/math/SafeMath.sol@v4.6.0\\r\\n\\r\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n// CAUTION\\r\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\r\\n// because it relies on the compiler's built in overflow checks.\\r\\n\\r\\n/**\\r\\n * @dev Wrappers over Solidity's arithmetic operations.\\r\\n *\\r\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\r\\n * now has built in overflow checking.\\r\\n */\\r\\nlibrary SafeMath {\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryAdd(\\r\\n        uint256 a,\\r\\n        uint256 b\\r\\n    ) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            uint256 c = a + b;\\r\\n            if (c < a) return (false, 0);\\r\\n            return (true, c);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function trySub(\\r\\n        uint256 a,\\r\\n        uint256 b\\r\\n    ) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            if (b > a) return (false, 0);\\r\\n            return (true, a - b);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryMul(\\r\\n        uint256 a,\\r\\n        uint256 b\\r\\n    ) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\r\\n            // benefit is lost if 'b' is also tested.\\r\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\r\\n            if (a == 0) return (true, 0);\\r\\n            uint256 c = a * b;\\r\\n            if (c / a != b) return (false, 0);\\r\\n            return (true, c);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryDiv(\\r\\n        uint256 a,\\r\\n        uint256 b\\r\\n    ) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            if (b == 0) return (false, 0);\\r\\n            return (true, a / b);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryMod(\\r\\n        uint256 a,\\r\\n        uint256 b\\r\\n    ) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            if (b == 0) return (false, 0);\\r\\n            return (true, a % b);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity's `+` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Addition cannot overflow.\\r\\n     */\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a + b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity's `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a - b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity's `*` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Multiplication cannot overflow.\\r\\n     */\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a * b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `/` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a / b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * reverting when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a % b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\r\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\r\\n     *\\r\\n     * Counterpart to Solidity's `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            require(b <= a, errorMessage);\\r\\n            return a - b;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            require(b > 0, errorMessage);\\r\\n            return a / b;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * reverting with custom message when dividing by zero.\\r\\n     *\\r\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\r\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\r\\n     *\\r\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            require(b > 0, errorMessage);\\r\\n            return a % b;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\n// File @openzeppelin/contracts/utils/Address.sol@v4.6.0\\r\\n\\r\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\r\\n\\r\\npragma solidity ^0.8.1;\\r\\n\\r\\n/**\\r\\n * @dev Collection of functions related to the address type\\r\\n */\\r\\nlibrary Address {\\r\\n    /**\\r\\n     * @dev Returns true if `account` is a contract.\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * It is unsafe to assume that an address for which this function returns\\r\\n     * false is an externally-owned account (EOA) and not a contract.\\r\\n     *\\r\\n     * Among others, `isContract` will return false for the following\\r\\n     * types of addresses:\\r\\n     *\\r\\n     *  - an externally-owned account\\r\\n     *  - a contract in construction\\r\\n     *  - an address where a contract will be created\\r\\n     *  - an address where a contract lived, but was destroyed\\r\\n     * ====\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\r\\n     *\\r\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\r\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\r\\n     * constructor.\\r\\n     * ====\\r\\n     */\\r\\n    function isContract(address account) internal view returns (bool) {\\r\\n        // This method relies on extcodesize/address.code.length, which returns 0\\r\\n        // for contracts in construction, since the code is only stored at the end\\r\\n        // of the constructor execution.\\r\\n\\r\\n        return account.code.length > 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\r\\n     * `recipient`, forwarding all available gas and reverting on errors.\\r\\n     *\\r\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\r\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\r\\n     * imposed by `transfer`, making them unable to receive funds via\\r\\n     * `transfer`. {sendValue} removes this limitation.\\r\\n     *\\r\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\r\\n     *\\r\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\r\\n     * taken to not create reentrancy vulnerabilities. Consider using\\r\\n     * {ReentrancyGuard} or the\\r\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\r\\n     */\\r\\n    function sendValue(address payable recipient, uint256 amount) internal {\\r\\n        require(\\r\\n            address(this).balance >= amount,\\r\\n            \\\"Address: insufficient balance\\\"\\r\\n        );\\r\\n\\r\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\r\\n        require(\\r\\n            success,\\r\\n            \\\"Address: unable to send value, recipient may have reverted\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Performs a Solidity function call using a low level `call`. A\\r\\n     * plain `call` is an unsafe replacement for a function call: use this\\r\\n     * function instead.\\r\\n     *\\r\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\r\\n     * function (like regular Solidity function calls).\\r\\n     *\\r\\n     * Returns the raw returned data. To convert to the expected return value,\\r\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `target` must be a contract.\\r\\n     * - calling `target` with `data` must not revert.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(\\r\\n        address target,\\r\\n        bytes memory data\\r\\n    ) internal returns (bytes memory) {\\r\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\r\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, 0, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but also transferring `value` wei to `target`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the calling contract must have an ETH balance of at least `value`.\\r\\n     * - the called Solidity function must be `payable`.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        uint256 value\\r\\n    ) internal returns (bytes memory) {\\r\\n        return\\r\\n            functionCallWithValue(\\r\\n                target,\\r\\n                data,\\r\\n                value,\\r\\n                \\\"Address: low-level call with value failed\\\"\\r\\n            );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\r\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        uint256 value,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        require(\\r\\n            address(this).balance >= value,\\r\\n            \\\"Address: insufficient balance for call\\\"\\r\\n        );\\r\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\r\\n\\r\\n        (bool success, bytes memory returndata) = target.call{value: value}(\\r\\n            data\\r\\n        );\\r\\n        return verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(\\r\\n        address target,\\r\\n        bytes memory data\\r\\n    ) internal view returns (bytes memory) {\\r\\n        return\\r\\n            functionStaticCall(\\r\\n                target,\\r\\n                data,\\r\\n                \\\"Address: low-level static call failed\\\"\\r\\n            );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal view returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\r\\n\\r\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\r\\n        return verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function functionDelegateCall(\\r\\n        address target,\\r\\n        bytes memory data\\r\\n    ) internal returns (bytes memory) {\\r\\n        return\\r\\n            functionDelegateCall(\\r\\n                target,\\r\\n                data,\\r\\n                \\\"Address: low-level delegate call failed\\\"\\r\\n            );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function functionDelegateCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\r\\n\\r\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\r\\n        return verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\r\\n     * revert reason using the provided one.\\r\\n     *\\r\\n     * _Available since v4.3._\\r\\n     */\\r\\n    function verifyCallResult(\\r\\n        bool success,\\r\\n        bytes memory returndata,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (bytes memory) {\\r\\n        if (success) {\\r\\n            return returndata;\\r\\n        } else {\\r\\n            // Look for revert reason and bubble it up if present\\r\\n            if (returndata.length > 0) {\\r\\n                // The easiest way to bubble the revert reason is using memory via assembly\\r\\n\\r\\n                assembly {\\r\\n                    let returndata_size := mload(returndata)\\r\\n                    revert(add(32, returndata), returndata_size)\\r\\n                }\\r\\n            } else {\\r\\n                revert(errorMessage);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\n// File @openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol@v4.6.0\\r\\n\\r\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @title SafeERC20\\r\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\r\\n * contract returns false). Tokens that return no value (and instead revert or\\r\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\r\\n * successful.\\r\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\r\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\r\\n */\\r\\nlibrary SafeERC20 {\\r\\n    using Address for address;\\r\\n\\r\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\r\\n        _callOptionalReturn(\\r\\n            token,\\r\\n            abi.encodeWithSelector(token.transfer.selector, to, value)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function safeTransferFrom(\\r\\n        IERC20 token,\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        _callOptionalReturn(\\r\\n            token,\\r\\n            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Deprecated. This function has issues similar to the ones found in\\r\\n     * {IERC20-approve}, and its usage is discouraged.\\r\\n     *\\r\\n     * Whenever possible, use {safeIncreaseAllowance} and\\r\\n     * {safeDecreaseAllowance} instead.\\r\\n     */\\r\\n    function safeApprove(\\r\\n        IERC20 token,\\r\\n        address spender,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        // safeApprove should only be called when setting an initial allowance,\\r\\n        // or when resetting it to zero. To increase and decrease it, use\\r\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\r\\n        require(\\r\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\r\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\r\\n        );\\r\\n        _callOptionalReturn(\\r\\n            token,\\r\\n            abi.encodeWithSelector(token.approve.selector, spender, value)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function safeIncreaseAllowance(\\r\\n        IERC20 token,\\r\\n        address spender,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\r\\n        _callOptionalReturn(\\r\\n            token,\\r\\n            abi.encodeWithSelector(\\r\\n                token.approve.selector,\\r\\n                spender,\\r\\n                newAllowance\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function safeDecreaseAllowance(\\r\\n        IERC20 token,\\r\\n        address spender,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        unchecked {\\r\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\r\\n            require(\\r\\n                oldAllowance >= value,\\r\\n                \\\"SafeERC20: decreased allowance below zero\\\"\\r\\n            );\\r\\n            uint256 newAllowance = oldAllowance - value;\\r\\n            _callOptionalReturn(\\r\\n                token,\\r\\n                abi.encodeWithSelector(\\r\\n                    token.approve.selector,\\r\\n                    spender,\\r\\n                    newAllowance\\r\\n                )\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\r\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\r\\n     * @param token The token targeted by the call.\\r\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\r\\n     */\\r\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\r\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\r\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\r\\n        // the target address contains contract code and also asserts for success in the low-level call.\\r\\n\\r\\n        bytes memory returndata = address(token).functionCall(\\r\\n            data,\\r\\n            \\\"SafeERC20: low-level call failed\\\"\\r\\n        );\\r\\n        if (returndata.length > 0) {\\r\\n            // Return data is optional\\r\\n            require(\\r\\n                abi.decode(returndata, (bool)),\\r\\n                \\\"SafeERC20: ERC20 operation did not succeed\\\"\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\n// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IRouter {\\r\\n    function swapExactTokensForTokens(\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256[] memory amounts);\\r\\n\\r\\n    function swapExactETHForTokens(\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external payable returns (uint256[] memory amounts);\\r\\n\\r\\n    function swapExactTokensForETH(\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256[] memory amounts);\\r\\n\\r\\n    function getAmountsOut(\\r\\n        uint256 amountIn,\\r\\n        address[] calldata path\\r\\n    ) external view returns (uint256[] memory amounts);\\r\\n}\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\n/// @title The interface for the PancakeSwap V3 Factory\\r\\n/// @notice The PancakeSwap V3 Factory facilitates creation of PancakeSwap V3 pools and control over the protocol fees\\r\\ninterface IPancakeV3Factory {\\r\\n    function getPool(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint24 fee\\r\\n    ) external view returns (address pool);\\r\\n}\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\ninterface IPancakeV3PoolState {\\r\\n    function slot0()\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            uint160 sqrtPriceX96,\\r\\n            int24 tick,\\r\\n            uint16 observationIndex,\\r\\n            uint16 observationCardinality,\\r\\n            uint16 observationCardinalityNext,\\r\\n            uint32 feeProtocol,\\r\\n            bool unlocked\\r\\n        );\\r\\n}\\r\\n\\r\\ninterface IPancakeV3PoolImmutables {\\r\\n    /// @notice The contract that deployed the pool, which must adhere to the IPancakeV3Factory interface\\r\\n    /// @return The contract address\\r\\n    function factory() external view returns (address);\\r\\n\\r\\n    /// @notice The first of the two tokens of the pool, sorted by address\\r\\n    /// @return The token contract address\\r\\n    function token0() external view returns (address);\\r\\n\\r\\n    /// @notice The second of the two tokens of the pool, sorted by address\\r\\n    /// @return The token contract address\\r\\n    function token1() external view returns (address);\\r\\n\\r\\n    /// @notice The pool's fee in hundredths of a bip, i.e. 1e-6\\r\\n    /// @return The fee\\r\\n    function fee() external view returns (uint24);\\r\\n\\r\\n    /// @notice The pool tick spacing\\r\\n    /// @dev Ticks can only be used at multiples of this value, minimum of 1 and always positive\\r\\n    /// e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ...\\r\\n    /// This value is an int24 to avoid casting even though it is always positive.\\r\\n    /// @return The tick spacing\\r\\n    function tickSpacing() external view returns (int24);\\r\\n\\r\\n    /// @notice The maximum amount of position liquidity that can use any tick in the range\\r\\n    /// @dev This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and\\r\\n    /// also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\\r\\n    /// @return The max amount of liquidity per tick\\r\\n    function maxLiquidityPerTick() external view returns (uint128);\\r\\n}\\r\\n\\r\\ninterface IPancakeV3Pool is IPancakeV3PoolState, IPancakeV3PoolImmutables {}\\r\\n\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\n/// @title Callback for IPancakeV3PoolActions#swap\\r\\n/// @notice Any contract that calls IPancakeV3PoolActions#swap must implement this interface\\r\\ninterface IPancakeV3SwapCallback {\\r\\n    /// @notice Called to `msg.sender` after executing a swap via IPancakeV3Pool#swap.\\r\\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\\r\\n    /// The caller of this method must be checked to be a PancakeV3Pool deployed by the canonical PancakeV3Factory.\\r\\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\\r\\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\\r\\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\\r\\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\\r\\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\\r\\n    /// @param data Any data passed through by the caller via the IPancakeV3PoolActions#swap call\\r\\n    function pancakeV3SwapCallback(\\r\\n        int256 amount0Delta,\\r\\n        int256 amount1Delta,\\r\\n        bytes calldata data\\r\\n    ) external;\\r\\n}\\r\\n\\r\\ninterface IV3SwapRouter is IPancakeV3SwapCallback {\\r\\n    struct ExactInputSingleParams {\\r\\n        address tokenIn;\\r\\n        address tokenOut;\\r\\n        uint24 fee;\\r\\n        address recipient;\\r\\n        uint256 amountIn;\\r\\n        uint256 amountOutMinimum;\\r\\n        uint160 sqrtPriceLimitX96;\\r\\n    }\\r\\n\\r\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\\r\\n    /// @dev Setting `amountIn` to 0 will cause the contract to look up its own balance,\\r\\n    /// and swap the entire amount, enabling contracts to send tokens before calling this function.\\r\\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\\r\\n    /// @return amountOut The amount of the received token\\r\\n    function exactInputSingle(\\r\\n        ExactInputSingleParams calldata params\\r\\n    ) external payable returns (uint256 amountOut);\\r\\n\\r\\n    struct ExactInputParams {\\r\\n        bytes path;\\r\\n        address recipient;\\r\\n        uint256 amountIn;\\r\\n        uint256 amountOutMinimum;\\r\\n    }\\r\\n\\r\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\\r\\n    /// @dev Setting `amountIn` to 0 will cause the contract to look up its own balance,\\r\\n    /// and swap the entire amount, enabling contracts to send tokens before calling this function.\\r\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\\r\\n    /// @return amountOut The amount of the received token\\r\\n    function exactInput(\\r\\n        ExactInputParams calldata params\\r\\n    ) external payable returns (uint256 amountOut);\\r\\n\\r\\n    struct ExactOutputSingleParams {\\r\\n        address tokenIn;\\r\\n        address tokenOut;\\r\\n        uint24 fee;\\r\\n        address recipient;\\r\\n        uint256 amountOut;\\r\\n        uint256 amountInMaximum;\\r\\n        uint160 sqrtPriceLimitX96;\\r\\n    }\\r\\n\\r\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\\r\\n    /// that may remain in the router after the swap.\\r\\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\\r\\n    /// @return amountIn The amount of the input token\\r\\n    function exactOutputSingle(\\r\\n        ExactOutputSingleParams calldata params\\r\\n    ) external payable returns (uint256 amountIn);\\r\\n\\r\\n    struct ExactOutputParams {\\r\\n        bytes path;\\r\\n        address recipient;\\r\\n        uint256 amountOut;\\r\\n        uint256 amountInMaximum;\\r\\n    }\\r\\n\\r\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\\r\\n    /// that may remain in the router after the swap.\\r\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\\r\\n    /// @return amountIn The amount of the input token\\r\\n    function exactOutput(\\r\\n        ExactOutputParams calldata params\\r\\n    ) external payable returns (uint256 amountIn);\\r\\n\\r\\n    function refundETH() external payable;\\r\\n}\\r\\n\\r\\ncontract Claimable is Ownable {\\r\\n    function claimToken(\\r\\n        address tokenAddress,\\r\\n        uint256 amount\\r\\n    ) external onlyOwner {\\r\\n        IERC20(tokenAddress).transfer(owner(), amount);\\r\\n    }\\r\\n\\r\\n    function claimETH(uint256 amount) external onlyOwner {\\r\\n        (bool sent, ) = owner().call{value: amount}(\\\"\\\");\\r\\n        require(sent, \\\"Failed to send Ether\\\");\\r\\n    }\\r\\n}\\r\\n\\r\\ncontract ProSwap is Claimable {\\r\\n    using SafeMath for uint256;\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    uint public feePercent = 0; //10:0.25%\\r\\n    uint256 public rewardAmount = 10000000000000000000; //10 to tokens\\r\\n\\r\\n    address public rewardAddress;\\r\\n    address public feeAccount;\\r\\n    address public router;\\r\\n    address public wavax;\\r\\n\\r\\n    address public routerAddress = 0x13f4EA83D0bd40E75C8222255bc855a974568Dd4;\\r\\n    address public factoryAddress = 0x0BFbCF9fa4f9C56B0F40a671Ad40E0805A091865;\\r\\n    address public wbnbAddress = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;\\r\\n    uint24 poolFee = 100;\\r\\n\\r\\n    mapping(address => uint256) airdropAddress;\\r\\n    mapping(address => uint256) airdropLastTime;\\r\\n\\r\\n    constructor(\\r\\n        address _feeAccount,\\r\\n        address _router,\\r\\n        address _wavax,\\r\\n        address _rewardAddress\\r\\n    ) {\\r\\n        feeAccount = _feeAccount;\\r\\n        router = _router;\\r\\n        wavax = _wavax;\\r\\n        rewardAddress = _rewardAddress;\\r\\n    }\\r\\n\\r\\n    function airdrop() external {\\r\\n        require(\\r\\n            airdropAddress[msg.sender] + 86400 > block.timestamp,\\r\\n            \\\"You did not swap in 24 hours\\\"\\r\\n        );\\r\\n\\r\\n        require(\\r\\n            block.timestamp > airdropLastTime[msg.sender] + 86400,\\r\\n            \\\"You airdroped in 24 hours\\\"\\r\\n        );\\r\\n\\r\\n        IERC20(rewardAddress).safeTransfer(msg.sender, rewardAmount);\\r\\n        airdropLastTime[msg.sender] = block.timestamp;\\r\\n    }\\r\\n\\r\\n    function swapV2Tokens(\\r\\n        address _tokenA,\\r\\n        address _tokenB,\\r\\n        uint256 _amountIn\\r\\n    ) external payable {\\r\\n        airdropAddress[msg.sender] = block.timestamp;\\r\\n        address[] memory path = new address[](2);\\r\\n        if (_tokenA == address(0)) {\\r\\n            path[0] = wavax;\\r\\n            path[1] = _tokenB;\\r\\n        } else if (_tokenB == address(0)) {\\r\\n            path[0] = _tokenA;\\r\\n            path[1] = wavax;\\r\\n        } else {\\r\\n            path[0] = _tokenA;\\r\\n            path[1] = _tokenB;\\r\\n        }\\r\\n\\r\\n        _proceedToUniswap(_tokenA, _tokenB, _amountIn, path);\\r\\n    }\\r\\n\\r\\n    function customSwapTokens(\\r\\n        address _tokenA,\\r\\n        address _tokenB,\\r\\n        uint256 _amountIn,\\r\\n        address[] memory path\\r\\n    ) external payable {\\r\\n        if (_tokenA == address(0)) {\\r\\n            require(\\r\\n                wavax == path[0] && _tokenB == path[path.length - 1],\\r\\n                \\\"PattieSwap: Path must be specified\\\"\\r\\n            );\\r\\n        } else if (_tokenB == address(0)) {\\r\\n            require(\\r\\n                _tokenA == path[0] && wavax == path[path.length - 1],\\r\\n                \\\"PattieSwap: Path must be specified\\\"\\r\\n            );\\r\\n        } else {\\r\\n            require(\\r\\n                _tokenA == path[0] && _tokenB == path[path.length - 1],\\r\\n                \\\"PattieSwap: Path must be specified\\\"\\r\\n            );\\r\\n        }\\r\\n        _proceedToUniswap(_tokenA, _tokenB, _amountIn, path);\\r\\n    }\\r\\n\\r\\n    function _proceedToUniswap(\\r\\n        address _tokenA,\\r\\n        address _tokenB,\\r\\n        uint256 _amountIn,\\r\\n        address[] memory path\\r\\n    ) internal {\\r\\n        require(_amountIn > 0, \\\"PattieSwap: amountIn must be greater than 0\\\");\\r\\n\\r\\n        if (_tokenA == address(0)) {\\r\\n            require(_amountIn >= msg.value, \\\"PattieSwap: Insufficient ETH\\\");\\r\\n            uint fee = (_amountIn * feePercent) / 10000;\\r\\n            payable(feeAccount).transfer(fee);\\r\\n            uint amountToSwap = _amountIn - fee;\\r\\n            _swapAVAXForTokens(amountToSwap, path);\\r\\n        } else {\\r\\n            IERC20(_tokenA).safeTransferFrom(\\r\\n                msg.sender,\\r\\n                address(this),\\r\\n                _amountIn\\r\\n            );\\r\\n            uint fee = (_amountIn * feePercent) / 10000;\\r\\n            IERC20(_tokenA).safeTransfer(feeAccount, fee);\\r\\n            uint amountToSwap = _amountIn - fee;\\r\\n            _approve(_tokenA, amountToSwap);\\r\\n            if (_tokenB == address(0)) {\\r\\n                _swapTokensForAVAX(amountToSwap, path);\\r\\n            } else {\\r\\n                _swapTokensForTokens(amountToSwap, path);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _approve(address _token, uint _amount) internal {\\r\\n        IERC20(_token).approve(address(router), _amount);\\r\\n    }\\r\\n\\r\\n    function _swapTokensForAVAX(uint _amount, address[] memory path) internal {\\r\\n        IRouter(router).swapExactTokensForETH(\\r\\n            _amount,\\r\\n            0,\\r\\n            path,\\r\\n            msg.sender,\\r\\n            block.timestamp\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function _swapAVAXForTokens(uint _amount, address[] memory path) internal {\\r\\n        IRouter(router).swapExactETHForTokens{value: _amount}(\\r\\n            0,\\r\\n            path,\\r\\n            msg.sender,\\r\\n            block.timestamp\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function _swapTokensForTokens(\\r\\n        uint _amount,\\r\\n        address[] memory path\\r\\n    ) internal {\\r\\n        IRouter(router).swapExactTokensForTokens(\\r\\n            _amount,\\r\\n            0,\\r\\n            path,\\r\\n            msg.sender,\\r\\n            block.timestamp\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function _v3Approve(address _token, uint _amount) internal {\\r\\n        IERC20(_token).approve(address(routerAddress), _amount);\\r\\n    }\\r\\n\\r\\n    function getOutputTokenAmount(\\r\\n        uint inputAmount,\\r\\n        address[] memory path\\r\\n    ) external view returns (uint outputAmount) {\\r\\n        uint[] memory outputs = IRouter(router).getAmountsOut(\\r\\n            inputAmount,\\r\\n            path\\r\\n        );\\r\\n        return outputs[outputs.length - 1];\\r\\n    }\\r\\n\\r\\n    function getV3OutputTokenAmount(\\r\\n        uint256 _inputAmount,\\r\\n        address _tokenIn,\\r\\n        address _tokenOut\\r\\n    ) external view returns (uint outputAmount) {\\r\\n        uint256 slotReturnValue = 0;\\r\\n        address pairAddress = IPancakeV3Factory(factoryAddress).getPool(\\r\\n            _tokenIn,\\r\\n            _tokenOut,\\r\\n            poolFee\\r\\n        );\\r\\n        (slotReturnValue, , , , , , ) = IPancakeV3PoolState(pairAddress)\\r\\n            .slot0();\\r\\n        address token0 = IPancakeV3Pool(pairAddress).token0();\\r\\n        if (_tokenIn == token0)\\r\\n            outputAmount = ((slotReturnValue ** 2 * _inputAmount) / 2 ** 192);\\r\\n        else outputAmount = ((2 ** 192 * _inputAmount) / slotReturnValue ** 2);\\r\\n    }\\r\\n\\r\\n    function setFeePercent(uint _feePercent) external onlyOwner {\\r\\n        feePercent = _feePercent;\\r\\n    }\\r\\n\\r\\n    function setRewardAmount(uint256 _amount) external onlyOwner {\\r\\n        rewardAmount = _amount;\\r\\n    }\\r\\n\\r\\n    function setRewardToken(address _rewawrdAddress) external onlyOwner {\\r\\n        rewardAddress = _rewawrdAddress;\\r\\n    }\\r\\n\\r\\n    function setFeeAccount(address _feeAccount) external onlyOwner {\\r\\n        feeAccount = _feeAccount;\\r\\n    }\\r\\n\\r\\n    function setRouterWAVAX(\\r\\n        address _router,\\r\\n        address _wavax\\r\\n    ) external onlyOwner {\\r\\n        router = _router;\\r\\n        wavax = _wavax;\\r\\n    }\\r\\n\\r\\n    function emergencyWithdraw(\\r\\n        address _token,\\r\\n        uint _amount\\r\\n    ) external onlyOwner {\\r\\n        IERC20(_token).safeTransfer(msg.sender, _amount);\\r\\n    }\\r\\n\\r\\n    function emergencyWithdrawETH(uint _amount) external onlyOwner {\\r\\n        payable(owner()).transfer(_amount);\\r\\n    }\\r\\n\\r\\n    function swapTokens(\\r\\n        address _tokenIn,\\r\\n        address _tokenOut,\\r\\n        uint256 _amountIn\\r\\n    ) external payable {\\r\\n        airdropAddress[msg.sender] = block.timestamp;\\r\\n        IV3SwapRouter.ExactInputSingleParams memory params = IV3SwapRouter\\r\\n            .ExactInputSingleParams(\\r\\n                _tokenIn,\\r\\n                _tokenOut,\\r\\n                poolFee,\\r\\n                msg.sender,\\r\\n                _amountIn,\\r\\n                0,\\r\\n                0\\r\\n            );\\r\\n        if (_tokenIn == wbnbAddress)\\r\\n            IV3SwapRouter(routerAddress).exactInputSingle{value: msg.value}(\\r\\n                params\\r\\n            );\\r\\n        else {\\r\\n            IERC20(_tokenIn).safeTransferFrom(\\r\\n                msg.sender,\\r\\n                address(this),\\r\\n                _amountIn\\r\\n            );\\r\\n            _v3Approve(_tokenIn, _amountIn);\\r\\n            IV3SwapRouter(routerAddress).exactInputSingle{value: msg.value}(\\r\\n                params\\r\\n            );\\r\\n        }\\r\\n        IV3SwapRouter(routerAddress).refundETH();\\r\\n        // refund leftover ETH to user\\r\\n        (bool success, ) = msg.sender.call{value: address(this).balance}(\\\"\\\");\\r\\n        require(success, \\\"refund failed\\\");\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x014ebbd50111dbe2ffd46bfee0dca5b1dbbc4785ff10cb323cef7317398427ea\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":795,"contract":"contracts/swap.sol:Claimable","label":"_owner","offset":0,"slot":"0","type":"t_address"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"}}},"userdoc":{"kind":"user","methods":{},"version":1}},"Context":{"abi":[],"devdoc":{"details":"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/swap.sol\":\"Context\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/swap.sol\":{\"content\":\"pragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\r\\n */\\r\\ninterface IERC20 {\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(\\r\\n        address indexed owner,\\r\\n        address indexed spender,\\r\\n        uint256 value\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address to, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(\\r\\n        address owner,\\r\\n        address spender\\r\\n    ) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender's allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller's\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n}\\r\\n\\r\\n// File @openzeppelin/contracts/utils/Context.sol@v4.6.0\\r\\n\\r\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Provides information about the current execution context, including the\\r\\n * sender of the transaction and its data. While these are generally available\\r\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\r\\n * manner, since when dealing with meta-transactions the account sending and\\r\\n * paying for execution may not be the actual sender (as far as an application\\r\\n * is concerned).\\r\\n *\\r\\n * This contract is only required for intermediate, library-like contracts.\\r\\n */\\r\\nabstract contract Context {\\r\\n    function _msgSender() internal view virtual returns (address) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view virtual returns (bytes calldata) {\\r\\n        return msg.data;\\r\\n    }\\r\\n}\\r\\n\\r\\n// File @openzeppelin/contracts/access/Ownable.sol@v4.6.0\\r\\n\\r\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Contract module which provides a basic access control mechanism, where\\r\\n * there is an account (an owner) that can be granted exclusive access to\\r\\n * specific functions.\\r\\n *\\r\\n * By default, the owner account will be the one that deploys the contract. This\\r\\n * can later be changed with {transferOwnership}.\\r\\n *\\r\\n * This module is used through inheritance. It will make available the modifier\\r\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\r\\n * the owner.\\r\\n */\\r\\nabstract contract Ownable is Context {\\r\\n    address private _owner;\\r\\n\\r\\n    event OwnershipTransferred(\\r\\n        address indexed previousOwner,\\r\\n        address indexed newOwner\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\r\\n     */\\r\\n    constructor() {\\r\\n        _transferOwnership(_msgSender());\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current owner.\\r\\n     */\\r\\n    function owner() public view virtual returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier onlyOwner() {\\r\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Leaves the contract without owner. It will not be possible to call\\r\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\r\\n     *\\r\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\r\\n     * thereby removing any functionality that is only available to the owner.\\r\\n     */\\r\\n    function renounceOwnership() public virtual onlyOwner {\\r\\n        _transferOwnership(address(0));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n        require(\\r\\n            newOwner != address(0),\\r\\n            \\\"Ownable: new owner is the zero address\\\"\\r\\n        );\\r\\n        _transferOwnership(newOwner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Internal function without access restriction.\\r\\n     */\\r\\n    function _transferOwnership(address newOwner) internal virtual {\\r\\n        address oldOwner = _owner;\\r\\n        _owner = newOwner;\\r\\n        emit OwnershipTransferred(oldOwner, newOwner);\\r\\n    }\\r\\n}\\r\\n\\r\\n// File @openzeppelin/contracts/utils/math/SafeMath.sol@v4.6.0\\r\\n\\r\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n// CAUTION\\r\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\r\\n// because it relies on the compiler's built in overflow checks.\\r\\n\\r\\n/**\\r\\n * @dev Wrappers over Solidity's arithmetic operations.\\r\\n *\\r\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\r\\n * now has built in overflow checking.\\r\\n */\\r\\nlibrary SafeMath {\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryAdd(\\r\\n        uint256 a,\\r\\n        uint256 b\\r\\n    ) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            uint256 c = a + b;\\r\\n            if (c < a) return (false, 0);\\r\\n            return (true, c);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function trySub(\\r\\n        uint256 a,\\r\\n        uint256 b\\r\\n    ) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            if (b > a) return (false, 0);\\r\\n            return (true, a - b);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryMul(\\r\\n        uint256 a,\\r\\n        uint256 b\\r\\n    ) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\r\\n            // benefit is lost if 'b' is also tested.\\r\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\r\\n            if (a == 0) return (true, 0);\\r\\n            uint256 c = a * b;\\r\\n            if (c / a != b) return (false, 0);\\r\\n            return (true, c);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryDiv(\\r\\n        uint256 a,\\r\\n        uint256 b\\r\\n    ) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            if (b == 0) return (false, 0);\\r\\n            return (true, a / b);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryMod(\\r\\n        uint256 a,\\r\\n        uint256 b\\r\\n    ) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            if (b == 0) return (false, 0);\\r\\n            return (true, a % b);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity's `+` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Addition cannot overflow.\\r\\n     */\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a + b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity's `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a - b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity's `*` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Multiplication cannot overflow.\\r\\n     */\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a * b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `/` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a / b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * reverting when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a % b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\r\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\r\\n     *\\r\\n     * Counterpart to Solidity's `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            require(b <= a, errorMessage);\\r\\n            return a - b;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            require(b > 0, errorMessage);\\r\\n            return a / b;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * reverting with custom message when dividing by zero.\\r\\n     *\\r\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\r\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\r\\n     *\\r\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            require(b > 0, errorMessage);\\r\\n            return a % b;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\n// File @openzeppelin/contracts/utils/Address.sol@v4.6.0\\r\\n\\r\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\r\\n\\r\\npragma solidity ^0.8.1;\\r\\n\\r\\n/**\\r\\n * @dev Collection of functions related to the address type\\r\\n */\\r\\nlibrary Address {\\r\\n    /**\\r\\n     * @dev Returns true if `account` is a contract.\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * It is unsafe to assume that an address for which this function returns\\r\\n     * false is an externally-owned account (EOA) and not a contract.\\r\\n     *\\r\\n     * Among others, `isContract` will return false for the following\\r\\n     * types of addresses:\\r\\n     *\\r\\n     *  - an externally-owned account\\r\\n     *  - a contract in construction\\r\\n     *  - an address where a contract will be created\\r\\n     *  - an address where a contract lived, but was destroyed\\r\\n     * ====\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\r\\n     *\\r\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\r\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\r\\n     * constructor.\\r\\n     * ====\\r\\n     */\\r\\n    function isContract(address account) internal view returns (bool) {\\r\\n        // This method relies on extcodesize/address.code.length, which returns 0\\r\\n        // for contracts in construction, since the code is only stored at the end\\r\\n        // of the constructor execution.\\r\\n\\r\\n        return account.code.length > 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\r\\n     * `recipient`, forwarding all available gas and reverting on errors.\\r\\n     *\\r\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\r\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\r\\n     * imposed by `transfer`, making them unable to receive funds via\\r\\n     * `transfer`. {sendValue} removes this limitation.\\r\\n     *\\r\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\r\\n     *\\r\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\r\\n     * taken to not create reentrancy vulnerabilities. Consider using\\r\\n     * {ReentrancyGuard} or the\\r\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\r\\n     */\\r\\n    function sendValue(address payable recipient, uint256 amount) internal {\\r\\n        require(\\r\\n            address(this).balance >= amount,\\r\\n            \\\"Address: insufficient balance\\\"\\r\\n        );\\r\\n\\r\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\r\\n        require(\\r\\n            success,\\r\\n            \\\"Address: unable to send value, recipient may have reverted\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Performs a Solidity function call using a low level `call`. A\\r\\n     * plain `call` is an unsafe replacement for a function call: use this\\r\\n     * function instead.\\r\\n     *\\r\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\r\\n     * function (like regular Solidity function calls).\\r\\n     *\\r\\n     * Returns the raw returned data. To convert to the expected return value,\\r\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `target` must be a contract.\\r\\n     * - calling `target` with `data` must not revert.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(\\r\\n        address target,\\r\\n        bytes memory data\\r\\n    ) internal returns (bytes memory) {\\r\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\r\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, 0, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but also transferring `value` wei to `target`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the calling contract must have an ETH balance of at least `value`.\\r\\n     * - the called Solidity function must be `payable`.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        uint256 value\\r\\n    ) internal returns (bytes memory) {\\r\\n        return\\r\\n            functionCallWithValue(\\r\\n                target,\\r\\n                data,\\r\\n                value,\\r\\n                \\\"Address: low-level call with value failed\\\"\\r\\n            );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\r\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        uint256 value,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        require(\\r\\n            address(this).balance >= value,\\r\\n            \\\"Address: insufficient balance for call\\\"\\r\\n        );\\r\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\r\\n\\r\\n        (bool success, bytes memory returndata) = target.call{value: value}(\\r\\n            data\\r\\n        );\\r\\n        return verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(\\r\\n        address target,\\r\\n        bytes memory data\\r\\n    ) internal view returns (bytes memory) {\\r\\n        return\\r\\n            functionStaticCall(\\r\\n                target,\\r\\n                data,\\r\\n                \\\"Address: low-level static call failed\\\"\\r\\n            );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal view returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\r\\n\\r\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\r\\n        return verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function functionDelegateCall(\\r\\n        address target,\\r\\n        bytes memory data\\r\\n    ) internal returns (bytes memory) {\\r\\n        return\\r\\n            functionDelegateCall(\\r\\n                target,\\r\\n                data,\\r\\n                \\\"Address: low-level delegate call failed\\\"\\r\\n            );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function functionDelegateCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\r\\n\\r\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\r\\n        return verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\r\\n     * revert reason using the provided one.\\r\\n     *\\r\\n     * _Available since v4.3._\\r\\n     */\\r\\n    function verifyCallResult(\\r\\n        bool success,\\r\\n        bytes memory returndata,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (bytes memory) {\\r\\n        if (success) {\\r\\n            return returndata;\\r\\n        } else {\\r\\n            // Look for revert reason and bubble it up if present\\r\\n            if (returndata.length > 0) {\\r\\n                // The easiest way to bubble the revert reason is using memory via assembly\\r\\n\\r\\n                assembly {\\r\\n                    let returndata_size := mload(returndata)\\r\\n                    revert(add(32, returndata), returndata_size)\\r\\n                }\\r\\n            } else {\\r\\n                revert(errorMessage);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\n// File @openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol@v4.6.0\\r\\n\\r\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @title SafeERC20\\r\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\r\\n * contract returns false). Tokens that return no value (and instead revert or\\r\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\r\\n * successful.\\r\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\r\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\r\\n */\\r\\nlibrary SafeERC20 {\\r\\n    using Address for address;\\r\\n\\r\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\r\\n        _callOptionalReturn(\\r\\n            token,\\r\\n            abi.encodeWithSelector(token.transfer.selector, to, value)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function safeTransferFrom(\\r\\n        IERC20 token,\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        _callOptionalReturn(\\r\\n            token,\\r\\n            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Deprecated. This function has issues similar to the ones found in\\r\\n     * {IERC20-approve}, and its usage is discouraged.\\r\\n     *\\r\\n     * Whenever possible, use {safeIncreaseAllowance} and\\r\\n     * {safeDecreaseAllowance} instead.\\r\\n     */\\r\\n    function safeApprove(\\r\\n        IERC20 token,\\r\\n        address spender,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        // safeApprove should only be called when setting an initial allowance,\\r\\n        // or when resetting it to zero. To increase and decrease it, use\\r\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\r\\n        require(\\r\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\r\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\r\\n        );\\r\\n        _callOptionalReturn(\\r\\n            token,\\r\\n            abi.encodeWithSelector(token.approve.selector, spender, value)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function safeIncreaseAllowance(\\r\\n        IERC20 token,\\r\\n        address spender,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\r\\n        _callOptionalReturn(\\r\\n            token,\\r\\n            abi.encodeWithSelector(\\r\\n                token.approve.selector,\\r\\n                spender,\\r\\n                newAllowance\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function safeDecreaseAllowance(\\r\\n        IERC20 token,\\r\\n        address spender,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        unchecked {\\r\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\r\\n            require(\\r\\n                oldAllowance >= value,\\r\\n                \\\"SafeERC20: decreased allowance below zero\\\"\\r\\n            );\\r\\n            uint256 newAllowance = oldAllowance - value;\\r\\n            _callOptionalReturn(\\r\\n                token,\\r\\n                abi.encodeWithSelector(\\r\\n                    token.approve.selector,\\r\\n                    spender,\\r\\n                    newAllowance\\r\\n                )\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\r\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\r\\n     * @param token The token targeted by the call.\\r\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\r\\n     */\\r\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\r\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\r\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\r\\n        // the target address contains contract code and also asserts for success in the low-level call.\\r\\n\\r\\n        bytes memory returndata = address(token).functionCall(\\r\\n            data,\\r\\n            \\\"SafeERC20: low-level call failed\\\"\\r\\n        );\\r\\n        if (returndata.length > 0) {\\r\\n            // Return data is optional\\r\\n            require(\\r\\n                abi.decode(returndata, (bool)),\\r\\n                \\\"SafeERC20: ERC20 operation did not succeed\\\"\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\n// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IRouter {\\r\\n    function swapExactTokensForTokens(\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256[] memory amounts);\\r\\n\\r\\n    function swapExactETHForTokens(\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external payable returns (uint256[] memory amounts);\\r\\n\\r\\n    function swapExactTokensForETH(\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256[] memory amounts);\\r\\n\\r\\n    function getAmountsOut(\\r\\n        uint256 amountIn,\\r\\n        address[] calldata path\\r\\n    ) external view returns (uint256[] memory amounts);\\r\\n}\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\n/// @title The interface for the PancakeSwap V3 Factory\\r\\n/// @notice The PancakeSwap V3 Factory facilitates creation of PancakeSwap V3 pools and control over the protocol fees\\r\\ninterface IPancakeV3Factory {\\r\\n    function getPool(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint24 fee\\r\\n    ) external view returns (address pool);\\r\\n}\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\ninterface IPancakeV3PoolState {\\r\\n    function slot0()\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            uint160 sqrtPriceX96,\\r\\n            int24 tick,\\r\\n            uint16 observationIndex,\\r\\n            uint16 observationCardinality,\\r\\n            uint16 observationCardinalityNext,\\r\\n            uint32 feeProtocol,\\r\\n            bool unlocked\\r\\n        );\\r\\n}\\r\\n\\r\\ninterface IPancakeV3PoolImmutables {\\r\\n    /// @notice The contract that deployed the pool, which must adhere to the IPancakeV3Factory interface\\r\\n    /// @return The contract address\\r\\n    function factory() external view returns (address);\\r\\n\\r\\n    /// @notice The first of the two tokens of the pool, sorted by address\\r\\n    /// @return The token contract address\\r\\n    function token0() external view returns (address);\\r\\n\\r\\n    /// @notice The second of the two tokens of the pool, sorted by address\\r\\n    /// @return The token contract address\\r\\n    function token1() external view returns (address);\\r\\n\\r\\n    /// @notice The pool's fee in hundredths of a bip, i.e. 1e-6\\r\\n    /// @return The fee\\r\\n    function fee() external view returns (uint24);\\r\\n\\r\\n    /// @notice The pool tick spacing\\r\\n    /// @dev Ticks can only be used at multiples of this value, minimum of 1 and always positive\\r\\n    /// e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ...\\r\\n    /// This value is an int24 to avoid casting even though it is always positive.\\r\\n    /// @return The tick spacing\\r\\n    function tickSpacing() external view returns (int24);\\r\\n\\r\\n    /// @notice The maximum amount of position liquidity that can use any tick in the range\\r\\n    /// @dev This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and\\r\\n    /// also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\\r\\n    /// @return The max amount of liquidity per tick\\r\\n    function maxLiquidityPerTick() external view returns (uint128);\\r\\n}\\r\\n\\r\\ninterface IPancakeV3Pool is IPancakeV3PoolState, IPancakeV3PoolImmutables {}\\r\\n\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\n/// @title Callback for IPancakeV3PoolActions#swap\\r\\n/// @notice Any contract that calls IPancakeV3PoolActions#swap must implement this interface\\r\\ninterface IPancakeV3SwapCallback {\\r\\n    /// @notice Called to `msg.sender` after executing a swap via IPancakeV3Pool#swap.\\r\\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\\r\\n    /// The caller of this method must be checked to be a PancakeV3Pool deployed by the canonical PancakeV3Factory.\\r\\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\\r\\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\\r\\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\\r\\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\\r\\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\\r\\n    /// @param data Any data passed through by the caller via the IPancakeV3PoolActions#swap call\\r\\n    function pancakeV3SwapCallback(\\r\\n        int256 amount0Delta,\\r\\n        int256 amount1Delta,\\r\\n        bytes calldata data\\r\\n    ) external;\\r\\n}\\r\\n\\r\\ninterface IV3SwapRouter is IPancakeV3SwapCallback {\\r\\n    struct ExactInputSingleParams {\\r\\n        address tokenIn;\\r\\n        address tokenOut;\\r\\n        uint24 fee;\\r\\n        address recipient;\\r\\n        uint256 amountIn;\\r\\n        uint256 amountOutMinimum;\\r\\n        uint160 sqrtPriceLimitX96;\\r\\n    }\\r\\n\\r\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\\r\\n    /// @dev Setting `amountIn` to 0 will cause the contract to look up its own balance,\\r\\n    /// and swap the entire amount, enabling contracts to send tokens before calling this function.\\r\\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\\r\\n    /// @return amountOut The amount of the received token\\r\\n    function exactInputSingle(\\r\\n        ExactInputSingleParams calldata params\\r\\n    ) external payable returns (uint256 amountOut);\\r\\n\\r\\n    struct ExactInputParams {\\r\\n        bytes path;\\r\\n        address recipient;\\r\\n        uint256 amountIn;\\r\\n        uint256 amountOutMinimum;\\r\\n    }\\r\\n\\r\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\\r\\n    /// @dev Setting `amountIn` to 0 will cause the contract to look up its own balance,\\r\\n    /// and swap the entire amount, enabling contracts to send tokens before calling this function.\\r\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\\r\\n    /// @return amountOut The amount of the received token\\r\\n    function exactInput(\\r\\n        ExactInputParams calldata params\\r\\n    ) external payable returns (uint256 amountOut);\\r\\n\\r\\n    struct ExactOutputSingleParams {\\r\\n        address tokenIn;\\r\\n        address tokenOut;\\r\\n        uint24 fee;\\r\\n        address recipient;\\r\\n        uint256 amountOut;\\r\\n        uint256 amountInMaximum;\\r\\n        uint160 sqrtPriceLimitX96;\\r\\n    }\\r\\n\\r\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\\r\\n    /// that may remain in the router after the swap.\\r\\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\\r\\n    /// @return amountIn The amount of the input token\\r\\n    function exactOutputSingle(\\r\\n        ExactOutputSingleParams calldata params\\r\\n    ) external payable returns (uint256 amountIn);\\r\\n\\r\\n    struct ExactOutputParams {\\r\\n        bytes path;\\r\\n        address recipient;\\r\\n        uint256 amountOut;\\r\\n        uint256 amountInMaximum;\\r\\n    }\\r\\n\\r\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\\r\\n    /// that may remain in the router after the swap.\\r\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\\r\\n    /// @return amountIn The amount of the input token\\r\\n    function exactOutput(\\r\\n        ExactOutputParams calldata params\\r\\n    ) external payable returns (uint256 amountIn);\\r\\n\\r\\n    function refundETH() external payable;\\r\\n}\\r\\n\\r\\ncontract Claimable is Ownable {\\r\\n    function claimToken(\\r\\n        address tokenAddress,\\r\\n        uint256 amount\\r\\n    ) external onlyOwner {\\r\\n        IERC20(tokenAddress).transfer(owner(), amount);\\r\\n    }\\r\\n\\r\\n    function claimETH(uint256 amount) external onlyOwner {\\r\\n        (bool sent, ) = owner().call{value: amount}(\\\"\\\");\\r\\n        require(sent, \\\"Failed to send Ether\\\");\\r\\n    }\\r\\n}\\r\\n\\r\\ncontract ProSwap is Claimable {\\r\\n    using SafeMath for uint256;\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    uint public feePercent = 0; //10:0.25%\\r\\n    uint256 public rewardAmount = 10000000000000000000; //10 to tokens\\r\\n\\r\\n    address public rewardAddress;\\r\\n    address public feeAccount;\\r\\n    address public router;\\r\\n    address public wavax;\\r\\n\\r\\n    address public routerAddress = 0x13f4EA83D0bd40E75C8222255bc855a974568Dd4;\\r\\n    address public factoryAddress = 0x0BFbCF9fa4f9C56B0F40a671Ad40E0805A091865;\\r\\n    address public wbnbAddress = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;\\r\\n    uint24 poolFee = 100;\\r\\n\\r\\n    mapping(address => uint256) airdropAddress;\\r\\n    mapping(address => uint256) airdropLastTime;\\r\\n\\r\\n    constructor(\\r\\n        address _feeAccount,\\r\\n        address _router,\\r\\n        address _wavax,\\r\\n        address _rewardAddress\\r\\n    ) {\\r\\n        feeAccount = _feeAccount;\\r\\n        router = _router;\\r\\n        wavax = _wavax;\\r\\n        rewardAddress = _rewardAddress;\\r\\n    }\\r\\n\\r\\n    function airdrop() external {\\r\\n        require(\\r\\n            airdropAddress[msg.sender] + 86400 > block.timestamp,\\r\\n            \\\"You did not swap in 24 hours\\\"\\r\\n        );\\r\\n\\r\\n        require(\\r\\n            block.timestamp > airdropLastTime[msg.sender] + 86400,\\r\\n            \\\"You airdroped in 24 hours\\\"\\r\\n        );\\r\\n\\r\\n        IERC20(rewardAddress).safeTransfer(msg.sender, rewardAmount);\\r\\n        airdropLastTime[msg.sender] = block.timestamp;\\r\\n    }\\r\\n\\r\\n    function swapV2Tokens(\\r\\n        address _tokenA,\\r\\n        address _tokenB,\\r\\n        uint256 _amountIn\\r\\n    ) external payable {\\r\\n        airdropAddress[msg.sender] = block.timestamp;\\r\\n        address[] memory path = new address[](2);\\r\\n        if (_tokenA == address(0)) {\\r\\n            path[0] = wavax;\\r\\n            path[1] = _tokenB;\\r\\n        } else if (_tokenB == address(0)) {\\r\\n            path[0] = _tokenA;\\r\\n            path[1] = wavax;\\r\\n        } else {\\r\\n            path[0] = _tokenA;\\r\\n            path[1] = _tokenB;\\r\\n        }\\r\\n\\r\\n        _proceedToUniswap(_tokenA, _tokenB, _amountIn, path);\\r\\n    }\\r\\n\\r\\n    function customSwapTokens(\\r\\n        address _tokenA,\\r\\n        address _tokenB,\\r\\n        uint256 _amountIn,\\r\\n        address[] memory path\\r\\n    ) external payable {\\r\\n        if (_tokenA == address(0)) {\\r\\n            require(\\r\\n                wavax == path[0] && _tokenB == path[path.length - 1],\\r\\n                \\\"PattieSwap: Path must be specified\\\"\\r\\n            );\\r\\n        } else if (_tokenB == address(0)) {\\r\\n            require(\\r\\n                _tokenA == path[0] && wavax == path[path.length - 1],\\r\\n                \\\"PattieSwap: Path must be specified\\\"\\r\\n            );\\r\\n        } else {\\r\\n            require(\\r\\n                _tokenA == path[0] && _tokenB == path[path.length - 1],\\r\\n                \\\"PattieSwap: Path must be specified\\\"\\r\\n            );\\r\\n        }\\r\\n        _proceedToUniswap(_tokenA, _tokenB, _amountIn, path);\\r\\n    }\\r\\n\\r\\n    function _proceedToUniswap(\\r\\n        address _tokenA,\\r\\n        address _tokenB,\\r\\n        uint256 _amountIn,\\r\\n        address[] memory path\\r\\n    ) internal {\\r\\n        require(_amountIn > 0, \\\"PattieSwap: amountIn must be greater than 0\\\");\\r\\n\\r\\n        if (_tokenA == address(0)) {\\r\\n            require(_amountIn >= msg.value, \\\"PattieSwap: Insufficient ETH\\\");\\r\\n            uint fee = (_amountIn * feePercent) / 10000;\\r\\n            payable(feeAccount).transfer(fee);\\r\\n            uint amountToSwap = _amountIn - fee;\\r\\n            _swapAVAXForTokens(amountToSwap, path);\\r\\n        } else {\\r\\n            IERC20(_tokenA).safeTransferFrom(\\r\\n                msg.sender,\\r\\n                address(this),\\r\\n                _amountIn\\r\\n            );\\r\\n            uint fee = (_amountIn * feePercent) / 10000;\\r\\n            IERC20(_tokenA).safeTransfer(feeAccount, fee);\\r\\n            uint amountToSwap = _amountIn - fee;\\r\\n            _approve(_tokenA, amountToSwap);\\r\\n            if (_tokenB == address(0)) {\\r\\n                _swapTokensForAVAX(amountToSwap, path);\\r\\n            } else {\\r\\n                _swapTokensForTokens(amountToSwap, path);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _approve(address _token, uint _amount) internal {\\r\\n        IERC20(_token).approve(address(router), _amount);\\r\\n    }\\r\\n\\r\\n    function _swapTokensForAVAX(uint _amount, address[] memory path) internal {\\r\\n        IRouter(router).swapExactTokensForETH(\\r\\n            _amount,\\r\\n            0,\\r\\n            path,\\r\\n            msg.sender,\\r\\n            block.timestamp\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function _swapAVAXForTokens(uint _amount, address[] memory path) internal {\\r\\n        IRouter(router).swapExactETHForTokens{value: _amount}(\\r\\n            0,\\r\\n            path,\\r\\n            msg.sender,\\r\\n            block.timestamp\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function _swapTokensForTokens(\\r\\n        uint _amount,\\r\\n        address[] memory path\\r\\n    ) internal {\\r\\n        IRouter(router).swapExactTokensForTokens(\\r\\n            _amount,\\r\\n            0,\\r\\n            path,\\r\\n            msg.sender,\\r\\n            block.timestamp\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function _v3Approve(address _token, uint _amount) internal {\\r\\n        IERC20(_token).approve(address(routerAddress), _amount);\\r\\n    }\\r\\n\\r\\n    function getOutputTokenAmount(\\r\\n        uint inputAmount,\\r\\n        address[] memory path\\r\\n    ) external view returns (uint outputAmount) {\\r\\n        uint[] memory outputs = IRouter(router).getAmountsOut(\\r\\n            inputAmount,\\r\\n            path\\r\\n        );\\r\\n        return outputs[outputs.length - 1];\\r\\n    }\\r\\n\\r\\n    function getV3OutputTokenAmount(\\r\\n        uint256 _inputAmount,\\r\\n        address _tokenIn,\\r\\n        address _tokenOut\\r\\n    ) external view returns (uint outputAmount) {\\r\\n        uint256 slotReturnValue = 0;\\r\\n        address pairAddress = IPancakeV3Factory(factoryAddress).getPool(\\r\\n            _tokenIn,\\r\\n            _tokenOut,\\r\\n            poolFee\\r\\n        );\\r\\n        (slotReturnValue, , , , , , ) = IPancakeV3PoolState(pairAddress)\\r\\n            .slot0();\\r\\n        address token0 = IPancakeV3Pool(pairAddress).token0();\\r\\n        if (_tokenIn == token0)\\r\\n            outputAmount = ((slotReturnValue ** 2 * _inputAmount) / 2 ** 192);\\r\\n        else outputAmount = ((2 ** 192 * _inputAmount) / slotReturnValue ** 2);\\r\\n    }\\r\\n\\r\\n    function setFeePercent(uint _feePercent) external onlyOwner {\\r\\n        feePercent = _feePercent;\\r\\n    }\\r\\n\\r\\n    function setRewardAmount(uint256 _amount) external onlyOwner {\\r\\n        rewardAmount = _amount;\\r\\n    }\\r\\n\\r\\n    function setRewardToken(address _rewawrdAddress) external onlyOwner {\\r\\n        rewardAddress = _rewawrdAddress;\\r\\n    }\\r\\n\\r\\n    function setFeeAccount(address _feeAccount) external onlyOwner {\\r\\n        feeAccount = _feeAccount;\\r\\n    }\\r\\n\\r\\n    function setRouterWAVAX(\\r\\n        address _router,\\r\\n        address _wavax\\r\\n    ) external onlyOwner {\\r\\n        router = _router;\\r\\n        wavax = _wavax;\\r\\n    }\\r\\n\\r\\n    function emergencyWithdraw(\\r\\n        address _token,\\r\\n        uint _amount\\r\\n    ) external onlyOwner {\\r\\n        IERC20(_token).safeTransfer(msg.sender, _amount);\\r\\n    }\\r\\n\\r\\n    function emergencyWithdrawETH(uint _amount) external onlyOwner {\\r\\n        payable(owner()).transfer(_amount);\\r\\n    }\\r\\n\\r\\n    function swapTokens(\\r\\n        address _tokenIn,\\r\\n        address _tokenOut,\\r\\n        uint256 _amountIn\\r\\n    ) external payable {\\r\\n        airdropAddress[msg.sender] = block.timestamp;\\r\\n        IV3SwapRouter.ExactInputSingleParams memory params = IV3SwapRouter\\r\\n            .ExactInputSingleParams(\\r\\n                _tokenIn,\\r\\n                _tokenOut,\\r\\n                poolFee,\\r\\n                msg.sender,\\r\\n                _amountIn,\\r\\n                0,\\r\\n                0\\r\\n            );\\r\\n        if (_tokenIn == wbnbAddress)\\r\\n            IV3SwapRouter(routerAddress).exactInputSingle{value: msg.value}(\\r\\n                params\\r\\n            );\\r\\n        else {\\r\\n            IERC20(_tokenIn).safeTransferFrom(\\r\\n                msg.sender,\\r\\n                address(this),\\r\\n                _amountIn\\r\\n            );\\r\\n            _v3Approve(_tokenIn, _amountIn);\\r\\n            IV3SwapRouter(routerAddress).exactInputSingle{value: msg.value}(\\r\\n                params\\r\\n            );\\r\\n        }\\r\\n        IV3SwapRouter(routerAddress).refundETH();\\r\\n        // refund leftover ETH to user\\r\\n        (bool success, ) = msg.sender.call{value: address(this).balance}(\\\"\\\");\\r\\n        require(success, \\\"refund failed\\\");\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x014ebbd50111dbe2ffd46bfee0dca5b1dbbc4785ff10cb323cef7317398427ea\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}},"IERC20":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Interface of the ERC20 standard as defined in the EIP.","events":{"Approval(address,address,uint256)":{"details":"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."},"Transfer(address,address,uint256)":{"details":"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."}},"kind":"dev","methods":{"allowance(address,address)":{"details":"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."},"approve(address,uint256)":{"details":"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."},"balanceOf(address)":{"details":"Returns the amount of tokens owned by `account`."},"totalSupply()":{"details":"Returns the amount of tokens in existence."},"transfer(address,uint256)":{"details":"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."},"transferFrom(address,address,uint256)":{"details":"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."}},"version":1},"evm":{"bytecode":{"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","totalSupply()":"18160ddd","transfer(address,uint256)":"a9059cbb","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 standard as defined in the EIP.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/swap.sol\":\"IERC20\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/swap.sol\":{\"content\":\"pragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\r\\n */\\r\\ninterface IERC20 {\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(\\r\\n        address indexed owner,\\r\\n        address indexed spender,\\r\\n        uint256 value\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address to, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(\\r\\n        address owner,\\r\\n        address spender\\r\\n    ) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender's allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller's\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n}\\r\\n\\r\\n// File @openzeppelin/contracts/utils/Context.sol@v4.6.0\\r\\n\\r\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Provides information about the current execution context, including the\\r\\n * sender of the transaction and its data. While these are generally available\\r\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\r\\n * manner, since when dealing with meta-transactions the account sending and\\r\\n * paying for execution may not be the actual sender (as far as an application\\r\\n * is concerned).\\r\\n *\\r\\n * This contract is only required for intermediate, library-like contracts.\\r\\n */\\r\\nabstract contract Context {\\r\\n    function _msgSender() internal view virtual returns (address) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view virtual returns (bytes calldata) {\\r\\n        return msg.data;\\r\\n    }\\r\\n}\\r\\n\\r\\n// File @openzeppelin/contracts/access/Ownable.sol@v4.6.0\\r\\n\\r\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Contract module which provides a basic access control mechanism, where\\r\\n * there is an account (an owner) that can be granted exclusive access to\\r\\n * specific functions.\\r\\n *\\r\\n * By default, the owner account will be the one that deploys the contract. This\\r\\n * can later be changed with {transferOwnership}.\\r\\n *\\r\\n * This module is used through inheritance. It will make available the modifier\\r\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\r\\n * the owner.\\r\\n */\\r\\nabstract contract Ownable is Context {\\r\\n    address private _owner;\\r\\n\\r\\n    event OwnershipTransferred(\\r\\n        address indexed previousOwner,\\r\\n        address indexed newOwner\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\r\\n     */\\r\\n    constructor() {\\r\\n        _transferOwnership(_msgSender());\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current owner.\\r\\n     */\\r\\n    function owner() public view virtual returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier onlyOwner() {\\r\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Leaves the contract without owner. It will not be possible to call\\r\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\r\\n     *\\r\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\r\\n     * thereby removing any functionality that is only available to the owner.\\r\\n     */\\r\\n    function renounceOwnership() public virtual onlyOwner {\\r\\n        _transferOwnership(address(0));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n        require(\\r\\n            newOwner != address(0),\\r\\n            \\\"Ownable: new owner is the zero address\\\"\\r\\n        );\\r\\n        _transferOwnership(newOwner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Internal function without access restriction.\\r\\n     */\\r\\n    function _transferOwnership(address newOwner) internal virtual {\\r\\n        address oldOwner = _owner;\\r\\n        _owner = newOwner;\\r\\n        emit OwnershipTransferred(oldOwner, newOwner);\\r\\n    }\\r\\n}\\r\\n\\r\\n// File @openzeppelin/contracts/utils/math/SafeMath.sol@v4.6.0\\r\\n\\r\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n// CAUTION\\r\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\r\\n// because it relies on the compiler's built in overflow checks.\\r\\n\\r\\n/**\\r\\n * @dev Wrappers over Solidity's arithmetic operations.\\r\\n *\\r\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\r\\n * now has built in overflow checking.\\r\\n */\\r\\nlibrary SafeMath {\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryAdd(\\r\\n        uint256 a,\\r\\n        uint256 b\\r\\n    ) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            uint256 c = a + b;\\r\\n            if (c < a) return (false, 0);\\r\\n            return (true, c);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function trySub(\\r\\n        uint256 a,\\r\\n        uint256 b\\r\\n    ) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            if (b > a) return (false, 0);\\r\\n            return (true, a - b);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryMul(\\r\\n        uint256 a,\\r\\n        uint256 b\\r\\n    ) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\r\\n            // benefit is lost if 'b' is also tested.\\r\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\r\\n            if (a == 0) return (true, 0);\\r\\n            uint256 c = a * b;\\r\\n            if (c / a != b) return (false, 0);\\r\\n            return (true, c);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryDiv(\\r\\n        uint256 a,\\r\\n        uint256 b\\r\\n    ) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            if (b == 0) return (false, 0);\\r\\n            return (true, a / b);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryMod(\\r\\n        uint256 a,\\r\\n        uint256 b\\r\\n    ) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            if (b == 0) return (false, 0);\\r\\n            return (true, a % b);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity's `+` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Addition cannot overflow.\\r\\n     */\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a + b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity's `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a - b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity's `*` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Multiplication cannot overflow.\\r\\n     */\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a * b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `/` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a / b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * reverting when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a % b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\r\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\r\\n     *\\r\\n     * Counterpart to Solidity's `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            require(b <= a, errorMessage);\\r\\n            return a - b;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            require(b > 0, errorMessage);\\r\\n            return a / b;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * reverting with custom message when dividing by zero.\\r\\n     *\\r\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\r\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\r\\n     *\\r\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            require(b > 0, errorMessage);\\r\\n            return a % b;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\n// File @openzeppelin/contracts/utils/Address.sol@v4.6.0\\r\\n\\r\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\r\\n\\r\\npragma solidity ^0.8.1;\\r\\n\\r\\n/**\\r\\n * @dev Collection of functions related to the address type\\r\\n */\\r\\nlibrary Address {\\r\\n    /**\\r\\n     * @dev Returns true if `account` is a contract.\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * It is unsafe to assume that an address for which this function returns\\r\\n     * false is an externally-owned account (EOA) and not a contract.\\r\\n     *\\r\\n     * Among others, `isContract` will return false for the following\\r\\n     * types of addresses:\\r\\n     *\\r\\n     *  - an externally-owned account\\r\\n     *  - a contract in construction\\r\\n     *  - an address where a contract will be created\\r\\n     *  - an address where a contract lived, but was destroyed\\r\\n     * ====\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\r\\n     *\\r\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\r\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\r\\n     * constructor.\\r\\n     * ====\\r\\n     */\\r\\n    function isContract(address account) internal view returns (bool) {\\r\\n        // This method relies on extcodesize/address.code.length, which returns 0\\r\\n        // for contracts in construction, since the code is only stored at the end\\r\\n        // of the constructor execution.\\r\\n\\r\\n        return account.code.length > 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\r\\n     * `recipient`, forwarding all available gas and reverting on errors.\\r\\n     *\\r\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\r\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\r\\n     * imposed by `transfer`, making them unable to receive funds via\\r\\n     * `transfer`. {sendValue} removes this limitation.\\r\\n     *\\r\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\r\\n     *\\r\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\r\\n     * taken to not create reentrancy vulnerabilities. Consider using\\r\\n     * {ReentrancyGuard} or the\\r\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\r\\n     */\\r\\n    function sendValue(address payable recipient, uint256 amount) internal {\\r\\n        require(\\r\\n            address(this).balance >= amount,\\r\\n            \\\"Address: insufficient balance\\\"\\r\\n        );\\r\\n\\r\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\r\\n        require(\\r\\n            success,\\r\\n            \\\"Address: unable to send value, recipient may have reverted\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Performs a Solidity function call using a low level `call`. A\\r\\n     * plain `call` is an unsafe replacement for a function call: use this\\r\\n     * function instead.\\r\\n     *\\r\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\r\\n     * function (like regular Solidity function calls).\\r\\n     *\\r\\n     * Returns the raw returned data. To convert to the expected return value,\\r\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `target` must be a contract.\\r\\n     * - calling `target` with `data` must not revert.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(\\r\\n        address target,\\r\\n        bytes memory data\\r\\n    ) internal returns (bytes memory) {\\r\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\r\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, 0, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but also transferring `value` wei to `target`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the calling contract must have an ETH balance of at least `value`.\\r\\n     * - the called Solidity function must be `payable`.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        uint256 value\\r\\n    ) internal returns (bytes memory) {\\r\\n        return\\r\\n            functionCallWithValue(\\r\\n                target,\\r\\n                data,\\r\\n                value,\\r\\n                \\\"Address: low-level call with value failed\\\"\\r\\n            );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\r\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        uint256 value,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        require(\\r\\n            address(this).balance >= value,\\r\\n            \\\"Address: insufficient balance for call\\\"\\r\\n        );\\r\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\r\\n\\r\\n        (bool success, bytes memory returndata) = target.call{value: value}(\\r\\n            data\\r\\n        );\\r\\n        return verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(\\r\\n        address target,\\r\\n        bytes memory data\\r\\n    ) internal view returns (bytes memory) {\\r\\n        return\\r\\n            functionStaticCall(\\r\\n                target,\\r\\n                data,\\r\\n                \\\"Address: low-level static call failed\\\"\\r\\n            );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal view returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\r\\n\\r\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\r\\n        return verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function functionDelegateCall(\\r\\n        address target,\\r\\n        bytes memory data\\r\\n    ) internal returns (bytes memory) {\\r\\n        return\\r\\n            functionDelegateCall(\\r\\n                target,\\r\\n                data,\\r\\n                \\\"Address: low-level delegate call failed\\\"\\r\\n            );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function functionDelegateCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\r\\n\\r\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\r\\n        return verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\r\\n     * revert reason using the provided one.\\r\\n     *\\r\\n     * _Available since v4.3._\\r\\n     */\\r\\n    function verifyCallResult(\\r\\n        bool success,\\r\\n        bytes memory returndata,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (bytes memory) {\\r\\n        if (success) {\\r\\n            return returndata;\\r\\n        } else {\\r\\n            // Look for revert reason and bubble it up if present\\r\\n            if (returndata.length > 0) {\\r\\n                // The easiest way to bubble the revert reason is using memory via assembly\\r\\n\\r\\n                assembly {\\r\\n                    let returndata_size := mload(returndata)\\r\\n                    revert(add(32, returndata), returndata_size)\\r\\n                }\\r\\n            } else {\\r\\n                revert(errorMessage);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\n// File @openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol@v4.6.0\\r\\n\\r\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @title SafeERC20\\r\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\r\\n * contract returns false). Tokens that return no value (and instead revert or\\r\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\r\\n * successful.\\r\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\r\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\r\\n */\\r\\nlibrary SafeERC20 {\\r\\n    using Address for address;\\r\\n\\r\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\r\\n        _callOptionalReturn(\\r\\n            token,\\r\\n            abi.encodeWithSelector(token.transfer.selector, to, value)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function safeTransferFrom(\\r\\n        IERC20 token,\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        _callOptionalReturn(\\r\\n            token,\\r\\n            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Deprecated. This function has issues similar to the ones found in\\r\\n     * {IERC20-approve}, and its usage is discouraged.\\r\\n     *\\r\\n     * Whenever possible, use {safeIncreaseAllowance} and\\r\\n     * {safeDecreaseAllowance} instead.\\r\\n     */\\r\\n    function safeApprove(\\r\\n        IERC20 token,\\r\\n        address spender,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        // safeApprove should only be called when setting an initial allowance,\\r\\n        // or when resetting it to zero. To increase and decrease it, use\\r\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\r\\n        require(\\r\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\r\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\r\\n        );\\r\\n        _callOptionalReturn(\\r\\n            token,\\r\\n            abi.encodeWithSelector(token.approve.selector, spender, value)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function safeIncreaseAllowance(\\r\\n        IERC20 token,\\r\\n        address spender,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\r\\n        _callOptionalReturn(\\r\\n            token,\\r\\n            abi.encodeWithSelector(\\r\\n                token.approve.selector,\\r\\n                spender,\\r\\n                newAllowance\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function safeDecreaseAllowance(\\r\\n        IERC20 token,\\r\\n        address spender,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        unchecked {\\r\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\r\\n            require(\\r\\n                oldAllowance >= value,\\r\\n                \\\"SafeERC20: decreased allowance below zero\\\"\\r\\n            );\\r\\n            uint256 newAllowance = oldAllowance - value;\\r\\n            _callOptionalReturn(\\r\\n                token,\\r\\n                abi.encodeWithSelector(\\r\\n                    token.approve.selector,\\r\\n                    spender,\\r\\n                    newAllowance\\r\\n                )\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\r\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\r\\n     * @param token The token targeted by the call.\\r\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\r\\n     */\\r\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\r\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\r\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\r\\n        // the target address contains contract code and also asserts for success in the low-level call.\\r\\n\\r\\n        bytes memory returndata = address(token).functionCall(\\r\\n            data,\\r\\n            \\\"SafeERC20: low-level call failed\\\"\\r\\n        );\\r\\n        if (returndata.length > 0) {\\r\\n            // Return data is optional\\r\\n            require(\\r\\n                abi.decode(returndata, (bool)),\\r\\n                \\\"SafeERC20: ERC20 operation did not succeed\\\"\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\n// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IRouter {\\r\\n    function swapExactTokensForTokens(\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256[] memory amounts);\\r\\n\\r\\n    function swapExactETHForTokens(\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external payable returns (uint256[] memory amounts);\\r\\n\\r\\n    function swapExactTokensForETH(\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256[] memory amounts);\\r\\n\\r\\n    function getAmountsOut(\\r\\n        uint256 amountIn,\\r\\n        address[] calldata path\\r\\n    ) external view returns (uint256[] memory amounts);\\r\\n}\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\n/// @title The interface for the PancakeSwap V3 Factory\\r\\n/// @notice The PancakeSwap V3 Factory facilitates creation of PancakeSwap V3 pools and control over the protocol fees\\r\\ninterface IPancakeV3Factory {\\r\\n    function getPool(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint24 fee\\r\\n    ) external view returns (address pool);\\r\\n}\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\ninterface IPancakeV3PoolState {\\r\\n    function slot0()\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            uint160 sqrtPriceX96,\\r\\n            int24 tick,\\r\\n            uint16 observationIndex,\\r\\n            uint16 observationCardinality,\\r\\n            uint16 observationCardinalityNext,\\r\\n            uint32 feeProtocol,\\r\\n            bool unlocked\\r\\n        );\\r\\n}\\r\\n\\r\\ninterface IPancakeV3PoolImmutables {\\r\\n    /// @notice The contract that deployed the pool, which must adhere to the IPancakeV3Factory interface\\r\\n    /// @return The contract address\\r\\n    function factory() external view returns (address);\\r\\n\\r\\n    /// @notice The first of the two tokens of the pool, sorted by address\\r\\n    /// @return The token contract address\\r\\n    function token0() external view returns (address);\\r\\n\\r\\n    /// @notice The second of the two tokens of the pool, sorted by address\\r\\n    /// @return The token contract address\\r\\n    function token1() external view returns (address);\\r\\n\\r\\n    /// @notice The pool's fee in hundredths of a bip, i.e. 1e-6\\r\\n    /// @return The fee\\r\\n    function fee() external view returns (uint24);\\r\\n\\r\\n    /// @notice The pool tick spacing\\r\\n    /// @dev Ticks can only be used at multiples of this value, minimum of 1 and always positive\\r\\n    /// e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ...\\r\\n    /// This value is an int24 to avoid casting even though it is always positive.\\r\\n    /// @return The tick spacing\\r\\n    function tickSpacing() external view returns (int24);\\r\\n\\r\\n    /// @notice The maximum amount of position liquidity that can use any tick in the range\\r\\n    /// @dev This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and\\r\\n    /// also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\\r\\n    /// @return The max amount of liquidity per tick\\r\\n    function maxLiquidityPerTick() external view returns (uint128);\\r\\n}\\r\\n\\r\\ninterface IPancakeV3Pool is IPancakeV3PoolState, IPancakeV3PoolImmutables {}\\r\\n\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\n/// @title Callback for IPancakeV3PoolActions#swap\\r\\n/// @notice Any contract that calls IPancakeV3PoolActions#swap must implement this interface\\r\\ninterface IPancakeV3SwapCallback {\\r\\n    /// @notice Called to `msg.sender` after executing a swap via IPancakeV3Pool#swap.\\r\\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\\r\\n    /// The caller of this method must be checked to be a PancakeV3Pool deployed by the canonical PancakeV3Factory.\\r\\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\\r\\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\\r\\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\\r\\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\\r\\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\\r\\n    /// @param data Any data passed through by the caller via the IPancakeV3PoolActions#swap call\\r\\n    function pancakeV3SwapCallback(\\r\\n        int256 amount0Delta,\\r\\n        int256 amount1Delta,\\r\\n        bytes calldata data\\r\\n    ) external;\\r\\n}\\r\\n\\r\\ninterface IV3SwapRouter is IPancakeV3SwapCallback {\\r\\n    struct ExactInputSingleParams {\\r\\n        address tokenIn;\\r\\n        address tokenOut;\\r\\n        uint24 fee;\\r\\n        address recipient;\\r\\n        uint256 amountIn;\\r\\n        uint256 amountOutMinimum;\\r\\n        uint160 sqrtPriceLimitX96;\\r\\n    }\\r\\n\\r\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\\r\\n    /// @dev Setting `amountIn` to 0 will cause the contract to look up its own balance,\\r\\n    /// and swap the entire amount, enabling contracts to send tokens before calling this function.\\r\\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\\r\\n    /// @return amountOut The amount of the received token\\r\\n    function exactInputSingle(\\r\\n        ExactInputSingleParams calldata params\\r\\n    ) external payable returns (uint256 amountOut);\\r\\n\\r\\n    struct ExactInputParams {\\r\\n        bytes path;\\r\\n        address recipient;\\r\\n        uint256 amountIn;\\r\\n        uint256 amountOutMinimum;\\r\\n    }\\r\\n\\r\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\\r\\n    /// @dev Setting `amountIn` to 0 will cause the contract to look up its own balance,\\r\\n    /// and swap the entire amount, enabling contracts to send tokens before calling this function.\\r\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\\r\\n    /// @return amountOut The amount of the received token\\r\\n    function exactInput(\\r\\n        ExactInputParams calldata params\\r\\n    ) external payable returns (uint256 amountOut);\\r\\n\\r\\n    struct ExactOutputSingleParams {\\r\\n        address tokenIn;\\r\\n        address tokenOut;\\r\\n        uint24 fee;\\r\\n        address recipient;\\r\\n        uint256 amountOut;\\r\\n        uint256 amountInMaximum;\\r\\n        uint160 sqrtPriceLimitX96;\\r\\n    }\\r\\n\\r\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\\r\\n    /// that may remain in the router after the swap.\\r\\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\\r\\n    /// @return amountIn The amount of the input token\\r\\n    function exactOutputSingle(\\r\\n        ExactOutputSingleParams calldata params\\r\\n    ) external payable returns (uint256 amountIn);\\r\\n\\r\\n    struct ExactOutputParams {\\r\\n        bytes path;\\r\\n        address recipient;\\r\\n        uint256 amountOut;\\r\\n        uint256 amountInMaximum;\\r\\n    }\\r\\n\\r\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\\r\\n    /// that may remain in the router after the swap.\\r\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\\r\\n    /// @return amountIn The amount of the input token\\r\\n    function exactOutput(\\r\\n        ExactOutputParams calldata params\\r\\n    ) external payable returns (uint256 amountIn);\\r\\n\\r\\n    function refundETH() external payable;\\r\\n}\\r\\n\\r\\ncontract Claimable is Ownable {\\r\\n    function claimToken(\\r\\n        address tokenAddress,\\r\\n        uint256 amount\\r\\n    ) external onlyOwner {\\r\\n        IERC20(tokenAddress).transfer(owner(), amount);\\r\\n    }\\r\\n\\r\\n    function claimETH(uint256 amount) external onlyOwner {\\r\\n        (bool sent, ) = owner().call{value: amount}(\\\"\\\");\\r\\n        require(sent, \\\"Failed to send Ether\\\");\\r\\n    }\\r\\n}\\r\\n\\r\\ncontract ProSwap is Claimable {\\r\\n    using SafeMath for uint256;\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    uint public feePercent = 0; //10:0.25%\\r\\n    uint256 public rewardAmount = 10000000000000000000; //10 to tokens\\r\\n\\r\\n    address public rewardAddress;\\r\\n    address public feeAccount;\\r\\n    address public router;\\r\\n    address public wavax;\\r\\n\\r\\n    address public routerAddress = 0x13f4EA83D0bd40E75C8222255bc855a974568Dd4;\\r\\n    address public factoryAddress = 0x0BFbCF9fa4f9C56B0F40a671Ad40E0805A091865;\\r\\n    address public wbnbAddress = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;\\r\\n    uint24 poolFee = 100;\\r\\n\\r\\n    mapping(address => uint256) airdropAddress;\\r\\n    mapping(address => uint256) airdropLastTime;\\r\\n\\r\\n    constructor(\\r\\n        address _feeAccount,\\r\\n        address _router,\\r\\n        address _wavax,\\r\\n        address _rewardAddress\\r\\n    ) {\\r\\n        feeAccount = _feeAccount;\\r\\n        router = _router;\\r\\n        wavax = _wavax;\\r\\n        rewardAddress = _rewardAddress;\\r\\n    }\\r\\n\\r\\n    function airdrop() external {\\r\\n        require(\\r\\n            airdropAddress[msg.sender] + 86400 > block.timestamp,\\r\\n            \\\"You did not swap in 24 hours\\\"\\r\\n        );\\r\\n\\r\\n        require(\\r\\n            block.timestamp > airdropLastTime[msg.sender] + 86400,\\r\\n            \\\"You airdroped in 24 hours\\\"\\r\\n        );\\r\\n\\r\\n        IERC20(rewardAddress).safeTransfer(msg.sender, rewardAmount);\\r\\n        airdropLastTime[msg.sender] = block.timestamp;\\r\\n    }\\r\\n\\r\\n    function swapV2Tokens(\\r\\n        address _tokenA,\\r\\n        address _tokenB,\\r\\n        uint256 _amountIn\\r\\n    ) external payable {\\r\\n        airdropAddress[msg.sender] = block.timestamp;\\r\\n        address[] memory path = new address[](2);\\r\\n        if (_tokenA == address(0)) {\\r\\n            path[0] = wavax;\\r\\n            path[1] = _tokenB;\\r\\n        } else if (_tokenB == address(0)) {\\r\\n            path[0] = _tokenA;\\r\\n            path[1] = wavax;\\r\\n        } else {\\r\\n            path[0] = _tokenA;\\r\\n            path[1] = _tokenB;\\r\\n        }\\r\\n\\r\\n        _proceedToUniswap(_tokenA, _tokenB, _amountIn, path);\\r\\n    }\\r\\n\\r\\n    function customSwapTokens(\\r\\n        address _tokenA,\\r\\n        address _tokenB,\\r\\n        uint256 _amountIn,\\r\\n        address[] memory path\\r\\n    ) external payable {\\r\\n        if (_tokenA == address(0)) {\\r\\n            require(\\r\\n                wavax == path[0] && _tokenB == path[path.length - 1],\\r\\n                \\\"PattieSwap: Path must be specified\\\"\\r\\n            );\\r\\n        } else if (_tokenB == address(0)) {\\r\\n            require(\\r\\n                _tokenA == path[0] && wavax == path[path.length - 1],\\r\\n                \\\"PattieSwap: Path must be specified\\\"\\r\\n            );\\r\\n        } else {\\r\\n            require(\\r\\n                _tokenA == path[0] && _tokenB == path[path.length - 1],\\r\\n                \\\"PattieSwap: Path must be specified\\\"\\r\\n            );\\r\\n        }\\r\\n        _proceedToUniswap(_tokenA, _tokenB, _amountIn, path);\\r\\n    }\\r\\n\\r\\n    function _proceedToUniswap(\\r\\n        address _tokenA,\\r\\n        address _tokenB,\\r\\n        uint256 _amountIn,\\r\\n        address[] memory path\\r\\n    ) internal {\\r\\n        require(_amountIn > 0, \\\"PattieSwap: amountIn must be greater than 0\\\");\\r\\n\\r\\n        if (_tokenA == address(0)) {\\r\\n            require(_amountIn >= msg.value, \\\"PattieSwap: Insufficient ETH\\\");\\r\\n            uint fee = (_amountIn * feePercent) / 10000;\\r\\n            payable(feeAccount).transfer(fee);\\r\\n            uint amountToSwap = _amountIn - fee;\\r\\n            _swapAVAXForTokens(amountToSwap, path);\\r\\n        } else {\\r\\n            IERC20(_tokenA).safeTransferFrom(\\r\\n                msg.sender,\\r\\n                address(this),\\r\\n                _amountIn\\r\\n            );\\r\\n            uint fee = (_amountIn * feePercent) / 10000;\\r\\n            IERC20(_tokenA).safeTransfer(feeAccount, fee);\\r\\n            uint amountToSwap = _amountIn - fee;\\r\\n            _approve(_tokenA, amountToSwap);\\r\\n            if (_tokenB == address(0)) {\\r\\n                _swapTokensForAVAX(amountToSwap, path);\\r\\n            } else {\\r\\n                _swapTokensForTokens(amountToSwap, path);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _approve(address _token, uint _amount) internal {\\r\\n        IERC20(_token).approve(address(router), _amount);\\r\\n    }\\r\\n\\r\\n    function _swapTokensForAVAX(uint _amount, address[] memory path) internal {\\r\\n        IRouter(router).swapExactTokensForETH(\\r\\n            _amount,\\r\\n            0,\\r\\n            path,\\r\\n            msg.sender,\\r\\n            block.timestamp\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function _swapAVAXForTokens(uint _amount, address[] memory path) internal {\\r\\n        IRouter(router).swapExactETHForTokens{value: _amount}(\\r\\n            0,\\r\\n            path,\\r\\n            msg.sender,\\r\\n            block.timestamp\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function _swapTokensForTokens(\\r\\n        uint _amount,\\r\\n        address[] memory path\\r\\n    ) internal {\\r\\n        IRouter(router).swapExactTokensForTokens(\\r\\n            _amount,\\r\\n            0,\\r\\n            path,\\r\\n            msg.sender,\\r\\n            block.timestamp\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function _v3Approve(address _token, uint _amount) internal {\\r\\n        IERC20(_token).approve(address(routerAddress), _amount);\\r\\n    }\\r\\n\\r\\n    function getOutputTokenAmount(\\r\\n        uint inputAmount,\\r\\n        address[] memory path\\r\\n    ) external view returns (uint outputAmount) {\\r\\n        uint[] memory outputs = IRouter(router).getAmountsOut(\\r\\n            inputAmount,\\r\\n            path\\r\\n        );\\r\\n        return outputs[outputs.length - 1];\\r\\n    }\\r\\n\\r\\n    function getV3OutputTokenAmount(\\r\\n        uint256 _inputAmount,\\r\\n        address _tokenIn,\\r\\n        address _tokenOut\\r\\n    ) external view returns (uint outputAmount) {\\r\\n        uint256 slotReturnValue = 0;\\r\\n        address pairAddress = IPancakeV3Factory(factoryAddress).getPool(\\r\\n            _tokenIn,\\r\\n            _tokenOut,\\r\\n            poolFee\\r\\n        );\\r\\n        (slotReturnValue, , , , , , ) = IPancakeV3PoolState(pairAddress)\\r\\n            .slot0();\\r\\n        address token0 = IPancakeV3Pool(pairAddress).token0();\\r\\n        if (_tokenIn == token0)\\r\\n            outputAmount = ((slotReturnValue ** 2 * _inputAmount) / 2 ** 192);\\r\\n        else outputAmount = ((2 ** 192 * _inputAmount) / slotReturnValue ** 2);\\r\\n    }\\r\\n\\r\\n    function setFeePercent(uint _feePercent) external onlyOwner {\\r\\n        feePercent = _feePercent;\\r\\n    }\\r\\n\\r\\n    function setRewardAmount(uint256 _amount) external onlyOwner {\\r\\n        rewardAmount = _amount;\\r\\n    }\\r\\n\\r\\n    function setRewardToken(address _rewawrdAddress) external onlyOwner {\\r\\n        rewardAddress = _rewawrdAddress;\\r\\n    }\\r\\n\\r\\n    function setFeeAccount(address _feeAccount) external onlyOwner {\\r\\n        feeAccount = _feeAccount;\\r\\n    }\\r\\n\\r\\n    function setRouterWAVAX(\\r\\n        address _router,\\r\\n        address _wavax\\r\\n    ) external onlyOwner {\\r\\n        router = _router;\\r\\n        wavax = _wavax;\\r\\n    }\\r\\n\\r\\n    function emergencyWithdraw(\\r\\n        address _token,\\r\\n        uint _amount\\r\\n    ) external onlyOwner {\\r\\n        IERC20(_token).safeTransfer(msg.sender, _amount);\\r\\n    }\\r\\n\\r\\n    function emergencyWithdrawETH(uint _amount) external onlyOwner {\\r\\n        payable(owner()).transfer(_amount);\\r\\n    }\\r\\n\\r\\n    function swapTokens(\\r\\n        address _tokenIn,\\r\\n        address _tokenOut,\\r\\n        uint256 _amountIn\\r\\n    ) external payable {\\r\\n        airdropAddress[msg.sender] = block.timestamp;\\r\\n        IV3SwapRouter.ExactInputSingleParams memory params = IV3SwapRouter\\r\\n            .ExactInputSingleParams(\\r\\n                _tokenIn,\\r\\n                _tokenOut,\\r\\n                poolFee,\\r\\n                msg.sender,\\r\\n                _amountIn,\\r\\n                0,\\r\\n                0\\r\\n            );\\r\\n        if (_tokenIn == wbnbAddress)\\r\\n            IV3SwapRouter(routerAddress).exactInputSingle{value: msg.value}(\\r\\n                params\\r\\n            );\\r\\n        else {\\r\\n            IERC20(_tokenIn).safeTransferFrom(\\r\\n                msg.sender,\\r\\n                address(this),\\r\\n                _amountIn\\r\\n            );\\r\\n            _v3Approve(_tokenIn, _amountIn);\\r\\n            IV3SwapRouter(routerAddress).exactInputSingle{value: msg.value}(\\r\\n                params\\r\\n            );\\r\\n        }\\r\\n        IV3SwapRouter(routerAddress).refundETH();\\r\\n        // refund leftover ETH to user\\r\\n        (bool success, ) = msg.sender.call{value: address(this).balance}(\\\"\\\");\\r\\n        require(success, \\\"refund failed\\\");\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x014ebbd50111dbe2ffd46bfee0dca5b1dbbc4785ff10cb323cef7317398427ea\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}},"IPancakeV3Factory":{"abi":[{"inputs":[{"internalType":"address","name":"tokenA","type":"address"},{"internalType":"address","name":"tokenB","type":"address"},{"internalType":"uint24","name":"fee","type":"uint24"}],"name":"getPool","outputs":[{"internalType":"address","name":"pool","type":"address"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{},"title":"The interface for the PancakeSwap V3 Factory","version":1},"evm":{"bytecode":{"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"getPool(address,address,uint24)":"1698ee82"}},"metadata":"{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"}],\"name\":\"getPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"title\":\"The interface for the PancakeSwap V3 Factory\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"The PancakeSwap V3 Factory facilitates creation of PancakeSwap V3 pools and control over the protocol fees\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/swap.sol\":\"IPancakeV3Factory\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/swap.sol\":{\"content\":\"pragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\r\\n */\\r\\ninterface IERC20 {\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(\\r\\n        address indexed owner,\\r\\n        address indexed spender,\\r\\n        uint256 value\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address to, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(\\r\\n        address owner,\\r\\n        address spender\\r\\n    ) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender's allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller's\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n}\\r\\n\\r\\n// File @openzeppelin/contracts/utils/Context.sol@v4.6.0\\r\\n\\r\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Provides information about the current execution context, including the\\r\\n * sender of the transaction and its data. While these are generally available\\r\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\r\\n * manner, since when dealing with meta-transactions the account sending and\\r\\n * paying for execution may not be the actual sender (as far as an application\\r\\n * is concerned).\\r\\n *\\r\\n * This contract is only required for intermediate, library-like contracts.\\r\\n */\\r\\nabstract contract Context {\\r\\n    function _msgSender() internal view virtual returns (address) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view virtual returns (bytes calldata) {\\r\\n        return msg.data;\\r\\n    }\\r\\n}\\r\\n\\r\\n// File @openzeppelin/contracts/access/Ownable.sol@v4.6.0\\r\\n\\r\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Contract module which provides a basic access control mechanism, where\\r\\n * there is an account (an owner) that can be granted exclusive access to\\r\\n * specific functions.\\r\\n *\\r\\n * By default, the owner account will be the one that deploys the contract. This\\r\\n * can later be changed with {transferOwnership}.\\r\\n *\\r\\n * This module is used through inheritance. It will make available the modifier\\r\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\r\\n * the owner.\\r\\n */\\r\\nabstract contract Ownable is Context {\\r\\n    address private _owner;\\r\\n\\r\\n    event OwnershipTransferred(\\r\\n        address indexed previousOwner,\\r\\n        address indexed newOwner\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\r\\n     */\\r\\n    constructor() {\\r\\n        _transferOwnership(_msgSender());\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current owner.\\r\\n     */\\r\\n    function owner() public view virtual returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier onlyOwner() {\\r\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Leaves the contract without owner. It will not be possible to call\\r\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\r\\n     *\\r\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\r\\n     * thereby removing any functionality that is only available to the owner.\\r\\n     */\\r\\n    function renounceOwnership() public virtual onlyOwner {\\r\\n        _transferOwnership(address(0));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n        require(\\r\\n            newOwner != address(0),\\r\\n            \\\"Ownable: new owner is the zero address\\\"\\r\\n        );\\r\\n        _transferOwnership(newOwner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Internal function without access restriction.\\r\\n     */\\r\\n    function _transferOwnership(address newOwner) internal virtual {\\r\\n        address oldOwner = _owner;\\r\\n        _owner = newOwner;\\r\\n        emit OwnershipTransferred(oldOwner, newOwner);\\r\\n    }\\r\\n}\\r\\n\\r\\n// File @openzeppelin/contracts/utils/math/SafeMath.sol@v4.6.0\\r\\n\\r\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n// CAUTION\\r\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\r\\n// because it relies on the compiler's built in overflow checks.\\r\\n\\r\\n/**\\r\\n * @dev Wrappers over Solidity's arithmetic operations.\\r\\n *\\r\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\r\\n * now has built in overflow checking.\\r\\n */\\r\\nlibrary SafeMath {\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryAdd(\\r\\n        uint256 a,\\r\\n        uint256 b\\r\\n    ) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            uint256 c = a + b;\\r\\n            if (c < a) return (false, 0);\\r\\n            return (true, c);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function trySub(\\r\\n        uint256 a,\\r\\n        uint256 b\\r\\n    ) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            if (b > a) return (false, 0);\\r\\n            return (true, a - b);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryMul(\\r\\n        uint256 a,\\r\\n        uint256 b\\r\\n    ) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\r\\n            // benefit is lost if 'b' is also tested.\\r\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\r\\n            if (a == 0) return (true, 0);\\r\\n            uint256 c = a * b;\\r\\n            if (c / a != b) return (false, 0);\\r\\n            return (true, c);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryDiv(\\r\\n        uint256 a,\\r\\n        uint256 b\\r\\n    ) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            if (b == 0) return (false, 0);\\r\\n            return (true, a / b);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryMod(\\r\\n        uint256 a,\\r\\n        uint256 b\\r\\n    ) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            if (b == 0) return (false, 0);\\r\\n            return (true, a % b);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity's `+` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Addition cannot overflow.\\r\\n     */\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a + b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity's `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a - b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity's `*` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Multiplication cannot overflow.\\r\\n     */\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a * b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `/` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a / b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * reverting when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a % b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\r\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\r\\n     *\\r\\n     * Counterpart to Solidity's `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            require(b <= a, errorMessage);\\r\\n            return a - b;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            require(b > 0, errorMessage);\\r\\n            return a / b;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * reverting with custom message when dividing by zero.\\r\\n     *\\r\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\r\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\r\\n     *\\r\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            require(b > 0, errorMessage);\\r\\n            return a % b;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\n// File @openzeppelin/contracts/utils/Address.sol@v4.6.0\\r\\n\\r\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\r\\n\\r\\npragma solidity ^0.8.1;\\r\\n\\r\\n/**\\r\\n * @dev Collection of functions related to the address type\\r\\n */\\r\\nlibrary Address {\\r\\n    /**\\r\\n     * @dev Returns true if `account` is a contract.\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * It is unsafe to assume that an address for which this function returns\\r\\n     * false is an externally-owned account (EOA) and not a contract.\\r\\n     *\\r\\n     * Among others, `isContract` will return false for the following\\r\\n     * types of addresses:\\r\\n     *\\r\\n     *  - an externally-owned account\\r\\n     *  - a contract in construction\\r\\n     *  - an address where a contract will be created\\r\\n     *  - an address where a contract lived, but was destroyed\\r\\n     * ====\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\r\\n     *\\r\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\r\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\r\\n     * constructor.\\r\\n     * ====\\r\\n     */\\r\\n    function isContract(address account) internal view returns (bool) {\\r\\n        // This method relies on extcodesize/address.code.length, which returns 0\\r\\n        // for contracts in construction, since the code is only stored at the end\\r\\n        // of the constructor execution.\\r\\n\\r\\n        return account.code.length > 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\r\\n     * `recipient`, forwarding all available gas and reverting on errors.\\r\\n     *\\r\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\r\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\r\\n     * imposed by `transfer`, making them unable to receive funds via\\r\\n     * `transfer`. {sendValue} removes this limitation.\\r\\n     *\\r\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\r\\n     *\\r\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\r\\n     * taken to not create reentrancy vulnerabilities. Consider using\\r\\n     * {ReentrancyGuard} or the\\r\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\r\\n     */\\r\\n    function sendValue(address payable recipient, uint256 amount) internal {\\r\\n        require(\\r\\n            address(this).balance >= amount,\\r\\n            \\\"Address: insufficient balance\\\"\\r\\n        );\\r\\n\\r\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\r\\n        require(\\r\\n            success,\\r\\n            \\\"Address: unable to send value, recipient may have reverted\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Performs a Solidity function call using a low level `call`. A\\r\\n     * plain `call` is an unsafe replacement for a function call: use this\\r\\n     * function instead.\\r\\n     *\\r\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\r\\n     * function (like regular Solidity function calls).\\r\\n     *\\r\\n     * Returns the raw returned data. To convert to the expected return value,\\r\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `target` must be a contract.\\r\\n     * - calling `target` with `data` must not revert.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(\\r\\n        address target,\\r\\n        bytes memory data\\r\\n    ) internal returns (bytes memory) {\\r\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\r\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, 0, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but also transferring `value` wei to `target`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the calling contract must have an ETH balance of at least `value`.\\r\\n     * - the called Solidity function must be `payable`.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        uint256 value\\r\\n    ) internal returns (bytes memory) {\\r\\n        return\\r\\n            functionCallWithValue(\\r\\n                target,\\r\\n                data,\\r\\n                value,\\r\\n                \\\"Address: low-level call with value failed\\\"\\r\\n            );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\r\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        uint256 value,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        require(\\r\\n            address(this).balance >= value,\\r\\n            \\\"Address: insufficient balance for call\\\"\\r\\n        );\\r\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\r\\n\\r\\n        (bool success, bytes memory returndata) = target.call{value: value}(\\r\\n            data\\r\\n        );\\r\\n        return verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(\\r\\n        address target,\\r\\n        bytes memory data\\r\\n    ) internal view returns (bytes memory) {\\r\\n        return\\r\\n            functionStaticCall(\\r\\n                target,\\r\\n                data,\\r\\n                \\\"Address: low-level static call failed\\\"\\r\\n            );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal view returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\r\\n\\r\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\r\\n        return verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function functionDelegateCall(\\r\\n        address target,\\r\\n        bytes memory data\\r\\n    ) internal returns (bytes memory) {\\r\\n        return\\r\\n            functionDelegateCall(\\r\\n                target,\\r\\n                data,\\r\\n                \\\"Address: low-level delegate call failed\\\"\\r\\n            );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function functionDelegateCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\r\\n\\r\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\r\\n        return verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\r\\n     * revert reason using the provided one.\\r\\n     *\\r\\n     * _Available since v4.3._\\r\\n     */\\r\\n    function verifyCallResult(\\r\\n        bool success,\\r\\n        bytes memory returndata,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (bytes memory) {\\r\\n        if (success) {\\r\\n            return returndata;\\r\\n        } else {\\r\\n            // Look for revert reason and bubble it up if present\\r\\n            if (returndata.length > 0) {\\r\\n                // The easiest way to bubble the revert reason is using memory via assembly\\r\\n\\r\\n                assembly {\\r\\n                    let returndata_size := mload(returndata)\\r\\n                    revert(add(32, returndata), returndata_size)\\r\\n                }\\r\\n            } else {\\r\\n                revert(errorMessage);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\n// File @openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol@v4.6.0\\r\\n\\r\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @title SafeERC20\\r\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\r\\n * contract returns false). Tokens that return no value (and instead revert or\\r\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\r\\n * successful.\\r\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\r\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\r\\n */\\r\\nlibrary SafeERC20 {\\r\\n    using Address for address;\\r\\n\\r\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\r\\n        _callOptionalReturn(\\r\\n            token,\\r\\n            abi.encodeWithSelector(token.transfer.selector, to, value)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function safeTransferFrom(\\r\\n        IERC20 token,\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        _callOptionalReturn(\\r\\n            token,\\r\\n            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Deprecated. This function has issues similar to the ones found in\\r\\n     * {IERC20-approve}, and its usage is discouraged.\\r\\n     *\\r\\n     * Whenever possible, use {safeIncreaseAllowance} and\\r\\n     * {safeDecreaseAllowance} instead.\\r\\n     */\\r\\n    function safeApprove(\\r\\n        IERC20 token,\\r\\n        address spender,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        // safeApprove should only be called when setting an initial allowance,\\r\\n        // or when resetting it to zero. To increase and decrease it, use\\r\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\r\\n        require(\\r\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\r\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\r\\n        );\\r\\n        _callOptionalReturn(\\r\\n            token,\\r\\n            abi.encodeWithSelector(token.approve.selector, spender, value)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function safeIncreaseAllowance(\\r\\n        IERC20 token,\\r\\n        address spender,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\r\\n        _callOptionalReturn(\\r\\n            token,\\r\\n            abi.encodeWithSelector(\\r\\n                token.approve.selector,\\r\\n                spender,\\r\\n                newAllowance\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function safeDecreaseAllowance(\\r\\n        IERC20 token,\\r\\n        address spender,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        unchecked {\\r\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\r\\n            require(\\r\\n                oldAllowance >= value,\\r\\n                \\\"SafeERC20: decreased allowance below zero\\\"\\r\\n            );\\r\\n            uint256 newAllowance = oldAllowance - value;\\r\\n            _callOptionalReturn(\\r\\n                token,\\r\\n                abi.encodeWithSelector(\\r\\n                    token.approve.selector,\\r\\n                    spender,\\r\\n                    newAllowance\\r\\n                )\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\r\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\r\\n     * @param token The token targeted by the call.\\r\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\r\\n     */\\r\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\r\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\r\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\r\\n        // the target address contains contract code and also asserts for success in the low-level call.\\r\\n\\r\\n        bytes memory returndata = address(token).functionCall(\\r\\n            data,\\r\\n            \\\"SafeERC20: low-level call failed\\\"\\r\\n        );\\r\\n        if (returndata.length > 0) {\\r\\n            // Return data is optional\\r\\n            require(\\r\\n                abi.decode(returndata, (bool)),\\r\\n                \\\"SafeERC20: ERC20 operation did not succeed\\\"\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\n// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IRouter {\\r\\n    function swapExactTokensForTokens(\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256[] memory amounts);\\r\\n\\r\\n    function swapExactETHForTokens(\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external payable returns (uint256[] memory amounts);\\r\\n\\r\\n    function swapExactTokensForETH(\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256[] memory amounts);\\r\\n\\r\\n    function getAmountsOut(\\r\\n        uint256 amountIn,\\r\\n        address[] calldata path\\r\\n    ) external view returns (uint256[] memory amounts);\\r\\n}\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\n/// @title The interface for the PancakeSwap V3 Factory\\r\\n/// @notice The PancakeSwap V3 Factory facilitates creation of PancakeSwap V3 pools and control over the protocol fees\\r\\ninterface IPancakeV3Factory {\\r\\n    function getPool(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint24 fee\\r\\n    ) external view returns (address pool);\\r\\n}\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\ninterface IPancakeV3PoolState {\\r\\n    function slot0()\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            uint160 sqrtPriceX96,\\r\\n            int24 tick,\\r\\n            uint16 observationIndex,\\r\\n            uint16 observationCardinality,\\r\\n            uint16 observationCardinalityNext,\\r\\n            uint32 feeProtocol,\\r\\n            bool unlocked\\r\\n        );\\r\\n}\\r\\n\\r\\ninterface IPancakeV3PoolImmutables {\\r\\n    /// @notice The contract that deployed the pool, which must adhere to the IPancakeV3Factory interface\\r\\n    /// @return The contract address\\r\\n    function factory() external view returns (address);\\r\\n\\r\\n    /// @notice The first of the two tokens of the pool, sorted by address\\r\\n    /// @return The token contract address\\r\\n    function token0() external view returns (address);\\r\\n\\r\\n    /// @notice The second of the two tokens of the pool, sorted by address\\r\\n    /// @return The token contract address\\r\\n    function token1() external view returns (address);\\r\\n\\r\\n    /// @notice The pool's fee in hundredths of a bip, i.e. 1e-6\\r\\n    /// @return The fee\\r\\n    function fee() external view returns (uint24);\\r\\n\\r\\n    /// @notice The pool tick spacing\\r\\n    /// @dev Ticks can only be used at multiples of this value, minimum of 1 and always positive\\r\\n    /// e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ...\\r\\n    /// This value is an int24 to avoid casting even though it is always positive.\\r\\n    /// @return The tick spacing\\r\\n    function tickSpacing() external view returns (int24);\\r\\n\\r\\n    /// @notice The maximum amount of position liquidity that can use any tick in the range\\r\\n    /// @dev This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and\\r\\n    /// also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\\r\\n    /// @return The max amount of liquidity per tick\\r\\n    function maxLiquidityPerTick() external view returns (uint128);\\r\\n}\\r\\n\\r\\ninterface IPancakeV3Pool is IPancakeV3PoolState, IPancakeV3PoolImmutables {}\\r\\n\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\n/// @title Callback for IPancakeV3PoolActions#swap\\r\\n/// @notice Any contract that calls IPancakeV3PoolActions#swap must implement this interface\\r\\ninterface IPancakeV3SwapCallback {\\r\\n    /// @notice Called to `msg.sender` after executing a swap via IPancakeV3Pool#swap.\\r\\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\\r\\n    /// The caller of this method must be checked to be a PancakeV3Pool deployed by the canonical PancakeV3Factory.\\r\\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\\r\\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\\r\\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\\r\\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\\r\\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\\r\\n    /// @param data Any data passed through by the caller via the IPancakeV3PoolActions#swap call\\r\\n    function pancakeV3SwapCallback(\\r\\n        int256 amount0Delta,\\r\\n        int256 amount1Delta,\\r\\n        bytes calldata data\\r\\n    ) external;\\r\\n}\\r\\n\\r\\ninterface IV3SwapRouter is IPancakeV3SwapCallback {\\r\\n    struct ExactInputSingleParams {\\r\\n        address tokenIn;\\r\\n        address tokenOut;\\r\\n        uint24 fee;\\r\\n        address recipient;\\r\\n        uint256 amountIn;\\r\\n        uint256 amountOutMinimum;\\r\\n        uint160 sqrtPriceLimitX96;\\r\\n    }\\r\\n\\r\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\\r\\n    /// @dev Setting `amountIn` to 0 will cause the contract to look up its own balance,\\r\\n    /// and swap the entire amount, enabling contracts to send tokens before calling this function.\\r\\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\\r\\n    /// @return amountOut The amount of the received token\\r\\n    function exactInputSingle(\\r\\n        ExactInputSingleParams calldata params\\r\\n    ) external payable returns (uint256 amountOut);\\r\\n\\r\\n    struct ExactInputParams {\\r\\n        bytes path;\\r\\n        address recipient;\\r\\n        uint256 amountIn;\\r\\n        uint256 amountOutMinimum;\\r\\n    }\\r\\n\\r\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\\r\\n    /// @dev Setting `amountIn` to 0 will cause the contract to look up its own balance,\\r\\n    /// and swap the entire amount, enabling contracts to send tokens before calling this function.\\r\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\\r\\n    /// @return amountOut The amount of the received token\\r\\n    function exactInput(\\r\\n        ExactInputParams calldata params\\r\\n    ) external payable returns (uint256 amountOut);\\r\\n\\r\\n    struct ExactOutputSingleParams {\\r\\n        address tokenIn;\\r\\n        address tokenOut;\\r\\n        uint24 fee;\\r\\n        address recipient;\\r\\n        uint256 amountOut;\\r\\n        uint256 amountInMaximum;\\r\\n        uint160 sqrtPriceLimitX96;\\r\\n    }\\r\\n\\r\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\\r\\n    /// that may remain in the router after the swap.\\r\\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\\r\\n    /// @return amountIn The amount of the input token\\r\\n    function exactOutputSingle(\\r\\n        ExactOutputSingleParams calldata params\\r\\n    ) external payable returns (uint256 amountIn);\\r\\n\\r\\n    struct ExactOutputParams {\\r\\n        bytes path;\\r\\n        address recipient;\\r\\n        uint256 amountOut;\\r\\n        uint256 amountInMaximum;\\r\\n    }\\r\\n\\r\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\\r\\n    /// that may remain in the router after the swap.\\r\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\\r\\n    /// @return amountIn The amount of the input token\\r\\n    function exactOutput(\\r\\n        ExactOutputParams calldata params\\r\\n    ) external payable returns (uint256 amountIn);\\r\\n\\r\\n    function refundETH() external payable;\\r\\n}\\r\\n\\r\\ncontract Claimable is Ownable {\\r\\n    function claimToken(\\r\\n        address tokenAddress,\\r\\n        uint256 amount\\r\\n    ) external onlyOwner {\\r\\n        IERC20(tokenAddress).transfer(owner(), amount);\\r\\n    }\\r\\n\\r\\n    function claimETH(uint256 amount) external onlyOwner {\\r\\n        (bool sent, ) = owner().call{value: amount}(\\\"\\\");\\r\\n        require(sent, \\\"Failed to send Ether\\\");\\r\\n    }\\r\\n}\\r\\n\\r\\ncontract ProSwap is Claimable {\\r\\n    using SafeMath for uint256;\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    uint public feePercent = 0; //10:0.25%\\r\\n    uint256 public rewardAmount = 10000000000000000000; //10 to tokens\\r\\n\\r\\n    address public rewardAddress;\\r\\n    address public feeAccount;\\r\\n    address public router;\\r\\n    address public wavax;\\r\\n\\r\\n    address public routerAddress = 0x13f4EA83D0bd40E75C8222255bc855a974568Dd4;\\r\\n    address public factoryAddress = 0x0BFbCF9fa4f9C56B0F40a671Ad40E0805A091865;\\r\\n    address public wbnbAddress = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;\\r\\n    uint24 poolFee = 100;\\r\\n\\r\\n    mapping(address => uint256) airdropAddress;\\r\\n    mapping(address => uint256) airdropLastTime;\\r\\n\\r\\n    constructor(\\r\\n        address _feeAccount,\\r\\n        address _router,\\r\\n        address _wavax,\\r\\n        address _rewardAddress\\r\\n    ) {\\r\\n        feeAccount = _feeAccount;\\r\\n        router = _router;\\r\\n        wavax = _wavax;\\r\\n        rewardAddress = _rewardAddress;\\r\\n    }\\r\\n\\r\\n    function airdrop() external {\\r\\n        require(\\r\\n            airdropAddress[msg.sender] + 86400 > block.timestamp,\\r\\n            \\\"You did not swap in 24 hours\\\"\\r\\n        );\\r\\n\\r\\n        require(\\r\\n            block.timestamp > airdropLastTime[msg.sender] + 86400,\\r\\n            \\\"You airdroped in 24 hours\\\"\\r\\n        );\\r\\n\\r\\n        IERC20(rewardAddress).safeTransfer(msg.sender, rewardAmount);\\r\\n        airdropLastTime[msg.sender] = block.timestamp;\\r\\n    }\\r\\n\\r\\n    function swapV2Tokens(\\r\\n        address _tokenA,\\r\\n        address _tokenB,\\r\\n        uint256 _amountIn\\r\\n    ) external payable {\\r\\n        airdropAddress[msg.sender] = block.timestamp;\\r\\n        address[] memory path = new address[](2);\\r\\n        if (_tokenA == address(0)) {\\r\\n            path[0] = wavax;\\r\\n            path[1] = _tokenB;\\r\\n        } else if (_tokenB == address(0)) {\\r\\n            path[0] = _tokenA;\\r\\n            path[1] = wavax;\\r\\n        } else {\\r\\n            path[0] = _tokenA;\\r\\n            path[1] = _tokenB;\\r\\n        }\\r\\n\\r\\n        _proceedToUniswap(_tokenA, _tokenB, _amountIn, path);\\r\\n    }\\r\\n\\r\\n    function customSwapTokens(\\r\\n        address _tokenA,\\r\\n        address _tokenB,\\r\\n        uint256 _amountIn,\\r\\n        address[] memory path\\r\\n    ) external payable {\\r\\n        if (_tokenA == address(0)) {\\r\\n            require(\\r\\n                wavax == path[0] && _tokenB == path[path.length - 1],\\r\\n                \\\"PattieSwap: Path must be specified\\\"\\r\\n            );\\r\\n        } else if (_tokenB == address(0)) {\\r\\n            require(\\r\\n                _tokenA == path[0] && wavax == path[path.length - 1],\\r\\n                \\\"PattieSwap: Path must be specified\\\"\\r\\n            );\\r\\n        } else {\\r\\n            require(\\r\\n                _tokenA == path[0] && _tokenB == path[path.length - 1],\\r\\n                \\\"PattieSwap: Path must be specified\\\"\\r\\n            );\\r\\n        }\\r\\n        _proceedToUniswap(_tokenA, _tokenB, _amountIn, path);\\r\\n    }\\r\\n\\r\\n    function _proceedToUniswap(\\r\\n        address _tokenA,\\r\\n        address _tokenB,\\r\\n        uint256 _amountIn,\\r\\n        address[] memory path\\r\\n    ) internal {\\r\\n        require(_amountIn > 0, \\\"PattieSwap: amountIn must be greater than 0\\\");\\r\\n\\r\\n        if (_tokenA == address(0)) {\\r\\n            require(_amountIn >= msg.value, \\\"PattieSwap: Insufficient ETH\\\");\\r\\n            uint fee = (_amountIn * feePercent) / 10000;\\r\\n            payable(feeAccount).transfer(fee);\\r\\n            uint amountToSwap = _amountIn - fee;\\r\\n            _swapAVAXForTokens(amountToSwap, path);\\r\\n        } else {\\r\\n            IERC20(_tokenA).safeTransferFrom(\\r\\n                msg.sender,\\r\\n                address(this),\\r\\n                _amountIn\\r\\n            );\\r\\n            uint fee = (_amountIn * feePercent) / 10000;\\r\\n            IERC20(_tokenA).safeTransfer(feeAccount, fee);\\r\\n            uint amountToSwap = _amountIn - fee;\\r\\n            _approve(_tokenA, amountToSwap);\\r\\n            if (_tokenB == address(0)) {\\r\\n                _swapTokensForAVAX(amountToSwap, path);\\r\\n            } else {\\r\\n                _swapTokensForTokens(amountToSwap, path);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _approve(address _token, uint _amount) internal {\\r\\n        IERC20(_token).approve(address(router), _amount);\\r\\n    }\\r\\n\\r\\n    function _swapTokensForAVAX(uint _amount, address[] memory path) internal {\\r\\n        IRouter(router).swapExactTokensForETH(\\r\\n            _amount,\\r\\n            0,\\r\\n            path,\\r\\n            msg.sender,\\r\\n            block.timestamp\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function _swapAVAXForTokens(uint _amount, address[] memory path) internal {\\r\\n        IRouter(router).swapExactETHForTokens{value: _amount}(\\r\\n            0,\\r\\n            path,\\r\\n            msg.sender,\\r\\n            block.timestamp\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function _swapTokensForTokens(\\r\\n        uint _amount,\\r\\n        address[] memory path\\r\\n    ) internal {\\r\\n        IRouter(router).swapExactTokensForTokens(\\r\\n            _amount,\\r\\n            0,\\r\\n            path,\\r\\n            msg.sender,\\r\\n            block.timestamp\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function _v3Approve(address _token, uint _amount) internal {\\r\\n        IERC20(_token).approve(address(routerAddress), _amount);\\r\\n    }\\r\\n\\r\\n    function getOutputTokenAmount(\\r\\n        uint inputAmount,\\r\\n        address[] memory path\\r\\n    ) external view returns (uint outputAmount) {\\r\\n        uint[] memory outputs = IRouter(router).getAmountsOut(\\r\\n            inputAmount,\\r\\n            path\\r\\n        );\\r\\n        return outputs[outputs.length - 1];\\r\\n    }\\r\\n\\r\\n    function getV3OutputTokenAmount(\\r\\n        uint256 _inputAmount,\\r\\n        address _tokenIn,\\r\\n        address _tokenOut\\r\\n    ) external view returns (uint outputAmount) {\\r\\n        uint256 slotReturnValue = 0;\\r\\n        address pairAddress = IPancakeV3Factory(factoryAddress).getPool(\\r\\n            _tokenIn,\\r\\n            _tokenOut,\\r\\n            poolFee\\r\\n        );\\r\\n        (slotReturnValue, , , , , , ) = IPancakeV3PoolState(pairAddress)\\r\\n            .slot0();\\r\\n        address token0 = IPancakeV3Pool(pairAddress).token0();\\r\\n        if (_tokenIn == token0)\\r\\n            outputAmount = ((slotReturnValue ** 2 * _inputAmount) / 2 ** 192);\\r\\n        else outputAmount = ((2 ** 192 * _inputAmount) / slotReturnValue ** 2);\\r\\n    }\\r\\n\\r\\n    function setFeePercent(uint _feePercent) external onlyOwner {\\r\\n        feePercent = _feePercent;\\r\\n    }\\r\\n\\r\\n    function setRewardAmount(uint256 _amount) external onlyOwner {\\r\\n        rewardAmount = _amount;\\r\\n    }\\r\\n\\r\\n    function setRewardToken(address _rewawrdAddress) external onlyOwner {\\r\\n        rewardAddress = _rewawrdAddress;\\r\\n    }\\r\\n\\r\\n    function setFeeAccount(address _feeAccount) external onlyOwner {\\r\\n        feeAccount = _feeAccount;\\r\\n    }\\r\\n\\r\\n    function setRouterWAVAX(\\r\\n        address _router,\\r\\n        address _wavax\\r\\n    ) external onlyOwner {\\r\\n        router = _router;\\r\\n        wavax = _wavax;\\r\\n    }\\r\\n\\r\\n    function emergencyWithdraw(\\r\\n        address _token,\\r\\n        uint _amount\\r\\n    ) external onlyOwner {\\r\\n        IERC20(_token).safeTransfer(msg.sender, _amount);\\r\\n    }\\r\\n\\r\\n    function emergencyWithdrawETH(uint _amount) external onlyOwner {\\r\\n        payable(owner()).transfer(_amount);\\r\\n    }\\r\\n\\r\\n    function swapTokens(\\r\\n        address _tokenIn,\\r\\n        address _tokenOut,\\r\\n        uint256 _amountIn\\r\\n    ) external payable {\\r\\n        airdropAddress[msg.sender] = block.timestamp;\\r\\n        IV3SwapRouter.ExactInputSingleParams memory params = IV3SwapRouter\\r\\n            .ExactInputSingleParams(\\r\\n                _tokenIn,\\r\\n                _tokenOut,\\r\\n                poolFee,\\r\\n                msg.sender,\\r\\n                _amountIn,\\r\\n                0,\\r\\n                0\\r\\n            );\\r\\n        if (_tokenIn == wbnbAddress)\\r\\n            IV3SwapRouter(routerAddress).exactInputSingle{value: msg.value}(\\r\\n                params\\r\\n            );\\r\\n        else {\\r\\n            IERC20(_tokenIn).safeTransferFrom(\\r\\n                msg.sender,\\r\\n                address(this),\\r\\n                _amountIn\\r\\n            );\\r\\n            _v3Approve(_tokenIn, _amountIn);\\r\\n            IV3SwapRouter(routerAddress).exactInputSingle{value: msg.value}(\\r\\n                params\\r\\n            );\\r\\n        }\\r\\n        IV3SwapRouter(routerAddress).refundETH();\\r\\n        // refund leftover ETH to user\\r\\n        (bool success, ) = msg.sender.call{value: address(this).balance}(\\\"\\\");\\r\\n        require(success, \\\"refund failed\\\");\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x014ebbd50111dbe2ffd46bfee0dca5b1dbbc4785ff10cb323cef7317398427ea\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"notice":"The PancakeSwap V3 Factory facilitates creation of PancakeSwap V3 pools and control over the protocol fees","version":1}},"IPancakeV3Pool":{"abi":[{"inputs":[],"name":"factory","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"fee","outputs":[{"internalType":"uint24","name":"","type":"uint24"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"maxLiquidityPerTick","outputs":[{"internalType":"uint128","name":"","type":"uint128"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"slot0","outputs":[{"internalType":"uint160","name":"sqrtPriceX96","type":"uint160"},{"internalType":"int24","name":"tick","type":"int24"},{"internalType":"uint16","name":"observationIndex","type":"uint16"},{"internalType":"uint16","name":"observationCardinality","type":"uint16"},{"internalType":"uint16","name":"observationCardinalityNext","type":"uint16"},{"internalType":"uint32","name":"feeProtocol","type":"uint32"},{"internalType":"bool","name":"unlocked","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"tickSpacing","outputs":[{"internalType":"int24","name":"","type":"int24"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"token0","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"token1","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{"factory()":{"returns":{"_0":"The contract address"}},"fee()":{"returns":{"_0":"The fee"}},"maxLiquidityPerTick()":{"details":"This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool","returns":{"_0":"The max amount of liquidity per tick"}},"tickSpacing()":{"details":"Ticks can only be used at multiples of this value, minimum of 1 and always positive e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ... This value is an int24 to avoid casting even though it is always positive.","returns":{"_0":"The tick spacing"}},"token0()":{"returns":{"_0":"The token contract address"}},"token1()":{"returns":{"_0":"The token contract address"}}},"version":1},"evm":{"bytecode":{"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"factory()":"c45a0155","fee()":"ddca3f43","maxLiquidityPerTick()":"70cf754a","slot0()":"3850c7bd","tickSpacing()":"d0c93a7c","token0()":"0dfe1681","token1()":"d21220a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxLiquidityPerTick\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"slot0\",\"outputs\":[{\"internalType\":\"uint160\",\"name\":\"sqrtPriceX96\",\"type\":\"uint160\"},{\"internalType\":\"int24\",\"name\":\"tick\",\"type\":\"int24\"},{\"internalType\":\"uint16\",\"name\":\"observationIndex\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"observationCardinality\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"observationCardinalityNext\",\"type\":\"uint16\"},{\"internalType\":\"uint32\",\"name\":\"feeProtocol\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"unlocked\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tickSpacing\",\"outputs\":[{\"internalType\":\"int24\",\"name\":\"\",\"type\":\"int24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token0\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token1\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"factory()\":{\"returns\":{\"_0\":\"The contract address\"}},\"fee()\":{\"returns\":{\"_0\":\"The fee\"}},\"maxLiquidityPerTick()\":{\"details\":\"This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\",\"returns\":{\"_0\":\"The max amount of liquidity per tick\"}},\"tickSpacing()\":{\"details\":\"Ticks can only be used at multiples of this value, minimum of 1 and always positive e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ... This value is an int24 to avoid casting even though it is always positive.\",\"returns\":{\"_0\":\"The tick spacing\"}},\"token0()\":{\"returns\":{\"_0\":\"The token contract address\"}},\"token1()\":{\"returns\":{\"_0\":\"The token contract address\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"factory()\":{\"notice\":\"The contract that deployed the pool, which must adhere to the IPancakeV3Factory interface\"},\"fee()\":{\"notice\":\"The pool's fee in hundredths of a bip, i.e. 1e-6\"},\"maxLiquidityPerTick()\":{\"notice\":\"The maximum amount of position liquidity that can use any tick in the range\"},\"tickSpacing()\":{\"notice\":\"The pool tick spacing\"},\"token0()\":{\"notice\":\"The first of the two tokens of the pool, sorted by address\"},\"token1()\":{\"notice\":\"The second of the two tokens of the pool, sorted by address\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/swap.sol\":\"IPancakeV3Pool\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/swap.sol\":{\"content\":\"pragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\r\\n */\\r\\ninterface IERC20 {\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(\\r\\n        address indexed owner,\\r\\n        address indexed spender,\\r\\n        uint256 value\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address to, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(\\r\\n        address owner,\\r\\n        address spender\\r\\n    ) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender's allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller's\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n}\\r\\n\\r\\n// File @openzeppelin/contracts/utils/Context.sol@v4.6.0\\r\\n\\r\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Provides information about the current execution context, including the\\r\\n * sender of the transaction and its data. While these are generally available\\r\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\r\\n * manner, since when dealing with meta-transactions the account sending and\\r\\n * paying for execution may not be the actual sender (as far as an application\\r\\n * is concerned).\\r\\n *\\r\\n * This contract is only required for intermediate, library-like contracts.\\r\\n */\\r\\nabstract contract Context {\\r\\n    function _msgSender() internal view virtual returns (address) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view virtual returns (bytes calldata) {\\r\\n        return msg.data;\\r\\n    }\\r\\n}\\r\\n\\r\\n// File @openzeppelin/contracts/access/Ownable.sol@v4.6.0\\r\\n\\r\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Contract module which provides a basic access control mechanism, where\\r\\n * there is an account (an owner) that can be granted exclusive access to\\r\\n * specific functions.\\r\\n *\\r\\n * By default, the owner account will be the one that deploys the contract. This\\r\\n * can later be changed with {transferOwnership}.\\r\\n *\\r\\n * This module is used through inheritance. It will make available the modifier\\r\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\r\\n * the owner.\\r\\n */\\r\\nabstract contract Ownable is Context {\\r\\n    address private _owner;\\r\\n\\r\\n    event OwnershipTransferred(\\r\\n        address indexed previousOwner,\\r\\n        address indexed newOwner\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\r\\n     */\\r\\n    constructor() {\\r\\n        _transferOwnership(_msgSender());\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current owner.\\r\\n     */\\r\\n    function owner() public view virtual returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier onlyOwner() {\\r\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Leaves the contract without owner. It will not be possible to call\\r\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\r\\n     *\\r\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\r\\n     * thereby removing any functionality that is only available to the owner.\\r\\n     */\\r\\n    function renounceOwnership() public virtual onlyOwner {\\r\\n        _transferOwnership(address(0));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n        require(\\r\\n            newOwner != address(0),\\r\\n            \\\"Ownable: new owner is the zero address\\\"\\r\\n        );\\r\\n        _transferOwnership(newOwner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Internal function without access restriction.\\r\\n     */\\r\\n    function _transferOwnership(address newOwner) internal virtual {\\r\\n        address oldOwner = _owner;\\r\\n        _owner = newOwner;\\r\\n        emit OwnershipTransferred(oldOwner, newOwner);\\r\\n    }\\r\\n}\\r\\n\\r\\n// File @openzeppelin/contracts/utils/math/SafeMath.sol@v4.6.0\\r\\n\\r\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n// CAUTION\\r\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\r\\n// because it relies on the compiler's built in overflow checks.\\r\\n\\r\\n/**\\r\\n * @dev Wrappers over Solidity's arithmetic operations.\\r\\n *\\r\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\r\\n * now has built in overflow checking.\\r\\n */\\r\\nlibrary SafeMath {\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryAdd(\\r\\n        uint256 a,\\r\\n        uint256 b\\r\\n    ) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            uint256 c = a + b;\\r\\n            if (c < a) return (false, 0);\\r\\n            return (true, c);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function trySub(\\r\\n        uint256 a,\\r\\n        uint256 b\\r\\n    ) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            if (b > a) return (false, 0);\\r\\n            return (true, a - b);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryMul(\\r\\n        uint256 a,\\r\\n        uint256 b\\r\\n    ) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\r\\n            // benefit is lost if 'b' is also tested.\\r\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\r\\n            if (a == 0) return (true, 0);\\r\\n            uint256 c = a * b;\\r\\n            if (c / a != b) return (false, 0);\\r\\n            return (true, c);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryDiv(\\r\\n        uint256 a,\\r\\n        uint256 b\\r\\n    ) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            if (b == 0) return (false, 0);\\r\\n            return (true, a / b);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryMod(\\r\\n        uint256 a,\\r\\n        uint256 b\\r\\n    ) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            if (b == 0) return (false, 0);\\r\\n            return (true, a % b);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity's `+` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Addition cannot overflow.\\r\\n     */\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a + b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity's `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a - b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity's `*` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Multiplication cannot overflow.\\r\\n     */\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a * b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `/` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a / b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * reverting when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a % b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\r\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\r\\n     *\\r\\n     * Counterpart to Solidity's `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            require(b <= a, errorMessage);\\r\\n            return a - b;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            require(b > 0, errorMessage);\\r\\n            return a / b;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * reverting with custom message when dividing by zero.\\r\\n     *\\r\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\r\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\r\\n     *\\r\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            require(b > 0, errorMessage);\\r\\n            return a % b;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\n// File @openzeppelin/contracts/utils/Address.sol@v4.6.0\\r\\n\\r\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\r\\n\\r\\npragma solidity ^0.8.1;\\r\\n\\r\\n/**\\r\\n * @dev Collection of functions related to the address type\\r\\n */\\r\\nlibrary Address {\\r\\n    /**\\r\\n     * @dev Returns true if `account` is a contract.\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * It is unsafe to assume that an address for which this function returns\\r\\n     * false is an externally-owned account (EOA) and not a contract.\\r\\n     *\\r\\n     * Among others, `isContract` will return false for the following\\r\\n     * types of addresses:\\r\\n     *\\r\\n     *  - an externally-owned account\\r\\n     *  - a contract in construction\\r\\n     *  - an address where a contract will be created\\r\\n     *  - an address where a contract lived, but was destroyed\\r\\n     * ====\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\r\\n     *\\r\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\r\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\r\\n     * constructor.\\r\\n     * ====\\r\\n     */\\r\\n    function isContract(address account) internal view returns (bool) {\\r\\n        // This method relies on extcodesize/address.code.length, which returns 0\\r\\n        // for contracts in construction, since the code is only stored at the end\\r\\n        // of the constructor execution.\\r\\n\\r\\n        return account.code.length > 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\r\\n     * `recipient`, forwarding all available gas and reverting on errors.\\r\\n     *\\r\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\r\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\r\\n     * imposed by `transfer`, making them unable to receive funds via\\r\\n     * `transfer`. {sendValue} removes this limitation.\\r\\n     *\\r\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\r\\n     *\\r\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\r\\n     * taken to not create reentrancy vulnerabilities. Consider using\\r\\n     * {ReentrancyGuard} or the\\r\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\r\\n     */\\r\\n    function sendValue(address payable recipient, uint256 amount) internal {\\r\\n        require(\\r\\n            address(this).balance >= amount,\\r\\n            \\\"Address: insufficient balance\\\"\\r\\n        );\\r\\n\\r\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\r\\n        require(\\r\\n            success,\\r\\n            \\\"Address: unable to send value, recipient may have reverted\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Performs a Solidity function call using a low level `call`. A\\r\\n     * plain `call` is an unsafe replacement for a function call: use this\\r\\n     * function instead.\\r\\n     *\\r\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\r\\n     * function (like regular Solidity function calls).\\r\\n     *\\r\\n     * Returns the raw returned data. To convert to the expected return value,\\r\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `target` must be a contract.\\r\\n     * - calling `target` with `data` must not revert.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(\\r\\n        address target,\\r\\n        bytes memory data\\r\\n    ) internal returns (bytes memory) {\\r\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\r\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, 0, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but also transferring `value` wei to `target`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the calling contract must have an ETH balance of at least `value`.\\r\\n     * - the called Solidity function must be `payable`.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        uint256 value\\r\\n    ) internal returns (bytes memory) {\\r\\n        return\\r\\n            functionCallWithValue(\\r\\n                target,\\r\\n                data,\\r\\n                value,\\r\\n                \\\"Address: low-level call with value failed\\\"\\r\\n            );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\r\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        uint256 value,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        require(\\r\\n            address(this).balance >= value,\\r\\n            \\\"Address: insufficient balance for call\\\"\\r\\n        );\\r\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\r\\n\\r\\n        (bool success, bytes memory returndata) = target.call{value: value}(\\r\\n            data\\r\\n        );\\r\\n        return verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(\\r\\n        address target,\\r\\n        bytes memory data\\r\\n    ) internal view returns (bytes memory) {\\r\\n        return\\r\\n            functionStaticCall(\\r\\n                target,\\r\\n                data,\\r\\n                \\\"Address: low-level static call failed\\\"\\r\\n            );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal view returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\r\\n\\r\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\r\\n        return verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function functionDelegateCall(\\r\\n        address target,\\r\\n        bytes memory data\\r\\n    ) internal returns (bytes memory) {\\r\\n        return\\r\\n            functionDelegateCall(\\r\\n                target,\\r\\n                data,\\r\\n                \\\"Address: low-level delegate call failed\\\"\\r\\n            );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function functionDelegateCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\r\\n\\r\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\r\\n        return verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\r\\n     * revert reason using the provided one.\\r\\n     *\\r\\n     * _Available since v4.3._\\r\\n     */\\r\\n    function verifyCallResult(\\r\\n        bool success,\\r\\n        bytes memory returndata,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (bytes memory) {\\r\\n        if (success) {\\r\\n            return returndata;\\r\\n        } else {\\r\\n            // Look for revert reason and bubble it up if present\\r\\n            if (returndata.length > 0) {\\r\\n                // The easiest way to bubble the revert reason is using memory via assembly\\r\\n\\r\\n                assembly {\\r\\n                    let returndata_size := mload(returndata)\\r\\n                    revert(add(32, returndata), returndata_size)\\r\\n                }\\r\\n            } else {\\r\\n                revert(errorMessage);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\n// File @openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol@v4.6.0\\r\\n\\r\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @title SafeERC20\\r\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\r\\n * contract returns false). Tokens that return no value (and instead revert or\\r\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\r\\n * successful.\\r\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\r\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\r\\n */\\r\\nlibrary SafeERC20 {\\r\\n    using Address for address;\\r\\n\\r\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\r\\n        _callOptionalReturn(\\r\\n            token,\\r\\n            abi.encodeWithSelector(token.transfer.selector, to, value)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function safeTransferFrom(\\r\\n        IERC20 token,\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        _callOptionalReturn(\\r\\n            token,\\r\\n            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Deprecated. This function has issues similar to the ones found in\\r\\n     * {IERC20-approve}, and its usage is discouraged.\\r\\n     *\\r\\n     * Whenever possible, use {safeIncreaseAllowance} and\\r\\n     * {safeDecreaseAllowance} instead.\\r\\n     */\\r\\n    function safeApprove(\\r\\n        IERC20 token,\\r\\n        address spender,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        // safeApprove should only be called when setting an initial allowance,\\r\\n        // or when resetting it to zero. To increase and decrease it, use\\r\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\r\\n        require(\\r\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\r\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\r\\n        );\\r\\n        _callOptionalReturn(\\r\\n            token,\\r\\n            abi.encodeWithSelector(token.approve.selector, spender, value)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function safeIncreaseAllowance(\\r\\n        IERC20 token,\\r\\n        address spender,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\r\\n        _callOptionalReturn(\\r\\n            token,\\r\\n            abi.encodeWithSelector(\\r\\n                token.approve.selector,\\r\\n                spender,\\r\\n                newAllowance\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function safeDecreaseAllowance(\\r\\n        IERC20 token,\\r\\n        address spender,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        unchecked {\\r\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\r\\n            require(\\r\\n                oldAllowance >= value,\\r\\n                \\\"SafeERC20: decreased allowance below zero\\\"\\r\\n            );\\r\\n            uint256 newAllowance = oldAllowance - value;\\r\\n            _callOptionalReturn(\\r\\n                token,\\r\\n                abi.encodeWithSelector(\\r\\n                    token.approve.selector,\\r\\n                    spender,\\r\\n                    newAllowance\\r\\n                )\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\r\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\r\\n     * @param token The token targeted by the call.\\r\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\r\\n     */\\r\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\r\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\r\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\r\\n        // the target address contains contract code and also asserts for success in the low-level call.\\r\\n\\r\\n        bytes memory returndata = address(token).functionCall(\\r\\n            data,\\r\\n            \\\"SafeERC20: low-level call failed\\\"\\r\\n        );\\r\\n        if (returndata.length > 0) {\\r\\n            // Return data is optional\\r\\n            require(\\r\\n                abi.decode(returndata, (bool)),\\r\\n                \\\"SafeERC20: ERC20 operation did not succeed\\\"\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\n// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IRouter {\\r\\n    function swapExactTokensForTokens(\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256[] memory amounts);\\r\\n\\r\\n    function swapExactETHForTokens(\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external payable returns (uint256[] memory amounts);\\r\\n\\r\\n    function swapExactTokensForETH(\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256[] memory amounts);\\r\\n\\r\\n    function getAmountsOut(\\r\\n        uint256 amountIn,\\r\\n        address[] calldata path\\r\\n    ) external view returns (uint256[] memory amounts);\\r\\n}\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\n/// @title The interface for the PancakeSwap V3 Factory\\r\\n/// @notice The PancakeSwap V3 Factory facilitates creation of PancakeSwap V3 pools and control over the protocol fees\\r\\ninterface IPancakeV3Factory {\\r\\n    function getPool(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint24 fee\\r\\n    ) external view returns (address pool);\\r\\n}\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\ninterface IPancakeV3PoolState {\\r\\n    function slot0()\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            uint160 sqrtPriceX96,\\r\\n            int24 tick,\\r\\n            uint16 observationIndex,\\r\\n            uint16 observationCardinality,\\r\\n            uint16 observationCardinalityNext,\\r\\n            uint32 feeProtocol,\\r\\n            bool unlocked\\r\\n        );\\r\\n}\\r\\n\\r\\ninterface IPancakeV3PoolImmutables {\\r\\n    /// @notice The contract that deployed the pool, which must adhere to the IPancakeV3Factory interface\\r\\n    /// @return The contract address\\r\\n    function factory() external view returns (address);\\r\\n\\r\\n    /// @notice The first of the two tokens of the pool, sorted by address\\r\\n    /// @return The token contract address\\r\\n    function token0() external view returns (address);\\r\\n\\r\\n    /// @notice The second of the two tokens of the pool, sorted by address\\r\\n    /// @return The token contract address\\r\\n    function token1() external view returns (address);\\r\\n\\r\\n    /// @notice The pool's fee in hundredths of a bip, i.e. 1e-6\\r\\n    /// @return The fee\\r\\n    function fee() external view returns (uint24);\\r\\n\\r\\n    /// @notice The pool tick spacing\\r\\n    /// @dev Ticks can only be used at multiples of this value, minimum of 1 and always positive\\r\\n    /// e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ...\\r\\n    /// This value is an int24 to avoid casting even though it is always positive.\\r\\n    /// @return The tick spacing\\r\\n    function tickSpacing() external view returns (int24);\\r\\n\\r\\n    /// @notice The maximum amount of position liquidity that can use any tick in the range\\r\\n    /// @dev This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and\\r\\n    /// also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\\r\\n    /// @return The max amount of liquidity per tick\\r\\n    function maxLiquidityPerTick() external view returns (uint128);\\r\\n}\\r\\n\\r\\ninterface IPancakeV3Pool is IPancakeV3PoolState, IPancakeV3PoolImmutables {}\\r\\n\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\n/// @title Callback for IPancakeV3PoolActions#swap\\r\\n/// @notice Any contract that calls IPancakeV3PoolActions#swap must implement this interface\\r\\ninterface IPancakeV3SwapCallback {\\r\\n    /// @notice Called to `msg.sender` after executing a swap via IPancakeV3Pool#swap.\\r\\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\\r\\n    /// The caller of this method must be checked to be a PancakeV3Pool deployed by the canonical PancakeV3Factory.\\r\\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\\r\\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\\r\\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\\r\\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\\r\\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\\r\\n    /// @param data Any data passed through by the caller via the IPancakeV3PoolActions#swap call\\r\\n    function pancakeV3SwapCallback(\\r\\n        int256 amount0Delta,\\r\\n        int256 amount1Delta,\\r\\n        bytes calldata data\\r\\n    ) external;\\r\\n}\\r\\n\\r\\ninterface IV3SwapRouter is IPancakeV3SwapCallback {\\r\\n    struct ExactInputSingleParams {\\r\\n        address tokenIn;\\r\\n        address tokenOut;\\r\\n        uint24 fee;\\r\\n        address recipient;\\r\\n        uint256 amountIn;\\r\\n        uint256 amountOutMinimum;\\r\\n        uint160 sqrtPriceLimitX96;\\r\\n    }\\r\\n\\r\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\\r\\n    /// @dev Setting `amountIn` to 0 will cause the contract to look up its own balance,\\r\\n    /// and swap the entire amount, enabling contracts to send tokens before calling this function.\\r\\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\\r\\n    /// @return amountOut The amount of the received token\\r\\n    function exactInputSingle(\\r\\n        ExactInputSingleParams calldata params\\r\\n    ) external payable returns (uint256 amountOut);\\r\\n\\r\\n    struct ExactInputParams {\\r\\n        bytes path;\\r\\n        address recipient;\\r\\n        uint256 amountIn;\\r\\n        uint256 amountOutMinimum;\\r\\n    }\\r\\n\\r\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\\r\\n    /// @dev Setting `amountIn` to 0 will cause the contract to look up its own balance,\\r\\n    /// and swap the entire amount, enabling contracts to send tokens before calling this function.\\r\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\\r\\n    /// @return amountOut The amount of the received token\\r\\n    function exactInput(\\r\\n        ExactInputParams calldata params\\r\\n    ) external payable returns (uint256 amountOut);\\r\\n\\r\\n    struct ExactOutputSingleParams {\\r\\n        address tokenIn;\\r\\n        address tokenOut;\\r\\n        uint24 fee;\\r\\n        address recipient;\\r\\n        uint256 amountOut;\\r\\n        uint256 amountInMaximum;\\r\\n        uint160 sqrtPriceLimitX96;\\r\\n    }\\r\\n\\r\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\\r\\n    /// that may remain in the router after the swap.\\r\\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\\r\\n    /// @return amountIn The amount of the input token\\r\\n    function exactOutputSingle(\\r\\n        ExactOutputSingleParams calldata params\\r\\n    ) external payable returns (uint256 amountIn);\\r\\n\\r\\n    struct ExactOutputParams {\\r\\n        bytes path;\\r\\n        address recipient;\\r\\n        uint256 amountOut;\\r\\n        uint256 amountInMaximum;\\r\\n    }\\r\\n\\r\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\\r\\n    /// that may remain in the router after the swap.\\r\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\\r\\n    /// @return amountIn The amount of the input token\\r\\n    function exactOutput(\\r\\n        ExactOutputParams calldata params\\r\\n    ) external payable returns (uint256 amountIn);\\r\\n\\r\\n    function refundETH() external payable;\\r\\n}\\r\\n\\r\\ncontract Claimable is Ownable {\\r\\n    function claimToken(\\r\\n        address tokenAddress,\\r\\n        uint256 amount\\r\\n    ) external onlyOwner {\\r\\n        IERC20(tokenAddress).transfer(owner(), amount);\\r\\n    }\\r\\n\\r\\n    function claimETH(uint256 amount) external onlyOwner {\\r\\n        (bool sent, ) = owner().call{value: amount}(\\\"\\\");\\r\\n        require(sent, \\\"Failed to send Ether\\\");\\r\\n    }\\r\\n}\\r\\n\\r\\ncontract ProSwap is Claimable {\\r\\n    using SafeMath for uint256;\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    uint public feePercent = 0; //10:0.25%\\r\\n    uint256 public rewardAmount = 10000000000000000000; //10 to tokens\\r\\n\\r\\n    address public rewardAddress;\\r\\n    address public feeAccount;\\r\\n    address public router;\\r\\n    address public wavax;\\r\\n\\r\\n    address public routerAddress = 0x13f4EA83D0bd40E75C8222255bc855a974568Dd4;\\r\\n    address public factoryAddress = 0x0BFbCF9fa4f9C56B0F40a671Ad40E0805A091865;\\r\\n    address public wbnbAddress = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;\\r\\n    uint24 poolFee = 100;\\r\\n\\r\\n    mapping(address => uint256) airdropAddress;\\r\\n    mapping(address => uint256) airdropLastTime;\\r\\n\\r\\n    constructor(\\r\\n        address _feeAccount,\\r\\n        address _router,\\r\\n        address _wavax,\\r\\n        address _rewardAddress\\r\\n    ) {\\r\\n        feeAccount = _feeAccount;\\r\\n        router = _router;\\r\\n        wavax = _wavax;\\r\\n        rewardAddress = _rewardAddress;\\r\\n    }\\r\\n\\r\\n    function airdrop() external {\\r\\n        require(\\r\\n            airdropAddress[msg.sender] + 86400 > block.timestamp,\\r\\n            \\\"You did not swap in 24 hours\\\"\\r\\n        );\\r\\n\\r\\n        require(\\r\\n            block.timestamp > airdropLastTime[msg.sender] + 86400,\\r\\n            \\\"You airdroped in 24 hours\\\"\\r\\n        );\\r\\n\\r\\n        IERC20(rewardAddress).safeTransfer(msg.sender, rewardAmount);\\r\\n        airdropLastTime[msg.sender] = block.timestamp;\\r\\n    }\\r\\n\\r\\n    function swapV2Tokens(\\r\\n        address _tokenA,\\r\\n        address _tokenB,\\r\\n        uint256 _amountIn\\r\\n    ) external payable {\\r\\n        airdropAddress[msg.sender] = block.timestamp;\\r\\n        address[] memory path = new address[](2);\\r\\n        if (_tokenA == address(0)) {\\r\\n            path[0] = wavax;\\r\\n            path[1] = _tokenB;\\r\\n        } else if (_tokenB == address(0)) {\\r\\n            path[0] = _tokenA;\\r\\n            path[1] = wavax;\\r\\n        } else {\\r\\n            path[0] = _tokenA;\\r\\n            path[1] = _tokenB;\\r\\n        }\\r\\n\\r\\n        _proceedToUniswap(_tokenA, _tokenB, _amountIn, path);\\r\\n    }\\r\\n\\r\\n    function customSwapTokens(\\r\\n        address _tokenA,\\r\\n        address _tokenB,\\r\\n        uint256 _amountIn,\\r\\n        address[] memory path\\r\\n    ) external payable {\\r\\n        if (_tokenA == address(0)) {\\r\\n            require(\\r\\n                wavax == path[0] && _tokenB == path[path.length - 1],\\r\\n                \\\"PattieSwap: Path must be specified\\\"\\r\\n            );\\r\\n        } else if (_tokenB == address(0)) {\\r\\n            require(\\r\\n                _tokenA == path[0] && wavax == path[path.length - 1],\\r\\n                \\\"PattieSwap: Path must be specified\\\"\\r\\n            );\\r\\n        } else {\\r\\n            require(\\r\\n                _tokenA == path[0] && _tokenB == path[path.length - 1],\\r\\n                \\\"PattieSwap: Path must be specified\\\"\\r\\n            );\\r\\n        }\\r\\n        _proceedToUniswap(_tokenA, _tokenB, _amountIn, path);\\r\\n    }\\r\\n\\r\\n    function _proceedToUniswap(\\r\\n        address _tokenA,\\r\\n        address _tokenB,\\r\\n        uint256 _amountIn,\\r\\n        address[] memory path\\r\\n    ) internal {\\r\\n        require(_amountIn > 0, \\\"PattieSwap: amountIn must be greater than 0\\\");\\r\\n\\r\\n        if (_tokenA == address(0)) {\\r\\n            require(_amountIn >= msg.value, \\\"PattieSwap: Insufficient ETH\\\");\\r\\n            uint fee = (_amountIn * feePercent) / 10000;\\r\\n            payable(feeAccount).transfer(fee);\\r\\n            uint amountToSwap = _amountIn - fee;\\r\\n            _swapAVAXForTokens(amountToSwap, path);\\r\\n        } else {\\r\\n            IERC20(_tokenA).safeTransferFrom(\\r\\n                msg.sender,\\r\\n                address(this),\\r\\n                _amountIn\\r\\n            );\\r\\n            uint fee = (_amountIn * feePercent) / 10000;\\r\\n            IERC20(_tokenA).safeTransfer(feeAccount, fee);\\r\\n            uint amountToSwap = _amountIn - fee;\\r\\n            _approve(_tokenA, amountToSwap);\\r\\n            if (_tokenB == address(0)) {\\r\\n                _swapTokensForAVAX(amountToSwap, path);\\r\\n            } else {\\r\\n                _swapTokensForTokens(amountToSwap, path);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _approve(address _token, uint _amount) internal {\\r\\n        IERC20(_token).approve(address(router), _amount);\\r\\n    }\\r\\n\\r\\n    function _swapTokensForAVAX(uint _amount, address[] memory path) internal {\\r\\n        IRouter(router).swapExactTokensForETH(\\r\\n            _amount,\\r\\n            0,\\r\\n            path,\\r\\n            msg.sender,\\r\\n            block.timestamp\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function _swapAVAXForTokens(uint _amount, address[] memory path) internal {\\r\\n        IRouter(router).swapExactETHForTokens{value: _amount}(\\r\\n            0,\\r\\n            path,\\r\\n            msg.sender,\\r\\n            block.timestamp\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function _swapTokensForTokens(\\r\\n        uint _amount,\\r\\n        address[] memory path\\r\\n    ) internal {\\r\\n        IRouter(router).swapExactTokensForTokens(\\r\\n            _amount,\\r\\n            0,\\r\\n            path,\\r\\n            msg.sender,\\r\\n            block.timestamp\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function _v3Approve(address _token, uint _amount) internal {\\r\\n        IERC20(_token).approve(address(routerAddress), _amount);\\r\\n    }\\r\\n\\r\\n    function getOutputTokenAmount(\\r\\n        uint inputAmount,\\r\\n        address[] memory path\\r\\n    ) external view returns (uint outputAmount) {\\r\\n        uint[] memory outputs = IRouter(router).getAmountsOut(\\r\\n            inputAmount,\\r\\n            path\\r\\n        );\\r\\n        return outputs[outputs.length - 1];\\r\\n    }\\r\\n\\r\\n    function getV3OutputTokenAmount(\\r\\n        uint256 _inputAmount,\\r\\n        address _tokenIn,\\r\\n        address _tokenOut\\r\\n    ) external view returns (uint outputAmount) {\\r\\n        uint256 slotReturnValue = 0;\\r\\n        address pairAddress = IPancakeV3Factory(factoryAddress).getPool(\\r\\n            _tokenIn,\\r\\n            _tokenOut,\\r\\n            poolFee\\r\\n        );\\r\\n        (slotReturnValue, , , , , , ) = IPancakeV3PoolState(pairAddress)\\r\\n            .slot0();\\r\\n        address token0 = IPancakeV3Pool(pairAddress).token0();\\r\\n        if (_tokenIn == token0)\\r\\n            outputAmount = ((slotReturnValue ** 2 * _inputAmount) / 2 ** 192);\\r\\n        else outputAmount = ((2 ** 192 * _inputAmount) / slotReturnValue ** 2);\\r\\n    }\\r\\n\\r\\n    function setFeePercent(uint _feePercent) external onlyOwner {\\r\\n        feePercent = _feePercent;\\r\\n    }\\r\\n\\r\\n    function setRewardAmount(uint256 _amount) external onlyOwner {\\r\\n        rewardAmount = _amount;\\r\\n    }\\r\\n\\r\\n    function setRewardToken(address _rewawrdAddress) external onlyOwner {\\r\\n        rewardAddress = _rewawrdAddress;\\r\\n    }\\r\\n\\r\\n    function setFeeAccount(address _feeAccount) external onlyOwner {\\r\\n        feeAccount = _feeAccount;\\r\\n    }\\r\\n\\r\\n    function setRouterWAVAX(\\r\\n        address _router,\\r\\n        address _wavax\\r\\n    ) external onlyOwner {\\r\\n        router = _router;\\r\\n        wavax = _wavax;\\r\\n    }\\r\\n\\r\\n    function emergencyWithdraw(\\r\\n        address _token,\\r\\n        uint _amount\\r\\n    ) external onlyOwner {\\r\\n        IERC20(_token).safeTransfer(msg.sender, _amount);\\r\\n    }\\r\\n\\r\\n    function emergencyWithdrawETH(uint _amount) external onlyOwner {\\r\\n        payable(owner()).transfer(_amount);\\r\\n    }\\r\\n\\r\\n    function swapTokens(\\r\\n        address _tokenIn,\\r\\n        address _tokenOut,\\r\\n        uint256 _amountIn\\r\\n    ) external payable {\\r\\n        airdropAddress[msg.sender] = block.timestamp;\\r\\n        IV3SwapRouter.ExactInputSingleParams memory params = IV3SwapRouter\\r\\n            .ExactInputSingleParams(\\r\\n                _tokenIn,\\r\\n                _tokenOut,\\r\\n                poolFee,\\r\\n                msg.sender,\\r\\n                _amountIn,\\r\\n                0,\\r\\n                0\\r\\n            );\\r\\n        if (_tokenIn == wbnbAddress)\\r\\n            IV3SwapRouter(routerAddress).exactInputSingle{value: msg.value}(\\r\\n                params\\r\\n            );\\r\\n        else {\\r\\n            IERC20(_tokenIn).safeTransferFrom(\\r\\n                msg.sender,\\r\\n                address(this),\\r\\n                _amountIn\\r\\n            );\\r\\n            _v3Approve(_tokenIn, _amountIn);\\r\\n            IV3SwapRouter(routerAddress).exactInputSingle{value: msg.value}(\\r\\n                params\\r\\n            );\\r\\n        }\\r\\n        IV3SwapRouter(routerAddress).refundETH();\\r\\n        // refund leftover ETH to user\\r\\n        (bool success, ) = msg.sender.call{value: address(this).balance}(\\\"\\\");\\r\\n        require(success, \\\"refund failed\\\");\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x014ebbd50111dbe2ffd46bfee0dca5b1dbbc4785ff10cb323cef7317398427ea\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"factory()":{"notice":"The contract that deployed the pool, which must adhere to the IPancakeV3Factory interface"},"fee()":{"notice":"The pool's fee in hundredths of a bip, i.e. 1e-6"},"maxLiquidityPerTick()":{"notice":"The maximum amount of position liquidity that can use any tick in the range"},"tickSpacing()":{"notice":"The pool tick spacing"},"token0()":{"notice":"The first of the two tokens of the pool, sorted by address"},"token1()":{"notice":"The second of the two tokens of the pool, sorted by address"}},"version":1}},"IPancakeV3PoolImmutables":{"abi":[{"inputs":[],"name":"factory","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"fee","outputs":[{"internalType":"uint24","name":"","type":"uint24"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"maxLiquidityPerTick","outputs":[{"internalType":"uint128","name":"","type":"uint128"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"tickSpacing","outputs":[{"internalType":"int24","name":"","type":"int24"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"token0","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"token1","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{"factory()":{"returns":{"_0":"The contract address"}},"fee()":{"returns":{"_0":"The fee"}},"maxLiquidityPerTick()":{"details":"This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool","returns":{"_0":"The max amount of liquidity per tick"}},"tickSpacing()":{"details":"Ticks can only be used at multiples of this value, minimum of 1 and always positive e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ... This value is an int24 to avoid casting even though it is always positive.","returns":{"_0":"The tick spacing"}},"token0()":{"returns":{"_0":"The token contract address"}},"token1()":{"returns":{"_0":"The token contract address"}}},"version":1},"evm":{"bytecode":{"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"factory()":"c45a0155","fee()":"ddca3f43","maxLiquidityPerTick()":"70cf754a","tickSpacing()":"d0c93a7c","token0()":"0dfe1681","token1()":"d21220a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxLiquidityPerTick\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tickSpacing\",\"outputs\":[{\"internalType\":\"int24\",\"name\":\"\",\"type\":\"int24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token0\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token1\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"factory()\":{\"returns\":{\"_0\":\"The contract address\"}},\"fee()\":{\"returns\":{\"_0\":\"The fee\"}},\"maxLiquidityPerTick()\":{\"details\":\"This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\",\"returns\":{\"_0\":\"The max amount of liquidity per tick\"}},\"tickSpacing()\":{\"details\":\"Ticks can only be used at multiples of this value, minimum of 1 and always positive e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ... This value is an int24 to avoid casting even though it is always positive.\",\"returns\":{\"_0\":\"The tick spacing\"}},\"token0()\":{\"returns\":{\"_0\":\"The token contract address\"}},\"token1()\":{\"returns\":{\"_0\":\"The token contract address\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"factory()\":{\"notice\":\"The contract that deployed the pool, which must adhere to the IPancakeV3Factory interface\"},\"fee()\":{\"notice\":\"The pool's fee in hundredths of a bip, i.e. 1e-6\"},\"maxLiquidityPerTick()\":{\"notice\":\"The maximum amount of position liquidity that can use any tick in the range\"},\"tickSpacing()\":{\"notice\":\"The pool tick spacing\"},\"token0()\":{\"notice\":\"The first of the two tokens of the pool, sorted by address\"},\"token1()\":{\"notice\":\"The second of the two tokens of the pool, sorted by address\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/swap.sol\":\"IPancakeV3PoolImmutables\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/swap.sol\":{\"content\":\"pragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\r\\n */\\r\\ninterface IERC20 {\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(\\r\\n        address indexed owner,\\r\\n        address indexed spender,\\r\\n        uint256 value\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address to, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(\\r\\n        address owner,\\r\\n        address spender\\r\\n    ) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender's allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller's\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n}\\r\\n\\r\\n// File @openzeppelin/contracts/utils/Context.sol@v4.6.0\\r\\n\\r\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Provides information about the current execution context, including the\\r\\n * sender of the transaction and its data. While these are generally available\\r\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\r\\n * manner, since when dealing with meta-transactions the account sending and\\r\\n * paying for execution may not be the actual sender (as far as an application\\r\\n * is concerned).\\r\\n *\\r\\n * This contract is only required for intermediate, library-like contracts.\\r\\n */\\r\\nabstract contract Context {\\r\\n    function _msgSender() internal view virtual returns (address) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view virtual returns (bytes calldata) {\\r\\n        return msg.data;\\r\\n    }\\r\\n}\\r\\n\\r\\n// File @openzeppelin/contracts/access/Ownable.sol@v4.6.0\\r\\n\\r\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Contract module which provides a basic access control mechanism, where\\r\\n * there is an account (an owner) that can be granted exclusive access to\\r\\n * specific functions.\\r\\n *\\r\\n * By default, the owner account will be the one that deploys the contract. This\\r\\n * can later be changed with {transferOwnership}.\\r\\n *\\r\\n * This module is used through inheritance. It will make available the modifier\\r\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\r\\n * the owner.\\r\\n */\\r\\nabstract contract Ownable is Context {\\r\\n    address private _owner;\\r\\n\\r\\n    event OwnershipTransferred(\\r\\n        address indexed previousOwner,\\r\\n        address indexed newOwner\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\r\\n     */\\r\\n    constructor() {\\r\\n        _transferOwnership(_msgSender());\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current owner.\\r\\n     */\\r\\n    function owner() public view virtual returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier onlyOwner() {\\r\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Leaves the contract without owner. It will not be possible to call\\r\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\r\\n     *\\r\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\r\\n     * thereby removing any functionality that is only available to the owner.\\r\\n     */\\r\\n    function renounceOwnership() public virtual onlyOwner {\\r\\n        _transferOwnership(address(0));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n        require(\\r\\n            newOwner != address(0),\\r\\n            \\\"Ownable: new owner is the zero address\\\"\\r\\n        );\\r\\n        _transferOwnership(newOwner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Internal function without access restriction.\\r\\n     */\\r\\n    function _transferOwnership(address newOwner) internal virtual {\\r\\n        address oldOwner = _owner;\\r\\n        _owner = newOwner;\\r\\n        emit OwnershipTransferred(oldOwner, newOwner);\\r\\n    }\\r\\n}\\r\\n\\r\\n// File @openzeppelin/contracts/utils/math/SafeMath.sol@v4.6.0\\r\\n\\r\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n// CAUTION\\r\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\r\\n// because it relies on the compiler's built in overflow checks.\\r\\n\\r\\n/**\\r\\n * @dev Wrappers over Solidity's arithmetic operations.\\r\\n *\\r\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\r\\n * now has built in overflow checking.\\r\\n */\\r\\nlibrary SafeMath {\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryAdd(\\r\\n        uint256 a,\\r\\n        uint256 b\\r\\n    ) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            uint256 c = a + b;\\r\\n            if (c < a) return (false, 0);\\r\\n            return (true, c);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function trySub(\\r\\n        uint256 a,\\r\\n        uint256 b\\r\\n    ) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            if (b > a) return (false, 0);\\r\\n            return (true, a - b);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryMul(\\r\\n        uint256 a,\\r\\n        uint256 b\\r\\n    ) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\r\\n            // benefit is lost if 'b' is also tested.\\r\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\r\\n            if (a == 0) return (true, 0);\\r\\n            uint256 c = a * b;\\r\\n            if (c / a != b) return (false, 0);\\r\\n            return (true, c);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryDiv(\\r\\n        uint256 a,\\r\\n        uint256 b\\r\\n    ) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            if (b == 0) return (false, 0);\\r\\n            return (true, a / b);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryMod(\\r\\n        uint256 a,\\r\\n        uint256 b\\r\\n    ) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            if (b == 0) return (false, 0);\\r\\n            return (true, a % b);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity's `+` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Addition cannot overflow.\\r\\n     */\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a + b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity's `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a - b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity's `*` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Multiplication cannot overflow.\\r\\n     */\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a * b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `/` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a / b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * reverting when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a % b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\r\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\r\\n     *\\r\\n     * Counterpart to Solidity's `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            require(b <= a, errorMessage);\\r\\n            return a - b;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            require(b > 0, errorMessage);\\r\\n            return a / b;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * reverting with custom message when dividing by zero.\\r\\n     *\\r\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\r\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\r\\n     *\\r\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            require(b > 0, errorMessage);\\r\\n            return a % b;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\n// File @openzeppelin/contracts/utils/Address.sol@v4.6.0\\r\\n\\r\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\r\\n\\r\\npragma solidity ^0.8.1;\\r\\n\\r\\n/**\\r\\n * @dev Collection of functions related to the address type\\r\\n */\\r\\nlibrary Address {\\r\\n    /**\\r\\n     * @dev Returns true if `account` is a contract.\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * It is unsafe to assume that an address for which this function returns\\r\\n     * false is an externally-owned account (EOA) and not a contract.\\r\\n     *\\r\\n     * Among others, `isContract` will return false for the following\\r\\n     * types of addresses:\\r\\n     *\\r\\n     *  - an externally-owned account\\r\\n     *  - a contract in construction\\r\\n     *  - an address where a contract will be created\\r\\n     *  - an address where a contract lived, but was destroyed\\r\\n     * ====\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\r\\n     *\\r\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\r\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\r\\n     * constructor.\\r\\n     * ====\\r\\n     */\\r\\n    function isContract(address account) internal view returns (bool) {\\r\\n        // This method relies on extcodesize/address.code.length, which returns 0\\r\\n        // for contracts in construction, since the code is only stored at the end\\r\\n        // of the constructor execution.\\r\\n\\r\\n        return account.code.length > 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\r\\n     * `recipient`, forwarding all available gas and reverting on errors.\\r\\n     *\\r\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\r\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\r\\n     * imposed by `transfer`, making them unable to receive funds via\\r\\n     * `transfer`. {sendValue} removes this limitation.\\r\\n     *\\r\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\r\\n     *\\r\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\r\\n     * taken to not create reentrancy vulnerabilities. Consider using\\r\\n     * {ReentrancyGuard} or the\\r\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\r\\n     */\\r\\n    function sendValue(address payable recipient, uint256 amount) internal {\\r\\n        require(\\r\\n            address(this).balance >= amount,\\r\\n            \\\"Address: insufficient balance\\\"\\r\\n        );\\r\\n\\r\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\r\\n        require(\\r\\n            success,\\r\\n            \\\"Address: unable to send value, recipient may have reverted\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Performs a Solidity function call using a low level `call`. A\\r\\n     * plain `call` is an unsafe replacement for a function call: use this\\r\\n     * function instead.\\r\\n     *\\r\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\r\\n     * function (like regular Solidity function calls).\\r\\n     *\\r\\n     * Returns the raw returned data. To convert to the expected return value,\\r\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `target` must be a contract.\\r\\n     * - calling `target` with `data` must not revert.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(\\r\\n        address target,\\r\\n        bytes memory data\\r\\n    ) internal returns (bytes memory) {\\r\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\r\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, 0, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but also transferring `value` wei to `target`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the calling contract must have an ETH balance of at least `value`.\\r\\n     * - the called Solidity function must be `payable`.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        uint256 value\\r\\n    ) internal returns (bytes memory) {\\r\\n        return\\r\\n            functionCallWithValue(\\r\\n                target,\\r\\n                data,\\r\\n                value,\\r\\n                \\\"Address: low-level call with value failed\\\"\\r\\n            );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\r\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        uint256 value,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        require(\\r\\n            address(this).balance >= value,\\r\\n            \\\"Address: insufficient balance for call\\\"\\r\\n        );\\r\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\r\\n\\r\\n        (bool success, bytes memory returndata) = target.call{value: value}(\\r\\n            data\\r\\n        );\\r\\n        return verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(\\r\\n        address target,\\r\\n        bytes memory data\\r\\n    ) internal view returns (bytes memory) {\\r\\n        return\\r\\n            functionStaticCall(\\r\\n                target,\\r\\n                data,\\r\\n                \\\"Address: low-level static call failed\\\"\\r\\n            );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal view returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\r\\n\\r\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\r\\n        return verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function functionDelegateCall(\\r\\n        address target,\\r\\n        bytes memory data\\r\\n    ) internal returns (bytes memory) {\\r\\n        return\\r\\n            functionDelegateCall(\\r\\n                target,\\r\\n                data,\\r\\n                \\\"Address: low-level delegate call failed\\\"\\r\\n            );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function functionDelegateCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\r\\n\\r\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\r\\n        return verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\r\\n     * revert reason using the provided one.\\r\\n     *\\r\\n     * _Available since v4.3._\\r\\n     */\\r\\n    function verifyCallResult(\\r\\n        bool success,\\r\\n        bytes memory returndata,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (bytes memory) {\\r\\n        if (success) {\\r\\n            return returndata;\\r\\n        } else {\\r\\n            // Look for revert reason and bubble it up if present\\r\\n            if (returndata.length > 0) {\\r\\n                // The easiest way to bubble the revert reason is using memory via assembly\\r\\n\\r\\n                assembly {\\r\\n                    let returndata_size := mload(returndata)\\r\\n                    revert(add(32, returndata), returndata_size)\\r\\n                }\\r\\n            } else {\\r\\n                revert(errorMessage);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\n// File @openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol@v4.6.0\\r\\n\\r\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @title SafeERC20\\r\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\r\\n * contract returns false). Tokens that return no value (and instead revert or\\r\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\r\\n * successful.\\r\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\r\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\r\\n */\\r\\nlibrary SafeERC20 {\\r\\n    using Address for address;\\r\\n\\r\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\r\\n        _callOptionalReturn(\\r\\n            token,\\r\\n            abi.encodeWithSelector(token.transfer.selector, to, value)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function safeTransferFrom(\\r\\n        IERC20 token,\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        _callOptionalReturn(\\r\\n            token,\\r\\n            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Deprecated. This function has issues similar to the ones found in\\r\\n     * {IERC20-approve}, and its usage is discouraged.\\r\\n     *\\r\\n     * Whenever possible, use {safeIncreaseAllowance} and\\r\\n     * {safeDecreaseAllowance} instead.\\r\\n     */\\r\\n    function safeApprove(\\r\\n        IERC20 token,\\r\\n        address spender,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        // safeApprove should only be called when setting an initial allowance,\\r\\n        // or when resetting it to zero. To increase and decrease it, use\\r\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\r\\n        require(\\r\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\r\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\r\\n        );\\r\\n        _callOptionalReturn(\\r\\n            token,\\r\\n            abi.encodeWithSelector(token.approve.selector, spender, value)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function safeIncreaseAllowance(\\r\\n        IERC20 token,\\r\\n        address spender,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\r\\n        _callOptionalReturn(\\r\\n            token,\\r\\n            abi.encodeWithSelector(\\r\\n                token.approve.selector,\\r\\n                spender,\\r\\n                newAllowance\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function safeDecreaseAllowance(\\r\\n        IERC20 token,\\r\\n        address spender,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        unchecked {\\r\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\r\\n            require(\\r\\n                oldAllowance >= value,\\r\\n                \\\"SafeERC20: decreased allowance below zero\\\"\\r\\n            );\\r\\n            uint256 newAllowance = oldAllowance - value;\\r\\n            _callOptionalReturn(\\r\\n                token,\\r\\n                abi.encodeWithSelector(\\r\\n                    token.approve.selector,\\r\\n                    spender,\\r\\n                    newAllowance\\r\\n                )\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\r\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\r\\n     * @param token The token targeted by the call.\\r\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\r\\n     */\\r\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\r\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\r\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\r\\n        // the target address contains contract code and also asserts for success in the low-level call.\\r\\n\\r\\n        bytes memory returndata = address(token).functionCall(\\r\\n            data,\\r\\n            \\\"SafeERC20: low-level call failed\\\"\\r\\n        );\\r\\n        if (returndata.length > 0) {\\r\\n            // Return data is optional\\r\\n            require(\\r\\n                abi.decode(returndata, (bool)),\\r\\n                \\\"SafeERC20: ERC20 operation did not succeed\\\"\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\n// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IRouter {\\r\\n    function swapExactTokensForTokens(\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256[] memory amounts);\\r\\n\\r\\n    function swapExactETHForTokens(\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external payable returns (uint256[] memory amounts);\\r\\n\\r\\n    function swapExactTokensForETH(\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256[] memory amounts);\\r\\n\\r\\n    function getAmountsOut(\\r\\n        uint256 amountIn,\\r\\n        address[] calldata path\\r\\n    ) external view returns (uint256[] memory amounts);\\r\\n}\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\n/// @title The interface for the PancakeSwap V3 Factory\\r\\n/// @notice The PancakeSwap V3 Factory facilitates creation of PancakeSwap V3 pools and control over the protocol fees\\r\\ninterface IPancakeV3Factory {\\r\\n    function getPool(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint24 fee\\r\\n    ) external view returns (address pool);\\r\\n}\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\ninterface IPancakeV3PoolState {\\r\\n    function slot0()\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            uint160 sqrtPriceX96,\\r\\n            int24 tick,\\r\\n            uint16 observationIndex,\\r\\n            uint16 observationCardinality,\\r\\n            uint16 observationCardinalityNext,\\r\\n            uint32 feeProtocol,\\r\\n            bool unlocked\\r\\n        );\\r\\n}\\r\\n\\r\\ninterface IPancakeV3PoolImmutables {\\r\\n    /// @notice The contract that deployed the pool, which must adhere to the IPancakeV3Factory interface\\r\\n    /// @return The contract address\\r\\n    function factory() external view returns (address);\\r\\n\\r\\n    /// @notice The first of the two tokens of the pool, sorted by address\\r\\n    /// @return The token contract address\\r\\n    function token0() external view returns (address);\\r\\n\\r\\n    /// @notice The second of the two tokens of the pool, sorted by address\\r\\n    /// @return The token contract address\\r\\n    function token1() external view returns (address);\\r\\n\\r\\n    /// @notice The pool's fee in hundredths of a bip, i.e. 1e-6\\r\\n    /// @return The fee\\r\\n    function fee() external view returns (uint24);\\r\\n\\r\\n    /// @notice The pool tick spacing\\r\\n    /// @dev Ticks can only be used at multiples of this value, minimum of 1 and always positive\\r\\n    /// e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ...\\r\\n    /// This value is an int24 to avoid casting even though it is always positive.\\r\\n    /// @return The tick spacing\\r\\n    function tickSpacing() external view returns (int24);\\r\\n\\r\\n    /// @notice The maximum amount of position liquidity that can use any tick in the range\\r\\n    /// @dev This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and\\r\\n    /// also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\\r\\n    /// @return The max amount of liquidity per tick\\r\\n    function maxLiquidityPerTick() external view returns (uint128);\\r\\n}\\r\\n\\r\\ninterface IPancakeV3Pool is IPancakeV3PoolState, IPancakeV3PoolImmutables {}\\r\\n\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\n/// @title Callback for IPancakeV3PoolActions#swap\\r\\n/// @notice Any contract that calls IPancakeV3PoolActions#swap must implement this interface\\r\\ninterface IPancakeV3SwapCallback {\\r\\n    /// @notice Called to `msg.sender` after executing a swap via IPancakeV3Pool#swap.\\r\\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\\r\\n    /// The caller of this method must be checked to be a PancakeV3Pool deployed by the canonical PancakeV3Factory.\\r\\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\\r\\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\\r\\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\\r\\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\\r\\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\\r\\n    /// @param data Any data passed through by the caller via the IPancakeV3PoolActions#swap call\\r\\n    function pancakeV3SwapCallback(\\r\\n        int256 amount0Delta,\\r\\n        int256 amount1Delta,\\r\\n        bytes calldata data\\r\\n    ) external;\\r\\n}\\r\\n\\r\\ninterface IV3SwapRouter is IPancakeV3SwapCallback {\\r\\n    struct ExactInputSingleParams {\\r\\n        address tokenIn;\\r\\n        address tokenOut;\\r\\n        uint24 fee;\\r\\n        address recipient;\\r\\n        uint256 amountIn;\\r\\n        uint256 amountOutMinimum;\\r\\n        uint160 sqrtPriceLimitX96;\\r\\n    }\\r\\n\\r\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\\r\\n    /// @dev Setting `amountIn` to 0 will cause the contract to look up its own balance,\\r\\n    /// and swap the entire amount, enabling contracts to send tokens before calling this function.\\r\\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\\r\\n    /// @return amountOut The amount of the received token\\r\\n    function exactInputSingle(\\r\\n        ExactInputSingleParams calldata params\\r\\n    ) external payable returns (uint256 amountOut);\\r\\n\\r\\n    struct ExactInputParams {\\r\\n        bytes path;\\r\\n        address recipient;\\r\\n        uint256 amountIn;\\r\\n        uint256 amountOutMinimum;\\r\\n    }\\r\\n\\r\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\\r\\n    /// @dev Setting `amountIn` to 0 will cause the contract to look up its own balance,\\r\\n    /// and swap the entire amount, enabling contracts to send tokens before calling this function.\\r\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\\r\\n    /// @return amountOut The amount of the received token\\r\\n    function exactInput(\\r\\n        ExactInputParams calldata params\\r\\n    ) external payable returns (uint256 amountOut);\\r\\n\\r\\n    struct ExactOutputSingleParams {\\r\\n        address tokenIn;\\r\\n        address tokenOut;\\r\\n        uint24 fee;\\r\\n        address recipient;\\r\\n        uint256 amountOut;\\r\\n        uint256 amountInMaximum;\\r\\n        uint160 sqrtPriceLimitX96;\\r\\n    }\\r\\n\\r\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\\r\\n    /// that may remain in the router after the swap.\\r\\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\\r\\n    /// @return amountIn The amount of the input token\\r\\n    function exactOutputSingle(\\r\\n        ExactOutputSingleParams calldata params\\r\\n    ) external payable returns (uint256 amountIn);\\r\\n\\r\\n    struct ExactOutputParams {\\r\\n        bytes path;\\r\\n        address recipient;\\r\\n        uint256 amountOut;\\r\\n        uint256 amountInMaximum;\\r\\n    }\\r\\n\\r\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\\r\\n    /// that may remain in the router after the swap.\\r\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\\r\\n    /// @return amountIn The amount of the input token\\r\\n    function exactOutput(\\r\\n        ExactOutputParams calldata params\\r\\n    ) external payable returns (uint256 amountIn);\\r\\n\\r\\n    function refundETH() external payable;\\r\\n}\\r\\n\\r\\ncontract Claimable is Ownable {\\r\\n    function claimToken(\\r\\n        address tokenAddress,\\r\\n        uint256 amount\\r\\n    ) external onlyOwner {\\r\\n        IERC20(tokenAddress).transfer(owner(), amount);\\r\\n    }\\r\\n\\r\\n    function claimETH(uint256 amount) external onlyOwner {\\r\\n        (bool sent, ) = owner().call{value: amount}(\\\"\\\");\\r\\n        require(sent, \\\"Failed to send Ether\\\");\\r\\n    }\\r\\n}\\r\\n\\r\\ncontract ProSwap is Claimable {\\r\\n    using SafeMath for uint256;\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    uint public feePercent = 0; //10:0.25%\\r\\n    uint256 public rewardAmount = 10000000000000000000; //10 to tokens\\r\\n\\r\\n    address public rewardAddress;\\r\\n    address public feeAccount;\\r\\n    address public router;\\r\\n    address public wavax;\\r\\n\\r\\n    address public routerAddress = 0x13f4EA83D0bd40E75C8222255bc855a974568Dd4;\\r\\n    address public factoryAddress = 0x0BFbCF9fa4f9C56B0F40a671Ad40E0805A091865;\\r\\n    address public wbnbAddress = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;\\r\\n    uint24 poolFee = 100;\\r\\n\\r\\n    mapping(address => uint256) airdropAddress;\\r\\n    mapping(address => uint256) airdropLastTime;\\r\\n\\r\\n    constructor(\\r\\n        address _feeAccount,\\r\\n        address _router,\\r\\n        address _wavax,\\r\\n        address _rewardAddress\\r\\n    ) {\\r\\n        feeAccount = _feeAccount;\\r\\n        router = _router;\\r\\n        wavax = _wavax;\\r\\n        rewardAddress = _rewardAddress;\\r\\n    }\\r\\n\\r\\n    function airdrop() external {\\r\\n        require(\\r\\n            airdropAddress[msg.sender] + 86400 > block.timestamp,\\r\\n            \\\"You did not swap in 24 hours\\\"\\r\\n        );\\r\\n\\r\\n        require(\\r\\n            block.timestamp > airdropLastTime[msg.sender] + 86400,\\r\\n            \\\"You airdroped in 24 hours\\\"\\r\\n        );\\r\\n\\r\\n        IERC20(rewardAddress).safeTransfer(msg.sender, rewardAmount);\\r\\n        airdropLastTime[msg.sender] = block.timestamp;\\r\\n    }\\r\\n\\r\\n    function swapV2Tokens(\\r\\n        address _tokenA,\\r\\n        address _tokenB,\\r\\n        uint256 _amountIn\\r\\n    ) external payable {\\r\\n        airdropAddress[msg.sender] = block.timestamp;\\r\\n        address[] memory path = new address[](2);\\r\\n        if (_tokenA == address(0)) {\\r\\n            path[0] = wavax;\\r\\n            path[1] = _tokenB;\\r\\n        } else if (_tokenB == address(0)) {\\r\\n            path[0] = _tokenA;\\r\\n            path[1] = wavax;\\r\\n        } else {\\r\\n            path[0] = _tokenA;\\r\\n            path[1] = _tokenB;\\r\\n        }\\r\\n\\r\\n        _proceedToUniswap(_tokenA, _tokenB, _amountIn, path);\\r\\n    }\\r\\n\\r\\n    function customSwapTokens(\\r\\n        address _tokenA,\\r\\n        address _tokenB,\\r\\n        uint256 _amountIn,\\r\\n        address[] memory path\\r\\n    ) external payable {\\r\\n        if (_tokenA == address(0)) {\\r\\n            require(\\r\\n                wavax == path[0] && _tokenB == path[path.length - 1],\\r\\n                \\\"PattieSwap: Path must be specified\\\"\\r\\n            );\\r\\n        } else if (_tokenB == address(0)) {\\r\\n            require(\\r\\n                _tokenA == path[0] && wavax == path[path.length - 1],\\r\\n                \\\"PattieSwap: Path must be specified\\\"\\r\\n            );\\r\\n        } else {\\r\\n            require(\\r\\n                _tokenA == path[0] && _tokenB == path[path.length - 1],\\r\\n                \\\"PattieSwap: Path must be specified\\\"\\r\\n            );\\r\\n        }\\r\\n        _proceedToUniswap(_tokenA, _tokenB, _amountIn, path);\\r\\n    }\\r\\n\\r\\n    function _proceedToUniswap(\\r\\n        address _tokenA,\\r\\n        address _tokenB,\\r\\n        uint256 _amountIn,\\r\\n        address[] memory path\\r\\n    ) internal {\\r\\n        require(_amountIn > 0, \\\"PattieSwap: amountIn must be greater than 0\\\");\\r\\n\\r\\n        if (_tokenA == address(0)) {\\r\\n            require(_amountIn >= msg.value, \\\"PattieSwap: Insufficient ETH\\\");\\r\\n            uint fee = (_amountIn * feePercent) / 10000;\\r\\n            payable(feeAccount).transfer(fee);\\r\\n            uint amountToSwap = _amountIn - fee;\\r\\n            _swapAVAXForTokens(amountToSwap, path);\\r\\n        } else {\\r\\n            IERC20(_tokenA).safeTransferFrom(\\r\\n                msg.sender,\\r\\n                address(this),\\r\\n                _amountIn\\r\\n            );\\r\\n            uint fee = (_amountIn * feePercent) / 10000;\\r\\n            IERC20(_tokenA).safeTransfer(feeAccount, fee);\\r\\n            uint amountToSwap = _amountIn - fee;\\r\\n            _approve(_tokenA, amountToSwap);\\r\\n            if (_tokenB == address(0)) {\\r\\n                _swapTokensForAVAX(amountToSwap, path);\\r\\n            } else {\\r\\n                _swapTokensForTokens(amountToSwap, path);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _approve(address _token, uint _amount) internal {\\r\\n        IERC20(_token).approve(address(router), _amount);\\r\\n    }\\r\\n\\r\\n    function _swapTokensForAVAX(uint _amount, address[] memory path) internal {\\r\\n        IRouter(router).swapExactTokensForETH(\\r\\n            _amount,\\r\\n            0,\\r\\n            path,\\r\\n            msg.sender,\\r\\n            block.timestamp\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function _swapAVAXForTokens(uint _amount, address[] memory path) internal {\\r\\n        IRouter(router).swapExactETHForTokens{value: _amount}(\\r\\n            0,\\r\\n            path,\\r\\n            msg.sender,\\r\\n            block.timestamp\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function _swapTokensForTokens(\\r\\n        uint _amount,\\r\\n        address[] memory path\\r\\n    ) internal {\\r\\n        IRouter(router).swapExactTokensForTokens(\\r\\n            _amount,\\r\\n            0,\\r\\n            path,\\r\\n            msg.sender,\\r\\n            block.timestamp\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function _v3Approve(address _token, uint _amount) internal {\\r\\n        IERC20(_token).approve(address(routerAddress), _amount);\\r\\n    }\\r\\n\\r\\n    function getOutputTokenAmount(\\r\\n        uint inputAmount,\\r\\n        address[] memory path\\r\\n    ) external view returns (uint outputAmount) {\\r\\n        uint[] memory outputs = IRouter(router).getAmountsOut(\\r\\n            inputAmount,\\r\\n            path\\r\\n        );\\r\\n        return outputs[outputs.length - 1];\\r\\n    }\\r\\n\\r\\n    function getV3OutputTokenAmount(\\r\\n        uint256 _inputAmount,\\r\\n        address _tokenIn,\\r\\n        address _tokenOut\\r\\n    ) external view returns (uint outputAmount) {\\r\\n        uint256 slotReturnValue = 0;\\r\\n        address pairAddress = IPancakeV3Factory(factoryAddress).getPool(\\r\\n            _tokenIn,\\r\\n            _tokenOut,\\r\\n            poolFee\\r\\n        );\\r\\n        (slotReturnValue, , , , , , ) = IPancakeV3PoolState(pairAddress)\\r\\n            .slot0();\\r\\n        address token0 = IPancakeV3Pool(pairAddress).token0();\\r\\n        if (_tokenIn == token0)\\r\\n            outputAmount = ((slotReturnValue ** 2 * _inputAmount) / 2 ** 192);\\r\\n        else outputAmount = ((2 ** 192 * _inputAmount) / slotReturnValue ** 2);\\r\\n    }\\r\\n\\r\\n    function setFeePercent(uint _feePercent) external onlyOwner {\\r\\n        feePercent = _feePercent;\\r\\n    }\\r\\n\\r\\n    function setRewardAmount(uint256 _amount) external onlyOwner {\\r\\n        rewardAmount = _amount;\\r\\n    }\\r\\n\\r\\n    function setRewardToken(address _rewawrdAddress) external onlyOwner {\\r\\n        rewardAddress = _rewawrdAddress;\\r\\n    }\\r\\n\\r\\n    function setFeeAccount(address _feeAccount) external onlyOwner {\\r\\n        feeAccount = _feeAccount;\\r\\n    }\\r\\n\\r\\n    function setRouterWAVAX(\\r\\n        address _router,\\r\\n        address _wavax\\r\\n    ) external onlyOwner {\\r\\n        router = _router;\\r\\n        wavax = _wavax;\\r\\n    }\\r\\n\\r\\n    function emergencyWithdraw(\\r\\n        address _token,\\r\\n        uint _amount\\r\\n    ) external onlyOwner {\\r\\n        IERC20(_token).safeTransfer(msg.sender, _amount);\\r\\n    }\\r\\n\\r\\n    function emergencyWithdrawETH(uint _amount) external onlyOwner {\\r\\n        payable(owner()).transfer(_amount);\\r\\n    }\\r\\n\\r\\n    function swapTokens(\\r\\n        address _tokenIn,\\r\\n        address _tokenOut,\\r\\n        uint256 _amountIn\\r\\n    ) external payable {\\r\\n        airdropAddress[msg.sender] = block.timestamp;\\r\\n        IV3SwapRouter.ExactInputSingleParams memory params = IV3SwapRouter\\r\\n            .ExactInputSingleParams(\\r\\n                _tokenIn,\\r\\n                _tokenOut,\\r\\n                poolFee,\\r\\n                msg.sender,\\r\\n                _amountIn,\\r\\n                0,\\r\\n                0\\r\\n            );\\r\\n        if (_tokenIn == wbnbAddress)\\r\\n            IV3SwapRouter(routerAddress).exactInputSingle{value: msg.value}(\\r\\n                params\\r\\n            );\\r\\n        else {\\r\\n            IERC20(_tokenIn).safeTransferFrom(\\r\\n                msg.sender,\\r\\n                address(this),\\r\\n                _amountIn\\r\\n            );\\r\\n            _v3Approve(_tokenIn, _amountIn);\\r\\n            IV3SwapRouter(routerAddress).exactInputSingle{value: msg.value}(\\r\\n                params\\r\\n            );\\r\\n        }\\r\\n        IV3SwapRouter(routerAddress).refundETH();\\r\\n        // refund leftover ETH to user\\r\\n        (bool success, ) = msg.sender.call{value: address(this).balance}(\\\"\\\");\\r\\n        require(success, \\\"refund failed\\\");\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x014ebbd50111dbe2ffd46bfee0dca5b1dbbc4785ff10cb323cef7317398427ea\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"factory()":{"notice":"The contract that deployed the pool, which must adhere to the IPancakeV3Factory interface"},"fee()":{"notice":"The pool's fee in hundredths of a bip, i.e. 1e-6"},"maxLiquidityPerTick()":{"notice":"The maximum amount of position liquidity that can use any tick in the range"},"tickSpacing()":{"notice":"The pool tick spacing"},"token0()":{"notice":"The first of the two tokens of the pool, sorted by address"},"token1()":{"notice":"The second of the two tokens of the pool, sorted by address"}},"version":1}},"IPancakeV3PoolState":{"abi":[{"inputs":[],"name":"slot0","outputs":[{"internalType":"uint160","name":"sqrtPriceX96","type":"uint160"},{"internalType":"int24","name":"tick","type":"int24"},{"internalType":"uint16","name":"observationIndex","type":"uint16"},{"internalType":"uint16","name":"observationCardinality","type":"uint16"},{"internalType":"uint16","name":"observationCardinalityNext","type":"uint16"},{"internalType":"uint32","name":"feeProtocol","type":"uint32"},{"internalType":"bool","name":"unlocked","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"slot0()":"3850c7bd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"slot0\",\"outputs\":[{\"internalType\":\"uint160\",\"name\":\"sqrtPriceX96\",\"type\":\"uint160\"},{\"internalType\":\"int24\",\"name\":\"tick\",\"type\":\"int24\"},{\"internalType\":\"uint16\",\"name\":\"observationIndex\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"observationCardinality\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"observationCardinalityNext\",\"type\":\"uint16\"},{\"internalType\":\"uint32\",\"name\":\"feeProtocol\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"unlocked\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/swap.sol\":\"IPancakeV3PoolState\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/swap.sol\":{\"content\":\"pragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\r\\n */\\r\\ninterface IERC20 {\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(\\r\\n        address indexed owner,\\r\\n        address indexed spender,\\r\\n        uint256 value\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address to, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(\\r\\n        address owner,\\r\\n        address spender\\r\\n    ) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender's allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller's\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n}\\r\\n\\r\\n// File @openzeppelin/contracts/utils/Context.sol@v4.6.0\\r\\n\\r\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Provides information about the current execution context, including the\\r\\n * sender of the transaction and its data. While these are generally available\\r\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\r\\n * manner, since when dealing with meta-transactions the account sending and\\r\\n * paying for execution may not be the actual sender (as far as an application\\r\\n * is concerned).\\r\\n *\\r\\n * This contract is only required for intermediate, library-like contracts.\\r\\n */\\r\\nabstract contract Context {\\r\\n    function _msgSender() internal view virtual returns (address) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view virtual returns (bytes calldata) {\\r\\n        return msg.data;\\r\\n    }\\r\\n}\\r\\n\\r\\n// File @openzeppelin/contracts/access/Ownable.sol@v4.6.0\\r\\n\\r\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Contract module which provides a basic access control mechanism, where\\r\\n * there is an account (an owner) that can be granted exclusive access to\\r\\n * specific functions.\\r\\n *\\r\\n * By default, the owner account will be the one that deploys the contract. This\\r\\n * can later be changed with {transferOwnership}.\\r\\n *\\r\\n * This module is used through inheritance. It will make available the modifier\\r\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\r\\n * the owner.\\r\\n */\\r\\nabstract contract Ownable is Context {\\r\\n    address private _owner;\\r\\n\\r\\n    event OwnershipTransferred(\\r\\n        address indexed previousOwner,\\r\\n        address indexed newOwner\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\r\\n     */\\r\\n    constructor() {\\r\\n        _transferOwnership(_msgSender());\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current owner.\\r\\n     */\\r\\n    function owner() public view virtual returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier onlyOwner() {\\r\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Leaves the contract without owner. It will not be possible to call\\r\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\r\\n     *\\r\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\r\\n     * thereby removing any functionality that is only available to the owner.\\r\\n     */\\r\\n    function renounceOwnership() public virtual onlyOwner {\\r\\n        _transferOwnership(address(0));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n        require(\\r\\n            newOwner != address(0),\\r\\n            \\\"Ownable: new owner is the zero address\\\"\\r\\n        );\\r\\n        _transferOwnership(newOwner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Internal function without access restriction.\\r\\n     */\\r\\n    function _transferOwnership(address newOwner) internal virtual {\\r\\n        address oldOwner = _owner;\\r\\n        _owner = newOwner;\\r\\n        emit OwnershipTransferred(oldOwner, newOwner);\\r\\n    }\\r\\n}\\r\\n\\r\\n// File @openzeppelin/contracts/utils/math/SafeMath.sol@v4.6.0\\r\\n\\r\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n// CAUTION\\r\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\r\\n// because it relies on the compiler's built in overflow checks.\\r\\n\\r\\n/**\\r\\n * @dev Wrappers over Solidity's arithmetic operations.\\r\\n *\\r\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\r\\n * now has built in overflow checking.\\r\\n */\\r\\nlibrary SafeMath {\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryAdd(\\r\\n        uint256 a,\\r\\n        uint256 b\\r\\n    ) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            uint256 c = a + b;\\r\\n            if (c < a) return (false, 0);\\r\\n            return (true, c);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function trySub(\\r\\n        uint256 a,\\r\\n        uint256 b\\r\\n    ) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            if (b > a) return (false, 0);\\r\\n            return (true, a - b);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryMul(\\r\\n        uint256 a,\\r\\n        uint256 b\\r\\n    ) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\r\\n            // benefit is lost if 'b' is also tested.\\r\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\r\\n            if (a == 0) return (true, 0);\\r\\n            uint256 c = a * b;\\r\\n            if (c / a != b) return (false, 0);\\r\\n            return (true, c);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryDiv(\\r\\n        uint256 a,\\r\\n        uint256 b\\r\\n    ) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            if (b == 0) return (false, 0);\\r\\n            return (true, a / b);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryMod(\\r\\n        uint256 a,\\r\\n        uint256 b\\r\\n    ) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            if (b == 0) return (false, 0);\\r\\n            return (true, a % b);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity's `+` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Addition cannot overflow.\\r\\n     */\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a + b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity's `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a - b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity's `*` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Multiplication cannot overflow.\\r\\n     */\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a * b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `/` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a / b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * reverting when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a % b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\r\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\r\\n     *\\r\\n     * Counterpart to Solidity's `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            require(b <= a, errorMessage);\\r\\n            return a - b;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            require(b > 0, errorMessage);\\r\\n            return a / b;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * reverting with custom message when dividing by zero.\\r\\n     *\\r\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\r\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\r\\n     *\\r\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            require(b > 0, errorMessage);\\r\\n            return a % b;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\n// File @openzeppelin/contracts/utils/Address.sol@v4.6.0\\r\\n\\r\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\r\\n\\r\\npragma solidity ^0.8.1;\\r\\n\\r\\n/**\\r\\n * @dev Collection of functions related to the address type\\r\\n */\\r\\nlibrary Address {\\r\\n    /**\\r\\n     * @dev Returns true if `account` is a contract.\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * It is unsafe to assume that an address for which this function returns\\r\\n     * false is an externally-owned account (EOA) and not a contract.\\r\\n     *\\r\\n     * Among others, `isContract` will return false for the following\\r\\n     * types of addresses:\\r\\n     *\\r\\n     *  - an externally-owned account\\r\\n     *  - a contract in construction\\r\\n     *  - an address where a contract will be created\\r\\n     *  - an address where a contract lived, but was destroyed\\r\\n     * ====\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\r\\n     *\\r\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\r\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\r\\n     * constructor.\\r\\n     * ====\\r\\n     */\\r\\n    function isContract(address account) internal view returns (bool) {\\r\\n        // This method relies on extcodesize/address.code.length, which returns 0\\r\\n        // for contracts in construction, since the code is only stored at the end\\r\\n        // of the constructor execution.\\r\\n\\r\\n        return account.code.length > 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\r\\n     * `recipient`, forwarding all available gas and reverting on errors.\\r\\n     *\\r\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\r\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\r\\n     * imposed by `transfer`, making them unable to receive funds via\\r\\n     * `transfer`. {sendValue} removes this limitation.\\r\\n     *\\r\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\r\\n     *\\r\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\r\\n     * taken to not create reentrancy vulnerabilities. Consider using\\r\\n     * {ReentrancyGuard} or the\\r\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\r\\n     */\\r\\n    function sendValue(address payable recipient, uint256 amount) internal {\\r\\n        require(\\r\\n            address(this).balance >= amount,\\r\\n            \\\"Address: insufficient balance\\\"\\r\\n        );\\r\\n\\r\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\r\\n        require(\\r\\n            success,\\r\\n            \\\"Address: unable to send value, recipient may have reverted\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Performs a Solidity function call using a low level `call`. A\\r\\n     * plain `call` is an unsafe replacement for a function call: use this\\r\\n     * function instead.\\r\\n     *\\r\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\r\\n     * function (like regular Solidity function calls).\\r\\n     *\\r\\n     * Returns the raw returned data. To convert to the expected return value,\\r\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `target` must be a contract.\\r\\n     * - calling `target` with `data` must not revert.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(\\r\\n        address target,\\r\\n        bytes memory data\\r\\n    ) internal returns (bytes memory) {\\r\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\r\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, 0, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but also transferring `value` wei to `target`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the calling contract must have an ETH balance of at least `value`.\\r\\n     * - the called Solidity function must be `payable`.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        uint256 value\\r\\n    ) internal returns (bytes memory) {\\r\\n        return\\r\\n            functionCallWithValue(\\r\\n                target,\\r\\n                data,\\r\\n                value,\\r\\n                \\\"Address: low-level call with value failed\\\"\\r\\n            );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\r\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        uint256 value,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        require(\\r\\n            address(this).balance >= value,\\r\\n            \\\"Address: insufficient balance for call\\\"\\r\\n        );\\r\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\r\\n\\r\\n        (bool success, bytes memory returndata) = target.call{value: value}(\\r\\n            data\\r\\n        );\\r\\n        return verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(\\r\\n        address target,\\r\\n        bytes memory data\\r\\n    ) internal view returns (bytes memory) {\\r\\n        return\\r\\n            functionStaticCall(\\r\\n                target,\\r\\n                data,\\r\\n                \\\"Address: low-level static call failed\\\"\\r\\n            );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal view returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\r\\n\\r\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\r\\n        return verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function functionDelegateCall(\\r\\n        address target,\\r\\n        bytes memory data\\r\\n    ) internal returns (bytes memory) {\\r\\n        return\\r\\n            functionDelegateCall(\\r\\n                target,\\r\\n                data,\\r\\n                \\\"Address: low-level delegate call failed\\\"\\r\\n            );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function functionDelegateCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\r\\n\\r\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\r\\n        return verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\r\\n     * revert reason using the provided one.\\r\\n     *\\r\\n     * _Available since v4.3._\\r\\n     */\\r\\n    function verifyCallResult(\\r\\n        bool success,\\r\\n        bytes memory returndata,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (bytes memory) {\\r\\n        if (success) {\\r\\n            return returndata;\\r\\n        } else {\\r\\n            // Look for revert reason and bubble it up if present\\r\\n            if (returndata.length > 0) {\\r\\n                // The easiest way to bubble the revert reason is using memory via assembly\\r\\n\\r\\n                assembly {\\r\\n                    let returndata_size := mload(returndata)\\r\\n                    revert(add(32, returndata), returndata_size)\\r\\n                }\\r\\n            } else {\\r\\n                revert(errorMessage);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\n// File @openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol@v4.6.0\\r\\n\\r\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @title SafeERC20\\r\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\r\\n * contract returns false). Tokens that return no value (and instead revert or\\r\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\r\\n * successful.\\r\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\r\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\r\\n */\\r\\nlibrary SafeERC20 {\\r\\n    using Address for address;\\r\\n\\r\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\r\\n        _callOptionalReturn(\\r\\n            token,\\r\\n            abi.encodeWithSelector(token.transfer.selector, to, value)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function safeTransferFrom(\\r\\n        IERC20 token,\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        _callOptionalReturn(\\r\\n            token,\\r\\n            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Deprecated. This function has issues similar to the ones found in\\r\\n     * {IERC20-approve}, and its usage is discouraged.\\r\\n     *\\r\\n     * Whenever possible, use {safeIncreaseAllowance} and\\r\\n     * {safeDecreaseAllowance} instead.\\r\\n     */\\r\\n    function safeApprove(\\r\\n        IERC20 token,\\r\\n        address spender,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        // safeApprove should only be called when setting an initial allowance,\\r\\n        // or when resetting it to zero. To increase and decrease it, use\\r\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\r\\n        require(\\r\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\r\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\r\\n        );\\r\\n        _callOptionalReturn(\\r\\n            token,\\r\\n            abi.encodeWithSelector(token.approve.selector, spender, value)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function safeIncreaseAllowance(\\r\\n        IERC20 token,\\r\\n        address spender,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\r\\n        _callOptionalReturn(\\r\\n            token,\\r\\n            abi.encodeWithSelector(\\r\\n                token.approve.selector,\\r\\n                spender,\\r\\n                newAllowance\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function safeDecreaseAllowance(\\r\\n        IERC20 token,\\r\\n        address spender,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        unchecked {\\r\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\r\\n            require(\\r\\n                oldAllowance >= value,\\r\\n                \\\"SafeERC20: decreased allowance below zero\\\"\\r\\n            );\\r\\n            uint256 newAllowance = oldAllowance - value;\\r\\n            _callOptionalReturn(\\r\\n                token,\\r\\n                abi.encodeWithSelector(\\r\\n                    token.approve.selector,\\r\\n                    spender,\\r\\n                    newAllowance\\r\\n                )\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\r\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\r\\n     * @param token The token targeted by the call.\\r\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\r\\n     */\\r\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\r\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\r\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\r\\n        // the target address contains contract code and also asserts for success in the low-level call.\\r\\n\\r\\n        bytes memory returndata = address(token).functionCall(\\r\\n            data,\\r\\n            \\\"SafeERC20: low-level call failed\\\"\\r\\n        );\\r\\n        if (returndata.length > 0) {\\r\\n            // Return data is optional\\r\\n            require(\\r\\n                abi.decode(returndata, (bool)),\\r\\n                \\\"SafeERC20: ERC20 operation did not succeed\\\"\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\n// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IRouter {\\r\\n    function swapExactTokensForTokens(\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256[] memory amounts);\\r\\n\\r\\n    function swapExactETHForTokens(\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external payable returns (uint256[] memory amounts);\\r\\n\\r\\n    function swapExactTokensForETH(\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256[] memory amounts);\\r\\n\\r\\n    function getAmountsOut(\\r\\n        uint256 amountIn,\\r\\n        address[] calldata path\\r\\n    ) external view returns (uint256[] memory amounts);\\r\\n}\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\n/// @title The interface for the PancakeSwap V3 Factory\\r\\n/// @notice The PancakeSwap V3 Factory facilitates creation of PancakeSwap V3 pools and control over the protocol fees\\r\\ninterface IPancakeV3Factory {\\r\\n    function getPool(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint24 fee\\r\\n    ) external view returns (address pool);\\r\\n}\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\ninterface IPancakeV3PoolState {\\r\\n    function slot0()\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            uint160 sqrtPriceX96,\\r\\n            int24 tick,\\r\\n            uint16 observationIndex,\\r\\n            uint16 observationCardinality,\\r\\n            uint16 observationCardinalityNext,\\r\\n            uint32 feeProtocol,\\r\\n            bool unlocked\\r\\n        );\\r\\n}\\r\\n\\r\\ninterface IPancakeV3PoolImmutables {\\r\\n    /// @notice The contract that deployed the pool, which must adhere to the IPancakeV3Factory interface\\r\\n    /// @return The contract address\\r\\n    function factory() external view returns (address);\\r\\n\\r\\n    /// @notice The first of the two tokens of the pool, sorted by address\\r\\n    /// @return The token contract address\\r\\n    function token0() external view returns (address);\\r\\n\\r\\n    /// @notice The second of the two tokens of the pool, sorted by address\\r\\n    /// @return The token contract address\\r\\n    function token1() external view returns (address);\\r\\n\\r\\n    /// @notice The pool's fee in hundredths of a bip, i.e. 1e-6\\r\\n    /// @return The fee\\r\\n    function fee() external view returns (uint24);\\r\\n\\r\\n    /// @notice The pool tick spacing\\r\\n    /// @dev Ticks can only be used at multiples of this value, minimum of 1 and always positive\\r\\n    /// e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ...\\r\\n    /// This value is an int24 to avoid casting even though it is always positive.\\r\\n    /// @return The tick spacing\\r\\n    function tickSpacing() external view returns (int24);\\r\\n\\r\\n    /// @notice The maximum amount of position liquidity that can use any tick in the range\\r\\n    /// @dev This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and\\r\\n    /// also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\\r\\n    /// @return The max amount of liquidity per tick\\r\\n    function maxLiquidityPerTick() external view returns (uint128);\\r\\n}\\r\\n\\r\\ninterface IPancakeV3Pool is IPancakeV3PoolState, IPancakeV3PoolImmutables {}\\r\\n\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\n/// @title Callback for IPancakeV3PoolActions#swap\\r\\n/// @notice Any contract that calls IPancakeV3PoolActions#swap must implement this interface\\r\\ninterface IPancakeV3SwapCallback {\\r\\n    /// @notice Called to `msg.sender` after executing a swap via IPancakeV3Pool#swap.\\r\\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\\r\\n    /// The caller of this method must be checked to be a PancakeV3Pool deployed by the canonical PancakeV3Factory.\\r\\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\\r\\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\\r\\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\\r\\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\\r\\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\\r\\n    /// @param data Any data passed through by the caller via the IPancakeV3PoolActions#swap call\\r\\n    function pancakeV3SwapCallback(\\r\\n        int256 amount0Delta,\\r\\n        int256 amount1Delta,\\r\\n        bytes calldata data\\r\\n    ) external;\\r\\n}\\r\\n\\r\\ninterface IV3SwapRouter is IPancakeV3SwapCallback {\\r\\n    struct ExactInputSingleParams {\\r\\n        address tokenIn;\\r\\n        address tokenOut;\\r\\n        uint24 fee;\\r\\n        address recipient;\\r\\n        uint256 amountIn;\\r\\n        uint256 amountOutMinimum;\\r\\n        uint160 sqrtPriceLimitX96;\\r\\n    }\\r\\n\\r\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\\r\\n    /// @dev Setting `amountIn` to 0 will cause the contract to look up its own balance,\\r\\n    /// and swap the entire amount, enabling contracts to send tokens before calling this function.\\r\\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\\r\\n    /// @return amountOut The amount of the received token\\r\\n    function exactInputSingle(\\r\\n        ExactInputSingleParams calldata params\\r\\n    ) external payable returns (uint256 amountOut);\\r\\n\\r\\n    struct ExactInputParams {\\r\\n        bytes path;\\r\\n        address recipient;\\r\\n        uint256 amountIn;\\r\\n        uint256 amountOutMinimum;\\r\\n    }\\r\\n\\r\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\\r\\n    /// @dev Setting `amountIn` to 0 will cause the contract to look up its own balance,\\r\\n    /// and swap the entire amount, enabling contracts to send tokens before calling this function.\\r\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\\r\\n    /// @return amountOut The amount of the received token\\r\\n    function exactInput(\\r\\n        ExactInputParams calldata params\\r\\n    ) external payable returns (uint256 amountOut);\\r\\n\\r\\n    struct ExactOutputSingleParams {\\r\\n        address tokenIn;\\r\\n        address tokenOut;\\r\\n        uint24 fee;\\r\\n        address recipient;\\r\\n        uint256 amountOut;\\r\\n        uint256 amountInMaximum;\\r\\n        uint160 sqrtPriceLimitX96;\\r\\n    }\\r\\n\\r\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\\r\\n    /// that may remain in the router after the swap.\\r\\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\\r\\n    /// @return amountIn The amount of the input token\\r\\n    function exactOutputSingle(\\r\\n        ExactOutputSingleParams calldata params\\r\\n    ) external payable returns (uint256 amountIn);\\r\\n\\r\\n    struct ExactOutputParams {\\r\\n        bytes path;\\r\\n        address recipient;\\r\\n        uint256 amountOut;\\r\\n        uint256 amountInMaximum;\\r\\n    }\\r\\n\\r\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\\r\\n    /// that may remain in the router after the swap.\\r\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\\r\\n    /// @return amountIn The amount of the input token\\r\\n    function exactOutput(\\r\\n        ExactOutputParams calldata params\\r\\n    ) external payable returns (uint256 amountIn);\\r\\n\\r\\n    function refundETH() external payable;\\r\\n}\\r\\n\\r\\ncontract Claimable is Ownable {\\r\\n    function claimToken(\\r\\n        address tokenAddress,\\r\\n        uint256 amount\\r\\n    ) external onlyOwner {\\r\\n        IERC20(tokenAddress).transfer(owner(), amount);\\r\\n    }\\r\\n\\r\\n    function claimETH(uint256 amount) external onlyOwner {\\r\\n        (bool sent, ) = owner().call{value: amount}(\\\"\\\");\\r\\n        require(sent, \\\"Failed to send Ether\\\");\\r\\n    }\\r\\n}\\r\\n\\r\\ncontract ProSwap is Claimable {\\r\\n    using SafeMath for uint256;\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    uint public feePercent = 0; //10:0.25%\\r\\n    uint256 public rewardAmount = 10000000000000000000; //10 to tokens\\r\\n\\r\\n    address public rewardAddress;\\r\\n    address public feeAccount;\\r\\n    address public router;\\r\\n    address public wavax;\\r\\n\\r\\n    address public routerAddress = 0x13f4EA83D0bd40E75C8222255bc855a974568Dd4;\\r\\n    address public factoryAddress = 0x0BFbCF9fa4f9C56B0F40a671Ad40E0805A091865;\\r\\n    address public wbnbAddress = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;\\r\\n    uint24 poolFee = 100;\\r\\n\\r\\n    mapping(address => uint256) airdropAddress;\\r\\n    mapping(address => uint256) airdropLastTime;\\r\\n\\r\\n    constructor(\\r\\n        address _feeAccount,\\r\\n        address _router,\\r\\n        address _wavax,\\r\\n        address _rewardAddress\\r\\n    ) {\\r\\n        feeAccount = _feeAccount;\\r\\n        router = _router;\\r\\n        wavax = _wavax;\\r\\n        rewardAddress = _rewardAddress;\\r\\n    }\\r\\n\\r\\n    function airdrop() external {\\r\\n        require(\\r\\n            airdropAddress[msg.sender] + 86400 > block.timestamp,\\r\\n            \\\"You did not swap in 24 hours\\\"\\r\\n        );\\r\\n\\r\\n        require(\\r\\n            block.timestamp > airdropLastTime[msg.sender] + 86400,\\r\\n            \\\"You airdroped in 24 hours\\\"\\r\\n        );\\r\\n\\r\\n        IERC20(rewardAddress).safeTransfer(msg.sender, rewardAmount);\\r\\n        airdropLastTime[msg.sender] = block.timestamp;\\r\\n    }\\r\\n\\r\\n    function swapV2Tokens(\\r\\n        address _tokenA,\\r\\n        address _tokenB,\\r\\n        uint256 _amountIn\\r\\n    ) external payable {\\r\\n        airdropAddress[msg.sender] = block.timestamp;\\r\\n        address[] memory path = new address[](2);\\r\\n        if (_tokenA == address(0)) {\\r\\n            path[0] = wavax;\\r\\n            path[1] = _tokenB;\\r\\n        } else if (_tokenB == address(0)) {\\r\\n            path[0] = _tokenA;\\r\\n            path[1] = wavax;\\r\\n        } else {\\r\\n            path[0] = _tokenA;\\r\\n            path[1] = _tokenB;\\r\\n        }\\r\\n\\r\\n        _proceedToUniswap(_tokenA, _tokenB, _amountIn, path);\\r\\n    }\\r\\n\\r\\n    function customSwapTokens(\\r\\n        address _tokenA,\\r\\n        address _tokenB,\\r\\n        uint256 _amountIn,\\r\\n        address[] memory path\\r\\n    ) external payable {\\r\\n        if (_tokenA == address(0)) {\\r\\n            require(\\r\\n                wavax == path[0] && _tokenB == path[path.length - 1],\\r\\n                \\\"PattieSwap: Path must be specified\\\"\\r\\n            );\\r\\n        } else if (_tokenB == address(0)) {\\r\\n            require(\\r\\n                _tokenA == path[0] && wavax == path[path.length - 1],\\r\\n                \\\"PattieSwap: Path must be specified\\\"\\r\\n            );\\r\\n        } else {\\r\\n            require(\\r\\n                _tokenA == path[0] && _tokenB == path[path.length - 1],\\r\\n                \\\"PattieSwap: Path must be specified\\\"\\r\\n            );\\r\\n        }\\r\\n        _proceedToUniswap(_tokenA, _tokenB, _amountIn, path);\\r\\n    }\\r\\n\\r\\n    function _proceedToUniswap(\\r\\n        address _tokenA,\\r\\n        address _tokenB,\\r\\n        uint256 _amountIn,\\r\\n        address[] memory path\\r\\n    ) internal {\\r\\n        require(_amountIn > 0, \\\"PattieSwap: amountIn must be greater than 0\\\");\\r\\n\\r\\n        if (_tokenA == address(0)) {\\r\\n            require(_amountIn >= msg.value, \\\"PattieSwap: Insufficient ETH\\\");\\r\\n            uint fee = (_amountIn * feePercent) / 10000;\\r\\n            payable(feeAccount).transfer(fee);\\r\\n            uint amountToSwap = _amountIn - fee;\\r\\n            _swapAVAXForTokens(amountToSwap, path);\\r\\n        } else {\\r\\n            IERC20(_tokenA).safeTransferFrom(\\r\\n                msg.sender,\\r\\n                address(this),\\r\\n                _amountIn\\r\\n            );\\r\\n            uint fee = (_amountIn * feePercent) / 10000;\\r\\n            IERC20(_tokenA).safeTransfer(feeAccount, fee);\\r\\n            uint amountToSwap = _amountIn - fee;\\r\\n            _approve(_tokenA, amountToSwap);\\r\\n            if (_tokenB == address(0)) {\\r\\n                _swapTokensForAVAX(amountToSwap, path);\\r\\n            } else {\\r\\n                _swapTokensForTokens(amountToSwap, path);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _approve(address _token, uint _amount) internal {\\r\\n        IERC20(_token).approve(address(router), _amount);\\r\\n    }\\r\\n\\r\\n    function _swapTokensForAVAX(uint _amount, address[] memory path) internal {\\r\\n        IRouter(router).swapExactTokensForETH(\\r\\n            _amount,\\r\\n            0,\\r\\n            path,\\r\\n            msg.sender,\\r\\n            block.timestamp\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function _swapAVAXForTokens(uint _amount, address[] memory path) internal {\\r\\n        IRouter(router).swapExactETHForTokens{value: _amount}(\\r\\n            0,\\r\\n            path,\\r\\n            msg.sender,\\r\\n            block.timestamp\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function _swapTokensForTokens(\\r\\n        uint _amount,\\r\\n        address[] memory path\\r\\n    ) internal {\\r\\n        IRouter(router).swapExactTokensForTokens(\\r\\n            _amount,\\r\\n            0,\\r\\n            path,\\r\\n            msg.sender,\\r\\n            block.timestamp\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function _v3Approve(address _token, uint _amount) internal {\\r\\n        IERC20(_token).approve(address(routerAddress), _amount);\\r\\n    }\\r\\n\\r\\n    function getOutputTokenAmount(\\r\\n        uint inputAmount,\\r\\n        address[] memory path\\r\\n    ) external view returns (uint outputAmount) {\\r\\n        uint[] memory outputs = IRouter(router).getAmountsOut(\\r\\n            inputAmount,\\r\\n            path\\r\\n        );\\r\\n        return outputs[outputs.length - 1];\\r\\n    }\\r\\n\\r\\n    function getV3OutputTokenAmount(\\r\\n        uint256 _inputAmount,\\r\\n        address _tokenIn,\\r\\n        address _tokenOut\\r\\n    ) external view returns (uint outputAmount) {\\r\\n        uint256 slotReturnValue = 0;\\r\\n        address pairAddress = IPancakeV3Factory(factoryAddress).getPool(\\r\\n            _tokenIn,\\r\\n            _tokenOut,\\r\\n            poolFee\\r\\n        );\\r\\n        (slotReturnValue, , , , , , ) = IPancakeV3PoolState(pairAddress)\\r\\n            .slot0();\\r\\n        address token0 = IPancakeV3Pool(pairAddress).token0();\\r\\n        if (_tokenIn == token0)\\r\\n            outputAmount = ((slotReturnValue ** 2 * _inputAmount) / 2 ** 192);\\r\\n        else outputAmount = ((2 ** 192 * _inputAmount) / slotReturnValue ** 2);\\r\\n    }\\r\\n\\r\\n    function setFeePercent(uint _feePercent) external onlyOwner {\\r\\n        feePercent = _feePercent;\\r\\n    }\\r\\n\\r\\n    function setRewardAmount(uint256 _amount) external onlyOwner {\\r\\n        rewardAmount = _amount;\\r\\n    }\\r\\n\\r\\n    function setRewardToken(address _rewawrdAddress) external onlyOwner {\\r\\n        rewardAddress = _rewawrdAddress;\\r\\n    }\\r\\n\\r\\n    function setFeeAccount(address _feeAccount) external onlyOwner {\\r\\n        feeAccount = _feeAccount;\\r\\n    }\\r\\n\\r\\n    function setRouterWAVAX(\\r\\n        address _router,\\r\\n        address _wavax\\r\\n    ) external onlyOwner {\\r\\n        router = _router;\\r\\n        wavax = _wavax;\\r\\n    }\\r\\n\\r\\n    function emergencyWithdraw(\\r\\n        address _token,\\r\\n        uint _amount\\r\\n    ) external onlyOwner {\\r\\n        IERC20(_token).safeTransfer(msg.sender, _amount);\\r\\n    }\\r\\n\\r\\n    function emergencyWithdrawETH(uint _amount) external onlyOwner {\\r\\n        payable(owner()).transfer(_amount);\\r\\n    }\\r\\n\\r\\n    function swapTokens(\\r\\n        address _tokenIn,\\r\\n        address _tokenOut,\\r\\n        uint256 _amountIn\\r\\n    ) external payable {\\r\\n        airdropAddress[msg.sender] = block.timestamp;\\r\\n        IV3SwapRouter.ExactInputSingleParams memory params = IV3SwapRouter\\r\\n            .ExactInputSingleParams(\\r\\n                _tokenIn,\\r\\n                _tokenOut,\\r\\n                poolFee,\\r\\n                msg.sender,\\r\\n                _amountIn,\\r\\n                0,\\r\\n                0\\r\\n            );\\r\\n        if (_tokenIn == wbnbAddress)\\r\\n            IV3SwapRouter(routerAddress).exactInputSingle{value: msg.value}(\\r\\n                params\\r\\n            );\\r\\n        else {\\r\\n            IERC20(_tokenIn).safeTransferFrom(\\r\\n                msg.sender,\\r\\n                address(this),\\r\\n                _amountIn\\r\\n            );\\r\\n            _v3Approve(_tokenIn, _amountIn);\\r\\n            IV3SwapRouter(routerAddress).exactInputSingle{value: msg.value}(\\r\\n                params\\r\\n            );\\r\\n        }\\r\\n        IV3SwapRouter(routerAddress).refundETH();\\r\\n        // refund leftover ETH to user\\r\\n        (bool success, ) = msg.sender.call{value: address(this).balance}(\\\"\\\");\\r\\n        require(success, \\\"refund failed\\\");\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x014ebbd50111dbe2ffd46bfee0dca5b1dbbc4785ff10cb323cef7317398427ea\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}},"IPancakeV3SwapCallback":{"abi":[{"inputs":[{"internalType":"int256","name":"amount0Delta","type":"int256"},{"internalType":"int256","name":"amount1Delta","type":"int256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"pancakeV3SwapCallback","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{"pancakeV3SwapCallback(int256,int256,bytes)":{"details":"In the implementation you must pay the pool tokens owed for the swap. The caller of this method must be checked to be a PancakeV3Pool deployed by the canonical PancakeV3Factory. amount0Delta and amount1Delta can both be 0 if no tokens were swapped.","params":{"amount0Delta":"The amount of token0 that was sent (negative) or must be received (positive) by the pool by the end of the swap. If positive, the callback must send that amount of token0 to the pool.","amount1Delta":"The amount of token1 that was sent (negative) or must be received (positive) by the pool by the end of the swap. If positive, the callback must send that amount of token1 to the pool.","data":"Any data passed through by the caller via the IPancakeV3PoolActions#swap call"}}},"title":"Callback for IPancakeV3PoolActions#swap","version":1},"evm":{"bytecode":{"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"pancakeV3SwapCallback(int256,int256,bytes)":"23a69e75"}},"metadata":"{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"amount0Delta\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"amount1Delta\",\"type\":\"int256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"pancakeV3SwapCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"pancakeV3SwapCallback(int256,int256,bytes)\":{\"details\":\"In the implementation you must pay the pool tokens owed for the swap. The caller of this method must be checked to be a PancakeV3Pool deployed by the canonical PancakeV3Factory. amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\",\"params\":{\"amount0Delta\":\"The amount of token0 that was sent (negative) or must be received (positive) by the pool by the end of the swap. If positive, the callback must send that amount of token0 to the pool.\",\"amount1Delta\":\"The amount of token1 that was sent (negative) or must be received (positive) by the pool by the end of the swap. If positive, the callback must send that amount of token1 to the pool.\",\"data\":\"Any data passed through by the caller via the IPancakeV3PoolActions#swap call\"}}},\"title\":\"Callback for IPancakeV3PoolActions#swap\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"pancakeV3SwapCallback(int256,int256,bytes)\":{\"notice\":\"Called to `msg.sender` after executing a swap via IPancakeV3Pool#swap.\"}},\"notice\":\"Any contract that calls IPancakeV3PoolActions#swap must implement this interface\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/swap.sol\":\"IPancakeV3SwapCallback\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/swap.sol\":{\"content\":\"pragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\r\\n */\\r\\ninterface IERC20 {\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(\\r\\n        address indexed owner,\\r\\n        address indexed spender,\\r\\n        uint256 value\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address to, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(\\r\\n        address owner,\\r\\n        address spender\\r\\n    ) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender's allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller's\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n}\\r\\n\\r\\n// File @openzeppelin/contracts/utils/Context.sol@v4.6.0\\r\\n\\r\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Provides information about the current execution context, including the\\r\\n * sender of the transaction and its data. While these are generally available\\r\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\r\\n * manner, since when dealing with meta-transactions the account sending and\\r\\n * paying for execution may not be the actual sender (as far as an application\\r\\n * is concerned).\\r\\n *\\r\\n * This contract is only required for intermediate, library-like contracts.\\r\\n */\\r\\nabstract contract Context {\\r\\n    function _msgSender() internal view virtual returns (address) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view virtual returns (bytes calldata) {\\r\\n        return msg.data;\\r\\n    }\\r\\n}\\r\\n\\r\\n// File @openzeppelin/contracts/access/Ownable.sol@v4.6.0\\r\\n\\r\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Contract module which provides a basic access control mechanism, where\\r\\n * there is an account (an owner) that can be granted exclusive access to\\r\\n * specific functions.\\r\\n *\\r\\n * By default, the owner account will be the one that deploys the contract. This\\r\\n * can later be changed with {transferOwnership}.\\r\\n *\\r\\n * This module is used through inheritance. It will make available the modifier\\r\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\r\\n * the owner.\\r\\n */\\r\\nabstract contract Ownable is Context {\\r\\n    address private _owner;\\r\\n\\r\\n    event OwnershipTransferred(\\r\\n        address indexed previousOwner,\\r\\n        address indexed newOwner\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\r\\n     */\\r\\n    constructor() {\\r\\n        _transferOwnership(_msgSender());\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current owner.\\r\\n     */\\r\\n    function owner() public view virtual returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier onlyOwner() {\\r\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Leaves the contract without owner. It will not be possible to call\\r\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\r\\n     *\\r\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\r\\n     * thereby removing any functionality that is only available to the owner.\\r\\n     */\\r\\n    function renounceOwnership() public virtual onlyOwner {\\r\\n        _transferOwnership(address(0));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n        require(\\r\\n            newOwner != address(0),\\r\\n            \\\"Ownable: new owner is the zero address\\\"\\r\\n        );\\r\\n        _transferOwnership(newOwner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Internal function without access restriction.\\r\\n     */\\r\\n    function _transferOwnership(address newOwner) internal virtual {\\r\\n        address oldOwner = _owner;\\r\\n        _owner = newOwner;\\r\\n        emit OwnershipTransferred(oldOwner, newOwner);\\r\\n    }\\r\\n}\\r\\n\\r\\n// File @openzeppelin/contracts/utils/math/SafeMath.sol@v4.6.0\\r\\n\\r\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n// CAUTION\\r\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\r\\n// because it relies on the compiler's built in overflow checks.\\r\\n\\r\\n/**\\r\\n * @dev Wrappers over Solidity's arithmetic operations.\\r\\n *\\r\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\r\\n * now has built in overflow checking.\\r\\n */\\r\\nlibrary SafeMath {\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryAdd(\\r\\n        uint256 a,\\r\\n        uint256 b\\r\\n    ) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            uint256 c = a + b;\\r\\n            if (c < a) return (false, 0);\\r\\n            return (true, c);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function trySub(\\r\\n        uint256 a,\\r\\n        uint256 b\\r\\n    ) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            if (b > a) return (false, 0);\\r\\n            return (true, a - b);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryMul(\\r\\n        uint256 a,\\r\\n        uint256 b\\r\\n    ) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\r\\n            // benefit is lost if 'b' is also tested.\\r\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\r\\n            if (a == 0) return (true, 0);\\r\\n            uint256 c = a * b;\\r\\n            if (c / a != b) return (false, 0);\\r\\n            return (true, c);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryDiv(\\r\\n        uint256 a,\\r\\n        uint256 b\\r\\n    ) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            if (b == 0) return (false, 0);\\r\\n            return (true, a / b);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryMod(\\r\\n        uint256 a,\\r\\n        uint256 b\\r\\n    ) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            if (b == 0) return (false, 0);\\r\\n            return (true, a % b);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity's `+` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Addition cannot overflow.\\r\\n     */\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a + b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity's `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a - b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity's `*` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Multiplication cannot overflow.\\r\\n     */\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a * b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `/` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a / b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * reverting when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a % b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\r\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\r\\n     *\\r\\n     * Counterpart to Solidity's `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            require(b <= a, errorMessage);\\r\\n            return a - b;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            require(b > 0, errorMessage);\\r\\n            return a / b;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * reverting with custom message when dividing by zero.\\r\\n     *\\r\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\r\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\r\\n     *\\r\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            require(b > 0, errorMessage);\\r\\n            return a % b;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\n// File @openzeppelin/contracts/utils/Address.sol@v4.6.0\\r\\n\\r\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\r\\n\\r\\npragma solidity ^0.8.1;\\r\\n\\r\\n/**\\r\\n * @dev Collection of functions related to the address type\\r\\n */\\r\\nlibrary Address {\\r\\n    /**\\r\\n     * @dev Returns true if `account` is a contract.\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * It is unsafe to assume that an address for which this function returns\\r\\n     * false is an externally-owned account (EOA) and not a contract.\\r\\n     *\\r\\n     * Among others, `isContract` will return false for the following\\r\\n     * types of addresses:\\r\\n     *\\r\\n     *  - an externally-owned account\\r\\n     *  - a contract in construction\\r\\n     *  - an address where a contract will be created\\r\\n     *  - an address where a contract lived, but was destroyed\\r\\n     * ====\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\r\\n     *\\r\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\r\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\r\\n     * constructor.\\r\\n     * ====\\r\\n     */\\r\\n    function isContract(address account) internal view returns (bool) {\\r\\n        // This method relies on extcodesize/address.code.length, which returns 0\\r\\n        // for contracts in construction, since the code is only stored at the end\\r\\n        // of the constructor execution.\\r\\n\\r\\n        return account.code.length > 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\r\\n     * `recipient`, forwarding all available gas and reverting on errors.\\r\\n     *\\r\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\r\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\r\\n     * imposed by `transfer`, making them unable to receive funds via\\r\\n     * `transfer`. {sendValue} removes this limitation.\\r\\n     *\\r\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\r\\n     *\\r\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\r\\n     * taken to not create reentrancy vulnerabilities. Consider using\\r\\n     * {ReentrancyGuard} or the\\r\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\r\\n     */\\r\\n    function sendValue(address payable recipient, uint256 amount) internal {\\r\\n        require(\\r\\n            address(this).balance >= amount,\\r\\n            \\\"Address: insufficient balance\\\"\\r\\n        );\\r\\n\\r\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\r\\n        require(\\r\\n            success,\\r\\n            \\\"Address: unable to send value, recipient may have reverted\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Performs a Solidity function call using a low level `call`. A\\r\\n     * plain `call` is an unsafe replacement for a function call: use this\\r\\n     * function instead.\\r\\n     *\\r\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\r\\n     * function (like regular Solidity function calls).\\r\\n     *\\r\\n     * Returns the raw returned data. To convert to the expected return value,\\r\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `target` must be a contract.\\r\\n     * - calling `target` with `data` must not revert.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(\\r\\n        address target,\\r\\n        bytes memory data\\r\\n    ) internal returns (bytes memory) {\\r\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\r\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, 0, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but also transferring `value` wei to `target`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the calling contract must have an ETH balance of at least `value`.\\r\\n     * - the called Solidity function must be `payable`.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        uint256 value\\r\\n    ) internal returns (bytes memory) {\\r\\n        return\\r\\n            functionCallWithValue(\\r\\n                target,\\r\\n                data,\\r\\n                value,\\r\\n                \\\"Address: low-level call with value failed\\\"\\r\\n            );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\r\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        uint256 value,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        require(\\r\\n            address(this).balance >= value,\\r\\n            \\\"Address: insufficient balance for call\\\"\\r\\n        );\\r\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\r\\n\\r\\n        (bool success, bytes memory returndata) = target.call{value: value}(\\r\\n            data\\r\\n        );\\r\\n        return verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(\\r\\n        address target,\\r\\n        bytes memory data\\r\\n    ) internal view returns (bytes memory) {\\r\\n        return\\r\\n            functionStaticCall(\\r\\n                target,\\r\\n                data,\\r\\n                \\\"Address: low-level static call failed\\\"\\r\\n            );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal view returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\r\\n\\r\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\r\\n        return verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function functionDelegateCall(\\r\\n        address target,\\r\\n        bytes memory data\\r\\n    ) internal returns (bytes memory) {\\r\\n        return\\r\\n            functionDelegateCall(\\r\\n                target,\\r\\n                data,\\r\\n                \\\"Address: low-level delegate call failed\\\"\\r\\n            );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function functionDelegateCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\r\\n\\r\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\r\\n        return verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\r\\n     * revert reason using the provided one.\\r\\n     *\\r\\n     * _Available since v4.3._\\r\\n     */\\r\\n    function verifyCallResult(\\r\\n        bool success,\\r\\n        bytes memory returndata,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (bytes memory) {\\r\\n        if (success) {\\r\\n            return returndata;\\r\\n        } else {\\r\\n            // Look for revert reason and bubble it up if present\\r\\n            if (returndata.length > 0) {\\r\\n                // The easiest way to bubble the revert reason is using memory via assembly\\r\\n\\r\\n                assembly {\\r\\n                    let returndata_size := mload(returndata)\\r\\n                    revert(add(32, returndata), returndata_size)\\r\\n                }\\r\\n            } else {\\r\\n                revert(errorMessage);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\n// File @openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol@v4.6.0\\r\\n\\r\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @title SafeERC20\\r\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\r\\n * contract returns false). Tokens that return no value (and instead revert or\\r\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\r\\n * successful.\\r\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\r\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\r\\n */\\r\\nlibrary SafeERC20 {\\r\\n    using Address for address;\\r\\n\\r\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\r\\n        _callOptionalReturn(\\r\\n            token,\\r\\n            abi.encodeWithSelector(token.transfer.selector, to, value)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function safeTransferFrom(\\r\\n        IERC20 token,\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        _callOptionalReturn(\\r\\n            token,\\r\\n            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Deprecated. This function has issues similar to the ones found in\\r\\n     * {IERC20-approve}, and its usage is discouraged.\\r\\n     *\\r\\n     * Whenever possible, use {safeIncreaseAllowance} and\\r\\n     * {safeDecreaseAllowance} instead.\\r\\n     */\\r\\n    function safeApprove(\\r\\n        IERC20 token,\\r\\n        address spender,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        // safeApprove should only be called when setting an initial allowance,\\r\\n        // or when resetting it to zero. To increase and decrease it, use\\r\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\r\\n        require(\\r\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\r\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\r\\n        );\\r\\n        _callOptionalReturn(\\r\\n            token,\\r\\n            abi.encodeWithSelector(token.approve.selector, spender, value)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function safeIncreaseAllowance(\\r\\n        IERC20 token,\\r\\n        address spender,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\r\\n        _callOptionalReturn(\\r\\n            token,\\r\\n            abi.encodeWithSelector(\\r\\n                token.approve.selector,\\r\\n                spender,\\r\\n                newAllowance\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function safeDecreaseAllowance(\\r\\n        IERC20 token,\\r\\n        address spender,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        unchecked {\\r\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\r\\n            require(\\r\\n                oldAllowance >= value,\\r\\n                \\\"SafeERC20: decreased allowance below zero\\\"\\r\\n            );\\r\\n            uint256 newAllowance = oldAllowance - value;\\r\\n            _callOptionalReturn(\\r\\n                token,\\r\\n                abi.encodeWithSelector(\\r\\n                    token.approve.selector,\\r\\n                    spender,\\r\\n                    newAllowance\\r\\n                )\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\r\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\r\\n     * @param token The token targeted by the call.\\r\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\r\\n     */\\r\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\r\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\r\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\r\\n        // the target address contains contract code and also asserts for success in the low-level call.\\r\\n\\r\\n        bytes memory returndata = address(token).functionCall(\\r\\n            data,\\r\\n            \\\"SafeERC20: low-level call failed\\\"\\r\\n        );\\r\\n        if (returndata.length > 0) {\\r\\n            // Return data is optional\\r\\n            require(\\r\\n                abi.decode(returndata, (bool)),\\r\\n                \\\"SafeERC20: ERC20 operation did not succeed\\\"\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\n// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IRouter {\\r\\n    function swapExactTokensForTokens(\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256[] memory amounts);\\r\\n\\r\\n    function swapExactETHForTokens(\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external payable returns (uint256[] memory amounts);\\r\\n\\r\\n    function swapExactTokensForETH(\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256[] memory amounts);\\r\\n\\r\\n    function getAmountsOut(\\r\\n        uint256 amountIn,\\r\\n        address[] calldata path\\r\\n    ) external view returns (uint256[] memory amounts);\\r\\n}\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\n/// @title The interface for the PancakeSwap V3 Factory\\r\\n/// @notice The PancakeSwap V3 Factory facilitates creation of PancakeSwap V3 pools and control over the protocol fees\\r\\ninterface IPancakeV3Factory {\\r\\n    function getPool(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint24 fee\\r\\n    ) external view returns (address pool);\\r\\n}\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\ninterface IPancakeV3PoolState {\\r\\n    function slot0()\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            uint160 sqrtPriceX96,\\r\\n            int24 tick,\\r\\n            uint16 observationIndex,\\r\\n            uint16 observationCardinality,\\r\\n            uint16 observationCardinalityNext,\\r\\n            uint32 feeProtocol,\\r\\n            bool unlocked\\r\\n        );\\r\\n}\\r\\n\\r\\ninterface IPancakeV3PoolImmutables {\\r\\n    /// @notice The contract that deployed the pool, which must adhere to the IPancakeV3Factory interface\\r\\n    /// @return The contract address\\r\\n    function factory() external view returns (address);\\r\\n\\r\\n    /// @notice The first of the two tokens of the pool, sorted by address\\r\\n    /// @return The token contract address\\r\\n    function token0() external view returns (address);\\r\\n\\r\\n    /// @notice The second of the two tokens of the pool, sorted by address\\r\\n    /// @return The token contract address\\r\\n    function token1() external view returns (address);\\r\\n\\r\\n    /// @notice The pool's fee in hundredths of a bip, i.e. 1e-6\\r\\n    /// @return The fee\\r\\n    function fee() external view returns (uint24);\\r\\n\\r\\n    /// @notice The pool tick spacing\\r\\n    /// @dev Ticks can only be used at multiples of this value, minimum of 1 and always positive\\r\\n    /// e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ...\\r\\n    /// This value is an int24 to avoid casting even though it is always positive.\\r\\n    /// @return The tick spacing\\r\\n    function tickSpacing() external view returns (int24);\\r\\n\\r\\n    /// @notice The maximum amount of position liquidity that can use any tick in the range\\r\\n    /// @dev This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and\\r\\n    /// also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\\r\\n    /// @return The max amount of liquidity per tick\\r\\n    function maxLiquidityPerTick() external view returns (uint128);\\r\\n}\\r\\n\\r\\ninterface IPancakeV3Pool is IPancakeV3PoolState, IPancakeV3PoolImmutables {}\\r\\n\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\n/// @title Callback for IPancakeV3PoolActions#swap\\r\\n/// @notice Any contract that calls IPancakeV3PoolActions#swap must implement this interface\\r\\ninterface IPancakeV3SwapCallback {\\r\\n    /// @notice Called to `msg.sender` after executing a swap via IPancakeV3Pool#swap.\\r\\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\\r\\n    /// The caller of this method must be checked to be a PancakeV3Pool deployed by the canonical PancakeV3Factory.\\r\\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\\r\\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\\r\\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\\r\\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\\r\\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\\r\\n    /// @param data Any data passed through by the caller via the IPancakeV3PoolActions#swap call\\r\\n    function pancakeV3SwapCallback(\\r\\n        int256 amount0Delta,\\r\\n        int256 amount1Delta,\\r\\n        bytes calldata data\\r\\n    ) external;\\r\\n}\\r\\n\\r\\ninterface IV3SwapRouter is IPancakeV3SwapCallback {\\r\\n    struct ExactInputSingleParams {\\r\\n        address tokenIn;\\r\\n        address tokenOut;\\r\\n        uint24 fee;\\r\\n        address recipient;\\r\\n        uint256 amountIn;\\r\\n        uint256 amountOutMinimum;\\r\\n        uint160 sqrtPriceLimitX96;\\r\\n    }\\r\\n\\r\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\\r\\n    /// @dev Setting `amountIn` to 0 will cause the contract to look up its own balance,\\r\\n    /// and swap the entire amount, enabling contracts to send tokens before calling this function.\\r\\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\\r\\n    /// @return amountOut The amount of the received token\\r\\n    function exactInputSingle(\\r\\n        ExactInputSingleParams calldata params\\r\\n    ) external payable returns (uint256 amountOut);\\r\\n\\r\\n    struct ExactInputParams {\\r\\n        bytes path;\\r\\n        address recipient;\\r\\n        uint256 amountIn;\\r\\n        uint256 amountOutMinimum;\\r\\n    }\\r\\n\\r\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\\r\\n    /// @dev Setting `amountIn` to 0 will cause the contract to look up its own balance,\\r\\n    /// and swap the entire amount, enabling contracts to send tokens before calling this function.\\r\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\\r\\n    /// @return amountOut The amount of the received token\\r\\n    function exactInput(\\r\\n        ExactInputParams calldata params\\r\\n    ) external payable returns (uint256 amountOut);\\r\\n\\r\\n    struct ExactOutputSingleParams {\\r\\n        address tokenIn;\\r\\n        address tokenOut;\\r\\n        uint24 fee;\\r\\n        address recipient;\\r\\n        uint256 amountOut;\\r\\n        uint256 amountInMaximum;\\r\\n        uint160 sqrtPriceLimitX96;\\r\\n    }\\r\\n\\r\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\\r\\n    /// that may remain in the router after the swap.\\r\\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\\r\\n    /// @return amountIn The amount of the input token\\r\\n    function exactOutputSingle(\\r\\n        ExactOutputSingleParams calldata params\\r\\n    ) external payable returns (uint256 amountIn);\\r\\n\\r\\n    struct ExactOutputParams {\\r\\n        bytes path;\\r\\n        address recipient;\\r\\n        uint256 amountOut;\\r\\n        uint256 amountInMaximum;\\r\\n    }\\r\\n\\r\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\\r\\n    /// that may remain in the router after the swap.\\r\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\\r\\n    /// @return amountIn The amount of the input token\\r\\n    function exactOutput(\\r\\n        ExactOutputParams calldata params\\r\\n    ) external payable returns (uint256 amountIn);\\r\\n\\r\\n    function refundETH() external payable;\\r\\n}\\r\\n\\r\\ncontract Claimable is Ownable {\\r\\n    function claimToken(\\r\\n        address tokenAddress,\\r\\n        uint256 amount\\r\\n    ) external onlyOwner {\\r\\n        IERC20(tokenAddress).transfer(owner(), amount);\\r\\n    }\\r\\n\\r\\n    function claimETH(uint256 amount) external onlyOwner {\\r\\n        (bool sent, ) = owner().call{value: amount}(\\\"\\\");\\r\\n        require(sent, \\\"Failed to send Ether\\\");\\r\\n    }\\r\\n}\\r\\n\\r\\ncontract ProSwap is Claimable {\\r\\n    using SafeMath for uint256;\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    uint public feePercent = 0; //10:0.25%\\r\\n    uint256 public rewardAmount = 10000000000000000000; //10 to tokens\\r\\n\\r\\n    address public rewardAddress;\\r\\n    address public feeAccount;\\r\\n    address public router;\\r\\n    address public wavax;\\r\\n\\r\\n    address public routerAddress = 0x13f4EA83D0bd40E75C8222255bc855a974568Dd4;\\r\\n    address public factoryAddress = 0x0BFbCF9fa4f9C56B0F40a671Ad40E0805A091865;\\r\\n    address public wbnbAddress = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;\\r\\n    uint24 poolFee = 100;\\r\\n\\r\\n    mapping(address => uint256) airdropAddress;\\r\\n    mapping(address => uint256) airdropLastTime;\\r\\n\\r\\n    constructor(\\r\\n        address _feeAccount,\\r\\n        address _router,\\r\\n        address _wavax,\\r\\n        address _rewardAddress\\r\\n    ) {\\r\\n        feeAccount = _feeAccount;\\r\\n        router = _router;\\r\\n        wavax = _wavax;\\r\\n        rewardAddress = _rewardAddress;\\r\\n    }\\r\\n\\r\\n    function airdrop() external {\\r\\n        require(\\r\\n            airdropAddress[msg.sender] + 86400 > block.timestamp,\\r\\n            \\\"You did not swap in 24 hours\\\"\\r\\n        );\\r\\n\\r\\n        require(\\r\\n            block.timestamp > airdropLastTime[msg.sender] + 86400,\\r\\n            \\\"You airdroped in 24 hours\\\"\\r\\n        );\\r\\n\\r\\n        IERC20(rewardAddress).safeTransfer(msg.sender, rewardAmount);\\r\\n        airdropLastTime[msg.sender] = block.timestamp;\\r\\n    }\\r\\n\\r\\n    function swapV2Tokens(\\r\\n        address _tokenA,\\r\\n        address _tokenB,\\r\\n        uint256 _amountIn\\r\\n    ) external payable {\\r\\n        airdropAddress[msg.sender] = block.timestamp;\\r\\n        address[] memory path = new address[](2);\\r\\n        if (_tokenA == address(0)) {\\r\\n            path[0] = wavax;\\r\\n            path[1] = _tokenB;\\r\\n        } else if (_tokenB == address(0)) {\\r\\n            path[0] = _tokenA;\\r\\n            path[1] = wavax;\\r\\n        } else {\\r\\n            path[0] = _tokenA;\\r\\n            path[1] = _tokenB;\\r\\n        }\\r\\n\\r\\n        _proceedToUniswap(_tokenA, _tokenB, _amountIn, path);\\r\\n    }\\r\\n\\r\\n    function customSwapTokens(\\r\\n        address _tokenA,\\r\\n        address _tokenB,\\r\\n        uint256 _amountIn,\\r\\n        address[] memory path\\r\\n    ) external payable {\\r\\n        if (_tokenA == address(0)) {\\r\\n            require(\\r\\n                wavax == path[0] && _tokenB == path[path.length - 1],\\r\\n                \\\"PattieSwap: Path must be specified\\\"\\r\\n            );\\r\\n        } else if (_tokenB == address(0)) {\\r\\n            require(\\r\\n                _tokenA == path[0] && wavax == path[path.length - 1],\\r\\n                \\\"PattieSwap: Path must be specified\\\"\\r\\n            );\\r\\n        } else {\\r\\n            require(\\r\\n                _tokenA == path[0] && _tokenB == path[path.length - 1],\\r\\n                \\\"PattieSwap: Path must be specified\\\"\\r\\n            );\\r\\n        }\\r\\n        _proceedToUniswap(_tokenA, _tokenB, _amountIn, path);\\r\\n    }\\r\\n\\r\\n    function _proceedToUniswap(\\r\\n        address _tokenA,\\r\\n        address _tokenB,\\r\\n        uint256 _amountIn,\\r\\n        address[] memory path\\r\\n    ) internal {\\r\\n        require(_amountIn > 0, \\\"PattieSwap: amountIn must be greater than 0\\\");\\r\\n\\r\\n        if (_tokenA == address(0)) {\\r\\n            require(_amountIn >= msg.value, \\\"PattieSwap: Insufficient ETH\\\");\\r\\n            uint fee = (_amountIn * feePercent) / 10000;\\r\\n            payable(feeAccount).transfer(fee);\\r\\n            uint amountToSwap = _amountIn - fee;\\r\\n            _swapAVAXForTokens(amountToSwap, path);\\r\\n        } else {\\r\\n            IERC20(_tokenA).safeTransferFrom(\\r\\n                msg.sender,\\r\\n                address(this),\\r\\n                _amountIn\\r\\n            );\\r\\n            uint fee = (_amountIn * feePercent) / 10000;\\r\\n            IERC20(_tokenA).safeTransfer(feeAccount, fee);\\r\\n            uint amountToSwap = _amountIn - fee;\\r\\n            _approve(_tokenA, amountToSwap);\\r\\n            if (_tokenB == address(0)) {\\r\\n                _swapTokensForAVAX(amountToSwap, path);\\r\\n            } else {\\r\\n                _swapTokensForTokens(amountToSwap, path);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _approve(address _token, uint _amount) internal {\\r\\n        IERC20(_token).approve(address(router), _amount);\\r\\n    }\\r\\n\\r\\n    function _swapTokensForAVAX(uint _amount, address[] memory path) internal {\\r\\n        IRouter(router).swapExactTokensForETH(\\r\\n            _amount,\\r\\n            0,\\r\\n            path,\\r\\n            msg.sender,\\r\\n            block.timestamp\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function _swapAVAXForTokens(uint _amount, address[] memory path) internal {\\r\\n        IRouter(router).swapExactETHForTokens{value: _amount}(\\r\\n            0,\\r\\n            path,\\r\\n            msg.sender,\\r\\n            block.timestamp\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function _swapTokensForTokens(\\r\\n        uint _amount,\\r\\n        address[] memory path\\r\\n    ) internal {\\r\\n        IRouter(router).swapExactTokensForTokens(\\r\\n            _amount,\\r\\n            0,\\r\\n            path,\\r\\n            msg.sender,\\r\\n            block.timestamp\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function _v3Approve(address _token, uint _amount) internal {\\r\\n        IERC20(_token).approve(address(routerAddress), _amount);\\r\\n    }\\r\\n\\r\\n    function getOutputTokenAmount(\\r\\n        uint inputAmount,\\r\\n        address[] memory path\\r\\n    ) external view returns (uint outputAmount) {\\r\\n        uint[] memory outputs = IRouter(router).getAmountsOut(\\r\\n            inputAmount,\\r\\n            path\\r\\n        );\\r\\n        return outputs[outputs.length - 1];\\r\\n    }\\r\\n\\r\\n    function getV3OutputTokenAmount(\\r\\n        uint256 _inputAmount,\\r\\n        address _tokenIn,\\r\\n        address _tokenOut\\r\\n    ) external view returns (uint outputAmount) {\\r\\n        uint256 slotReturnValue = 0;\\r\\n        address pairAddress = IPancakeV3Factory(factoryAddress).getPool(\\r\\n            _tokenIn,\\r\\n            _tokenOut,\\r\\n            poolFee\\r\\n        );\\r\\n        (slotReturnValue, , , , , , ) = IPancakeV3PoolState(pairAddress)\\r\\n            .slot0();\\r\\n        address token0 = IPancakeV3Pool(pairAddress).token0();\\r\\n        if (_tokenIn == token0)\\r\\n            outputAmount = ((slotReturnValue ** 2 * _inputAmount) / 2 ** 192);\\r\\n        else outputAmount = ((2 ** 192 * _inputAmount) / slotReturnValue ** 2);\\r\\n    }\\r\\n\\r\\n    function setFeePercent(uint _feePercent) external onlyOwner {\\r\\n        feePercent = _feePercent;\\r\\n    }\\r\\n\\r\\n    function setRewardAmount(uint256 _amount) external onlyOwner {\\r\\n        rewardAmount = _amount;\\r\\n    }\\r\\n\\r\\n    function setRewardToken(address _rewawrdAddress) external onlyOwner {\\r\\n        rewardAddress = _rewawrdAddress;\\r\\n    }\\r\\n\\r\\n    function setFeeAccount(address _feeAccount) external onlyOwner {\\r\\n        feeAccount = _feeAccount;\\r\\n    }\\r\\n\\r\\n    function setRouterWAVAX(\\r\\n        address _router,\\r\\n        address _wavax\\r\\n    ) external onlyOwner {\\r\\n        router = _router;\\r\\n        wavax = _wavax;\\r\\n    }\\r\\n\\r\\n    function emergencyWithdraw(\\r\\n        address _token,\\r\\n        uint _amount\\r\\n    ) external onlyOwner {\\r\\n        IERC20(_token).safeTransfer(msg.sender, _amount);\\r\\n    }\\r\\n\\r\\n    function emergencyWithdrawETH(uint _amount) external onlyOwner {\\r\\n        payable(owner()).transfer(_amount);\\r\\n    }\\r\\n\\r\\n    function swapTokens(\\r\\n        address _tokenIn,\\r\\n        address _tokenOut,\\r\\n        uint256 _amountIn\\r\\n    ) external payable {\\r\\n        airdropAddress[msg.sender] = block.timestamp;\\r\\n        IV3SwapRouter.ExactInputSingleParams memory params = IV3SwapRouter\\r\\n            .ExactInputSingleParams(\\r\\n                _tokenIn,\\r\\n                _tokenOut,\\r\\n                poolFee,\\r\\n                msg.sender,\\r\\n                _amountIn,\\r\\n                0,\\r\\n                0\\r\\n            );\\r\\n        if (_tokenIn == wbnbAddress)\\r\\n            IV3SwapRouter(routerAddress).exactInputSingle{value: msg.value}(\\r\\n                params\\r\\n            );\\r\\n        else {\\r\\n            IERC20(_tokenIn).safeTransferFrom(\\r\\n                msg.sender,\\r\\n                address(this),\\r\\n                _amountIn\\r\\n            );\\r\\n            _v3Approve(_tokenIn, _amountIn);\\r\\n            IV3SwapRouter(routerAddress).exactInputSingle{value: msg.value}(\\r\\n                params\\r\\n            );\\r\\n        }\\r\\n        IV3SwapRouter(routerAddress).refundETH();\\r\\n        // refund leftover ETH to user\\r\\n        (bool success, ) = msg.sender.call{value: address(this).balance}(\\\"\\\");\\r\\n        require(success, \\\"refund failed\\\");\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x014ebbd50111dbe2ffd46bfee0dca5b1dbbc4785ff10cb323cef7317398427ea\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"pancakeV3SwapCallback(int256,int256,bytes)":{"notice":"Called to `msg.sender` after executing a swap via IPancakeV3Pool#swap."}},"notice":"Any contract that calls IPancakeV3PoolActions#swap must implement this interface","version":1}},"IRouter":{"abi":[{"inputs":[{"internalType":"uint256","name":"amountIn","type":"uint256"},{"internalType":"address[]","name":"path","type":"address[]"}],"name":"getAmountsOut","outputs":[{"internalType":"uint256[]","name":"amounts","type":"uint256[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"amountOutMin","type":"uint256"},{"internalType":"address[]","name":"path","type":"address[]"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"deadline","type":"uint256"}],"name":"swapExactETHForTokens","outputs":[{"internalType":"uint256[]","name":"amounts","type":"uint256[]"}],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"uint256","name":"amountIn","type":"uint256"},{"internalType":"uint256","name":"amountOutMin","type":"uint256"},{"internalType":"address[]","name":"path","type":"address[]"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"deadline","type":"uint256"}],"name":"swapExactTokensForETH","outputs":[{"internalType":"uint256[]","name":"amounts","type":"uint256[]"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"amountIn","type":"uint256"},{"internalType":"uint256","name":"amountOutMin","type":"uint256"},{"internalType":"address[]","name":"path","type":"address[]"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"deadline","type":"uint256"}],"name":"swapExactTokensForTokens","outputs":[{"internalType":"uint256[]","name":"amounts","type":"uint256[]"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"getAmountsOut(uint256,address[])":"d06ca61f","swapExactETHForTokens(uint256,address[],address,uint256)":"7ff36ab5","swapExactTokensForETH(uint256,uint256,address[],address,uint256)":"18cbafe5","swapExactTokensForTokens(uint256,uint256,address[],address,uint256)":"38ed1739"}},"metadata":"{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"name\":\"getAmountsOut\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactETHForTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactTokensForETH\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactTokensForTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/swap.sol\":\"IRouter\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/swap.sol\":{\"content\":\"pragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\r\\n */\\r\\ninterface IERC20 {\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(\\r\\n        address indexed owner,\\r\\n        address indexed spender,\\r\\n        uint256 value\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address to, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(\\r\\n        address owner,\\r\\n        address spender\\r\\n    ) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender's allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller's\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n}\\r\\n\\r\\n// File @openzeppelin/contracts/utils/Context.sol@v4.6.0\\r\\n\\r\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Provides information about the current execution context, including the\\r\\n * sender of the transaction and its data. While these are generally available\\r\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\r\\n * manner, since when dealing with meta-transactions the account sending and\\r\\n * paying for execution may not be the actual sender (as far as an application\\r\\n * is concerned).\\r\\n *\\r\\n * This contract is only required for intermediate, library-like contracts.\\r\\n */\\r\\nabstract contract Context {\\r\\n    function _msgSender() internal view virtual returns (address) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view virtual returns (bytes calldata) {\\r\\n        return msg.data;\\r\\n    }\\r\\n}\\r\\n\\r\\n// File @openzeppelin/contracts/access/Ownable.sol@v4.6.0\\r\\n\\r\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Contract module which provides a basic access control mechanism, where\\r\\n * there is an account (an owner) that can be granted exclusive access to\\r\\n * specific functions.\\r\\n *\\r\\n * By default, the owner account will be the one that deploys the contract. This\\r\\n * can later be changed with {transferOwnership}.\\r\\n *\\r\\n * This module is used through inheritance. It will make available the modifier\\r\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\r\\n * the owner.\\r\\n */\\r\\nabstract contract Ownable is Context {\\r\\n    address private _owner;\\r\\n\\r\\n    event OwnershipTransferred(\\r\\n        address indexed previousOwner,\\r\\n        address indexed newOwner\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\r\\n     */\\r\\n    constructor() {\\r\\n        _transferOwnership(_msgSender());\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current owner.\\r\\n     */\\r\\n    function owner() public view virtual returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier onlyOwner() {\\r\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Leaves the contract without owner. It will not be possible to call\\r\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\r\\n     *\\r\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\r\\n     * thereby removing any functionality that is only available to the owner.\\r\\n     */\\r\\n    function renounceOwnership() public virtual onlyOwner {\\r\\n        _transferOwnership(address(0));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n        require(\\r\\n            newOwner != address(0),\\r\\n            \\\"Ownable: new owner is the zero address\\\"\\r\\n        );\\r\\n        _transferOwnership(newOwner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Internal function without access restriction.\\r\\n     */\\r\\n    function _transferOwnership(address newOwner) internal virtual {\\r\\n        address oldOwner = _owner;\\r\\n        _owner = newOwner;\\r\\n        emit OwnershipTransferred(oldOwner, newOwner);\\r\\n    }\\r\\n}\\r\\n\\r\\n// File @openzeppelin/contracts/utils/math/SafeMath.sol@v4.6.0\\r\\n\\r\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n// CAUTION\\r\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\r\\n// because it relies on the compiler's built in overflow checks.\\r\\n\\r\\n/**\\r\\n * @dev Wrappers over Solidity's arithmetic operations.\\r\\n *\\r\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\r\\n * now has built in overflow checking.\\r\\n */\\r\\nlibrary SafeMath {\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryAdd(\\r\\n        uint256 a,\\r\\n        uint256 b\\r\\n    ) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            uint256 c = a + b;\\r\\n            if (c < a) return (false, 0);\\r\\n            return (true, c);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function trySub(\\r\\n        uint256 a,\\r\\n        uint256 b\\r\\n    ) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            if (b > a) return (false, 0);\\r\\n            return (true, a - b);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryMul(\\r\\n        uint256 a,\\r\\n        uint256 b\\r\\n    ) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\r\\n            // benefit is lost if 'b' is also tested.\\r\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\r\\n            if (a == 0) return (true, 0);\\r\\n            uint256 c = a * b;\\r\\n            if (c / a != b) return (false, 0);\\r\\n            return (true, c);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryDiv(\\r\\n        uint256 a,\\r\\n        uint256 b\\r\\n    ) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            if (b == 0) return (false, 0);\\r\\n            return (true, a / b);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryMod(\\r\\n        uint256 a,\\r\\n        uint256 b\\r\\n    ) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            if (b == 0) return (false, 0);\\r\\n            return (true, a % b);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity's `+` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Addition cannot overflow.\\r\\n     */\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a + b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity's `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a - b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity's `*` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Multiplication cannot overflow.\\r\\n     */\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a * b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `/` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a / b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * reverting when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a % b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\r\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\r\\n     *\\r\\n     * Counterpart to Solidity's `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            require(b <= a, errorMessage);\\r\\n            return a - b;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            require(b > 0, errorMessage);\\r\\n            return a / b;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * reverting with custom message when dividing by zero.\\r\\n     *\\r\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\r\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\r\\n     *\\r\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            require(b > 0, errorMessage);\\r\\n            return a % b;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\n// File @openzeppelin/contracts/utils/Address.sol@v4.6.0\\r\\n\\r\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\r\\n\\r\\npragma solidity ^0.8.1;\\r\\n\\r\\n/**\\r\\n * @dev Collection of functions related to the address type\\r\\n */\\r\\nlibrary Address {\\r\\n    /**\\r\\n     * @dev Returns true if `account` is a contract.\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * It is unsafe to assume that an address for which this function returns\\r\\n     * false is an externally-owned account (EOA) and not a contract.\\r\\n     *\\r\\n     * Among others, `isContract` will return false for the following\\r\\n     * types of addresses:\\r\\n     *\\r\\n     *  - an externally-owned account\\r\\n     *  - a contract in construction\\r\\n     *  - an address where a contract will be created\\r\\n     *  - an address where a contract lived, but was destroyed\\r\\n     * ====\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\r\\n     *\\r\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\r\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\r\\n     * constructor.\\r\\n     * ====\\r\\n     */\\r\\n    function isContract(address account) internal view returns (bool) {\\r\\n        // This method relies on extcodesize/address.code.length, which returns 0\\r\\n        // for contracts in construction, since the code is only stored at the end\\r\\n        // of the constructor execution.\\r\\n\\r\\n        return account.code.length > 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\r\\n     * `recipient`, forwarding all available gas and reverting on errors.\\r\\n     *\\r\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\r\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\r\\n     * imposed by `transfer`, making them unable to receive funds via\\r\\n     * `transfer`. {sendValue} removes this limitation.\\r\\n     *\\r\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\r\\n     *\\r\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\r\\n     * taken to not create reentrancy vulnerabilities. Consider using\\r\\n     * {ReentrancyGuard} or the\\r\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\r\\n     */\\r\\n    function sendValue(address payable recipient, uint256 amount) internal {\\r\\n        require(\\r\\n            address(this).balance >= amount,\\r\\n            \\\"Address: insufficient balance\\\"\\r\\n        );\\r\\n\\r\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\r\\n        require(\\r\\n            success,\\r\\n            \\\"Address: unable to send value, recipient may have reverted\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Performs a Solidity function call using a low level `call`. A\\r\\n     * plain `call` is an unsafe replacement for a function call: use this\\r\\n     * function instead.\\r\\n     *\\r\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\r\\n     * function (like regular Solidity function calls).\\r\\n     *\\r\\n     * Returns the raw returned data. To convert to the expected return value,\\r\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `target` must be a contract.\\r\\n     * - calling `target` with `data` must not revert.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(\\r\\n        address target,\\r\\n        bytes memory data\\r\\n    ) internal returns (bytes memory) {\\r\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\r\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, 0, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but also transferring `value` wei to `target`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the calling contract must have an ETH balance of at least `value`.\\r\\n     * - the called Solidity function must be `payable`.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        uint256 value\\r\\n    ) internal returns (bytes memory) {\\r\\n        return\\r\\n            functionCallWithValue(\\r\\n                target,\\r\\n                data,\\r\\n                value,\\r\\n                \\\"Address: low-level call with value failed\\\"\\r\\n            );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\r\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        uint256 value,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        require(\\r\\n            address(this).balance >= value,\\r\\n            \\\"Address: insufficient balance for call\\\"\\r\\n        );\\r\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\r\\n\\r\\n        (bool success, bytes memory returndata) = target.call{value: value}(\\r\\n            data\\r\\n        );\\r\\n        return verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(\\r\\n        address target,\\r\\n        bytes memory data\\r\\n    ) internal view returns (bytes memory) {\\r\\n        return\\r\\n            functionStaticCall(\\r\\n                target,\\r\\n                data,\\r\\n                \\\"Address: low-level static call failed\\\"\\r\\n            );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal view returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\r\\n\\r\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\r\\n        return verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function functionDelegateCall(\\r\\n        address target,\\r\\n        bytes memory data\\r\\n    ) internal returns (bytes memory) {\\r\\n        return\\r\\n            functionDelegateCall(\\r\\n                target,\\r\\n                data,\\r\\n                \\\"Address: low-level delegate call failed\\\"\\r\\n            );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function functionDelegateCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\r\\n\\r\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\r\\n        return verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\r\\n     * revert reason using the provided one.\\r\\n     *\\r\\n     * _Available since v4.3._\\r\\n     */\\r\\n    function verifyCallResult(\\r\\n        bool success,\\r\\n        bytes memory returndata,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (bytes memory) {\\r\\n        if (success) {\\r\\n            return returndata;\\r\\n        } else {\\r\\n            // Look for revert reason and bubble it up if present\\r\\n            if (returndata.length > 0) {\\r\\n                // The easiest way to bubble the revert reason is using memory via assembly\\r\\n\\r\\n                assembly {\\r\\n                    let returndata_size := mload(returndata)\\r\\n                    revert(add(32, returndata), returndata_size)\\r\\n                }\\r\\n            } else {\\r\\n                revert(errorMessage);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\n// File @openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol@v4.6.0\\r\\n\\r\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @title SafeERC20\\r\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\r\\n * contract returns false). Tokens that return no value (and instead revert or\\r\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\r\\n * successful.\\r\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\r\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\r\\n */\\r\\nlibrary SafeERC20 {\\r\\n    using Address for address;\\r\\n\\r\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\r\\n        _callOptionalReturn(\\r\\n            token,\\r\\n            abi.encodeWithSelector(token.transfer.selector, to, value)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function safeTransferFrom(\\r\\n        IERC20 token,\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        _callOptionalReturn(\\r\\n            token,\\r\\n            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Deprecated. This function has issues similar to the ones found in\\r\\n     * {IERC20-approve}, and its usage is discouraged.\\r\\n     *\\r\\n     * Whenever possible, use {safeIncreaseAllowance} and\\r\\n     * {safeDecreaseAllowance} instead.\\r\\n     */\\r\\n    function safeApprove(\\r\\n        IERC20 token,\\r\\n        address spender,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        // safeApprove should only be called when setting an initial allowance,\\r\\n        // or when resetting it to zero. To increase and decrease it, use\\r\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\r\\n        require(\\r\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\r\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\r\\n        );\\r\\n        _callOptionalReturn(\\r\\n            token,\\r\\n            abi.encodeWithSelector(token.approve.selector, spender, value)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function safeIncreaseAllowance(\\r\\n        IERC20 token,\\r\\n        address spender,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\r\\n        _callOptionalReturn(\\r\\n            token,\\r\\n            abi.encodeWithSelector(\\r\\n                token.approve.selector,\\r\\n                spender,\\r\\n                newAllowance\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function safeDecreaseAllowance(\\r\\n        IERC20 token,\\r\\n        address spender,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        unchecked {\\r\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\r\\n            require(\\r\\n                oldAllowance >= value,\\r\\n                \\\"SafeERC20: decreased allowance below zero\\\"\\r\\n            );\\r\\n            uint256 newAllowance = oldAllowance - value;\\r\\n            _callOptionalReturn(\\r\\n                token,\\r\\n                abi.encodeWithSelector(\\r\\n                    token.approve.selector,\\r\\n                    spender,\\r\\n                    newAllowance\\r\\n                )\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\r\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\r\\n     * @param token The token targeted by the call.\\r\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\r\\n     */\\r\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\r\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\r\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\r\\n        // the target address contains contract code and also asserts for success in the low-level call.\\r\\n\\r\\n        bytes memory returndata = address(token).functionCall(\\r\\n            data,\\r\\n            \\\"SafeERC20: low-level call failed\\\"\\r\\n        );\\r\\n        if (returndata.length > 0) {\\r\\n            // Return data is optional\\r\\n            require(\\r\\n                abi.decode(returndata, (bool)),\\r\\n                \\\"SafeERC20: ERC20 operation did not succeed\\\"\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\n// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IRouter {\\r\\n    function swapExactTokensForTokens(\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256[] memory amounts);\\r\\n\\r\\n    function swapExactETHForTokens(\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external payable returns (uint256[] memory amounts);\\r\\n\\r\\n    function swapExactTokensForETH(\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256[] memory amounts);\\r\\n\\r\\n    function getAmountsOut(\\r\\n        uint256 amountIn,\\r\\n        address[] calldata path\\r\\n    ) external view returns (uint256[] memory amounts);\\r\\n}\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\n/// @title The interface for the PancakeSwap V3 Factory\\r\\n/// @notice The PancakeSwap V3 Factory facilitates creation of PancakeSwap V3 pools and control over the protocol fees\\r\\ninterface IPancakeV3Factory {\\r\\n    function getPool(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint24 fee\\r\\n    ) external view returns (address pool);\\r\\n}\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\ninterface IPancakeV3PoolState {\\r\\n    function slot0()\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            uint160 sqrtPriceX96,\\r\\n            int24 tick,\\r\\n            uint16 observationIndex,\\r\\n            uint16 observationCardinality,\\r\\n            uint16 observationCardinalityNext,\\r\\n            uint32 feeProtocol,\\r\\n            bool unlocked\\r\\n        );\\r\\n}\\r\\n\\r\\ninterface IPancakeV3PoolImmutables {\\r\\n    /// @notice The contract that deployed the pool, which must adhere to the IPancakeV3Factory interface\\r\\n    /// @return The contract address\\r\\n    function factory() external view returns (address);\\r\\n\\r\\n    /// @notice The first of the two tokens of the pool, sorted by address\\r\\n    /// @return The token contract address\\r\\n    function token0() external view returns (address);\\r\\n\\r\\n    /// @notice The second of the two tokens of the pool, sorted by address\\r\\n    /// @return The token contract address\\r\\n    function token1() external view returns (address);\\r\\n\\r\\n    /// @notice The pool's fee in hundredths of a bip, i.e. 1e-6\\r\\n    /// @return The fee\\r\\n    function fee() external view returns (uint24);\\r\\n\\r\\n    /// @notice The pool tick spacing\\r\\n    /// @dev Ticks can only be used at multiples of this value, minimum of 1 and always positive\\r\\n    /// e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ...\\r\\n    /// This value is an int24 to avoid casting even though it is always positive.\\r\\n    /// @return The tick spacing\\r\\n    function tickSpacing() external view returns (int24);\\r\\n\\r\\n    /// @notice The maximum amount of position liquidity that can use any tick in the range\\r\\n    /// @dev This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and\\r\\n    /// also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\\r\\n    /// @return The max amount of liquidity per tick\\r\\n    function maxLiquidityPerTick() external view returns (uint128);\\r\\n}\\r\\n\\r\\ninterface IPancakeV3Pool is IPancakeV3PoolState, IPancakeV3PoolImmutables {}\\r\\n\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\n/// @title Callback for IPancakeV3PoolActions#swap\\r\\n/// @notice Any contract that calls IPancakeV3PoolActions#swap must implement this interface\\r\\ninterface IPancakeV3SwapCallback {\\r\\n    /// @notice Called to `msg.sender` after executing a swap via IPancakeV3Pool#swap.\\r\\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\\r\\n    /// The caller of this method must be checked to be a PancakeV3Pool deployed by the canonical PancakeV3Factory.\\r\\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\\r\\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\\r\\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\\r\\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\\r\\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\\r\\n    /// @param data Any data passed through by the caller via the IPancakeV3PoolActions#swap call\\r\\n    function pancakeV3SwapCallback(\\r\\n        int256 amount0Delta,\\r\\n        int256 amount1Delta,\\r\\n        bytes calldata data\\r\\n    ) external;\\r\\n}\\r\\n\\r\\ninterface IV3SwapRouter is IPancakeV3SwapCallback {\\r\\n    struct ExactInputSingleParams {\\r\\n        address tokenIn;\\r\\n        address tokenOut;\\r\\n        uint24 fee;\\r\\n        address recipient;\\r\\n        uint256 amountIn;\\r\\n        uint256 amountOutMinimum;\\r\\n        uint160 sqrtPriceLimitX96;\\r\\n    }\\r\\n\\r\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\\r\\n    /// @dev Setting `amountIn` to 0 will cause the contract to look up its own balance,\\r\\n    /// and swap the entire amount, enabling contracts to send tokens before calling this function.\\r\\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\\r\\n    /// @return amountOut The amount of the received token\\r\\n    function exactInputSingle(\\r\\n        ExactInputSingleParams calldata params\\r\\n    ) external payable returns (uint256 amountOut);\\r\\n\\r\\n    struct ExactInputParams {\\r\\n        bytes path;\\r\\n        address recipient;\\r\\n        uint256 amountIn;\\r\\n        uint256 amountOutMinimum;\\r\\n    }\\r\\n\\r\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\\r\\n    /// @dev Setting `amountIn` to 0 will cause the contract to look up its own balance,\\r\\n    /// and swap the entire amount, enabling contracts to send tokens before calling this function.\\r\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\\r\\n    /// @return amountOut The amount of the received token\\r\\n    function exactInput(\\r\\n        ExactInputParams calldata params\\r\\n    ) external payable returns (uint256 amountOut);\\r\\n\\r\\n    struct ExactOutputSingleParams {\\r\\n        address tokenIn;\\r\\n        address tokenOut;\\r\\n        uint24 fee;\\r\\n        address recipient;\\r\\n        uint256 amountOut;\\r\\n        uint256 amountInMaximum;\\r\\n        uint160 sqrtPriceLimitX96;\\r\\n    }\\r\\n\\r\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\\r\\n    /// that may remain in the router after the swap.\\r\\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\\r\\n    /// @return amountIn The amount of the input token\\r\\n    function exactOutputSingle(\\r\\n        ExactOutputSingleParams calldata params\\r\\n    ) external payable returns (uint256 amountIn);\\r\\n\\r\\n    struct ExactOutputParams {\\r\\n        bytes path;\\r\\n        address recipient;\\r\\n        uint256 amountOut;\\r\\n        uint256 amountInMaximum;\\r\\n    }\\r\\n\\r\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\\r\\n    /// that may remain in the router after the swap.\\r\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\\r\\n    /// @return amountIn The amount of the input token\\r\\n    function exactOutput(\\r\\n        ExactOutputParams calldata params\\r\\n    ) external payable returns (uint256 amountIn);\\r\\n\\r\\n    function refundETH() external payable;\\r\\n}\\r\\n\\r\\ncontract Claimable is Ownable {\\r\\n    function claimToken(\\r\\n        address tokenAddress,\\r\\n        uint256 amount\\r\\n    ) external onlyOwner {\\r\\n        IERC20(tokenAddress).transfer(owner(), amount);\\r\\n    }\\r\\n\\r\\n    function claimETH(uint256 amount) external onlyOwner {\\r\\n        (bool sent, ) = owner().call{value: amount}(\\\"\\\");\\r\\n        require(sent, \\\"Failed to send Ether\\\");\\r\\n    }\\r\\n}\\r\\n\\r\\ncontract ProSwap is Claimable {\\r\\n    using SafeMath for uint256;\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    uint public feePercent = 0; //10:0.25%\\r\\n    uint256 public rewardAmount = 10000000000000000000; //10 to tokens\\r\\n\\r\\n    address public rewardAddress;\\r\\n    address public feeAccount;\\r\\n    address public router;\\r\\n    address public wavax;\\r\\n\\r\\n    address public routerAddress = 0x13f4EA83D0bd40E75C8222255bc855a974568Dd4;\\r\\n    address public factoryAddress = 0x0BFbCF9fa4f9C56B0F40a671Ad40E0805A091865;\\r\\n    address public wbnbAddress = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;\\r\\n    uint24 poolFee = 100;\\r\\n\\r\\n    mapping(address => uint256) airdropAddress;\\r\\n    mapping(address => uint256) airdropLastTime;\\r\\n\\r\\n    constructor(\\r\\n        address _feeAccount,\\r\\n        address _router,\\r\\n        address _wavax,\\r\\n        address _rewardAddress\\r\\n    ) {\\r\\n        feeAccount = _feeAccount;\\r\\n        router = _router;\\r\\n        wavax = _wavax;\\r\\n        rewardAddress = _rewardAddress;\\r\\n    }\\r\\n\\r\\n    function airdrop() external {\\r\\n        require(\\r\\n            airdropAddress[msg.sender] + 86400 > block.timestamp,\\r\\n            \\\"You did not swap in 24 hours\\\"\\r\\n        );\\r\\n\\r\\n        require(\\r\\n            block.timestamp > airdropLastTime[msg.sender] + 86400,\\r\\n            \\\"You airdroped in 24 hours\\\"\\r\\n        );\\r\\n\\r\\n        IERC20(rewardAddress).safeTransfer(msg.sender, rewardAmount);\\r\\n        airdropLastTime[msg.sender] = block.timestamp;\\r\\n    }\\r\\n\\r\\n    function swapV2Tokens(\\r\\n        address _tokenA,\\r\\n        address _tokenB,\\r\\n        uint256 _amountIn\\r\\n    ) external payable {\\r\\n        airdropAddress[msg.sender] = block.timestamp;\\r\\n        address[] memory path = new address[](2);\\r\\n        if (_tokenA == address(0)) {\\r\\n            path[0] = wavax;\\r\\n            path[1] = _tokenB;\\r\\n        } else if (_tokenB == address(0)) {\\r\\n            path[0] = _tokenA;\\r\\n            path[1] = wavax;\\r\\n        } else {\\r\\n            path[0] = _tokenA;\\r\\n            path[1] = _tokenB;\\r\\n        }\\r\\n\\r\\n        _proceedToUniswap(_tokenA, _tokenB, _amountIn, path);\\r\\n    }\\r\\n\\r\\n    function customSwapTokens(\\r\\n        address _tokenA,\\r\\n        address _tokenB,\\r\\n        uint256 _amountIn,\\r\\n        address[] memory path\\r\\n    ) external payable {\\r\\n        if (_tokenA == address(0)) {\\r\\n            require(\\r\\n                wavax == path[0] && _tokenB == path[path.length - 1],\\r\\n                \\\"PattieSwap: Path must be specified\\\"\\r\\n            );\\r\\n        } else if (_tokenB == address(0)) {\\r\\n            require(\\r\\n                _tokenA == path[0] && wavax == path[path.length - 1],\\r\\n                \\\"PattieSwap: Path must be specified\\\"\\r\\n            );\\r\\n        } else {\\r\\n            require(\\r\\n                _tokenA == path[0] && _tokenB == path[path.length - 1],\\r\\n                \\\"PattieSwap: Path must be specified\\\"\\r\\n            );\\r\\n        }\\r\\n        _proceedToUniswap(_tokenA, _tokenB, _amountIn, path);\\r\\n    }\\r\\n\\r\\n    function _proceedToUniswap(\\r\\n        address _tokenA,\\r\\n        address _tokenB,\\r\\n        uint256 _amountIn,\\r\\n        address[] memory path\\r\\n    ) internal {\\r\\n        require(_amountIn > 0, \\\"PattieSwap: amountIn must be greater than 0\\\");\\r\\n\\r\\n        if (_tokenA == address(0)) {\\r\\n            require(_amountIn >= msg.value, \\\"PattieSwap: Insufficient ETH\\\");\\r\\n            uint fee = (_amountIn * feePercent) / 10000;\\r\\n            payable(feeAccount).transfer(fee);\\r\\n            uint amountToSwap = _amountIn - fee;\\r\\n            _swapAVAXForTokens(amountToSwap, path);\\r\\n        } else {\\r\\n            IERC20(_tokenA).safeTransferFrom(\\r\\n                msg.sender,\\r\\n                address(this),\\r\\n                _amountIn\\r\\n            );\\r\\n            uint fee = (_amountIn * feePercent) / 10000;\\r\\n            IERC20(_tokenA).safeTransfer(feeAccount, fee);\\r\\n            uint amountToSwap = _amountIn - fee;\\r\\n            _approve(_tokenA, amountToSwap);\\r\\n            if (_tokenB == address(0)) {\\r\\n                _swapTokensForAVAX(amountToSwap, path);\\r\\n            } else {\\r\\n                _swapTokensForTokens(amountToSwap, path);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _approve(address _token, uint _amount) internal {\\r\\n        IERC20(_token).approve(address(router), _amount);\\r\\n    }\\r\\n\\r\\n    function _swapTokensForAVAX(uint _amount, address[] memory path) internal {\\r\\n        IRouter(router).swapExactTokensForETH(\\r\\n            _amount,\\r\\n            0,\\r\\n            path,\\r\\n            msg.sender,\\r\\n            block.timestamp\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function _swapAVAXForTokens(uint _amount, address[] memory path) internal {\\r\\n        IRouter(router).swapExactETHForTokens{value: _amount}(\\r\\n            0,\\r\\n            path,\\r\\n            msg.sender,\\r\\n            block.timestamp\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function _swapTokensForTokens(\\r\\n        uint _amount,\\r\\n        address[] memory path\\r\\n    ) internal {\\r\\n        IRouter(router).swapExactTokensForTokens(\\r\\n            _amount,\\r\\n            0,\\r\\n            path,\\r\\n            msg.sender,\\r\\n            block.timestamp\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function _v3Approve(address _token, uint _amount) internal {\\r\\n        IERC20(_token).approve(address(routerAddress), _amount);\\r\\n    }\\r\\n\\r\\n    function getOutputTokenAmount(\\r\\n        uint inputAmount,\\r\\n        address[] memory path\\r\\n    ) external view returns (uint outputAmount) {\\r\\n        uint[] memory outputs = IRouter(router).getAmountsOut(\\r\\n            inputAmount,\\r\\n            path\\r\\n        );\\r\\n        return outputs[outputs.length - 1];\\r\\n    }\\r\\n\\r\\n    function getV3OutputTokenAmount(\\r\\n        uint256 _inputAmount,\\r\\n        address _tokenIn,\\r\\n        address _tokenOut\\r\\n    ) external view returns (uint outputAmount) {\\r\\n        uint256 slotReturnValue = 0;\\r\\n        address pairAddress = IPancakeV3Factory(factoryAddress).getPool(\\r\\n            _tokenIn,\\r\\n            _tokenOut,\\r\\n            poolFee\\r\\n        );\\r\\n        (slotReturnValue, , , , , , ) = IPancakeV3PoolState(pairAddress)\\r\\n            .slot0();\\r\\n        address token0 = IPancakeV3Pool(pairAddress).token0();\\r\\n        if (_tokenIn == token0)\\r\\n            outputAmount = ((slotReturnValue ** 2 * _inputAmount) / 2 ** 192);\\r\\n        else outputAmount = ((2 ** 192 * _inputAmount) / slotReturnValue ** 2);\\r\\n    }\\r\\n\\r\\n    function setFeePercent(uint _feePercent) external onlyOwner {\\r\\n        feePercent = _feePercent;\\r\\n    }\\r\\n\\r\\n    function setRewardAmount(uint256 _amount) external onlyOwner {\\r\\n        rewardAmount = _amount;\\r\\n    }\\r\\n\\r\\n    function setRewardToken(address _rewawrdAddress) external onlyOwner {\\r\\n        rewardAddress = _rewawrdAddress;\\r\\n    }\\r\\n\\r\\n    function setFeeAccount(address _feeAccount) external onlyOwner {\\r\\n        feeAccount = _feeAccount;\\r\\n    }\\r\\n\\r\\n    function setRouterWAVAX(\\r\\n        address _router,\\r\\n        address _wavax\\r\\n    ) external onlyOwner {\\r\\n        router = _router;\\r\\n        wavax = _wavax;\\r\\n    }\\r\\n\\r\\n    function emergencyWithdraw(\\r\\n        address _token,\\r\\n        uint _amount\\r\\n    ) external onlyOwner {\\r\\n        IERC20(_token).safeTransfer(msg.sender, _amount);\\r\\n    }\\r\\n\\r\\n    function emergencyWithdrawETH(uint _amount) external onlyOwner {\\r\\n        payable(owner()).transfer(_amount);\\r\\n    }\\r\\n\\r\\n    function swapTokens(\\r\\n        address _tokenIn,\\r\\n        address _tokenOut,\\r\\n        uint256 _amountIn\\r\\n    ) external payable {\\r\\n        airdropAddress[msg.sender] = block.timestamp;\\r\\n        IV3SwapRouter.ExactInputSingleParams memory params = IV3SwapRouter\\r\\n            .ExactInputSingleParams(\\r\\n                _tokenIn,\\r\\n                _tokenOut,\\r\\n                poolFee,\\r\\n                msg.sender,\\r\\n                _amountIn,\\r\\n                0,\\r\\n                0\\r\\n            );\\r\\n        if (_tokenIn == wbnbAddress)\\r\\n            IV3SwapRouter(routerAddress).exactInputSingle{value: msg.value}(\\r\\n                params\\r\\n            );\\r\\n        else {\\r\\n            IERC20(_tokenIn).safeTransferFrom(\\r\\n                msg.sender,\\r\\n                address(this),\\r\\n                _amountIn\\r\\n            );\\r\\n            _v3Approve(_tokenIn, _amountIn);\\r\\n            IV3SwapRouter(routerAddress).exactInputSingle{value: msg.value}(\\r\\n                params\\r\\n            );\\r\\n        }\\r\\n        IV3SwapRouter(routerAddress).refundETH();\\r\\n        // refund leftover ETH to user\\r\\n        (bool success, ) = msg.sender.call{value: address(this).balance}(\\\"\\\");\\r\\n        require(success, \\\"refund failed\\\");\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x014ebbd50111dbe2ffd46bfee0dca5b1dbbc4785ff10cb323cef7317398427ea\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}},"IV3SwapRouter":{"abi":[{"inputs":[{"components":[{"internalType":"bytes","name":"path","type":"bytes"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"amountIn","type":"uint256"},{"internalType":"uint256","name":"amountOutMinimum","type":"uint256"}],"internalType":"struct IV3SwapRouter.ExactInputParams","name":"params","type":"tuple"}],"name":"exactInput","outputs":[{"internalType":"uint256","name":"amountOut","type":"uint256"}],"stateMutability":"payable","type":"function"},{"inputs":[{"components":[{"internalType":"address","name":"tokenIn","type":"address"},{"internalType":"address","name":"tokenOut","type":"address"},{"internalType":"uint24","name":"fee","type":"uint24"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"amountIn","type":"uint256"},{"internalType":"uint256","name":"amountOutMinimum","type":"uint256"},{"internalType":"uint160","name":"sqrtPriceLimitX96","type":"uint160"}],"internalType":"struct IV3SwapRouter.ExactInputSingleParams","name":"params","type":"tuple"}],"name":"exactInputSingle","outputs":[{"internalType":"uint256","name":"amountOut","type":"uint256"}],"stateMutability":"payable","type":"function"},{"inputs":[{"components":[{"internalType":"bytes","name":"path","type":"bytes"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"amountOut","type":"uint256"},{"internalType":"uint256","name":"amountInMaximum","type":"uint256"}],"internalType":"struct IV3SwapRouter.ExactOutputParams","name":"params","type":"tuple"}],"name":"exactOutput","outputs":[{"internalType":"uint256","name":"amountIn","type":"uint256"}],"stateMutability":"payable","type":"function"},{"inputs":[{"components":[{"internalType":"address","name":"tokenIn","type":"address"},{"internalType":"address","name":"tokenOut","type":"address"},{"internalType":"uint24","name":"fee","type":"uint24"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"amountOut","type":"uint256"},{"internalType":"uint256","name":"amountInMaximum","type":"uint256"},{"internalType":"uint160","name":"sqrtPriceLimitX96","type":"uint160"}],"internalType":"struct IV3SwapRouter.ExactOutputSingleParams","name":"params","type":"tuple"}],"name":"exactOutputSingle","outputs":[{"internalType":"uint256","name":"amountIn","type":"uint256"}],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"int256","name":"amount0Delta","type":"int256"},{"internalType":"int256","name":"amount1Delta","type":"int256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"pancakeV3SwapCallback","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"refundETH","outputs":[],"stateMutability":"payable","type":"function"}],"devdoc":{"kind":"dev","methods":{"exactInput((bytes,address,uint256,uint256))":{"details":"Setting `amountIn` to 0 will cause the contract to look up its own balance, and swap the entire amount, enabling contracts to send tokens before calling this function.","params":{"params":"The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata"},"returns":{"amountOut":"The amount of the received token"}},"exactInputSingle((address,address,uint24,address,uint256,uint256,uint160))":{"details":"Setting `amountIn` to 0 will cause the contract to look up its own balance, and swap the entire amount, enabling contracts to send tokens before calling this function.","params":{"params":"The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata"},"returns":{"amountOut":"The amount of the received token"}},"exactOutput((bytes,address,uint256,uint256))":{"params":{"params":"The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata"},"returns":{"amountIn":"The amount of the input token"}},"exactOutputSingle((address,address,uint24,address,uint256,uint256,uint160))":{"params":{"params":"The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata"},"returns":{"amountIn":"The amount of the input token"}},"pancakeV3SwapCallback(int256,int256,bytes)":{"details":"In the implementation you must pay the pool tokens owed for the swap. The caller of this method must be checked to be a PancakeV3Pool deployed by the canonical PancakeV3Factory. amount0Delta and amount1Delta can both be 0 if no tokens were swapped.","params":{"amount0Delta":"The amount of token0 that was sent (negative) or must be received (positive) by the pool by the end of the swap. If positive, the callback must send that amount of token0 to the pool.","amount1Delta":"The amount of token1 that was sent (negative) or must be received (positive) by the pool by the end of the swap. If positive, the callback must send that amount of token1 to the pool.","data":"Any data passed through by the caller via the IPancakeV3PoolActions#swap call"}}},"version":1},"evm":{"bytecode":{"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"exactInput((bytes,address,uint256,uint256))":"b858183f","exactInputSingle((address,address,uint24,address,uint256,uint256,uint160))":"04e45aaf","exactOutput((bytes,address,uint256,uint256))":"09b81346","exactOutputSingle((address,address,uint24,address,uint256,uint256,uint160))":"5023b4df","pancakeV3SwapCallback(int256,int256,bytes)":"23a69e75","refundETH()":"12210e8a"}},"metadata":"{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"components\":[{\"internalType\":\"bytes\",\"name\":\"path\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMinimum\",\"type\":\"uint256\"}],\"internalType\":\"struct IV3SwapRouter.ExactInputParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"exactInput\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMinimum\",\"type\":\"uint256\"},{\"internalType\":\"uint160\",\"name\":\"sqrtPriceLimitX96\",\"type\":\"uint160\"}],\"internalType\":\"struct IV3SwapRouter.ExactInputSingleParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"exactInputSingle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes\",\"name\":\"path\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInMaximum\",\"type\":\"uint256\"}],\"internalType\":\"struct IV3SwapRouter.ExactOutputParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"exactOutput\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInMaximum\",\"type\":\"uint256\"},{\"internalType\":\"uint160\",\"name\":\"sqrtPriceLimitX96\",\"type\":\"uint160\"}],\"internalType\":\"struct IV3SwapRouter.ExactOutputSingleParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"exactOutputSingle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"amount0Delta\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"amount1Delta\",\"type\":\"int256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"pancakeV3SwapCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"refundETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"exactInput((bytes,address,uint256,uint256))\":{\"details\":\"Setting `amountIn` to 0 will cause the contract to look up its own balance, and swap the entire amount, enabling contracts to send tokens before calling this function.\",\"params\":{\"params\":\"The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\"},\"returns\":{\"amountOut\":\"The amount of the received token\"}},\"exactInputSingle((address,address,uint24,address,uint256,uint256,uint160))\":{\"details\":\"Setting `amountIn` to 0 will cause the contract to look up its own balance, and swap the entire amount, enabling contracts to send tokens before calling this function.\",\"params\":{\"params\":\"The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\"},\"returns\":{\"amountOut\":\"The amount of the received token\"}},\"exactOutput((bytes,address,uint256,uint256))\":{\"params\":{\"params\":\"The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\"},\"returns\":{\"amountIn\":\"The amount of the input token\"}},\"exactOutputSingle((address,address,uint24,address,uint256,uint256,uint160))\":{\"params\":{\"params\":\"The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\"},\"returns\":{\"amountIn\":\"The amount of the input token\"}},\"pancakeV3SwapCallback(int256,int256,bytes)\":{\"details\":\"In the implementation you must pay the pool tokens owed for the swap. The caller of this method must be checked to be a PancakeV3Pool deployed by the canonical PancakeV3Factory. amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\",\"params\":{\"amount0Delta\":\"The amount of token0 that was sent (negative) or must be received (positive) by the pool by the end of the swap. If positive, the callback must send that amount of token0 to the pool.\",\"amount1Delta\":\"The amount of token1 that was sent (negative) or must be received (positive) by the pool by the end of the swap. If positive, the callback must send that amount of token1 to the pool.\",\"data\":\"Any data passed through by the caller via the IPancakeV3PoolActions#swap call\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"exactInput((bytes,address,uint256,uint256))\":{\"notice\":\"Swaps `amountIn` of one token for as much as possible of another along the specified path\"},\"exactInputSingle((address,address,uint24,address,uint256,uint256,uint160))\":{\"notice\":\"Swaps `amountIn` of one token for as much as possible of another token\"},\"exactOutput((bytes,address,uint256,uint256))\":{\"notice\":\"Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed) that may remain in the router after the swap.\"},\"exactOutputSingle((address,address,uint24,address,uint256,uint256,uint160))\":{\"notice\":\"Swaps as little as possible of one token for `amountOut` of another token that may remain in the router after the swap.\"},\"pancakeV3SwapCallback(int256,int256,bytes)\":{\"notice\":\"Called to `msg.sender` after executing a swap via IPancakeV3Pool#swap.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/swap.sol\":\"IV3SwapRouter\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/swap.sol\":{\"content\":\"pragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\r\\n */\\r\\ninterface IERC20 {\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(\\r\\n        address indexed owner,\\r\\n        address indexed spender,\\r\\n        uint256 value\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address to, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(\\r\\n        address owner,\\r\\n        address spender\\r\\n    ) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender's allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller's\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n}\\r\\n\\r\\n// File @openzeppelin/contracts/utils/Context.sol@v4.6.0\\r\\n\\r\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Provides information about the current execution context, including the\\r\\n * sender of the transaction and its data. While these are generally available\\r\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\r\\n * manner, since when dealing with meta-transactions the account sending and\\r\\n * paying for execution may not be the actual sender (as far as an application\\r\\n * is concerned).\\r\\n *\\r\\n * This contract is only required for intermediate, library-like contracts.\\r\\n */\\r\\nabstract contract Context {\\r\\n    function _msgSender() internal view virtual returns (address) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view virtual returns (bytes calldata) {\\r\\n        return msg.data;\\r\\n    }\\r\\n}\\r\\n\\r\\n// File @openzeppelin/contracts/access/Ownable.sol@v4.6.0\\r\\n\\r\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Contract module which provides a basic access control mechanism, where\\r\\n * there is an account (an owner) that can be granted exclusive access to\\r\\n * specific functions.\\r\\n *\\r\\n * By default, the owner account will be the one that deploys the contract. This\\r\\n * can later be changed with {transferOwnership}.\\r\\n *\\r\\n * This module is used through inheritance. It will make available the modifier\\r\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\r\\n * the owner.\\r\\n */\\r\\nabstract contract Ownable is Context {\\r\\n    address private _owner;\\r\\n\\r\\n    event OwnershipTransferred(\\r\\n        address indexed previousOwner,\\r\\n        address indexed newOwner\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\r\\n     */\\r\\n    constructor() {\\r\\n        _transferOwnership(_msgSender());\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current owner.\\r\\n     */\\r\\n    function owner() public view virtual returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier onlyOwner() {\\r\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Leaves the contract without owner. It will not be possible to call\\r\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\r\\n     *\\r\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\r\\n     * thereby removing any functionality that is only available to the owner.\\r\\n     */\\r\\n    function renounceOwnership() public virtual onlyOwner {\\r\\n        _transferOwnership(address(0));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n        require(\\r\\n            newOwner != address(0),\\r\\n            \\\"Ownable: new owner is the zero address\\\"\\r\\n        );\\r\\n        _transferOwnership(newOwner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Internal function without access restriction.\\r\\n     */\\r\\n    function _transferOwnership(address newOwner) internal virtual {\\r\\n        address oldOwner = _owner;\\r\\n        _owner = newOwner;\\r\\n        emit OwnershipTransferred(oldOwner, newOwner);\\r\\n    }\\r\\n}\\r\\n\\r\\n// File @openzeppelin/contracts/utils/math/SafeMath.sol@v4.6.0\\r\\n\\r\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n// CAUTION\\r\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\r\\n// because it relies on the compiler's built in overflow checks.\\r\\n\\r\\n/**\\r\\n * @dev Wrappers over Solidity's arithmetic operations.\\r\\n *\\r\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\r\\n * now has built in overflow checking.\\r\\n */\\r\\nlibrary SafeMath {\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryAdd(\\r\\n        uint256 a,\\r\\n        uint256 b\\r\\n    ) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            uint256 c = a + b;\\r\\n            if (c < a) return (false, 0);\\r\\n            return (true, c);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function trySub(\\r\\n        uint256 a,\\r\\n        uint256 b\\r\\n    ) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            if (b > a) return (false, 0);\\r\\n            return (true, a - b);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryMul(\\r\\n        uint256 a,\\r\\n        uint256 b\\r\\n    ) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\r\\n            // benefit is lost if 'b' is also tested.\\r\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\r\\n            if (a == 0) return (true, 0);\\r\\n            uint256 c = a * b;\\r\\n            if (c / a != b) return (false, 0);\\r\\n            return (true, c);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryDiv(\\r\\n        uint256 a,\\r\\n        uint256 b\\r\\n    ) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            if (b == 0) return (false, 0);\\r\\n            return (true, a / b);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryMod(\\r\\n        uint256 a,\\r\\n        uint256 b\\r\\n    ) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            if (b == 0) return (false, 0);\\r\\n            return (true, a % b);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity's `+` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Addition cannot overflow.\\r\\n     */\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a + b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity's `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a - b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity's `*` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Multiplication cannot overflow.\\r\\n     */\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a * b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `/` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a / b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * reverting when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a % b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\r\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\r\\n     *\\r\\n     * Counterpart to Solidity's `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            require(b <= a, errorMessage);\\r\\n            return a - b;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            require(b > 0, errorMessage);\\r\\n            return a / b;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * reverting with custom message when dividing by zero.\\r\\n     *\\r\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\r\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\r\\n     *\\r\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            require(b > 0, errorMessage);\\r\\n            return a % b;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\n// File @openzeppelin/contracts/utils/Address.sol@v4.6.0\\r\\n\\r\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\r\\n\\r\\npragma solidity ^0.8.1;\\r\\n\\r\\n/**\\r\\n * @dev Collection of functions related to the address type\\r\\n */\\r\\nlibrary Address {\\r\\n    /**\\r\\n     * @dev Returns true if `account` is a contract.\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * It is unsafe to assume that an address for which this function returns\\r\\n     * false is an externally-owned account (EOA) and not a contract.\\r\\n     *\\r\\n     * Among others, `isContract` will return false for the following\\r\\n     * types of addresses:\\r\\n     *\\r\\n     *  - an externally-owned account\\r\\n     *  - a contract in construction\\r\\n     *  - an address where a contract will be created\\r\\n     *  - an address where a contract lived, but was destroyed\\r\\n     * ====\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\r\\n     *\\r\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\r\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\r\\n     * constructor.\\r\\n     * ====\\r\\n     */\\r\\n    function isContract(address account) internal view returns (bool) {\\r\\n        // This method relies on extcodesize/address.code.length, which returns 0\\r\\n        // for contracts in construction, since the code is only stored at the end\\r\\n        // of the constructor execution.\\r\\n\\r\\n        return account.code.length > 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\r\\n     * `recipient`, forwarding all available gas and reverting on errors.\\r\\n     *\\r\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\r\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\r\\n     * imposed by `transfer`, making them unable to receive funds via\\r\\n     * `transfer`. {sendValue} removes this limitation.\\r\\n     *\\r\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\r\\n     *\\r\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\r\\n     * taken to not create reentrancy vulnerabilities. Consider using\\r\\n     * {ReentrancyGuard} or the\\r\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\r\\n     */\\r\\n    function sendValue(address payable recipient, uint256 amount) internal {\\r\\n        require(\\r\\n            address(this).balance >= amount,\\r\\n            \\\"Address: insufficient balance\\\"\\r\\n        );\\r\\n\\r\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\r\\n        require(\\r\\n            success,\\r\\n            \\\"Address: unable to send value, recipient may have reverted\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Performs a Solidity function call using a low level `call`. A\\r\\n     * plain `call` is an unsafe replacement for a function call: use this\\r\\n     * function instead.\\r\\n     *\\r\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\r\\n     * function (like regular Solidity function calls).\\r\\n     *\\r\\n     * Returns the raw returned data. To convert to the expected return value,\\r\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `target` must be a contract.\\r\\n     * - calling `target` with `data` must not revert.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(\\r\\n        address target,\\r\\n        bytes memory data\\r\\n    ) internal returns (bytes memory) {\\r\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\r\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, 0, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but also transferring `value` wei to `target`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the calling contract must have an ETH balance of at least `value`.\\r\\n     * - the called Solidity function must be `payable`.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        uint256 value\\r\\n    ) internal returns (bytes memory) {\\r\\n        return\\r\\n            functionCallWithValue(\\r\\n                target,\\r\\n                data,\\r\\n                value,\\r\\n                \\\"Address: low-level call with value failed\\\"\\r\\n            );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\r\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        uint256 value,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        require(\\r\\n            address(this).balance >= value,\\r\\n            \\\"Address: insufficient balance for call\\\"\\r\\n        );\\r\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\r\\n\\r\\n        (bool success, bytes memory returndata) = target.call{value: value}(\\r\\n            data\\r\\n        );\\r\\n        return verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(\\r\\n        address target,\\r\\n        bytes memory data\\r\\n    ) internal view returns (bytes memory) {\\r\\n        return\\r\\n            functionStaticCall(\\r\\n                target,\\r\\n                data,\\r\\n                \\\"Address: low-level static call failed\\\"\\r\\n            );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal view returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\r\\n\\r\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\r\\n        return verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function functionDelegateCall(\\r\\n        address target,\\r\\n        bytes memory data\\r\\n    ) internal returns (bytes memory) {\\r\\n        return\\r\\n            functionDelegateCall(\\r\\n                target,\\r\\n                data,\\r\\n                \\\"Address: low-level delegate call failed\\\"\\r\\n            );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function functionDelegateCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\r\\n\\r\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\r\\n        return verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\r\\n     * revert reason using the provided one.\\r\\n     *\\r\\n     * _Available since v4.3._\\r\\n     */\\r\\n    function verifyCallResult(\\r\\n        bool success,\\r\\n        bytes memory returndata,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (bytes memory) {\\r\\n        if (success) {\\r\\n            return returndata;\\r\\n        } else {\\r\\n            // Look for revert reason and bubble it up if present\\r\\n            if (returndata.length > 0) {\\r\\n                // The easiest way to bubble the revert reason is using memory via assembly\\r\\n\\r\\n                assembly {\\r\\n                    let returndata_size := mload(returndata)\\r\\n                    revert(add(32, returndata), returndata_size)\\r\\n                }\\r\\n            } else {\\r\\n                revert(errorMessage);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\n// File @openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol@v4.6.0\\r\\n\\r\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @title SafeERC20\\r\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\r\\n * contract returns false). Tokens that return no value (and instead revert or\\r\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\r\\n * successful.\\r\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\r\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\r\\n */\\r\\nlibrary SafeERC20 {\\r\\n    using Address for address;\\r\\n\\r\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\r\\n        _callOptionalReturn(\\r\\n            token,\\r\\n            abi.encodeWithSelector(token.transfer.selector, to, value)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function safeTransferFrom(\\r\\n        IERC20 token,\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        _callOptionalReturn(\\r\\n            token,\\r\\n            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Deprecated. This function has issues similar to the ones found in\\r\\n     * {IERC20-approve}, and its usage is discouraged.\\r\\n     *\\r\\n     * Whenever possible, use {safeIncreaseAllowance} and\\r\\n     * {safeDecreaseAllowance} instead.\\r\\n     */\\r\\n    function safeApprove(\\r\\n        IERC20 token,\\r\\n        address spender,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        // safeApprove should only be called when setting an initial allowance,\\r\\n        // or when resetting it to zero. To increase and decrease it, use\\r\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\r\\n        require(\\r\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\r\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\r\\n        );\\r\\n        _callOptionalReturn(\\r\\n            token,\\r\\n            abi.encodeWithSelector(token.approve.selector, spender, value)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function safeIncreaseAllowance(\\r\\n        IERC20 token,\\r\\n        address spender,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\r\\n        _callOptionalReturn(\\r\\n            token,\\r\\n            abi.encodeWithSelector(\\r\\n                token.approve.selector,\\r\\n                spender,\\r\\n                newAllowance\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function safeDecreaseAllowance(\\r\\n        IERC20 token,\\r\\n        address spender,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        unchecked {\\r\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\r\\n            require(\\r\\n                oldAllowance >= value,\\r\\n                \\\"SafeERC20: decreased allowance below zero\\\"\\r\\n            );\\r\\n            uint256 newAllowance = oldAllowance - value;\\r\\n            _callOptionalReturn(\\r\\n                token,\\r\\n                abi.encodeWithSelector(\\r\\n                    token.approve.selector,\\r\\n                    spender,\\r\\n                    newAllowance\\r\\n                )\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\r\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\r\\n     * @param token The token targeted by the call.\\r\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\r\\n     */\\r\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\r\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\r\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\r\\n        // the target address contains contract code and also asserts for success in the low-level call.\\r\\n\\r\\n        bytes memory returndata = address(token).functionCall(\\r\\n            data,\\r\\n            \\\"SafeERC20: low-level call failed\\\"\\r\\n        );\\r\\n        if (returndata.length > 0) {\\r\\n            // Return data is optional\\r\\n            require(\\r\\n                abi.decode(returndata, (bool)),\\r\\n                \\\"SafeERC20: ERC20 operation did not succeed\\\"\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\n// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IRouter {\\r\\n    function swapExactTokensForTokens(\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256[] memory amounts);\\r\\n\\r\\n    function swapExactETHForTokens(\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external payable returns (uint256[] memory amounts);\\r\\n\\r\\n    function swapExactTokensForETH(\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256[] memory amounts);\\r\\n\\r\\n    function getAmountsOut(\\r\\n        uint256 amountIn,\\r\\n        address[] calldata path\\r\\n    ) external view returns (uint256[] memory amounts);\\r\\n}\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\n/// @title The interface for the PancakeSwap V3 Factory\\r\\n/// @notice The PancakeSwap V3 Factory facilitates creation of PancakeSwap V3 pools and control over the protocol fees\\r\\ninterface IPancakeV3Factory {\\r\\n    function getPool(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint24 fee\\r\\n    ) external view returns (address pool);\\r\\n}\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\ninterface IPancakeV3PoolState {\\r\\n    function slot0()\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            uint160 sqrtPriceX96,\\r\\n            int24 tick,\\r\\n            uint16 observationIndex,\\r\\n            uint16 observationCardinality,\\r\\n            uint16 observationCardinalityNext,\\r\\n            uint32 feeProtocol,\\r\\n            bool unlocked\\r\\n        );\\r\\n}\\r\\n\\r\\ninterface IPancakeV3PoolImmutables {\\r\\n    /// @notice The contract that deployed the pool, which must adhere to the IPancakeV3Factory interface\\r\\n    /// @return The contract address\\r\\n    function factory() external view returns (address);\\r\\n\\r\\n    /// @notice The first of the two tokens of the pool, sorted by address\\r\\n    /// @return The token contract address\\r\\n    function token0() external view returns (address);\\r\\n\\r\\n    /// @notice The second of the two tokens of the pool, sorted by address\\r\\n    /// @return The token contract address\\r\\n    function token1() external view returns (address);\\r\\n\\r\\n    /// @notice The pool's fee in hundredths of a bip, i.e. 1e-6\\r\\n    /// @return The fee\\r\\n    function fee() external view returns (uint24);\\r\\n\\r\\n    /// @notice The pool tick spacing\\r\\n    /// @dev Ticks can only be used at multiples of this value, minimum of 1 and always positive\\r\\n    /// e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ...\\r\\n    /// This value is an int24 to avoid casting even though it is always positive.\\r\\n    /// @return The tick spacing\\r\\n    function tickSpacing() external view returns (int24);\\r\\n\\r\\n    /// @notice The maximum amount of position liquidity that can use any tick in the range\\r\\n    /// @dev This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and\\r\\n    /// also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\\r\\n    /// @return The max amount of liquidity per tick\\r\\n    function maxLiquidityPerTick() external view returns (uint128);\\r\\n}\\r\\n\\r\\ninterface IPancakeV3Pool is IPancakeV3PoolState, IPancakeV3PoolImmutables {}\\r\\n\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\n/// @title Callback for IPancakeV3PoolActions#swap\\r\\n/// @notice Any contract that calls IPancakeV3PoolActions#swap must implement this interface\\r\\ninterface IPancakeV3SwapCallback {\\r\\n    /// @notice Called to `msg.sender` after executing a swap via IPancakeV3Pool#swap.\\r\\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\\r\\n    /// The caller of this method must be checked to be a PancakeV3Pool deployed by the canonical PancakeV3Factory.\\r\\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\\r\\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\\r\\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\\r\\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\\r\\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\\r\\n    /// @param data Any data passed through by the caller via the IPancakeV3PoolActions#swap call\\r\\n    function pancakeV3SwapCallback(\\r\\n        int256 amount0Delta,\\r\\n        int256 amount1Delta,\\r\\n        bytes calldata data\\r\\n    ) external;\\r\\n}\\r\\n\\r\\ninterface IV3SwapRouter is IPancakeV3SwapCallback {\\r\\n    struct ExactInputSingleParams {\\r\\n        address tokenIn;\\r\\n        address tokenOut;\\r\\n        uint24 fee;\\r\\n        address recipient;\\r\\n        uint256 amountIn;\\r\\n        uint256 amountOutMinimum;\\r\\n        uint160 sqrtPriceLimitX96;\\r\\n    }\\r\\n\\r\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\\r\\n    /// @dev Setting `amountIn` to 0 will cause the contract to look up its own balance,\\r\\n    /// and swap the entire amount, enabling contracts to send tokens before calling this function.\\r\\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\\r\\n    /// @return amountOut The amount of the received token\\r\\n    function exactInputSingle(\\r\\n        ExactInputSingleParams calldata params\\r\\n    ) external payable returns (uint256 amountOut);\\r\\n\\r\\n    struct ExactInputParams {\\r\\n        bytes path;\\r\\n        address recipient;\\r\\n        uint256 amountIn;\\r\\n        uint256 amountOutMinimum;\\r\\n    }\\r\\n\\r\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\\r\\n    /// @dev Setting `amountIn` to 0 will cause the contract to look up its own balance,\\r\\n    /// and swap the entire amount, enabling contracts to send tokens before calling this function.\\r\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\\r\\n    /// @return amountOut The amount of the received token\\r\\n    function exactInput(\\r\\n        ExactInputParams calldata params\\r\\n    ) external payable returns (uint256 amountOut);\\r\\n\\r\\n    struct ExactOutputSingleParams {\\r\\n        address tokenIn;\\r\\n        address tokenOut;\\r\\n        uint24 fee;\\r\\n        address recipient;\\r\\n        uint256 amountOut;\\r\\n        uint256 amountInMaximum;\\r\\n        uint160 sqrtPriceLimitX96;\\r\\n    }\\r\\n\\r\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\\r\\n    /// that may remain in the router after the swap.\\r\\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\\r\\n    /// @return amountIn The amount of the input token\\r\\n    function exactOutputSingle(\\r\\n        ExactOutputSingleParams calldata params\\r\\n    ) external payable returns (uint256 amountIn);\\r\\n\\r\\n    struct ExactOutputParams {\\r\\n        bytes path;\\r\\n        address recipient;\\r\\n        uint256 amountOut;\\r\\n        uint256 amountInMaximum;\\r\\n    }\\r\\n\\r\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\\r\\n    /// that may remain in the router after the swap.\\r\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\\r\\n    /// @return amountIn The amount of the input token\\r\\n    function exactOutput(\\r\\n        ExactOutputParams calldata params\\r\\n    ) external payable returns (uint256 amountIn);\\r\\n\\r\\n    function refundETH() external payable;\\r\\n}\\r\\n\\r\\ncontract Claimable is Ownable {\\r\\n    function claimToken(\\r\\n        address tokenAddress,\\r\\n        uint256 amount\\r\\n    ) external onlyOwner {\\r\\n        IERC20(tokenAddress).transfer(owner(), amount);\\r\\n    }\\r\\n\\r\\n    function claimETH(uint256 amount) external onlyOwner {\\r\\n        (bool sent, ) = owner().call{value: amount}(\\\"\\\");\\r\\n        require(sent, \\\"Failed to send Ether\\\");\\r\\n    }\\r\\n}\\r\\n\\r\\ncontract ProSwap is Claimable {\\r\\n    using SafeMath for uint256;\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    uint public feePercent = 0; //10:0.25%\\r\\n    uint256 public rewardAmount = 10000000000000000000; //10 to tokens\\r\\n\\r\\n    address public rewardAddress;\\r\\n    address public feeAccount;\\r\\n    address public router;\\r\\n    address public wavax;\\r\\n\\r\\n    address public routerAddress = 0x13f4EA83D0bd40E75C8222255bc855a974568Dd4;\\r\\n    address public factoryAddress = 0x0BFbCF9fa4f9C56B0F40a671Ad40E0805A091865;\\r\\n    address public wbnbAddress = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;\\r\\n    uint24 poolFee = 100;\\r\\n\\r\\n    mapping(address => uint256) airdropAddress;\\r\\n    mapping(address => uint256) airdropLastTime;\\r\\n\\r\\n    constructor(\\r\\n        address _feeAccount,\\r\\n        address _router,\\r\\n        address _wavax,\\r\\n        address _rewardAddress\\r\\n    ) {\\r\\n        feeAccount = _feeAccount;\\r\\n        router = _router;\\r\\n        wavax = _wavax;\\r\\n        rewardAddress = _rewardAddress;\\r\\n    }\\r\\n\\r\\n    function airdrop() external {\\r\\n        require(\\r\\n            airdropAddress[msg.sender] + 86400 > block.timestamp,\\r\\n            \\\"You did not swap in 24 hours\\\"\\r\\n        );\\r\\n\\r\\n        require(\\r\\n            block.timestamp > airdropLastTime[msg.sender] + 86400,\\r\\n            \\\"You airdroped in 24 hours\\\"\\r\\n        );\\r\\n\\r\\n        IERC20(rewardAddress).safeTransfer(msg.sender, rewardAmount);\\r\\n        airdropLastTime[msg.sender] = block.timestamp;\\r\\n    }\\r\\n\\r\\n    function swapV2Tokens(\\r\\n        address _tokenA,\\r\\n        address _tokenB,\\r\\n        uint256 _amountIn\\r\\n    ) external payable {\\r\\n        airdropAddress[msg.sender] = block.timestamp;\\r\\n        address[] memory path = new address[](2);\\r\\n        if (_tokenA == address(0)) {\\r\\n            path[0] = wavax;\\r\\n            path[1] = _tokenB;\\r\\n        } else if (_tokenB == address(0)) {\\r\\n            path[0] = _tokenA;\\r\\n            path[1] = wavax;\\r\\n        } else {\\r\\n            path[0] = _tokenA;\\r\\n            path[1] = _tokenB;\\r\\n        }\\r\\n\\r\\n        _proceedToUniswap(_tokenA, _tokenB, _amountIn, path);\\r\\n    }\\r\\n\\r\\n    function customSwapTokens(\\r\\n        address _tokenA,\\r\\n        address _tokenB,\\r\\n        uint256 _amountIn,\\r\\n        address[] memory path\\r\\n    ) external payable {\\r\\n        if (_tokenA == address(0)) {\\r\\n            require(\\r\\n                wavax == path[0] && _tokenB == path[path.length - 1],\\r\\n                \\\"PattieSwap: Path must be specified\\\"\\r\\n            );\\r\\n        } else if (_tokenB == address(0)) {\\r\\n            require(\\r\\n                _tokenA == path[0] && wavax == path[path.length - 1],\\r\\n                \\\"PattieSwap: Path must be specified\\\"\\r\\n            );\\r\\n        } else {\\r\\n            require(\\r\\n                _tokenA == path[0] && _tokenB == path[path.length - 1],\\r\\n                \\\"PattieSwap: Path must be specified\\\"\\r\\n            );\\r\\n        }\\r\\n        _proceedToUniswap(_tokenA, _tokenB, _amountIn, path);\\r\\n    }\\r\\n\\r\\n    function _proceedToUniswap(\\r\\n        address _tokenA,\\r\\n        address _tokenB,\\r\\n        uint256 _amountIn,\\r\\n        address[] memory path\\r\\n    ) internal {\\r\\n        require(_amountIn > 0, \\\"PattieSwap: amountIn must be greater than 0\\\");\\r\\n\\r\\n        if (_tokenA == address(0)) {\\r\\n            require(_amountIn >= msg.value, \\\"PattieSwap: Insufficient ETH\\\");\\r\\n            uint fee = (_amountIn * feePercent) / 10000;\\r\\n            payable(feeAccount).transfer(fee);\\r\\n            uint amountToSwap = _amountIn - fee;\\r\\n            _swapAVAXForTokens(amountToSwap, path);\\r\\n        } else {\\r\\n            IERC20(_tokenA).safeTransferFrom(\\r\\n                msg.sender,\\r\\n                address(this),\\r\\n                _amountIn\\r\\n            );\\r\\n            uint fee = (_amountIn * feePercent) / 10000;\\r\\n            IERC20(_tokenA).safeTransfer(feeAccount, fee);\\r\\n            uint amountToSwap = _amountIn - fee;\\r\\n            _approve(_tokenA, amountToSwap);\\r\\n            if (_tokenB == address(0)) {\\r\\n                _swapTokensForAVAX(amountToSwap, path);\\r\\n            } else {\\r\\n                _swapTokensForTokens(amountToSwap, path);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _approve(address _token, uint _amount) internal {\\r\\n        IERC20(_token).approve(address(router), _amount);\\r\\n    }\\r\\n\\r\\n    function _swapTokensForAVAX(uint _amount, address[] memory path) internal {\\r\\n        IRouter(router).swapExactTokensForETH(\\r\\n            _amount,\\r\\n            0,\\r\\n            path,\\r\\n            msg.sender,\\r\\n            block.timestamp\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function _swapAVAXForTokens(uint _amount, address[] memory path) internal {\\r\\n        IRouter(router).swapExactETHForTokens{value: _amount}(\\r\\n            0,\\r\\n            path,\\r\\n            msg.sender,\\r\\n            block.timestamp\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function _swapTokensForTokens(\\r\\n        uint _amount,\\r\\n        address[] memory path\\r\\n    ) internal {\\r\\n        IRouter(router).swapExactTokensForTokens(\\r\\n            _amount,\\r\\n            0,\\r\\n            path,\\r\\n            msg.sender,\\r\\n            block.timestamp\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function _v3Approve(address _token, uint _amount) internal {\\r\\n        IERC20(_token).approve(address(routerAddress), _amount);\\r\\n    }\\r\\n\\r\\n    function getOutputTokenAmount(\\r\\n        uint inputAmount,\\r\\n        address[] memory path\\r\\n    ) external view returns (uint outputAmount) {\\r\\n        uint[] memory outputs = IRouter(router).getAmountsOut(\\r\\n            inputAmount,\\r\\n            path\\r\\n        );\\r\\n        return outputs[outputs.length - 1];\\r\\n    }\\r\\n\\r\\n    function getV3OutputTokenAmount(\\r\\n        uint256 _inputAmount,\\r\\n        address _tokenIn,\\r\\n        address _tokenOut\\r\\n    ) external view returns (uint outputAmount) {\\r\\n        uint256 slotReturnValue = 0;\\r\\n        address pairAddress = IPancakeV3Factory(factoryAddress).getPool(\\r\\n            _tokenIn,\\r\\n            _tokenOut,\\r\\n            poolFee\\r\\n        );\\r\\n        (slotReturnValue, , , , , , ) = IPancakeV3PoolState(pairAddress)\\r\\n            .slot0();\\r\\n        address token0 = IPancakeV3Pool(pairAddress).token0();\\r\\n        if (_tokenIn == token0)\\r\\n            outputAmount = ((slotReturnValue ** 2 * _inputAmount) / 2 ** 192);\\r\\n        else outputAmount = ((2 ** 192 * _inputAmount) / slotReturnValue ** 2);\\r\\n    }\\r\\n\\r\\n    function setFeePercent(uint _feePercent) external onlyOwner {\\r\\n        feePercent = _feePercent;\\r\\n    }\\r\\n\\r\\n    function setRewardAmount(uint256 _amount) external onlyOwner {\\r\\n        rewardAmount = _amount;\\r\\n    }\\r\\n\\r\\n    function setRewardToken(address _rewawrdAddress) external onlyOwner {\\r\\n        rewardAddress = _rewawrdAddress;\\r\\n    }\\r\\n\\r\\n    function setFeeAccount(address _feeAccount) external onlyOwner {\\r\\n        feeAccount = _feeAccount;\\r\\n    }\\r\\n\\r\\n    function setRouterWAVAX(\\r\\n        address _router,\\r\\n        address _wavax\\r\\n    ) external onlyOwner {\\r\\n        router = _router;\\r\\n        wavax = _wavax;\\r\\n    }\\r\\n\\r\\n    function emergencyWithdraw(\\r\\n        address _token,\\r\\n        uint _amount\\r\\n    ) external onlyOwner {\\r\\n        IERC20(_token).safeTransfer(msg.sender, _amount);\\r\\n    }\\r\\n\\r\\n    function emergencyWithdrawETH(uint _amount) external onlyOwner {\\r\\n        payable(owner()).transfer(_amount);\\r\\n    }\\r\\n\\r\\n    function swapTokens(\\r\\n        address _tokenIn,\\r\\n        address _tokenOut,\\r\\n        uint256 _amountIn\\r\\n    ) external payable {\\r\\n        airdropAddress[msg.sender] = block.timestamp;\\r\\n        IV3SwapRouter.ExactInputSingleParams memory params = IV3SwapRouter\\r\\n            .ExactInputSingleParams(\\r\\n                _tokenIn,\\r\\n                _tokenOut,\\r\\n                poolFee,\\r\\n                msg.sender,\\r\\n                _amountIn,\\r\\n                0,\\r\\n                0\\r\\n            );\\r\\n        if (_tokenIn == wbnbAddress)\\r\\n            IV3SwapRouter(routerAddress).exactInputSingle{value: msg.value}(\\r\\n                params\\r\\n            );\\r\\n        else {\\r\\n            IERC20(_tokenIn).safeTransferFrom(\\r\\n                msg.sender,\\r\\n                address(this),\\r\\n                _amountIn\\r\\n            );\\r\\n            _v3Approve(_tokenIn, _amountIn);\\r\\n            IV3SwapRouter(routerAddress).exactInputSingle{value: msg.value}(\\r\\n                params\\r\\n            );\\r\\n        }\\r\\n        IV3SwapRouter(routerAddress).refundETH();\\r\\n        // refund leftover ETH to user\\r\\n        (bool success, ) = msg.sender.call{value: address(this).balance}(\\\"\\\");\\r\\n        require(success, \\\"refund failed\\\");\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x014ebbd50111dbe2ffd46bfee0dca5b1dbbc4785ff10cb323cef7317398427ea\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"exactInput((bytes,address,uint256,uint256))":{"notice":"Swaps `amountIn` of one token for as much as possible of another along the specified path"},"exactInputSingle((address,address,uint24,address,uint256,uint256,uint160))":{"notice":"Swaps `amountIn` of one token for as much as possible of another token"},"exactOutput((bytes,address,uint256,uint256))":{"notice":"Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed) that may remain in the router after the swap."},"exactOutputSingle((address,address,uint24,address,uint256,uint256,uint160))":{"notice":"Swaps as little as possible of one token for `amountOut` of another token that may remain in the router after the swap."},"pancakeV3SwapCallback(int256,int256,bytes)":{"notice":"Called to `msg.sender` after executing a swap via IPancakeV3Pool#swap."}},"version":1}},"Ownable":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.","kind":"dev","methods":{"constructor":{"details":"Initializes the contract setting the deployer as the initial owner."},"owner()":{"details":"Returns the address of the current owner."},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}},"version":1},"evm":{"bytecode":{"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"owner()":"8da5cb5b","renounceOwnership()":"715018a6","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Initializes the contract setting the deployer as the initial owner.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/swap.sol\":\"Ownable\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/swap.sol\":{\"content\":\"pragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\r\\n */\\r\\ninterface IERC20 {\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(\\r\\n        address indexed owner,\\r\\n        address indexed spender,\\r\\n        uint256 value\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address to, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(\\r\\n        address owner,\\r\\n        address spender\\r\\n    ) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender's allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller's\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n}\\r\\n\\r\\n// File @openzeppelin/contracts/utils/Context.sol@v4.6.0\\r\\n\\r\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Provides information about the current execution context, including the\\r\\n * sender of the transaction and its data. While these are generally available\\r\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\r\\n * manner, since when dealing with meta-transactions the account sending and\\r\\n * paying for execution may not be the actual sender (as far as an application\\r\\n * is concerned).\\r\\n *\\r\\n * This contract is only required for intermediate, library-like contracts.\\r\\n */\\r\\nabstract contract Context {\\r\\n    function _msgSender() internal view virtual returns (address) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view virtual returns (bytes calldata) {\\r\\n        return msg.data;\\r\\n    }\\r\\n}\\r\\n\\r\\n// File @openzeppelin/contracts/access/Ownable.sol@v4.6.0\\r\\n\\r\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Contract module which provides a basic access control mechanism, where\\r\\n * there is an account (an owner) that can be granted exclusive access to\\r\\n * specific functions.\\r\\n *\\r\\n * By default, the owner account will be the one that deploys the contract. This\\r\\n * can later be changed with {transferOwnership}.\\r\\n *\\r\\n * This module is used through inheritance. It will make available the modifier\\r\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\r\\n * the owner.\\r\\n */\\r\\nabstract contract Ownable is Context {\\r\\n    address private _owner;\\r\\n\\r\\n    event OwnershipTransferred(\\r\\n        address indexed previousOwner,\\r\\n        address indexed newOwner\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\r\\n     */\\r\\n    constructor() {\\r\\n        _transferOwnership(_msgSender());\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current owner.\\r\\n     */\\r\\n    function owner() public view virtual returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier onlyOwner() {\\r\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Leaves the contract without owner. It will not be possible to call\\r\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\r\\n     *\\r\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\r\\n     * thereby removing any functionality that is only available to the owner.\\r\\n     */\\r\\n    function renounceOwnership() public virtual onlyOwner {\\r\\n        _transferOwnership(address(0));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n        require(\\r\\n            newOwner != address(0),\\r\\n            \\\"Ownable: new owner is the zero address\\\"\\r\\n        );\\r\\n        _transferOwnership(newOwner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Internal function without access restriction.\\r\\n     */\\r\\n    function _transferOwnership(address newOwner) internal virtual {\\r\\n        address oldOwner = _owner;\\r\\n        _owner = newOwner;\\r\\n        emit OwnershipTransferred(oldOwner, newOwner);\\r\\n    }\\r\\n}\\r\\n\\r\\n// File @openzeppelin/contracts/utils/math/SafeMath.sol@v4.6.0\\r\\n\\r\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n// CAUTION\\r\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\r\\n// because it relies on the compiler's built in overflow checks.\\r\\n\\r\\n/**\\r\\n * @dev Wrappers over Solidity's arithmetic operations.\\r\\n *\\r\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\r\\n * now has built in overflow checking.\\r\\n */\\r\\nlibrary SafeMath {\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryAdd(\\r\\n        uint256 a,\\r\\n        uint256 b\\r\\n    ) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            uint256 c = a + b;\\r\\n            if (c < a) return (false, 0);\\r\\n            return (true, c);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function trySub(\\r\\n        uint256 a,\\r\\n        uint256 b\\r\\n    ) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            if (b > a) return (false, 0);\\r\\n            return (true, a - b);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryMul(\\r\\n        uint256 a,\\r\\n        uint256 b\\r\\n    ) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\r\\n            // benefit is lost if 'b' is also tested.\\r\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\r\\n            if (a == 0) return (true, 0);\\r\\n            uint256 c = a * b;\\r\\n            if (c / a != b) return (false, 0);\\r\\n            return (true, c);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryDiv(\\r\\n        uint256 a,\\r\\n        uint256 b\\r\\n    ) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            if (b == 0) return (false, 0);\\r\\n            return (true, a / b);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryMod(\\r\\n        uint256 a,\\r\\n        uint256 b\\r\\n    ) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            if (b == 0) return (false, 0);\\r\\n            return (true, a % b);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity's `+` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Addition cannot overflow.\\r\\n     */\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a + b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity's `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a - b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity's `*` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Multiplication cannot overflow.\\r\\n     */\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a * b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `/` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a / b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * reverting when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a % b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\r\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\r\\n     *\\r\\n     * Counterpart to Solidity's `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            require(b <= a, errorMessage);\\r\\n            return a - b;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            require(b > 0, errorMessage);\\r\\n            return a / b;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * reverting with custom message when dividing by zero.\\r\\n     *\\r\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\r\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\r\\n     *\\r\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            require(b > 0, errorMessage);\\r\\n            return a % b;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\n// File @openzeppelin/contracts/utils/Address.sol@v4.6.0\\r\\n\\r\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\r\\n\\r\\npragma solidity ^0.8.1;\\r\\n\\r\\n/**\\r\\n * @dev Collection of functions related to the address type\\r\\n */\\r\\nlibrary Address {\\r\\n    /**\\r\\n     * @dev Returns true if `account` is a contract.\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * It is unsafe to assume that an address for which this function returns\\r\\n     * false is an externally-owned account (EOA) and not a contract.\\r\\n     *\\r\\n     * Among others, `isContract` will return false for the following\\r\\n     * types of addresses:\\r\\n     *\\r\\n     *  - an externally-owned account\\r\\n     *  - a contract in construction\\r\\n     *  - an address where a contract will be created\\r\\n     *  - an address where a contract lived, but was destroyed\\r\\n     * ====\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\r\\n     *\\r\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\r\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\r\\n     * constructor.\\r\\n     * ====\\r\\n     */\\r\\n    function isContract(address account) internal view returns (bool) {\\r\\n        // This method relies on extcodesize/address.code.length, which returns 0\\r\\n        // for contracts in construction, since the code is only stored at the end\\r\\n        // of the constructor execution.\\r\\n\\r\\n        return account.code.length > 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\r\\n     * `recipient`, forwarding all available gas and reverting on errors.\\r\\n     *\\r\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\r\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\r\\n     * imposed by `transfer`, making them unable to receive funds via\\r\\n     * `transfer`. {sendValue} removes this limitation.\\r\\n     *\\r\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\r\\n     *\\r\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\r\\n     * taken to not create reentrancy vulnerabilities. Consider using\\r\\n     * {ReentrancyGuard} or the\\r\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\r\\n     */\\r\\n    function sendValue(address payable recipient, uint256 amount) internal {\\r\\n        require(\\r\\n            address(this).balance >= amount,\\r\\n            \\\"Address: insufficient balance\\\"\\r\\n        );\\r\\n\\r\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\r\\n        require(\\r\\n            success,\\r\\n            \\\"Address: unable to send value, recipient may have reverted\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Performs a Solidity function call using a low level `call`. A\\r\\n     * plain `call` is an unsafe replacement for a function call: use this\\r\\n     * function instead.\\r\\n     *\\r\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\r\\n     * function (like regular Solidity function calls).\\r\\n     *\\r\\n     * Returns the raw returned data. To convert to the expected return value,\\r\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `target` must be a contract.\\r\\n     * - calling `target` with `data` must not revert.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(\\r\\n        address target,\\r\\n        bytes memory data\\r\\n    ) internal returns (bytes memory) {\\r\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\r\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, 0, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but also transferring `value` wei to `target`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the calling contract must have an ETH balance of at least `value`.\\r\\n     * - the called Solidity function must be `payable`.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        uint256 value\\r\\n    ) internal returns (bytes memory) {\\r\\n        return\\r\\n            functionCallWithValue(\\r\\n                target,\\r\\n                data,\\r\\n                value,\\r\\n                \\\"Address: low-level call with value failed\\\"\\r\\n            );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\r\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        uint256 value,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        require(\\r\\n            address(this).balance >= value,\\r\\n            \\\"Address: insufficient balance for call\\\"\\r\\n        );\\r\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\r\\n\\r\\n        (bool success, bytes memory returndata) = target.call{value: value}(\\r\\n            data\\r\\n        );\\r\\n        return verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(\\r\\n        address target,\\r\\n        bytes memory data\\r\\n    ) internal view returns (bytes memory) {\\r\\n        return\\r\\n            functionStaticCall(\\r\\n                target,\\r\\n                data,\\r\\n                \\\"Address: low-level static call failed\\\"\\r\\n            );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal view returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\r\\n\\r\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\r\\n        return verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function functionDelegateCall(\\r\\n        address target,\\r\\n        bytes memory data\\r\\n    ) internal returns (bytes memory) {\\r\\n        return\\r\\n            functionDelegateCall(\\r\\n                target,\\r\\n                data,\\r\\n                \\\"Address: low-level delegate call failed\\\"\\r\\n            );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function functionDelegateCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\r\\n\\r\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\r\\n        return verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\r\\n     * revert reason using the provided one.\\r\\n     *\\r\\n     * _Available since v4.3._\\r\\n     */\\r\\n    function verifyCallResult(\\r\\n        bool success,\\r\\n        bytes memory returndata,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (bytes memory) {\\r\\n        if (success) {\\r\\n            return returndata;\\r\\n        } else {\\r\\n            // Look for revert reason and bubble it up if present\\r\\n            if (returndata.length > 0) {\\r\\n                // The easiest way to bubble the revert reason is using memory via assembly\\r\\n\\r\\n                assembly {\\r\\n                    let returndata_size := mload(returndata)\\r\\n                    revert(add(32, returndata), returndata_size)\\r\\n                }\\r\\n            } else {\\r\\n                revert(errorMessage);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\n// File @openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol@v4.6.0\\r\\n\\r\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @title SafeERC20\\r\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\r\\n * contract returns false). Tokens that return no value (and instead revert or\\r\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\r\\n * successful.\\r\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\r\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\r\\n */\\r\\nlibrary SafeERC20 {\\r\\n    using Address for address;\\r\\n\\r\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\r\\n        _callOptionalReturn(\\r\\n            token,\\r\\n            abi.encodeWithSelector(token.transfer.selector, to, value)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function safeTransferFrom(\\r\\n        IERC20 token,\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        _callOptionalReturn(\\r\\n            token,\\r\\n            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Deprecated. This function has issues similar to the ones found in\\r\\n     * {IERC20-approve}, and its usage is discouraged.\\r\\n     *\\r\\n     * Whenever possible, use {safeIncreaseAllowance} and\\r\\n     * {safeDecreaseAllowance} instead.\\r\\n     */\\r\\n    function safeApprove(\\r\\n        IERC20 token,\\r\\n        address spender,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        // safeApprove should only be called when setting an initial allowance,\\r\\n        // or when resetting it to zero. To increase and decrease it, use\\r\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\r\\n        require(\\r\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\r\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\r\\n        );\\r\\n        _callOptionalReturn(\\r\\n            token,\\r\\n            abi.encodeWithSelector(token.approve.selector, spender, value)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function safeIncreaseAllowance(\\r\\n        IERC20 token,\\r\\n        address spender,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\r\\n        _callOptionalReturn(\\r\\n            token,\\r\\n            abi.encodeWithSelector(\\r\\n                token.approve.selector,\\r\\n                spender,\\r\\n                newAllowance\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function safeDecreaseAllowance(\\r\\n        IERC20 token,\\r\\n        address spender,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        unchecked {\\r\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\r\\n            require(\\r\\n                oldAllowance >= value,\\r\\n                \\\"SafeERC20: decreased allowance below zero\\\"\\r\\n            );\\r\\n            uint256 newAllowance = oldAllowance - value;\\r\\n            _callOptionalReturn(\\r\\n                token,\\r\\n                abi.encodeWithSelector(\\r\\n                    token.approve.selector,\\r\\n                    spender,\\r\\n                    newAllowance\\r\\n                )\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\r\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\r\\n     * @param token The token targeted by the call.\\r\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\r\\n     */\\r\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\r\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\r\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\r\\n        // the target address contains contract code and also asserts for success in the low-level call.\\r\\n\\r\\n        bytes memory returndata = address(token).functionCall(\\r\\n            data,\\r\\n            \\\"SafeERC20: low-level call failed\\\"\\r\\n        );\\r\\n        if (returndata.length > 0) {\\r\\n            // Return data is optional\\r\\n            require(\\r\\n                abi.decode(returndata, (bool)),\\r\\n                \\\"SafeERC20: ERC20 operation did not succeed\\\"\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\n// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IRouter {\\r\\n    function swapExactTokensForTokens(\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256[] memory amounts);\\r\\n\\r\\n    function swapExactETHForTokens(\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external payable returns (uint256[] memory amounts);\\r\\n\\r\\n    function swapExactTokensForETH(\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256[] memory amounts);\\r\\n\\r\\n    function getAmountsOut(\\r\\n        uint256 amountIn,\\r\\n        address[] calldata path\\r\\n    ) external view returns (uint256[] memory amounts);\\r\\n}\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\n/// @title The interface for the PancakeSwap V3 Factory\\r\\n/// @notice The PancakeSwap V3 Factory facilitates creation of PancakeSwap V3 pools and control over the protocol fees\\r\\ninterface IPancakeV3Factory {\\r\\n    function getPool(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint24 fee\\r\\n    ) external view returns (address pool);\\r\\n}\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\ninterface IPancakeV3PoolState {\\r\\n    function slot0()\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            uint160 sqrtPriceX96,\\r\\n            int24 tick,\\r\\n            uint16 observationIndex,\\r\\n            uint16 observationCardinality,\\r\\n            uint16 observationCardinalityNext,\\r\\n            uint32 feeProtocol,\\r\\n            bool unlocked\\r\\n        );\\r\\n}\\r\\n\\r\\ninterface IPancakeV3PoolImmutables {\\r\\n    /// @notice The contract that deployed the pool, which must adhere to the IPancakeV3Factory interface\\r\\n    /// @return The contract address\\r\\n    function factory() external view returns (address);\\r\\n\\r\\n    /// @notice The first of the two tokens of the pool, sorted by address\\r\\n    /// @return The token contract address\\r\\n    function token0() external view returns (address);\\r\\n\\r\\n    /// @notice The second of the two tokens of the pool, sorted by address\\r\\n    /// @return The token contract address\\r\\n    function token1() external view returns (address);\\r\\n\\r\\n    /// @notice The pool's fee in hundredths of a bip, i.e. 1e-6\\r\\n    /// @return The fee\\r\\n    function fee() external view returns (uint24);\\r\\n\\r\\n    /// @notice The pool tick spacing\\r\\n    /// @dev Ticks can only be used at multiples of this value, minimum of 1 and always positive\\r\\n    /// e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ...\\r\\n    /// This value is an int24 to avoid casting even though it is always positive.\\r\\n    /// @return The tick spacing\\r\\n    function tickSpacing() external view returns (int24);\\r\\n\\r\\n    /// @notice The maximum amount of position liquidity that can use any tick in the range\\r\\n    /// @dev This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and\\r\\n    /// also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\\r\\n    /// @return The max amount of liquidity per tick\\r\\n    function maxLiquidityPerTick() external view returns (uint128);\\r\\n}\\r\\n\\r\\ninterface IPancakeV3Pool is IPancakeV3PoolState, IPancakeV3PoolImmutables {}\\r\\n\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\n/// @title Callback for IPancakeV3PoolActions#swap\\r\\n/// @notice Any contract that calls IPancakeV3PoolActions#swap must implement this interface\\r\\ninterface IPancakeV3SwapCallback {\\r\\n    /// @notice Called to `msg.sender` after executing a swap via IPancakeV3Pool#swap.\\r\\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\\r\\n    /// The caller of this method must be checked to be a PancakeV3Pool deployed by the canonical PancakeV3Factory.\\r\\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\\r\\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\\r\\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\\r\\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\\r\\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\\r\\n    /// @param data Any data passed through by the caller via the IPancakeV3PoolActions#swap call\\r\\n    function pancakeV3SwapCallback(\\r\\n        int256 amount0Delta,\\r\\n        int256 amount1Delta,\\r\\n        bytes calldata data\\r\\n    ) external;\\r\\n}\\r\\n\\r\\ninterface IV3SwapRouter is IPancakeV3SwapCallback {\\r\\n    struct ExactInputSingleParams {\\r\\n        address tokenIn;\\r\\n        address tokenOut;\\r\\n        uint24 fee;\\r\\n        address recipient;\\r\\n        uint256 amountIn;\\r\\n        uint256 amountOutMinimum;\\r\\n        uint160 sqrtPriceLimitX96;\\r\\n    }\\r\\n\\r\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\\r\\n    /// @dev Setting `amountIn` to 0 will cause the contract to look up its own balance,\\r\\n    /// and swap the entire amount, enabling contracts to send tokens before calling this function.\\r\\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\\r\\n    /// @return amountOut The amount of the received token\\r\\n    function exactInputSingle(\\r\\n        ExactInputSingleParams calldata params\\r\\n    ) external payable returns (uint256 amountOut);\\r\\n\\r\\n    struct ExactInputParams {\\r\\n        bytes path;\\r\\n        address recipient;\\r\\n        uint256 amountIn;\\r\\n        uint256 amountOutMinimum;\\r\\n    }\\r\\n\\r\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\\r\\n    /// @dev Setting `amountIn` to 0 will cause the contract to look up its own balance,\\r\\n    /// and swap the entire amount, enabling contracts to send tokens before calling this function.\\r\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\\r\\n    /// @return amountOut The amount of the received token\\r\\n    function exactInput(\\r\\n        ExactInputParams calldata params\\r\\n    ) external payable returns (uint256 amountOut);\\r\\n\\r\\n    struct ExactOutputSingleParams {\\r\\n        address tokenIn;\\r\\n        address tokenOut;\\r\\n        uint24 fee;\\r\\n        address recipient;\\r\\n        uint256 amountOut;\\r\\n        uint256 amountInMaximum;\\r\\n        uint160 sqrtPriceLimitX96;\\r\\n    }\\r\\n\\r\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\\r\\n    /// that may remain in the router after the swap.\\r\\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\\r\\n    /// @return amountIn The amount of the input token\\r\\n    function exactOutputSingle(\\r\\n        ExactOutputSingleParams calldata params\\r\\n    ) external payable returns (uint256 amountIn);\\r\\n\\r\\n    struct ExactOutputParams {\\r\\n        bytes path;\\r\\n        address recipient;\\r\\n        uint256 amountOut;\\r\\n        uint256 amountInMaximum;\\r\\n    }\\r\\n\\r\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\\r\\n    /// that may remain in the router after the swap.\\r\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\\r\\n    /// @return amountIn The amount of the input token\\r\\n    function exactOutput(\\r\\n        ExactOutputParams calldata params\\r\\n    ) external payable returns (uint256 amountIn);\\r\\n\\r\\n    function refundETH() external payable;\\r\\n}\\r\\n\\r\\ncontract Claimable is Ownable {\\r\\n    function claimToken(\\r\\n        address tokenAddress,\\r\\n        uint256 amount\\r\\n    ) external onlyOwner {\\r\\n        IERC20(tokenAddress).transfer(owner(), amount);\\r\\n    }\\r\\n\\r\\n    function claimETH(uint256 amount) external onlyOwner {\\r\\n        (bool sent, ) = owner().call{value: amount}(\\\"\\\");\\r\\n        require(sent, \\\"Failed to send Ether\\\");\\r\\n    }\\r\\n}\\r\\n\\r\\ncontract ProSwap is Claimable {\\r\\n    using SafeMath for uint256;\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    uint public feePercent = 0; //10:0.25%\\r\\n    uint256 public rewardAmount = 10000000000000000000; //10 to tokens\\r\\n\\r\\n    address public rewardAddress;\\r\\n    address public feeAccount;\\r\\n    address public router;\\r\\n    address public wavax;\\r\\n\\r\\n    address public routerAddress = 0x13f4EA83D0bd40E75C8222255bc855a974568Dd4;\\r\\n    address public factoryAddress = 0x0BFbCF9fa4f9C56B0F40a671Ad40E0805A091865;\\r\\n    address public wbnbAddress = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;\\r\\n    uint24 poolFee = 100;\\r\\n\\r\\n    mapping(address => uint256) airdropAddress;\\r\\n    mapping(address => uint256) airdropLastTime;\\r\\n\\r\\n    constructor(\\r\\n        address _feeAccount,\\r\\n        address _router,\\r\\n        address _wavax,\\r\\n        address _rewardAddress\\r\\n    ) {\\r\\n        feeAccount = _feeAccount;\\r\\n        router = _router;\\r\\n        wavax = _wavax;\\r\\n        rewardAddress = _rewardAddress;\\r\\n    }\\r\\n\\r\\n    function airdrop() external {\\r\\n        require(\\r\\n            airdropAddress[msg.sender] + 86400 > block.timestamp,\\r\\n            \\\"You did not swap in 24 hours\\\"\\r\\n        );\\r\\n\\r\\n        require(\\r\\n            block.timestamp > airdropLastTime[msg.sender] + 86400,\\r\\n            \\\"You airdroped in 24 hours\\\"\\r\\n        );\\r\\n\\r\\n        IERC20(rewardAddress).safeTransfer(msg.sender, rewardAmount);\\r\\n        airdropLastTime[msg.sender] = block.timestamp;\\r\\n    }\\r\\n\\r\\n    function swapV2Tokens(\\r\\n        address _tokenA,\\r\\n        address _tokenB,\\r\\n        uint256 _amountIn\\r\\n    ) external payable {\\r\\n        airdropAddress[msg.sender] = block.timestamp;\\r\\n        address[] memory path = new address[](2);\\r\\n        if (_tokenA == address(0)) {\\r\\n            path[0] = wavax;\\r\\n            path[1] = _tokenB;\\r\\n        } else if (_tokenB == address(0)) {\\r\\n            path[0] = _tokenA;\\r\\n            path[1] = wavax;\\r\\n        } else {\\r\\n            path[0] = _tokenA;\\r\\n            path[1] = _tokenB;\\r\\n        }\\r\\n\\r\\n        _proceedToUniswap(_tokenA, _tokenB, _amountIn, path);\\r\\n    }\\r\\n\\r\\n    function customSwapTokens(\\r\\n        address _tokenA,\\r\\n        address _tokenB,\\r\\n        uint256 _amountIn,\\r\\n        address[] memory path\\r\\n    ) external payable {\\r\\n        if (_tokenA == address(0)) {\\r\\n            require(\\r\\n                wavax == path[0] && _tokenB == path[path.length - 1],\\r\\n                \\\"PattieSwap: Path must be specified\\\"\\r\\n            );\\r\\n        } else if (_tokenB == address(0)) {\\r\\n            require(\\r\\n                _tokenA == path[0] && wavax == path[path.length - 1],\\r\\n                \\\"PattieSwap: Path must be specified\\\"\\r\\n            );\\r\\n        } else {\\r\\n            require(\\r\\n                _tokenA == path[0] && _tokenB == path[path.length - 1],\\r\\n                \\\"PattieSwap: Path must be specified\\\"\\r\\n            );\\r\\n        }\\r\\n        _proceedToUniswap(_tokenA, _tokenB, _amountIn, path);\\r\\n    }\\r\\n\\r\\n    function _proceedToUniswap(\\r\\n        address _tokenA,\\r\\n        address _tokenB,\\r\\n        uint256 _amountIn,\\r\\n        address[] memory path\\r\\n    ) internal {\\r\\n        require(_amountIn > 0, \\\"PattieSwap: amountIn must be greater than 0\\\");\\r\\n\\r\\n        if (_tokenA == address(0)) {\\r\\n            require(_amountIn >= msg.value, \\\"PattieSwap: Insufficient ETH\\\");\\r\\n            uint fee = (_amountIn * feePercent) / 10000;\\r\\n            payable(feeAccount).transfer(fee);\\r\\n            uint amountToSwap = _amountIn - fee;\\r\\n            _swapAVAXForTokens(amountToSwap, path);\\r\\n        } else {\\r\\n            IERC20(_tokenA).safeTransferFrom(\\r\\n                msg.sender,\\r\\n                address(this),\\r\\n                _amountIn\\r\\n            );\\r\\n            uint fee = (_amountIn * feePercent) / 10000;\\r\\n            IERC20(_tokenA).safeTransfer(feeAccount, fee);\\r\\n            uint amountToSwap = _amountIn - fee;\\r\\n            _approve(_tokenA, amountToSwap);\\r\\n            if (_tokenB == address(0)) {\\r\\n                _swapTokensForAVAX(amountToSwap, path);\\r\\n            } else {\\r\\n                _swapTokensForTokens(amountToSwap, path);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _approve(address _token, uint _amount) internal {\\r\\n        IERC20(_token).approve(address(router), _amount);\\r\\n    }\\r\\n\\r\\n    function _swapTokensForAVAX(uint _amount, address[] memory path) internal {\\r\\n        IRouter(router).swapExactTokensForETH(\\r\\n            _amount,\\r\\n            0,\\r\\n            path,\\r\\n            msg.sender,\\r\\n            block.timestamp\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function _swapAVAXForTokens(uint _amount, address[] memory path) internal {\\r\\n        IRouter(router).swapExactETHForTokens{value: _amount}(\\r\\n            0,\\r\\n            path,\\r\\n            msg.sender,\\r\\n            block.timestamp\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function _swapTokensForTokens(\\r\\n        uint _amount,\\r\\n        address[] memory path\\r\\n    ) internal {\\r\\n        IRouter(router).swapExactTokensForTokens(\\r\\n            _amount,\\r\\n            0,\\r\\n            path,\\r\\n            msg.sender,\\r\\n            block.timestamp\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function _v3Approve(address _token, uint _amount) internal {\\r\\n        IERC20(_token).approve(address(routerAddress), _amount);\\r\\n    }\\r\\n\\r\\n    function getOutputTokenAmount(\\r\\n        uint inputAmount,\\r\\n        address[] memory path\\r\\n    ) external view returns (uint outputAmount) {\\r\\n        uint[] memory outputs = IRouter(router).getAmountsOut(\\r\\n            inputAmount,\\r\\n            path\\r\\n        );\\r\\n        return outputs[outputs.length - 1];\\r\\n    }\\r\\n\\r\\n    function getV3OutputTokenAmount(\\r\\n        uint256 _inputAmount,\\r\\n        address _tokenIn,\\r\\n        address _tokenOut\\r\\n    ) external view returns (uint outputAmount) {\\r\\n        uint256 slotReturnValue = 0;\\r\\n        address pairAddress = IPancakeV3Factory(factoryAddress).getPool(\\r\\n            _tokenIn,\\r\\n            _tokenOut,\\r\\n            poolFee\\r\\n        );\\r\\n        (slotReturnValue, , , , , , ) = IPancakeV3PoolState(pairAddress)\\r\\n            .slot0();\\r\\n        address token0 = IPancakeV3Pool(pairAddress).token0();\\r\\n        if (_tokenIn == token0)\\r\\n            outputAmount = ((slotReturnValue ** 2 * _inputAmount) / 2 ** 192);\\r\\n        else outputAmount = ((2 ** 192 * _inputAmount) / slotReturnValue ** 2);\\r\\n    }\\r\\n\\r\\n    function setFeePercent(uint _feePercent) external onlyOwner {\\r\\n        feePercent = _feePercent;\\r\\n    }\\r\\n\\r\\n    function setRewardAmount(uint256 _amount) external onlyOwner {\\r\\n        rewardAmount = _amount;\\r\\n    }\\r\\n\\r\\n    function setRewardToken(address _rewawrdAddress) external onlyOwner {\\r\\n        rewardAddress = _rewawrdAddress;\\r\\n    }\\r\\n\\r\\n    function setFeeAccount(address _feeAccount) external onlyOwner {\\r\\n        feeAccount = _feeAccount;\\r\\n    }\\r\\n\\r\\n    function setRouterWAVAX(\\r\\n        address _router,\\r\\n        address _wavax\\r\\n    ) external onlyOwner {\\r\\n        router = _router;\\r\\n        wavax = _wavax;\\r\\n    }\\r\\n\\r\\n    function emergencyWithdraw(\\r\\n        address _token,\\r\\n        uint _amount\\r\\n    ) external onlyOwner {\\r\\n        IERC20(_token).safeTransfer(msg.sender, _amount);\\r\\n    }\\r\\n\\r\\n    function emergencyWithdrawETH(uint _amount) external onlyOwner {\\r\\n        payable(owner()).transfer(_amount);\\r\\n    }\\r\\n\\r\\n    function swapTokens(\\r\\n        address _tokenIn,\\r\\n        address _tokenOut,\\r\\n        uint256 _amountIn\\r\\n    ) external payable {\\r\\n        airdropAddress[msg.sender] = block.timestamp;\\r\\n        IV3SwapRouter.ExactInputSingleParams memory params = IV3SwapRouter\\r\\n            .ExactInputSingleParams(\\r\\n                _tokenIn,\\r\\n                _tokenOut,\\r\\n                poolFee,\\r\\n                msg.sender,\\r\\n                _amountIn,\\r\\n                0,\\r\\n                0\\r\\n            );\\r\\n        if (_tokenIn == wbnbAddress)\\r\\n            IV3SwapRouter(routerAddress).exactInputSingle{value: msg.value}(\\r\\n                params\\r\\n            );\\r\\n        else {\\r\\n            IERC20(_tokenIn).safeTransferFrom(\\r\\n                msg.sender,\\r\\n                address(this),\\r\\n                _amountIn\\r\\n            );\\r\\n            _v3Approve(_tokenIn, _amountIn);\\r\\n            IV3SwapRouter(routerAddress).exactInputSingle{value: msg.value}(\\r\\n                params\\r\\n            );\\r\\n        }\\r\\n        IV3SwapRouter(routerAddress).refundETH();\\r\\n        // refund leftover ETH to user\\r\\n        (bool success, ) = msg.sender.call{value: address(this).balance}(\\\"\\\");\\r\\n        require(success, \\\"refund failed\\\");\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x014ebbd50111dbe2ffd46bfee0dca5b1dbbc4785ff10cb323cef7317398427ea\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":795,"contract":"contracts/swap.sol:Ownable","label":"_owner","offset":0,"slot":"0","type":"t_address"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"}}},"userdoc":{"kind":"user","methods":{},"version":1}},"ProSwap":{"abi":[{"inputs":[{"internalType":"address","name":"_feeAccount","type":"address"},{"internalType":"address","name":"_router","type":"address"},{"internalType":"address","name":"_wavax","type":"address"},{"internalType":"address","name":"_rewardAddress","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[],"name":"airdrop","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"claimETH","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"tokenAddress","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"claimToken","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_tokenA","type":"address"},{"internalType":"address","name":"_tokenB","type":"address"},{"internalType":"uint256","name":"_amountIn","type":"uint256"},{"internalType":"address[]","name":"path","type":"address[]"}],"name":"customSwapTokens","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"_token","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"emergencyWithdraw","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"emergencyWithdrawETH","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"factoryAddress","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"feeAccount","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"feePercent","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"inputAmount","type":"uint256"},{"internalType":"address[]","name":"path","type":"address[]"}],"name":"getOutputTokenAmount","outputs":[{"internalType":"uint256","name":"outputAmount","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_inputAmount","type":"uint256"},{"internalType":"address","name":"_tokenIn","type":"address"},{"internalType":"address","name":"_tokenOut","type":"address"}],"name":"getV3OutputTokenAmount","outputs":[{"internalType":"uint256","name":"outputAmount","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"rewardAddress","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"rewardAmount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"router","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"routerAddress","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_feeAccount","type":"address"}],"name":"setFeeAccount","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_feePercent","type":"uint256"}],"name":"setFeePercent","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"setRewardAmount","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_rewawrdAddress","type":"address"}],"name":"setRewardToken","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_router","type":"address"},{"internalType":"address","name":"_wavax","type":"address"}],"name":"setRouterWAVAX","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_tokenIn","type":"address"},{"internalType":"address","name":"_tokenOut","type":"address"},{"internalType":"uint256","name":"_amountIn","type":"uint256"}],"name":"swapTokens","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"_tokenA","type":"address"},{"internalType":"address","name":"_tokenB","type":"address"},{"internalType":"uint256","name":"_amountIn","type":"uint256"}],"name":"swapV2Tokens","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"wavax","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"wbnbAddress","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{"owner()":{"details":"Returns the address of the current owner."},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}},"version":1},"evm":{"bytecode":{"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:672:3","statements":[{"nodeType":"YulBlock","src":"6:3:3","statements":[]},{"body":{"nodeType":"YulBlock","src":"74:117:3","statements":[{"nodeType":"YulAssignment","src":"84:22:3","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"99:6:3"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"93:5:3"},"nodeType":"YulFunctionCall","src":"93:13:3"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"84:5:3"}]},{"body":{"nodeType":"YulBlock","src":"169:16:3","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"178:1:3","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"181:1:3","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"171:6:3"},"nodeType":"YulFunctionCall","src":"171:12:3"},"nodeType":"YulExpressionStatement","src":"171:12:3"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"128:5:3"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"139:5:3"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"154:3:3","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"159:1:3","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"150:3:3"},"nodeType":"YulFunctionCall","src":"150:11:3"},{"kind":"number","nodeType":"YulLiteral","src":"163:1:3","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"146:3:3"},"nodeType":"YulFunctionCall","src":"146:19:3"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"135:3:3"},"nodeType":"YulFunctionCall","src":"135:31:3"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"125:2:3"},"nodeType":"YulFunctionCall","src":"125:42:3"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"118:6:3"},"nodeType":"YulFunctionCall","src":"118:50:3"},"nodeType":"YulIf","src":"115:2:3"}]},"name":"abi_decode_address_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"53:6:3","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"64:5:3","type":""}],"src":"14:177:3"},{"body":{"nodeType":"YulBlock","src":"328:342:3","statements":[{"body":{"nodeType":"YulBlock","src":"375:26:3","statements":[{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"384:6:3"},{"name":"value0","nodeType":"YulIdentifier","src":"392:6:3"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"377:6:3"},"nodeType":"YulFunctionCall","src":"377:22:3"},"nodeType":"YulExpressionStatement","src":"377:22:3"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"349:7:3"},{"name":"headStart","nodeType":"YulIdentifier","src":"358:9:3"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"345:3:3"},"nodeType":"YulFunctionCall","src":"345:23:3"},{"kind":"number","nodeType":"YulLiteral","src":"370:3:3","type":"","value":"128"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"341:3:3"},"nodeType":"YulFunctionCall","src":"341:33:3"},"nodeType":"YulIf","src":"338:2:3"},{"nodeType":"YulAssignment","src":"410:50:3","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"450:9:3"}],"functionName":{"name":"abi_decode_address_fromMemory","nodeType":"YulIdentifier","src":"420:29:3"},"nodeType":"YulFunctionCall","src":"420:40:3"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"410:6:3"}]},{"nodeType":"YulAssignment","src":"469:59:3","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"513:9:3"},{"kind":"number","nodeType":"YulLiteral","src":"524:2:3","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"509:3:3"},"nodeType":"YulFunctionCall","src":"509:18:3"}],"functionName":{"name":"abi_decode_address_fromMemory","nodeType":"YulIdentifier","src":"479:29:3"},"nodeType":"YulFunctionCall","src":"479:49:3"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"469:6:3"}]},{"nodeType":"YulAssignment","src":"537:59:3","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"581:9:3"},{"kind":"number","nodeType":"YulLiteral","src":"592:2:3","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"577:3:3"},"nodeType":"YulFunctionCall","src":"577:18:3"}],"functionName":{"name":"abi_decode_address_fromMemory","nodeType":"YulIdentifier","src":"547:29:3"},"nodeType":"YulFunctionCall","src":"547:49:3"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"537:6:3"}]},{"nodeType":"YulAssignment","src":"605:59:3","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"649:9:3"},{"kind":"number","nodeType":"YulLiteral","src":"660:2:3","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"645:3:3"},"nodeType":"YulFunctionCall","src":"645:18:3"}],"functionName":{"name":"abi_decode_address_fromMemory","nodeType":"YulIdentifier","src":"615:29:3"},"nodeType":"YulFunctionCall","src":"615:49:3"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"605:6:3"}]}]},"name":"abi_decode_tuple_t_addresst_addresst_addresst_address_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"270:9:3","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"281:7:3","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"293:6:3","type":""},{"name":"value1","nodeType":"YulTypedName","src":"301:6:3","type":""},{"name":"value2","nodeType":"YulTypedName","src":"309:6:3","type":""},{"name":"value3","nodeType":"YulTypedName","src":"317:6:3","type":""}],"src":"196:474:3"}]},"contents":"{\n    { }\n    function abi_decode_address_fromMemory(offset) -> value\n    {\n        value := mload(offset)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_addresst_addresst_addresst_address_fromMemory(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 128) { revert(value0, value0) }\n        value0 := abi_decode_address_fromMemory(headStart)\n        value1 := abi_decode_address_fromMemory(add(headStart, 32))\n        value2 := abi_decode_address_fromMemory(add(headStart, 64))\n        value3 := abi_decode_address_fromMemory(add(headStart, 96))\n    }\n}","id":3,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"60806040526000600155678ac7230489e80000600255600780546001600160a01b03199081167313f4ea83d0bd40e75c8222255bc855a974568dd41790915560088054909116730bfbcf9fa4f9c56b0f40a671ad40e0805a091865179055600980547464bb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c6001600160b81b03199091161790553480156200009357600080fd5b50604051620024a7380380620024a7833981016040819052620000b69162000182565b620000c13362000115565b600480546001600160a01b039586166001600160a01b0319918216179091556005805494861694821694909417909355600680549285169284169290921790915560038054919093169116179055620001de565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80516001600160a01b03811681146200017d57600080fd5b919050565b6000806000806080858703121562000198578384fd5b620001a38562000165565b9350620001b36020860162000165565b9250620001c36040860162000165565b9150620001d36060860162000165565b905092959194509250565b6122b980620001ee6000396000f3fe60806040526004361061019c5760003560e01c80638cf57cb9116100ec578063c36c557f1161008a578063f2fde38b11610064578063f2fde38b14610465578063f7b2a7be14610485578063f887ea401461049b578063fe96973a146104bb57600080fd5b8063c36c557f14610412578063d654e9a414610432578063ec6cc0cc1461045257600080fd5b8063966dae0e116100c6578063966dae0e1461039f5780639cf355ad146103bf5780639de2827b146103df578063a8a65a78146103f257600080fd5b80638cf57cb9146103415780638da5cb5b1461036157806395ccea671461037f57600080fd5b806363fe3e3a11610159578063715018a611610133578063715018a6146102c85780637ce3489b146102dd5780637fd6f15c146102fd5780638aee81271461032157600080fd5b806363fe3e3a1461026857806365e17c9d146102885780636b792c4b146102a857600080fd5b8063117be4c2146101a15780631698755f146101de5780633268cc56146102005780633884d635146102205780634b023cf8146102355780634ce222da14610255575b600080fd5b3480156101ad57600080fd5b506006546101c1906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b3480156101ea57600080fd5b506101fe6101f9366004611c4c565b6104db565b005b34801561020c57600080fd5b506007546101c1906001600160a01b031681565b34801561022c57600080fd5b506101fe6105b5565b34801561024157600080fd5b506101fe610250366004611b32565b6106bd565b6101fe610263366004611ba2565b610709565b34801561027457600080fd5b506009546101c1906001600160a01b031681565b34801561029457600080fd5b506004546101c1906001600160a01b031681565b3480156102b457600080fd5b506101fe6102c3366004611dbe565b6108e8565b3480156102d457600080fd5b506101fe61094f565b3480156102e957600080fd5b506101fe6102f8366004611dbe565b610985565b34801561030957600080fd5b5061031360015481565b6040519081526020016101d5565b34801561032d57600080fd5b506101fe61033c366004611b32565b6109b4565b34801561034d57600080fd5b506003546101c1906001600160a01b031681565b34801561036d57600080fd5b506000546001600160a01b03166101c1565b34801561038b57600080fd5b506101fe61039a366004611c4c565b610a00565b3480156103ab57600080fd5b506008546101c1906001600160a01b031681565b3480156103cb57600080fd5b506101fe6103da366004611b6a565b610a3e565b6101fe6103ed366004611be2565b610a96565b3480156103fe57600080fd5b506101fe61040d366004611dbe565b610cb4565b34801561041e57600080fd5b5061031361042d366004611dee565b610ce3565b34801561043e57600080fd5b5061031361044d366004611e2f565b610ef4565b6101fe610460366004611ba2565b610fc0565b34801561047157600080fd5b506101fe610480366004611b32565b61125b565b34801561049157600080fd5b5061031360025481565b3480156104a757600080fd5b506005546101c1906001600160a01b031681565b3480156104c757600080fd5b506101fe6104d6366004611dbe565b6112f6565b6000546001600160a01b0316331461050e5760405162461bcd60e51b815260040161050590611f7d565b60405180910390fd5b816001600160a01b031663a9059cbb61052f6000546001600160a01b031690565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602481018490526044015b602060405180830381600087803b15801561057857600080fd5b505af115801561058c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105b09190611d0a565b505050565b336000908152600a602052604090205442906105d490620151806120ba565b116106215760405162461bcd60e51b815260206004820152601c60248201527f596f7520646964206e6f74207377617020696e20323420686f757273000000006044820152606401610505565b336000908152600b602052604090205461063e90620151806120ba565b421161068c5760405162461bcd60e51b815260206004820152601960248201527f596f752061697264726f70656420696e20323420686f757273000000000000006044820152606401610505565b6002546003546106a9916001600160a01b039091169033906113ba565b336000908152600b60205260409020429055565b6000546001600160a01b031633146106e75760405162461bcd60e51b815260040161050590611f7d565b600480546001600160a01b0319166001600160a01b0392909216919091179055565b336000908152600a60205260408082204290558051600280825260608201909252908160200160208202803683370190505090506001600160a01b0384166107e25760065481516001600160a01b0390911690829060009061077b57634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b03168152505082816001815181106107bd57634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b0316815250506108d6565b6001600160a01b03831661085157838160008151811061081257634e487b7160e01b600052603260045260246000fd5b6001600160a01b0392831660209182029290920101526006548251911690829060019081106107bd57634e487b7160e01b600052603260045260246000fd5b838160008151811061087357634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b03168152505082816001815181106108b557634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b0316815250505b6108e28484848461141d565b50505050565b6000546001600160a01b031633146109125760405162461bcd60e51b815260040161050590611f7d565b600080546040516001600160a01b039091169183156108fc02918491818181858888f1935050505015801561094b573d6000803e3d6000fd5b5050565b6000546001600160a01b031633146109795760405162461bcd60e51b815260040161050590611f7d565b61098360006115ed565b565b6000546001600160a01b031633146109af5760405162461bcd60e51b815260040161050590611f7d565b600155565b6000546001600160a01b031633146109de5760405162461bcd60e51b815260040161050590611f7d565b600380546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b03163314610a2a5760405162461bcd60e51b815260040161050590611f7d565b61094b6001600160a01b03831633836113ba565b6000546001600160a01b03163314610a685760405162461bcd60e51b815260040161050590611f7d565b600580546001600160a01b039384166001600160a01b03199182161790915560068054929093169116179055565b6001600160a01b038416610b535780600081518110610ac557634e487b7160e01b600052603260045260246000fd5b60209081029190910101516006546001600160a01b039081169116148015610b3257508060018251610af791906121ff565b81518110610b1557634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b0316836001600160a01b0316145b610b4e5760405162461bcd60e51b815260040161050590611f3b565b6108d6565b6001600160a01b038316610c0a5780600081518110610b8257634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b0316846001600160a01b0316148015610b3257508060018251610bb491906121ff565b81518110610bd257634e487b7160e01b600052603260045260246000fd5b60209081029190910101516006546001600160a01b03908116911614610b4e5760405162461bcd60e51b815260040161050590611f3b565b80600081518110610c2b57634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b0316846001600160a01b0316148015610c9857508060018251610c5d91906121ff565b81518110610c7b57634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b0316836001600160a01b0316145b6108d65760405162461bcd60e51b815260040161050590611f3b565b6000546001600160a01b03163314610cde5760405162461bcd60e51b815260040161050590611f7d565b600255565b600854600954604051630b4c774160e11b81526001600160a01b0385811660048301528481166024830152600160a01b90920462ffffff16604482015260009283928392911690631698ee829060640160206040518083038186803b158015610d4b57600080fd5b505afa158015610d5f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d839190611b4e565b9050806001600160a01b0316633850c7bd6040518163ffffffff1660e01b815260040160e06040518083038186803b158015610dbe57600080fd5b505afa158015610dd2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610df69190611d24565b505060408051630dfe168160e01b815290516001600160a01b03968716985060009688169550630dfe1681945060048083019450602093509091829003018186803b158015610e4457600080fd5b505afa158015610e58573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e7c9190611b4e565b9050806001600160a01b0316866001600160a01b03161415610ec457600160c01b87610ea9600286612135565b610eb391906121e0565b610ebd91906120d2565b9350610eea565b610ecf600284612135565b610edd88600160c01b6121e0565b610ee791906120d2565b93505b5050509392505050565b60055460405163d06ca61f60e01b815260009182916001600160a01b039091169063d06ca61f90610f2b9087908790600401612010565b60006040518083038186803b158015610f4357600080fd5b505afa158015610f57573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610f7f9190810190611c77565b90508060018251610f9091906121ff565b81518110610fae57634e487b7160e01b600052603260045260246000fd5b60200260200101519150505b92915050565b336000818152600a60209081526040808320429055805160e0810182526001600160a01b038881168083528882169483019490945260095462ffffff600160a01b8204169383019390935260608201959095526080810186905260a0810184905260c081019390935291929190911614156110bf576007546040516304e45aaf60e01b81526001600160a01b03909116906304e45aaf903490611067908590600401611fb2565b6020604051808303818588803b15801561108057600080fd5b505af1158015611094573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906110b99190611dd6565b50611164565b6110d46001600160a01b03851633308561163d565b6110de8483611675565b6007546040516304e45aaf60e01b81526001600160a01b03909116906304e45aaf903490611110908590600401611fb2565b6020604051808303818588803b15801561112957600080fd5b505af115801561113d573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906111629190611dd6565b505b600760009054906101000a90046001600160a01b03166001600160a01b03166312210e8a6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156111b457600080fd5b505af11580156111c8573d6000803e3d6000fd5b50506040516000925033915047908381818185875af1925050503d806000811461120e576040519150601f19603f3d011682016040523d82523d6000602084013e611213565b606091505b50509050806112545760405162461bcd60e51b815260206004820152600d60248201526c1c99599d5b990819985a5b1959609a1b6044820152606401610505565b5050505050565b6000546001600160a01b031633146112855760405162461bcd60e51b815260040161050590611f7d565b6001600160a01b0381166112ea5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610505565b6112f3816115ed565b50565b6000546001600160a01b031633146113205760405162461bcd60e51b815260040161050590611f7d565b600080546040516001600160a01b039091169083908381818185875af1925050503d806000811461136d576040519150601f19603f3d011682016040523d82523d6000602084013e611372565b606091505b505090508061094b5760405162461bcd60e51b81526020600482015260146024820152732330b4b632b2103a379039b2b7321022ba3432b960611b6044820152606401610505565b6040516001600160a01b0383166024820152604481018290526105b090849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526116ae565b600082116114815760405162461bcd60e51b815260206004820152602b60248201527f506174746965537761703a20616d6f756e74496e206d7573742062652067726560448201526a061746572207468616e20360ac1b6064820152608401610505565b6001600160a01b03841661155757348210156114df5760405162461bcd60e51b815260206004820152601c60248201527f506174746965537761703a20496e73756666696369656e7420455448000000006044820152606401610505565b6000612710600154846114f291906121e0565b6114fc91906120d2565b6004546040519192506001600160a01b03169082156108fc029083906000818181858888f19350505050158015611537573d6000803e3d6000fd5b50600061154482856121ff565b90506115508184611780565b50506108e2565b61156c6001600160a01b03851633308561163d565b60006127106001548461157f91906121e0565b61158991906120d2565b6004549091506115a6906001600160a01b038781169116836113ba565b60006115b282856121ff565b90506115be868261180f565b6001600160a01b0385166115db576115d68184611848565b6115e5565b6115e581846118d7565b505050505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6040516001600160a01b03808516602483015283166044820152606481018290526108e29085906323b872dd60e01b906084016113e6565b60075460405163095ea7b360e01b81526001600160a01b039182166004820152602481018390529083169063095ea7b39060440161055e565b6000611703826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166119109092919063ffffffff16565b8051909150156105b057808060200190518101906117219190611d0a565b6105b05760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610505565b600554604051637ff36ab560e01b81526001600160a01b0390911690637ff36ab59084906117b990600090869033904290600401611ed3565b6000604051808303818588803b1580156117d257600080fd5b505af11580156117e6573d6000803e3d6000fd5b50505050506040513d6000823e601f3d908101601f191682016040526105b09190810190611c77565b60055460405163095ea7b360e01b81526001600160a01b039182166004820152602481018390529083169063095ea7b39060440161055e565b6005546040516318cbafe560e01b81526001600160a01b03909116906318cbafe590611881908590600090869033904290600401612029565b600060405180830381600087803b15801561189b57600080fd5b505af11580156118af573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526105b09190810190611c77565b6005546040516338ed173960e01b81526001600160a01b03909116906338ed173990611881908590600090869033904290600401612029565b606061191f8484600085611929565b90505b9392505050565b60608247101561198a5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610505565b6001600160a01b0385163b6119e15760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610505565b600080866001600160a01b031685876040516119fd9190611eb7565b60006040518083038185875af1925050503d8060008114611a3a576040519150601f19603f3d011682016040523d82523d6000602084013e611a3f565b606091505b5091509150611a4f828286611a5a565b979650505050505050565b60608315611a69575081611922565b825115611a795782518084602001fd5b8160405162461bcd60e51b81526004016105059190611f08565b600082601f830112611aa3578081fd5b81356020611ab8611ab383612096565b612065565b80838252828201915082860187848660051b8901011115611ad7578586fd5b855b85811015611afe578135611aec8161226e565b84529284019290840190600101611ad9565b5090979650505050505050565b80518015158114611b1b57600080fd5b919050565b805161ffff81168114611b1b57600080fd5b600060208284031215611b43578081fd5b81356119228161226e565b600060208284031215611b5f578081fd5b81516119228161226e565b60008060408385031215611b7c578081fd5b8235611b878161226e565b91506020830135611b978161226e565b809150509250929050565b600080600060608486031215611bb6578081fd5b8335611bc18161226e565b92506020840135611bd18161226e565b929592945050506040919091013590565b60008060008060808587031215611bf7578081fd5b8435611c028161226e565b93506020850135611c128161226e565b925060408501359150606085013567ffffffffffffffff811115611c34578182fd5b611c4087828801611a93565b91505092959194509250565b60008060408385031215611c5e578182fd5b8235611c698161226e565b946020939093013593505050565b60006020808385031215611c89578182fd5b825167ffffffffffffffff811115611c9f578283fd5b8301601f81018513611caf578283fd5b8051611cbd611ab382612096565b80828252848201915084840188868560051b8701011115611cdc578687fd5b8694505b83851015611cfe578051835260019490940193918501918501611ce0565b50979650505050505050565b600060208284031215611d1b578081fd5b61192282611b0b565b600080600080600080600060e0888a031215611d3e578283fd5b8751611d498161226e565b8097505060208801518060020b8114611d60578384fd5b9550611d6e60408901611b20565b9450611d7c60608901611b20565b9350611d8a60808901611b20565b925060a088015163ffffffff81168114611da2578283fd5b9150611db060c08901611b0b565b905092959891949750929550565b600060208284031215611dcf578081fd5b5035919050565b600060208284031215611de7578081fd5b5051919050565b600080600060608486031215611e02578081fd5b833592506020840135611e148161226e565b91506040840135611e248161226e565b809150509250925092565b60008060408385031215611e41578182fd5b82359150602083013567ffffffffffffffff811115611e5e578182fd5b611e6a85828601611a93565b9150509250929050565b6000815180845260208085019450808401835b83811015611eac5781516001600160a01b031687529582019590820190600101611e87565b509495945050505050565b60008251611ec9818460208701612216565b9190910192915050565b848152608060208201526000611eec6080830186611e74565b6001600160a01b03949094166040830152506060015292915050565b6020815260008251806020840152611f27816040850160208701612216565b601f01601f19169190910160400192915050565b60208082526022908201527f506174746965537761703a2050617468206d7573742062652073706563696669604082015261195960f21b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b81516001600160a01b03908116825260208084015182169083015260408084015162ffffff16908301526060808401518216908301526080808401519083015260a0838101519083015260c092830151169181019190915260e00190565b82815260406020820152600061191f6040830184611e74565b85815284602082015260a06040820152600061204860a0830186611e74565b6001600160a01b0394909416606083015250608001529392505050565b604051601f8201601f1916810167ffffffffffffffff8111828210171561208e5761208e612258565b604052919050565b600067ffffffffffffffff8211156120b0576120b0612258565b5060051b60200190565b600082198211156120cd576120cd612242565b500190565b6000826120ed57634e487b7160e01b81526012600452602481fd5b500490565b600181815b8085111561212d57816000190482111561211357612113612242565b8085161561212057918102915b93841c93908002906120f7565b509250929050565b600061192260ff84168360008261214e57506001610fba565b8161215b57506000610fba565b8160018114612171576002811461217b57612197565b6001915050610fba565b60ff84111561218c5761218c612242565b50506001821b610fba565b5060208310610133831016604e8410600b84101617156121ba575081810a610fba565b6121c483836120f2565b80600019048211156121d8576121d8612242565b029392505050565b60008160001904831182151516156121fa576121fa612242565b500290565b60008282101561221157612211612242565b500390565b60005b83811015612231578181015183820152602001612219565b838111156108e25750506000910152565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146112f357600080fdfea26469706673582212209dbda73b49fc160183e00ef6842ab42a1920167db1dbb584c649c9398e194f1c64736f6c63430008040033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 PUSH1 0x1 SSTORE PUSH8 0x8AC7230489E80000 PUSH1 0x2 SSTORE PUSH1 0x7 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP1 DUP2 AND PUSH20 0x13F4EA83D0BD40E75C8222255BC855A974568DD4 OR SWAP1 SWAP2 SSTORE PUSH1 0x8 DUP1 SLOAD SWAP1 SWAP2 AND PUSH20 0xBFBCF9FA4F9C56B0F40A671AD40E0805A091865 OR SWAP1 SSTORE PUSH1 0x9 DUP1 SLOAD PUSH21 0x64BB4CDB9CBD36B01BD1CBAEBF2DE08D9173BC095C PUSH1 0x1 PUSH1 0x1 PUSH1 0xB8 SHL SUB NOT SWAP1 SWAP2 AND OR SWAP1 SSTORE CALLVALUE DUP1 ISZERO PUSH3 0x93 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x24A7 CODESIZE SUB DUP1 PUSH3 0x24A7 DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH3 0xB6 SWAP2 PUSH3 0x182 JUMP JUMPDEST PUSH3 0xC1 CALLER PUSH3 0x115 JUMP JUMPDEST PUSH1 0x4 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP6 DUP7 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP2 DUP3 AND OR SWAP1 SWAP2 SSTORE PUSH1 0x5 DUP1 SLOAD SWAP5 DUP7 AND SWAP5 DUP3 AND SWAP5 SWAP1 SWAP5 OR SWAP1 SWAP4 SSTORE PUSH1 0x6 DUP1 SLOAD SWAP3 DUP6 AND SWAP3 DUP5 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 SSTORE PUSH1 0x3 DUP1 SLOAD SWAP2 SWAP1 SWAP4 AND SWAP2 AND OR SWAP1 SSTORE PUSH3 0x1DE JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR DUP5 SSTORE PUSH1 0x40 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP3 DUP4 SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 SWAP1 LOG3 POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH3 0x17D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH3 0x198 JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH3 0x1A3 DUP6 PUSH3 0x165 JUMP JUMPDEST SWAP4 POP PUSH3 0x1B3 PUSH1 0x20 DUP7 ADD PUSH3 0x165 JUMP JUMPDEST SWAP3 POP PUSH3 0x1C3 PUSH1 0x40 DUP7 ADD PUSH3 0x165 JUMP JUMPDEST SWAP2 POP PUSH3 0x1D3 PUSH1 0x60 DUP7 ADD PUSH3 0x165 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH2 0x22B9 DUP1 PUSH3 0x1EE PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x19C JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8CF57CB9 GT PUSH2 0xEC JUMPI DUP1 PUSH4 0xC36C557F GT PUSH2 0x8A JUMPI DUP1 PUSH4 0xF2FDE38B GT PUSH2 0x64 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x465 JUMPI DUP1 PUSH4 0xF7B2A7BE EQ PUSH2 0x485 JUMPI DUP1 PUSH4 0xF887EA40 EQ PUSH2 0x49B JUMPI DUP1 PUSH4 0xFE96973A EQ PUSH2 0x4BB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xC36C557F EQ PUSH2 0x412 JUMPI DUP1 PUSH4 0xD654E9A4 EQ PUSH2 0x432 JUMPI DUP1 PUSH4 0xEC6CC0CC EQ PUSH2 0x452 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x966DAE0E GT PUSH2 0xC6 JUMPI DUP1 PUSH4 0x966DAE0E EQ PUSH2 0x39F JUMPI DUP1 PUSH4 0x9CF355AD EQ PUSH2 0x3BF JUMPI DUP1 PUSH4 0x9DE2827B EQ PUSH2 0x3DF JUMPI DUP1 PUSH4 0xA8A65A78 EQ PUSH2 0x3F2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x8CF57CB9 EQ PUSH2 0x341 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x361 JUMPI DUP1 PUSH4 0x95CCEA67 EQ PUSH2 0x37F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x63FE3E3A GT PUSH2 0x159 JUMPI DUP1 PUSH4 0x715018A6 GT PUSH2 0x133 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x2C8 JUMPI DUP1 PUSH4 0x7CE3489B EQ PUSH2 0x2DD JUMPI DUP1 PUSH4 0x7FD6F15C EQ PUSH2 0x2FD JUMPI DUP1 PUSH4 0x8AEE8127 EQ PUSH2 0x321 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x63FE3E3A EQ PUSH2 0x268 JUMPI DUP1 PUSH4 0x65E17C9D EQ PUSH2 0x288 JUMPI DUP1 PUSH4 0x6B792C4B EQ PUSH2 0x2A8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x117BE4C2 EQ PUSH2 0x1A1 JUMPI DUP1 PUSH4 0x1698755F EQ PUSH2 0x1DE JUMPI DUP1 PUSH4 0x3268CC56 EQ PUSH2 0x200 JUMPI DUP1 PUSH4 0x3884D635 EQ PUSH2 0x220 JUMPI DUP1 PUSH4 0x4B023CF8 EQ PUSH2 0x235 JUMPI DUP1 PUSH4 0x4CE222DA EQ PUSH2 0x255 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1AD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x6 SLOAD PUSH2 0x1C1 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1EA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1FE PUSH2 0x1F9 CALLDATASIZE PUSH1 0x4 PUSH2 0x1C4C JUMP JUMPDEST PUSH2 0x4DB JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x20C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x7 SLOAD PUSH2 0x1C1 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x22C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1FE PUSH2 0x5B5 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x241 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1FE PUSH2 0x250 CALLDATASIZE PUSH1 0x4 PUSH2 0x1B32 JUMP JUMPDEST PUSH2 0x6BD JUMP JUMPDEST PUSH2 0x1FE PUSH2 0x263 CALLDATASIZE PUSH1 0x4 PUSH2 0x1BA2 JUMP JUMPDEST PUSH2 0x709 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x274 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x9 SLOAD PUSH2 0x1C1 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x294 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 SLOAD PUSH2 0x1C1 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2B4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1FE PUSH2 0x2C3 CALLDATASIZE PUSH1 0x4 PUSH2 0x1DBE JUMP JUMPDEST PUSH2 0x8E8 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2D4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1FE PUSH2 0x94F JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2E9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1FE PUSH2 0x2F8 CALLDATASIZE PUSH1 0x4 PUSH2 0x1DBE JUMP JUMPDEST PUSH2 0x985 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x309 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x313 PUSH1 0x1 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1D5 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x32D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1FE PUSH2 0x33C CALLDATASIZE PUSH1 0x4 PUSH2 0x1B32 JUMP JUMPDEST PUSH2 0x9B4 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x34D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x3 SLOAD PUSH2 0x1C1 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x36D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x1C1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x38B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1FE PUSH2 0x39A CALLDATASIZE PUSH1 0x4 PUSH2 0x1C4C JUMP JUMPDEST PUSH2 0xA00 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3AB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x8 SLOAD PUSH2 0x1C1 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3CB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1FE PUSH2 0x3DA CALLDATASIZE PUSH1 0x4 PUSH2 0x1B6A JUMP JUMPDEST PUSH2 0xA3E JUMP JUMPDEST PUSH2 0x1FE PUSH2 0x3ED CALLDATASIZE PUSH1 0x4 PUSH2 0x1BE2 JUMP JUMPDEST PUSH2 0xA96 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3FE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1FE PUSH2 0x40D CALLDATASIZE PUSH1 0x4 PUSH2 0x1DBE JUMP JUMPDEST PUSH2 0xCB4 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x41E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x313 PUSH2 0x42D CALLDATASIZE PUSH1 0x4 PUSH2 0x1DEE JUMP JUMPDEST PUSH2 0xCE3 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x43E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x313 PUSH2 0x44D CALLDATASIZE PUSH1 0x4 PUSH2 0x1E2F JUMP JUMPDEST PUSH2 0xEF4 JUMP JUMPDEST PUSH2 0x1FE PUSH2 0x460 CALLDATASIZE PUSH1 0x4 PUSH2 0x1BA2 JUMP JUMPDEST PUSH2 0xFC0 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x471 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1FE PUSH2 0x480 CALLDATASIZE PUSH1 0x4 PUSH2 0x1B32 JUMP JUMPDEST PUSH2 0x125B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x491 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x313 PUSH1 0x2 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4A7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x5 SLOAD PUSH2 0x1C1 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4C7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1FE PUSH2 0x4D6 CALLDATASIZE PUSH1 0x4 PUSH2 0x1DBE JUMP JUMPDEST PUSH2 0x12F6 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x50E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x505 SWAP1 PUSH2 0x1F7D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xA9059CBB PUSH2 0x52F PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT PUSH1 0xE0 DUP5 SWAP1 SHL AND DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x44 ADD JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x578 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x58C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x5B0 SWAP2 SWAP1 PUSH2 0x1D0A JUMP JUMPDEST POP POP POP JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD TIMESTAMP SWAP1 PUSH2 0x5D4 SWAP1 PUSH3 0x15180 PUSH2 0x20BA JUMP JUMPDEST GT PUSH2 0x621 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x596F7520646964206E6F74207377617020696E20323420686F75727300000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x505 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x63E SWAP1 PUSH3 0x15180 PUSH2 0x20BA JUMP JUMPDEST TIMESTAMP GT PUSH2 0x68C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x19 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x596F752061697264726F70656420696E20323420686F75727300000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x505 JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x3 SLOAD PUSH2 0x6A9 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 CALLER SWAP1 PUSH2 0x13BA JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 TIMESTAMP SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x6E7 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x505 SWAP1 PUSH2 0x1F7D JUMP JUMPDEST PUSH1 0x4 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 TIMESTAMP SWAP1 SSTORE DUP1 MLOAD PUSH1 0x2 DUP1 DUP3 MSTORE PUSH1 0x60 DUP3 ADD SWAP1 SWAP3 MSTORE SWAP1 DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP SWAP1 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0x7E2 JUMPI PUSH1 0x6 SLOAD DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 DUP3 SWAP1 PUSH1 0x0 SWAP1 PUSH2 0x77B JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE POP POP DUP3 DUP2 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0x7BD JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE POP POP PUSH2 0x8D6 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x851 JUMPI DUP4 DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x812 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND PUSH1 0x20 SWAP2 DUP3 MUL SWAP3 SWAP1 SWAP3 ADD ADD MSTORE PUSH1 0x6 SLOAD DUP3 MLOAD SWAP2 AND SWAP1 DUP3 SWAP1 PUSH1 0x1 SWAP1 DUP2 LT PUSH2 0x7BD JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP4 DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x873 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE POP POP DUP3 DUP2 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0x8B5 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE POP POP JUMPDEST PUSH2 0x8E2 DUP5 DUP5 DUP5 DUP5 PUSH2 0x141D JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x912 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x505 SWAP1 PUSH2 0x1F7D JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP2 DUP4 ISZERO PUSH2 0x8FC MUL SWAP2 DUP5 SWAP2 DUP2 DUP2 DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0x94B JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x979 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x505 SWAP1 PUSH2 0x1F7D JUMP JUMPDEST PUSH2 0x983 PUSH1 0x0 PUSH2 0x15ED JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x9AF JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x505 SWAP1 PUSH2 0x1F7D JUMP JUMPDEST PUSH1 0x1 SSTORE JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x9DE JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x505 SWAP1 PUSH2 0x1F7D JUMP JUMPDEST PUSH1 0x3 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xA2A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x505 SWAP1 PUSH2 0x1F7D JUMP JUMPDEST PUSH2 0x94B PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND CALLER DUP4 PUSH2 0x13BA JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xA68 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x505 SWAP1 PUSH2 0x1F7D JUMP JUMPDEST PUSH1 0x5 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 DUP5 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP2 DUP3 AND OR SWAP1 SWAP2 SSTORE PUSH1 0x6 DUP1 SLOAD SWAP3 SWAP1 SWAP4 AND SWAP2 AND OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0xB53 JUMPI DUP1 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0xAC5 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MLOAD PUSH1 0x6 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND SWAP2 AND EQ DUP1 ISZERO PUSH2 0xB32 JUMPI POP DUP1 PUSH1 0x1 DUP3 MLOAD PUSH2 0xAF7 SWAP2 SWAP1 PUSH2 0x21FF JUMP JUMPDEST DUP2 MLOAD DUP2 LT PUSH2 0xB15 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ JUMPDEST PUSH2 0xB4E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x505 SWAP1 PUSH2 0x1F3B JUMP JUMPDEST PUSH2 0x8D6 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0xC0A JUMPI DUP1 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0xB82 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ DUP1 ISZERO PUSH2 0xB32 JUMPI POP DUP1 PUSH1 0x1 DUP3 MLOAD PUSH2 0xBB4 SWAP2 SWAP1 PUSH2 0x21FF JUMP JUMPDEST DUP2 MLOAD DUP2 LT PUSH2 0xBD2 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MLOAD PUSH1 0x6 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH2 0xB4E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x505 SWAP1 PUSH2 0x1F3B JUMP JUMPDEST DUP1 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0xC2B JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ DUP1 ISZERO PUSH2 0xC98 JUMPI POP DUP1 PUSH1 0x1 DUP3 MLOAD PUSH2 0xC5D SWAP2 SWAP1 PUSH2 0x21FF JUMP JUMPDEST DUP2 MLOAD DUP2 LT PUSH2 0xC7B JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ JUMPDEST PUSH2 0x8D6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x505 SWAP1 PUSH2 0x1F3B JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xCDE JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x505 SWAP1 PUSH2 0x1F7D JUMP JUMPDEST PUSH1 0x2 SSTORE JUMP JUMPDEST PUSH1 0x8 SLOAD PUSH1 0x9 SLOAD PUSH1 0x40 MLOAD PUSH4 0xB4C7741 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE DUP5 DUP2 AND PUSH1 0x24 DUP4 ADD MSTORE PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 SWAP3 DIV PUSH3 0xFFFFFF AND PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x0 SWAP3 DUP4 SWAP3 DUP4 SWAP3 SWAP2 AND SWAP1 PUSH4 0x1698EE82 SWAP1 PUSH1 0x64 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xD4B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xD5F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xD83 SWAP2 SWAP1 PUSH2 0x1B4E JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x3850C7BD PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0xE0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xDBE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xDD2 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xDF6 SWAP2 SWAP1 PUSH2 0x1D24 JUMP JUMPDEST POP POP PUSH1 0x40 DUP1 MLOAD PUSH4 0xDFE1681 PUSH1 0xE0 SHL DUP2 MSTORE SWAP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP7 DUP8 AND SWAP9 POP PUSH1 0x0 SWAP7 DUP9 AND SWAP6 POP PUSH4 0xDFE1681 SWAP5 POP PUSH1 0x4 DUP1 DUP4 ADD SWAP5 POP PUSH1 0x20 SWAP4 POP SWAP1 SWAP2 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xE44 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xE58 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xE7C SWAP2 SWAP1 PUSH2 0x1B4E JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0xEC4 JUMPI PUSH1 0x1 PUSH1 0xC0 SHL DUP8 PUSH2 0xEA9 PUSH1 0x2 DUP7 PUSH2 0x2135 JUMP JUMPDEST PUSH2 0xEB3 SWAP2 SWAP1 PUSH2 0x21E0 JUMP JUMPDEST PUSH2 0xEBD SWAP2 SWAP1 PUSH2 0x20D2 JUMP JUMPDEST SWAP4 POP PUSH2 0xEEA JUMP JUMPDEST PUSH2 0xECF PUSH1 0x2 DUP5 PUSH2 0x2135 JUMP JUMPDEST PUSH2 0xEDD DUP9 PUSH1 0x1 PUSH1 0xC0 SHL PUSH2 0x21E0 JUMP JUMPDEST PUSH2 0xEE7 SWAP2 SWAP1 PUSH2 0x20D2 JUMP JUMPDEST SWAP4 POP JUMPDEST POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x5 SLOAD PUSH1 0x40 MLOAD PUSH4 0xD06CA61F PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x0 SWAP2 DUP3 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0xD06CA61F SWAP1 PUSH2 0xF2B SWAP1 DUP8 SWAP1 DUP8 SWAP1 PUSH1 0x4 ADD PUSH2 0x2010 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xF43 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xF57 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0xF7F SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x1C77 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x1 DUP3 MLOAD PUSH2 0xF90 SWAP2 SWAP1 PUSH2 0x21FF JUMP JUMPDEST DUP2 MLOAD DUP2 LT PUSH2 0xFAE JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP2 POP POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0xA PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 TIMESTAMP SWAP1 SSTORE DUP1 MLOAD PUSH1 0xE0 DUP2 ADD DUP3 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 DUP2 AND DUP1 DUP4 MSTORE DUP9 DUP3 AND SWAP5 DUP4 ADD SWAP5 SWAP1 SWAP5 MSTORE PUSH1 0x9 SLOAD PUSH3 0xFFFFFF PUSH1 0x1 PUSH1 0xA0 SHL DUP3 DIV AND SWAP4 DUP4 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x60 DUP3 ADD SWAP6 SWAP1 SWAP6 MSTORE PUSH1 0x80 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0xA0 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0xC0 DUP2 ADD SWAP4 SWAP1 SWAP4 MSTORE SWAP2 SWAP3 SWAP2 SWAP1 SWAP2 AND EQ ISZERO PUSH2 0x10BF JUMPI PUSH1 0x7 SLOAD PUSH1 0x40 MLOAD PUSH4 0x4E45AAF PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x4E45AAF SWAP1 CALLVALUE SWAP1 PUSH2 0x1067 SWAP1 DUP6 SWAP1 PUSH1 0x4 ADD PUSH2 0x1FB2 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1080 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1094 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x10B9 SWAP2 SWAP1 PUSH2 0x1DD6 JUMP JUMPDEST POP PUSH2 0x1164 JUMP JUMPDEST PUSH2 0x10D4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND CALLER ADDRESS DUP6 PUSH2 0x163D JUMP JUMPDEST PUSH2 0x10DE DUP5 DUP4 PUSH2 0x1675 JUMP JUMPDEST PUSH1 0x7 SLOAD PUSH1 0x40 MLOAD PUSH4 0x4E45AAF PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x4E45AAF SWAP1 CALLVALUE SWAP1 PUSH2 0x1110 SWAP1 DUP6 SWAP1 PUSH1 0x4 ADD PUSH2 0x1FB2 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1129 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x113D JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1162 SWAP2 SWAP1 PUSH2 0x1DD6 JUMP JUMPDEST POP JUMPDEST PUSH1 0x7 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x12210E8A PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x11B4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x11C8 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x40 MLOAD PUSH1 0x0 SWAP3 POP CALLER SWAP2 POP SELFBALANCE SWAP1 DUP4 DUP2 DUP2 DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x120E JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1213 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0x1254 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xD PUSH1 0x24 DUP3 ADD MSTORE PUSH13 0x1C99599D5B990819985A5B1959 PUSH1 0x9A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x505 JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x1285 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x505 SWAP1 PUSH2 0x1F7D JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x12EA JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x646472657373 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x505 JUMP JUMPDEST PUSH2 0x12F3 DUP2 PUSH2 0x15ED JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x1320 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x505 SWAP1 PUSH2 0x1F7D JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 DUP4 SWAP1 DUP4 DUP2 DUP2 DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x136D JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1372 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0x94B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH20 0x2330B4B632B2103A379039B2B7321022BA3432B9 PUSH1 0x61 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x505 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP2 ADD DUP3 SWAP1 MSTORE PUSH2 0x5B0 SWAP1 DUP5 SWAP1 PUSH4 0xA9059CBB PUSH1 0xE0 SHL SWAP1 PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE PUSH2 0x16AE JUMP JUMPDEST PUSH1 0x0 DUP3 GT PUSH2 0x1481 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x506174746965537761703A20616D6F756E74496E206D75737420626520677265 PUSH1 0x44 DUP3 ADD MSTORE PUSH11 0x61746572207468616E203 PUSH1 0xAC SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x505 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0x1557 JUMPI CALLVALUE DUP3 LT ISZERO PUSH2 0x14DF JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x506174746965537761703A20496E73756666696369656E742045544800000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x505 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2710 PUSH1 0x1 SLOAD DUP5 PUSH2 0x14F2 SWAP2 SWAP1 PUSH2 0x21E0 JUMP JUMPDEST PUSH2 0x14FC SWAP2 SWAP1 PUSH2 0x20D2 JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH1 0x40 MLOAD SWAP2 SWAP3 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP3 ISZERO PUSH2 0x8FC MUL SWAP1 DUP4 SWAP1 PUSH1 0x0 DUP2 DUP2 DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0x1537 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP PUSH1 0x0 PUSH2 0x1544 DUP3 DUP6 PUSH2 0x21FF JUMP JUMPDEST SWAP1 POP PUSH2 0x1550 DUP2 DUP5 PUSH2 0x1780 JUMP JUMPDEST POP POP PUSH2 0x8E2 JUMP JUMPDEST PUSH2 0x156C PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND CALLER ADDRESS DUP6 PUSH2 0x163D JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2710 PUSH1 0x1 SLOAD DUP5 PUSH2 0x157F SWAP2 SWAP1 PUSH2 0x21E0 JUMP JUMPDEST PUSH2 0x1589 SWAP2 SWAP1 PUSH2 0x20D2 JUMP JUMPDEST PUSH1 0x4 SLOAD SWAP1 SWAP2 POP PUSH2 0x15A6 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 DUP2 AND SWAP2 AND DUP4 PUSH2 0x13BA JUMP JUMPDEST PUSH1 0x0 PUSH2 0x15B2 DUP3 DUP6 PUSH2 0x21FF JUMP JUMPDEST SWAP1 POP PUSH2 0x15BE DUP7 DUP3 PUSH2 0x180F JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH2 0x15DB JUMPI PUSH2 0x15D6 DUP2 DUP5 PUSH2 0x1848 JUMP JUMPDEST PUSH2 0x15E5 JUMP JUMPDEST PUSH2 0x15E5 DUP2 DUP5 PUSH2 0x18D7 JUMP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR DUP5 SSTORE PUSH1 0x40 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP3 DUP4 SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND PUSH1 0x24 DUP4 ADD MSTORE DUP4 AND PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 DUP2 ADD DUP3 SWAP1 MSTORE PUSH2 0x8E2 SWAP1 DUP6 SWAP1 PUSH4 0x23B872DD PUSH1 0xE0 SHL SWAP1 PUSH1 0x84 ADD PUSH2 0x13E6 JUMP JUMPDEST PUSH1 0x7 SLOAD PUSH1 0x40 MLOAD PUSH4 0x95EA7B3 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP4 SWAP1 MSTORE SWAP1 DUP4 AND SWAP1 PUSH4 0x95EA7B3 SWAP1 PUSH1 0x44 ADD PUSH2 0x55E JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1703 DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x5361666545524332303A206C6F772D6C6576656C2063616C6C206661696C6564 DUP2 MSTORE POP DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x1910 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP1 MLOAD SWAP1 SWAP2 POP ISZERO PUSH2 0x5B0 JUMPI DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x1721 SWAP2 SWAP1 PUSH2 0x1D0A JUMP JUMPDEST PUSH2 0x5B0 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5361666545524332303A204552433230206F7065726174696F6E20646964206E PUSH1 0x44 DUP3 ADD MSTORE PUSH10 0x1BDD081CDD58D8D95959 PUSH1 0xB2 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x505 JUMP JUMPDEST PUSH1 0x5 SLOAD PUSH1 0x40 MLOAD PUSH4 0x7FF36AB5 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x7FF36AB5 SWAP1 DUP5 SWAP1 PUSH2 0x17B9 SWAP1 PUSH1 0x0 SWAP1 DUP7 SWAP1 CALLER SWAP1 TIMESTAMP SWAP1 PUSH1 0x4 ADD PUSH2 0x1ED3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x17D2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x17E6 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x5B0 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x1C77 JUMP JUMPDEST PUSH1 0x5 SLOAD PUSH1 0x40 MLOAD PUSH4 0x95EA7B3 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP4 SWAP1 MSTORE SWAP1 DUP4 AND SWAP1 PUSH4 0x95EA7B3 SWAP1 PUSH1 0x44 ADD PUSH2 0x55E JUMP JUMPDEST PUSH1 0x5 SLOAD PUSH1 0x40 MLOAD PUSH4 0x18CBAFE5 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x18CBAFE5 SWAP1 PUSH2 0x1881 SWAP1 DUP6 SWAP1 PUSH1 0x0 SWAP1 DUP7 SWAP1 CALLER SWAP1 TIMESTAMP SWAP1 PUSH1 0x4 ADD PUSH2 0x2029 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x189B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x18AF JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x5B0 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x1C77 JUMP JUMPDEST PUSH1 0x5 SLOAD PUSH1 0x40 MLOAD PUSH4 0x38ED1739 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x38ED1739 SWAP1 PUSH2 0x1881 SWAP1 DUP6 SWAP1 PUSH1 0x0 SWAP1 DUP7 SWAP1 CALLER SWAP1 TIMESTAMP SWAP1 PUSH1 0x4 ADD PUSH2 0x2029 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x191F DUP5 DUP5 PUSH1 0x0 DUP6 PUSH2 0x1929 JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP3 SELFBALANCE LT ISZERO PUSH2 0x198A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A20696E73756666696369656E742062616C616E636520666F PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x1C8818D85B1B PUSH1 0xD2 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x505 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND EXTCODESIZE PUSH2 0x19E1 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x505 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 DUP8 PUSH1 0x40 MLOAD PUSH2 0x19FD SWAP2 SWAP1 PUSH2 0x1EB7 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1A3A JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1A3F JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x1A4F DUP3 DUP3 DUP7 PUSH2 0x1A5A JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0x1A69 JUMPI POP DUP2 PUSH2 0x1922 JUMP JUMPDEST DUP3 MLOAD ISZERO PUSH2 0x1A79 JUMPI DUP3 MLOAD DUP1 DUP5 PUSH1 0x20 ADD REVERT JUMPDEST DUP2 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x505 SWAP2 SWAP1 PUSH2 0x1F08 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1AA3 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x20 PUSH2 0x1AB8 PUSH2 0x1AB3 DUP4 PUSH2 0x2096 JUMP JUMPDEST PUSH2 0x2065 JUMP JUMPDEST DUP1 DUP4 DUP3 MSTORE DUP3 DUP3 ADD SWAP2 POP DUP3 DUP7 ADD DUP8 DUP5 DUP7 PUSH1 0x5 SHL DUP10 ADD ADD GT ISZERO PUSH2 0x1AD7 JUMPI DUP6 DUP7 REVERT JUMPDEST DUP6 JUMPDEST DUP6 DUP2 LT ISZERO PUSH2 0x1AFE JUMPI DUP2 CALLDATALOAD PUSH2 0x1AEC DUP2 PUSH2 0x226E JUMP JUMPDEST DUP5 MSTORE SWAP3 DUP5 ADD SWAP3 SWAP1 DUP5 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x1AD9 JUMP JUMPDEST POP SWAP1 SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST DUP1 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x1B1B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 MLOAD PUSH2 0xFFFF DUP2 AND DUP2 EQ PUSH2 0x1B1B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1B43 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x1922 DUP2 PUSH2 0x226E JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1B5F JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x1922 DUP2 PUSH2 0x226E JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1B7C JUMPI DUP1 DUP2 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x1B87 DUP2 PUSH2 0x226E JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0x1B97 DUP2 PUSH2 0x226E JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x1BB6 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 0x1BC1 DUP2 PUSH2 0x226E JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH2 0x1BD1 DUP2 PUSH2 0x226E JUMP JUMPDEST SWAP3 SWAP6 SWAP3 SWAP5 POP POP POP PUSH1 0x40 SWAP2 SWAP1 SWAP2 ADD CALLDATALOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x1BF7 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH2 0x1C02 DUP2 PUSH2 0x226E JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH2 0x1C12 DUP2 PUSH2 0x226E JUMP JUMPDEST SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD SWAP2 POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1C34 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x1C40 DUP8 DUP3 DUP9 ADD PUSH2 0x1A93 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1C5E JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x1C69 DUP2 PUSH2 0x226E JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1C89 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1C9F JUMPI DUP3 DUP4 REVERT JUMPDEST DUP4 ADD PUSH1 0x1F DUP2 ADD DUP6 SGT PUSH2 0x1CAF JUMPI DUP3 DUP4 REVERT JUMPDEST DUP1 MLOAD PUSH2 0x1CBD PUSH2 0x1AB3 DUP3 PUSH2 0x2096 JUMP JUMPDEST DUP1 DUP3 DUP3 MSTORE DUP5 DUP3 ADD SWAP2 POP DUP5 DUP5 ADD DUP9 DUP7 DUP6 PUSH1 0x5 SHL DUP8 ADD ADD GT ISZERO PUSH2 0x1CDC JUMPI DUP7 DUP8 REVERT JUMPDEST DUP7 SWAP5 POP JUMPDEST DUP4 DUP6 LT ISZERO PUSH2 0x1CFE JUMPI DUP1 MLOAD DUP4 MSTORE PUSH1 0x1 SWAP5 SWAP1 SWAP5 ADD SWAP4 SWAP2 DUP6 ADD SWAP2 DUP6 ADD PUSH2 0x1CE0 JUMP JUMPDEST POP SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1D1B JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x1922 DUP3 PUSH2 0x1B0B JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xE0 DUP9 DUP11 SUB SLT ISZERO PUSH2 0x1D3E JUMPI DUP3 DUP4 REVERT JUMPDEST DUP8 MLOAD PUSH2 0x1D49 DUP2 PUSH2 0x226E JUMP JUMPDEST DUP1 SWAP8 POP POP PUSH1 0x20 DUP9 ADD MLOAD DUP1 PUSH1 0x2 SIGNEXTEND DUP2 EQ PUSH2 0x1D60 JUMPI DUP4 DUP5 REVERT JUMPDEST SWAP6 POP PUSH2 0x1D6E PUSH1 0x40 DUP10 ADD PUSH2 0x1B20 JUMP JUMPDEST SWAP5 POP PUSH2 0x1D7C PUSH1 0x60 DUP10 ADD PUSH2 0x1B20 JUMP JUMPDEST SWAP4 POP PUSH2 0x1D8A PUSH1 0x80 DUP10 ADD PUSH2 0x1B20 JUMP JUMPDEST SWAP3 POP PUSH1 0xA0 DUP9 ADD MLOAD PUSH4 0xFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x1DA2 JUMPI DUP3 DUP4 REVERT JUMPDEST SWAP2 POP PUSH2 0x1DB0 PUSH1 0xC0 DUP10 ADD PUSH2 0x1B0B JUMP JUMPDEST SWAP1 POP SWAP3 SWAP6 SWAP9 SWAP2 SWAP5 SWAP8 POP SWAP3 SWAP6 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1DCF JUMPI DUP1 DUP2 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1DE7 JUMPI DUP1 DUP2 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x1E02 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 CALLDATALOAD SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH2 0x1E14 DUP2 PUSH2 0x226E JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD PUSH2 0x1E24 DUP2 PUSH2 0x226E JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1E41 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1E5E JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x1E6A DUP6 DUP3 DUP7 ADD PUSH2 0x1A93 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x20 DUP1 DUP6 ADD SWAP5 POP DUP1 DUP5 ADD DUP4 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1EAC JUMPI DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP8 MSTORE SWAP6 DUP3 ADD SWAP6 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x1E87 JUMP JUMPDEST POP SWAP5 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x1EC9 DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x2216 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP5 DUP2 MSTORE PUSH1 0x80 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x0 PUSH2 0x1EEC PUSH1 0x80 DUP4 ADD DUP7 PUSH2 0x1E74 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP5 SWAP1 SWAP5 AND PUSH1 0x40 DUP4 ADD MSTORE POP PUSH1 0x60 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 DUP3 MLOAD DUP1 PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x1F27 DUP2 PUSH1 0x40 DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0x2216 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP2 SWAP1 SWAP2 ADD PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x22 SWAP1 DUP3 ADD MSTORE PUSH32 0x506174746965537761703A2050617468206D7573742062652073706563696669 PUSH1 0x40 DUP3 ADD MSTORE PUSH2 0x1959 PUSH1 0xF2 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 DUP2 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND DUP3 MSTORE PUSH1 0x20 DUP1 DUP5 ADD MLOAD DUP3 AND SWAP1 DUP4 ADD MSTORE PUSH1 0x40 DUP1 DUP5 ADD MLOAD PUSH3 0xFFFFFF AND SWAP1 DUP4 ADD MSTORE PUSH1 0x60 DUP1 DUP5 ADD MLOAD DUP3 AND SWAP1 DUP4 ADD MSTORE PUSH1 0x80 DUP1 DUP5 ADD MLOAD SWAP1 DUP4 ADD MSTORE PUSH1 0xA0 DUP4 DUP2 ADD MLOAD SWAP1 DUP4 ADD MSTORE PUSH1 0xC0 SWAP3 DUP4 ADD MLOAD AND SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0xE0 ADD SWAP1 JUMP JUMPDEST DUP3 DUP2 MSTORE PUSH1 0x40 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x0 PUSH2 0x191F PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x1E74 JUMP JUMPDEST DUP6 DUP2 MSTORE DUP5 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0xA0 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x0 PUSH2 0x2048 PUSH1 0xA0 DUP4 ADD DUP7 PUSH2 0x1E74 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP5 SWAP1 SWAP5 AND PUSH1 0x60 DUP4 ADD MSTORE POP PUSH1 0x80 ADD MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT AND DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x208E JUMPI PUSH2 0x208E PUSH2 0x2258 JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x20B0 JUMPI PUSH2 0x20B0 PUSH2 0x2258 JUMP JUMPDEST POP PUSH1 0x5 SHL PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0x20CD JUMPI PUSH2 0x20CD PUSH2 0x2242 JUMP JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x20ED JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 DUP2 REVERT JUMPDEST POP DIV SWAP1 JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 JUMPDEST DUP1 DUP6 GT ISZERO PUSH2 0x212D JUMPI DUP2 PUSH1 0x0 NOT DIV DUP3 GT ISZERO PUSH2 0x2113 JUMPI PUSH2 0x2113 PUSH2 0x2242 JUMP JUMPDEST DUP1 DUP6 AND ISZERO PUSH2 0x2120 JUMPI SWAP2 DUP2 MUL SWAP2 JUMPDEST SWAP4 DUP5 SHR SWAP4 SWAP1 DUP1 MUL SWAP1 PUSH2 0x20F7 JUMP JUMPDEST POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1922 PUSH1 0xFF DUP5 AND DUP4 PUSH1 0x0 DUP3 PUSH2 0x214E JUMPI POP PUSH1 0x1 PUSH2 0xFBA JUMP JUMPDEST DUP2 PUSH2 0x215B JUMPI POP PUSH1 0x0 PUSH2 0xFBA JUMP JUMPDEST DUP2 PUSH1 0x1 DUP2 EQ PUSH2 0x2171 JUMPI PUSH1 0x2 DUP2 EQ PUSH2 0x217B JUMPI PUSH2 0x2197 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP PUSH2 0xFBA JUMP JUMPDEST PUSH1 0xFF DUP5 GT ISZERO PUSH2 0x218C JUMPI PUSH2 0x218C PUSH2 0x2242 JUMP JUMPDEST POP POP PUSH1 0x1 DUP3 SHL PUSH2 0xFBA JUMP JUMPDEST POP PUSH1 0x20 DUP4 LT PUSH2 0x133 DUP4 LT AND PUSH1 0x4E DUP5 LT PUSH1 0xB DUP5 LT AND OR ISZERO PUSH2 0x21BA JUMPI POP DUP2 DUP2 EXP PUSH2 0xFBA JUMP JUMPDEST PUSH2 0x21C4 DUP4 DUP4 PUSH2 0x20F2 JUMP JUMPDEST DUP1 PUSH1 0x0 NOT DIV DUP3 GT ISZERO PUSH2 0x21D8 JUMPI PUSH2 0x21D8 PUSH2 0x2242 JUMP JUMPDEST MUL SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 NOT DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0x21FA JUMPI PUSH2 0x21FA PUSH2 0x2242 JUMP JUMPDEST POP MUL SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 LT ISZERO PUSH2 0x2211 JUMPI PUSH2 0x2211 PUSH2 0x2242 JUMP JUMPDEST POP SUB SWAP1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x2231 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x2219 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x8E2 JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x12F3 JUMPI PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP14 0xBD 0xA7 EXTCODESIZE 0x49 0xFC AND ADD DUP4 0xE0 0xE 0xF6 DUP5 0x2A 0xB4 0x2A NOT KECCAK256 AND PUSH30 0xB1DBB584C649C9398E194F1C64736F6C6343000804003300000000000000 ","sourceMap":"34906:8344:1:-:0;;;35036:1;35011:26;;35085:20;35055:50;;35253:73;;;-1:-1:-1;;;;;;35253:73:1;;;35284:42;35253:73;;;;35333:74;;;;;;35365:42;35333:74;;;35414:71;;;35492:20;-1:-1:-1;;;;;;35492:20:1;;;;;;35622:269;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;4666:32;3564:10;4666:18;:32::i;:::-;35766:10;:24;;-1:-1:-1;;;;;35766:24:1;;;-1:-1:-1;;;;;;35766:24:1;;;;;;;35801:6;:16;;;;;;;;;;;;;;;35828:5;:14;;;;;;;;;;;;;;;35853:13;:30;;;;;;;;;;;34906:8344;;6094:191;6168:16;6187:6;;-1:-1:-1;;;;;6204:17:1;;;-1:-1:-1;;;;;;6204:17:1;;;;;;6237:40;;6187:6;;;;;;;6237:40;;6168:16;6237:40;6094:191;;:::o;14:177:3:-;93:13;;-1:-1:-1;;;;;135:31:3;;125:42;;115:2;;181:1;178;171:12;115:2;74:117;;;:::o;196:474::-;293:6;301;309;317;370:3;358:9;349:7;345:23;341:33;338:2;;;392:6;384;377:22;338:2;420:40;450:9;420:40;:::i;:::-;410:50;;479:49;524:2;513:9;509:18;479:49;:::i;:::-;469:59;;547:49;592:2;581:9;577:18;547:49;:::i;:::-;537:59;;615:49;660:2;649:9;645:18;615:49;:::i;:::-;605:59;;328:342;;;;;;;:::o;:::-;34906:8344:1;;;;;;"},"deployedBytecode":{"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:19634:3","statements":[{"nodeType":"YulBlock","src":"6:3:3","statements":[]},{"body":{"nodeType":"YulBlock","src":"78:704:3","statements":[{"body":{"nodeType":"YulBlock","src":"127:24:3","statements":[{"expression":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"136:5:3"},{"name":"array","nodeType":"YulIdentifier","src":"143:5:3"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"129:6:3"},"nodeType":"YulFunctionCall","src":"129:20:3"},"nodeType":"YulExpressionStatement","src":"129:20:3"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"106:6:3"},{"kind":"number","nodeType":"YulLiteral","src":"114:4:3","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"102:3:3"},"nodeType":"YulFunctionCall","src":"102:17:3"},{"name":"end","nodeType":"YulIdentifier","src":"121:3:3"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"98:3:3"},"nodeType":"YulFunctionCall","src":"98:27:3"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"91:6:3"},"nodeType":"YulFunctionCall","src":"91:35:3"},"nodeType":"YulIf","src":"88:2:3"},{"nodeType":"YulVariableDeclaration","src":"160:30:3","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"183:6:3"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"170:12:3"},"nodeType":"YulFunctionCall","src":"170:20:3"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"164:2:3","type":""}]},{"nodeType":"YulVariableDeclaration","src":"199:14:3","value":{"kind":"number","nodeType":"YulLiteral","src":"209:4:3","type":"","value":"0x20"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"203:2:3","type":""}]},{"nodeType":"YulVariableDeclaration","src":"222:71:3","value":{"arguments":[{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"289:2:3"}],"functionName":{"name":"array_allocation_size_array_address_dyn","nodeType":"YulIdentifier","src":"249:39:3"},"nodeType":"YulFunctionCall","src":"249:43:3"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"233:15:3"},"nodeType":"YulFunctionCall","src":"233:60:3"},"variables":[{"name":"dst","nodeType":"YulTypedName","src":"226:3:3","type":""}]},{"nodeType":"YulVariableDeclaration","src":"302:16:3","value":{"name":"dst","nodeType":"YulIdentifier","src":"315:3:3"},"variables":[{"name":"dst_1","nodeType":"YulTypedName","src":"306:5:3","type":""}]},{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"334:3:3"},{"name":"_1","nodeType":"YulIdentifier","src":"339:2:3"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"327:6:3"},"nodeType":"YulFunctionCall","src":"327:15:3"},"nodeType":"YulExpressionStatement","src":"327:15:3"},{"nodeType":"YulAssignment","src":"351:19:3","value":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"362:3:3"},{"name":"_2","nodeType":"YulIdentifier","src":"367:2:3"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"358:3:3"},"nodeType":"YulFunctionCall","src":"358:12:3"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"351:3:3"}]},{"nodeType":"YulVariableDeclaration","src":"379:26:3","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"394:6:3"},{"name":"_2","nodeType":"YulIdentifier","src":"402:2:3"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"390:3:3"},"nodeType":"YulFunctionCall","src":"390:15:3"},"variables":[{"name":"src","nodeType":"YulTypedName","src":"383:3:3","type":""}]},{"body":{"nodeType":"YulBlock","src":"459:24:3","statements":[{"expression":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"468:5:3"},{"name":"array","nodeType":"YulIdentifier","src":"475:5:3"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"461:6:3"},"nodeType":"YulFunctionCall","src":"461:20:3"},"nodeType":"YulExpressionStatement","src":"461:20:3"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"428:6:3"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"440:1:3","type":"","value":"5"},{"name":"_1","nodeType":"YulIdentifier","src":"443:2:3"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"436:3:3"},"nodeType":"YulFunctionCall","src":"436:10:3"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"424:3:3"},"nodeType":"YulFunctionCall","src":"424:23:3"},{"name":"_2","nodeType":"YulIdentifier","src":"449:2:3"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"420:3:3"},"nodeType":"YulFunctionCall","src":"420:32:3"},{"name":"end","nodeType":"YulIdentifier","src":"454:3:3"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"417:2:3"},"nodeType":"YulFunctionCall","src":"417:41:3"},"nodeType":"YulIf","src":"414:2:3"},{"nodeType":"YulVariableDeclaration","src":"492:14:3","value":{"name":"array","nodeType":"YulIdentifier","src":"501:5:3"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"496:1:3","type":""}]},{"body":{"nodeType":"YulBlock","src":"560:193:3","statements":[{"nodeType":"YulVariableDeclaration","src":"574:30:3","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"600:3:3"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"587:12:3"},"nodeType":"YulFunctionCall","src":"587:17:3"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"578:5:3","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"642:5:3"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"617:24:3"},"nodeType":"YulFunctionCall","src":"617:31:3"},"nodeType":"YulExpressionStatement","src":"617:31:3"},{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"668:3:3"},{"name":"value","nodeType":"YulIdentifier","src":"673:5:3"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"661:6:3"},"nodeType":"YulFunctionCall","src":"661:18:3"},"nodeType":"YulExpressionStatement","src":"661:18:3"},{"nodeType":"YulAssignment","src":"692:19:3","value":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"703:3:3"},{"name":"_2","nodeType":"YulIdentifier","src":"708:2:3"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"699:3:3"},"nodeType":"YulFunctionCall","src":"699:12:3"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"692:3:3"}]},{"nodeType":"YulAssignment","src":"724:19:3","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"735:3:3"},{"name":"_2","nodeType":"YulIdentifier","src":"740:2:3"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"731:3:3"},"nodeType":"YulFunctionCall","src":"731:12:3"},"variableNames":[{"name":"src","nodeType":"YulIdentifier","src":"724:3:3"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"526:1:3"},{"name":"_1","nodeType":"YulIdentifier","src":"529:2:3"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"523:2:3"},"nodeType":"YulFunctionCall","src":"523:9:3"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"533:18:3","statements":[{"nodeType":"YulAssignment","src":"535:14:3","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"544:1:3"},{"kind":"number","nodeType":"YulLiteral","src":"547:1:3","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"540:3:3"},"nodeType":"YulFunctionCall","src":"540:9:3"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"535:1:3"}]}]},"pre":{"nodeType":"YulBlock","src":"519:3:3","statements":[]},"src":"515:238:3"},{"nodeType":"YulAssignment","src":"762:14:3","value":{"name":"dst_1","nodeType":"YulIdentifier","src":"771:5:3"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"762:5:3"}]}]},"name":"abi_decode_array_address_dyn","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"52:6:3","type":""},{"name":"end","nodeType":"YulTypedName","src":"60:3:3","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"68:5:3","type":""}],"src":"14:768:3"},{"body":{"nodeType":"YulBlock","src":"844:107:3","statements":[{"nodeType":"YulAssignment","src":"854:22:3","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"869:6:3"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"863:5:3"},"nodeType":"YulFunctionCall","src":"863:13:3"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"854:5:3"}]},{"body":{"nodeType":"YulBlock","src":"929:16:3","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"938:1:3","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"941:1:3","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"931:6:3"},"nodeType":"YulFunctionCall","src":"931:12:3"},"nodeType":"YulExpressionStatement","src":"931:12:3"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"898:5:3"},{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"919:5:3"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"912:6:3"},"nodeType":"YulFunctionCall","src":"912:13:3"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"905:6:3"},"nodeType":"YulFunctionCall","src":"905:21:3"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"895:2:3"},"nodeType":"YulFunctionCall","src":"895:32:3"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"888:6:3"},"nodeType":"YulFunctionCall","src":"888:40:3"},"nodeType":"YulIf","src":"885:2:3"}]},"name":"abi_decode_bool_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"823:6:3","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"834:5:3","type":""}],"src":"787:164:3"},{"body":{"nodeType":"YulBlock","src":"1015:104:3","statements":[{"nodeType":"YulAssignment","src":"1025:22:3","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1040:6:3"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1034:5:3"},"nodeType":"YulFunctionCall","src":"1034:13:3"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"1025:5:3"}]},{"body":{"nodeType":"YulBlock","src":"1097:16:3","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1106:1:3","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1109:1:3","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1099:6:3"},"nodeType":"YulFunctionCall","src":"1099:12:3"},"nodeType":"YulExpressionStatement","src":"1099:12:3"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1069:5:3"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1080:5:3"},{"kind":"number","nodeType":"YulLiteral","src":"1087:6:3","type":"","value":"0xffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1076:3:3"},"nodeType":"YulFunctionCall","src":"1076:18:3"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"1066:2:3"},"nodeType":"YulFunctionCall","src":"1066:29:3"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1059:6:3"},"nodeType":"YulFunctionCall","src":"1059:37:3"},"nodeType":"YulIf","src":"1056:2:3"}]},"name":"abi_decode_uint16_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"994:6:3","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"1005:5:3","type":""}],"src":"956:163:3"},{"body":{"nodeType":"YulBlock","src":"1194:187:3","statements":[{"body":{"nodeType":"YulBlock","src":"1240:26:3","statements":[{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1249:6:3"},{"name":"value0","nodeType":"YulIdentifier","src":"1257:6:3"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1242:6:3"},"nodeType":"YulFunctionCall","src":"1242:22:3"},"nodeType":"YulExpressionStatement","src":"1242:22:3"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1215:7:3"},{"name":"headStart","nodeType":"YulIdentifier","src":"1224:9:3"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1211:3:3"},"nodeType":"YulFunctionCall","src":"1211:23:3"},{"kind":"number","nodeType":"YulLiteral","src":"1236:2:3","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1207:3:3"},"nodeType":"YulFunctionCall","src":"1207:32:3"},"nodeType":"YulIf","src":"1204:2:3"},{"nodeType":"YulVariableDeclaration","src":"1275:36:3","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1301:9:3"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1288:12:3"},"nodeType":"YulFunctionCall","src":"1288:23:3"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"1279:5:3","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1345:5:3"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"1320:24:3"},"nodeType":"YulFunctionCall","src":"1320:31:3"},"nodeType":"YulExpressionStatement","src":"1320:31:3"},{"nodeType":"YulAssignment","src":"1360:15:3","value":{"name":"value","nodeType":"YulIdentifier","src":"1370:5:3"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1360:6:3"}]}]},"name":"abi_decode_tuple_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1160:9:3","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1171:7:3","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1183:6:3","type":""}],"src":"1124:257:3"},{"body":{"nodeType":"YulBlock","src":"1467:180:3","statements":[{"body":{"nodeType":"YulBlock","src":"1513:26:3","statements":[{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1522:6:3"},{"name":"value0","nodeType":"YulIdentifier","src":"1530:6:3"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1515:6:3"},"nodeType":"YulFunctionCall","src":"1515:22:3"},"nodeType":"YulExpressionStatement","src":"1515:22:3"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1488:7:3"},{"name":"headStart","nodeType":"YulIdentifier","src":"1497:9:3"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1484:3:3"},"nodeType":"YulFunctionCall","src":"1484:23:3"},{"kind":"number","nodeType":"YulLiteral","src":"1509:2:3","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1480:3:3"},"nodeType":"YulFunctionCall","src":"1480:32:3"},"nodeType":"YulIf","src":"1477:2:3"},{"nodeType":"YulVariableDeclaration","src":"1548:29:3","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1567:9:3"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1561:5:3"},"nodeType":"YulFunctionCall","src":"1561:16:3"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"1552:5:3","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1611:5:3"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"1586:24:3"},"nodeType":"YulFunctionCall","src":"1586:31:3"},"nodeType":"YulExpressionStatement","src":"1586:31:3"},{"nodeType":"YulAssignment","src":"1626:15:3","value":{"name":"value","nodeType":"YulIdentifier","src":"1636:5:3"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1626:6:3"}]}]},"name":"abi_decode_tuple_t_address_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1433:9:3","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1444:7:3","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1456:6:3","type":""}],"src":"1386:261:3"},{"body":{"nodeType":"YulBlock","src":"1739:311:3","statements":[{"body":{"nodeType":"YulBlock","src":"1785:26:3","statements":[{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"1794:6:3"},{"name":"value1","nodeType":"YulIdentifier","src":"1802:6:3"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1787:6:3"},"nodeType":"YulFunctionCall","src":"1787:22:3"},"nodeType":"YulExpressionStatement","src":"1787:22:3"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1760:7:3"},{"name":"headStart","nodeType":"YulIdentifier","src":"1769:9:3"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1756:3:3"},"nodeType":"YulFunctionCall","src":"1756:23:3"},{"kind":"number","nodeType":"YulLiteral","src":"1781:2:3","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1752:3:3"},"nodeType":"YulFunctionCall","src":"1752:32:3"},"nodeType":"YulIf","src":"1749:2:3"},{"nodeType":"YulVariableDeclaration","src":"1820:36:3","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1846:9:3"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1833:12:3"},"nodeType":"YulFunctionCall","src":"1833:23:3"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"1824:5:3","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1890:5:3"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"1865:24:3"},"nodeType":"YulFunctionCall","src":"1865:31:3"},"nodeType":"YulExpressionStatement","src":"1865:31:3"},{"nodeType":"YulAssignment","src":"1905:15:3","value":{"name":"value","nodeType":"YulIdentifier","src":"1915:5:3"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1905:6:3"}]},{"nodeType":"YulVariableDeclaration","src":"1929:47:3","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1961:9:3"},{"kind":"number","nodeType":"YulLiteral","src":"1972:2:3","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1957:3:3"},"nodeType":"YulFunctionCall","src":"1957:18:3"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1944:12:3"},"nodeType":"YulFunctionCall","src":"1944:32:3"},"variables":[{"name":"value_1","nodeType":"YulTypedName","src":"1933:7:3","type":""}]},{"expression":{"arguments":[{"name":"value_1","nodeType":"YulIdentifier","src":"2010:7:3"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"1985:24:3"},"nodeType":"YulFunctionCall","src":"1985:33:3"},"nodeType":"YulExpressionStatement","src":"1985:33:3"},{"nodeType":"YulAssignment","src":"2027:17:3","value":{"name":"value_1","nodeType":"YulIdentifier","src":"2037:7:3"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"2027:6:3"}]}]},"name":"abi_decode_tuple_t_addresst_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1697:9:3","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1708:7:3","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1720:6:3","type":""},{"name":"value1","nodeType":"YulTypedName","src":"1728:6:3","type":""}],"src":"1652:398:3"},{"body":{"nodeType":"YulBlock","src":"2159:362:3","statements":[{"body":{"nodeType":"YulBlock","src":"2205:26:3","statements":[{"expression":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"2214:6:3"},{"name":"value2","nodeType":"YulIdentifier","src":"2222:6:3"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2207:6:3"},"nodeType":"YulFunctionCall","src":"2207:22:3"},"nodeType":"YulExpressionStatement","src":"2207:22:3"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2180:7:3"},{"name":"headStart","nodeType":"YulIdentifier","src":"2189:9:3"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2176:3:3"},"nodeType":"YulFunctionCall","src":"2176:23:3"},{"kind":"number","nodeType":"YulLiteral","src":"2201:2:3","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2172:3:3"},"nodeType":"YulFunctionCall","src":"2172:32:3"},"nodeType":"YulIf","src":"2169:2:3"},{"nodeType":"YulVariableDeclaration","src":"2240:36:3","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2266:9:3"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2253:12:3"},"nodeType":"YulFunctionCall","src":"2253:23:3"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"2244:5:3","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2310:5:3"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"2285:24:3"},"nodeType":"YulFunctionCall","src":"2285:31:3"},"nodeType":"YulExpressionStatement","src":"2285:31:3"},{"nodeType":"YulAssignment","src":"2325:15:3","value":{"name":"value","nodeType":"YulIdentifier","src":"2335:5:3"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2325:6:3"}]},{"nodeType":"YulVariableDeclaration","src":"2349:47:3","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2381:9:3"},{"kind":"number","nodeType":"YulLiteral","src":"2392:2:3","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2377:3:3"},"nodeType":"YulFunctionCall","src":"2377:18:3"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2364:12:3"},"nodeType":"YulFunctionCall","src":"2364:32:3"},"variables":[{"name":"value_1","nodeType":"YulTypedName","src":"2353:7:3","type":""}]},{"expression":{"arguments":[{"name":"value_1","nodeType":"YulIdentifier","src":"2430:7:3"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"2405:24:3"},"nodeType":"YulFunctionCall","src":"2405:33:3"},"nodeType":"YulExpressionStatement","src":"2405:33:3"},{"nodeType":"YulAssignment","src":"2447:17:3","value":{"name":"value_1","nodeType":"YulIdentifier","src":"2457:7:3"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"2447:6:3"}]},{"nodeType":"YulAssignment","src":"2473:42:3","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2500:9:3"},{"kind":"number","nodeType":"YulLiteral","src":"2511:2:3","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2496:3:3"},"nodeType":"YulFunctionCall","src":"2496:18:3"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2483:12:3"},"nodeType":"YulFunctionCall","src":"2483:32:3"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"2473:6:3"}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2109:9:3","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2120:7:3","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2132:6:3","type":""},{"name":"value1","nodeType":"YulTypedName","src":"2140:6:3","type":""},{"name":"value2","nodeType":"YulTypedName","src":"2148:6:3","type":""}],"src":"2055:466:3"},{"body":{"nodeType":"YulBlock","src":"2672:567:3","statements":[{"body":{"nodeType":"YulBlock","src":"2719:26:3","statements":[{"expression":{"arguments":[{"name":"value3","nodeType":"YulIdentifier","src":"2728:6:3"},{"name":"value3","nodeType":"YulIdentifier","src":"2736:6:3"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2721:6:3"},"nodeType":"YulFunctionCall","src":"2721:22:3"},"nodeType":"YulExpressionStatement","src":"2721:22:3"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2693:7:3"},{"name":"headStart","nodeType":"YulIdentifier","src":"2702:9:3"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2689:3:3"},"nodeType":"YulFunctionCall","src":"2689:23:3"},{"kind":"number","nodeType":"YulLiteral","src":"2714:3:3","type":"","value":"128"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2685:3:3"},"nodeType":"YulFunctionCall","src":"2685:33:3"},"nodeType":"YulIf","src":"2682:2:3"},{"nodeType":"YulVariableDeclaration","src":"2754:36:3","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2780:9:3"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2767:12:3"},"nodeType":"YulFunctionCall","src":"2767:23:3"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"2758:5:3","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2824:5:3"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"2799:24:3"},"nodeType":"YulFunctionCall","src":"2799:31:3"},"nodeType":"YulExpressionStatement","src":"2799:31:3"},{"nodeType":"YulAssignment","src":"2839:15:3","value":{"name":"value","nodeType":"YulIdentifier","src":"2849:5:3"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2839:6:3"}]},{"nodeType":"YulVariableDeclaration","src":"2863:47:3","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2895:9:3"},{"kind":"number","nodeType":"YulLiteral","src":"2906:2:3","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2891:3:3"},"nodeType":"YulFunctionCall","src":"2891:18:3"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2878:12:3"},"nodeType":"YulFunctionCall","src":"2878:32:3"},"variables":[{"name":"value_1","nodeType":"YulTypedName","src":"2867:7:3","type":""}]},{"expression":{"arguments":[{"name":"value_1","nodeType":"YulIdentifier","src":"2944:7:3"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"2919:24:3"},"nodeType":"YulFunctionCall","src":"2919:33:3"},"nodeType":"YulExpressionStatement","src":"2919:33:3"},{"nodeType":"YulAssignment","src":"2961:17:3","value":{"name":"value_1","nodeType":"YulIdentifier","src":"2971:7:3"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"2961:6:3"}]},{"nodeType":"YulAssignment","src":"2987:42:3","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3014:9:3"},{"kind":"number","nodeType":"YulLiteral","src":"3025:2:3","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3010:3:3"},"nodeType":"YulFunctionCall","src":"3010:18:3"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2997:12:3"},"nodeType":"YulFunctionCall","src":"2997:32:3"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"2987:6:3"}]},{"nodeType":"YulVariableDeclaration","src":"3038:46:3","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3069:9:3"},{"kind":"number","nodeType":"YulLiteral","src":"3080:2:3","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3065:3:3"},"nodeType":"YulFunctionCall","src":"3065:18:3"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3052:12:3"},"nodeType":"YulFunctionCall","src":"3052:32:3"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"3042:6:3","type":""}]},{"body":{"nodeType":"YulBlock","src":"3127:26:3","statements":[{"expression":{"arguments":[{"name":"value3","nodeType":"YulIdentifier","src":"3136:6:3"},{"name":"value3","nodeType":"YulIdentifier","src":"3144:6:3"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3129:6:3"},"nodeType":"YulFunctionCall","src":"3129:22:3"},"nodeType":"YulExpressionStatement","src":"3129:22:3"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3099:6:3"},{"kind":"number","nodeType":"YulLiteral","src":"3107:18:3","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3096:2:3"},"nodeType":"YulFunctionCall","src":"3096:30:3"},"nodeType":"YulIf","src":"3093:2:3"},{"nodeType":"YulAssignment","src":"3162:71:3","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3205:9:3"},{"name":"offset","nodeType":"YulIdentifier","src":"3216:6:3"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3201:3:3"},"nodeType":"YulFunctionCall","src":"3201:22:3"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3225:7:3"}],"functionName":{"name":"abi_decode_array_address_dyn","nodeType":"YulIdentifier","src":"3172:28:3"},"nodeType":"YulFunctionCall","src":"3172:61:3"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"3162:6:3"}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256t_array$_t_address_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2614:9:3","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2625:7:3","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2637:6:3","type":""},{"name":"value1","nodeType":"YulTypedName","src":"2645:6:3","type":""},{"name":"value2","nodeType":"YulTypedName","src":"2653:6:3","type":""},{"name":"value3","nodeType":"YulTypedName","src":"2661:6:3","type":""}],"src":"2526:713:3"},{"body":{"nodeType":"YulBlock","src":"3331:238:3","statements":[{"body":{"nodeType":"YulBlock","src":"3377:26:3","statements":[{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"3386:6:3"},{"name":"value0","nodeType":"YulIdentifier","src":"3394:6:3"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3379:6:3"},"nodeType":"YulFunctionCall","src":"3379:22:3"},"nodeType":"YulExpressionStatement","src":"3379:22:3"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"3352:7:3"},{"name":"headStart","nodeType":"YulIdentifier","src":"3361:9:3"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3348:3:3"},"nodeType":"YulFunctionCall","src":"3348:23:3"},{"kind":"number","nodeType":"YulLiteral","src":"3373:2:3","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3344:3:3"},"nodeType":"YulFunctionCall","src":"3344:32:3"},"nodeType":"YulIf","src":"3341:2:3"},{"nodeType":"YulVariableDeclaration","src":"3412:36:3","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3438:9:3"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3425:12:3"},"nodeType":"YulFunctionCall","src":"3425:23:3"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"3416:5:3","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3482:5:3"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"3457:24:3"},"nodeType":"YulFunctionCall","src":"3457:31:3"},"nodeType":"YulExpressionStatement","src":"3457:31:3"},{"nodeType":"YulAssignment","src":"3497:15:3","value":{"name":"value","nodeType":"YulIdentifier","src":"3507:5:3"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"3497:6:3"}]},{"nodeType":"YulAssignment","src":"3521:42:3","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3548:9:3"},{"kind":"number","nodeType":"YulLiteral","src":"3559:2:3","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3544:3:3"},"nodeType":"YulFunctionCall","src":"3544:18:3"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3531:12:3"},"nodeType":"YulFunctionCall","src":"3531:32:3"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"3521:6:3"}]}]},"name":"abi_decode_tuple_t_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3289:9:3","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"3300:7:3","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"3312:6:3","type":""},{"name":"value1","nodeType":"YulTypedName","src":"3320:6:3","type":""}],"src":"3244:325:3"},{"body":{"nodeType":"YulBlock","src":"3680:831:3","statements":[{"nodeType":"YulVariableDeclaration","src":"3690:12:3","value":{"kind":"number","nodeType":"YulLiteral","src":"3700:2:3","type":"","value":"32"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"3694:2:3","type":""}]},{"body":{"nodeType":"YulBlock","src":"3747:26:3","statements":[{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"3756:6:3"},{"name":"value0","nodeType":"YulIdentifier","src":"3764:6:3"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3749:6:3"},"nodeType":"YulFunctionCall","src":"3749:22:3"},"nodeType":"YulExpressionStatement","src":"3749:22:3"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"3722:7:3"},{"name":"headStart","nodeType":"YulIdentifier","src":"3731:9:3"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3718:3:3"},"nodeType":"YulFunctionCall","src":"3718:23:3"},{"name":"_1","nodeType":"YulIdentifier","src":"3743:2:3"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3714:3:3"},"nodeType":"YulFunctionCall","src":"3714:32:3"},"nodeType":"YulIf","src":"3711:2:3"},{"nodeType":"YulVariableDeclaration","src":"3782:30:3","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3802:9:3"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3796:5:3"},"nodeType":"YulFunctionCall","src":"3796:16:3"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"3786:6:3","type":""}]},{"body":{"nodeType":"YulBlock","src":"3855:26:3","statements":[{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"3864:6:3"},{"name":"value0","nodeType":"YulIdentifier","src":"3872:6:3"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3857:6:3"},"nodeType":"YulFunctionCall","src":"3857:22:3"},"nodeType":"YulExpressionStatement","src":"3857:22:3"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3827:6:3"},{"kind":"number","nodeType":"YulLiteral","src":"3835:18:3","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3824:2:3"},"nodeType":"YulFunctionCall","src":"3824:30:3"},"nodeType":"YulIf","src":"3821:2:3"},{"nodeType":"YulVariableDeclaration","src":"3890:32:3","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3904:9:3"},{"name":"offset","nodeType":"YulIdentifier","src":"3915:6:3"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3900:3:3"},"nodeType":"YulFunctionCall","src":"3900:22:3"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"3894:2:3","type":""}]},{"body":{"nodeType":"YulBlock","src":"3970:26:3","statements":[{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"3979:6:3"},{"name":"value0","nodeType":"YulIdentifier","src":"3987:6:3"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3972:6:3"},"nodeType":"YulFunctionCall","src":"3972:22:3"},"nodeType":"YulExpressionStatement","src":"3972:22:3"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"3949:2:3"},{"kind":"number","nodeType":"YulLiteral","src":"3953:4:3","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3945:3:3"},"nodeType":"YulFunctionCall","src":"3945:13:3"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3960:7:3"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3941:3:3"},"nodeType":"YulFunctionCall","src":"3941:27:3"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3934:6:3"},"nodeType":"YulFunctionCall","src":"3934:35:3"},"nodeType":"YulIf","src":"3931:2:3"},{"nodeType":"YulVariableDeclaration","src":"4005:19:3","value":{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"4021:2:3"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"4015:5:3"},"nodeType":"YulFunctionCall","src":"4015:9:3"},"variables":[{"name":"_3","nodeType":"YulTypedName","src":"4009:2:3","type":""}]},{"nodeType":"YulVariableDeclaration","src":"4033:71:3","value":{"arguments":[{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"4100:2:3"}],"functionName":{"name":"array_allocation_size_array_address_dyn","nodeType":"YulIdentifier","src":"4060:39:3"},"nodeType":"YulFunctionCall","src":"4060:43:3"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"4044:15:3"},"nodeType":"YulFunctionCall","src":"4044:60:3"},"variables":[{"name":"dst","nodeType":"YulTypedName","src":"4037:3:3","type":""}]},{"nodeType":"YulVariableDeclaration","src":"4113:16:3","value":{"name":"dst","nodeType":"YulIdentifier","src":"4126:3:3"},"variables":[{"name":"dst_1","nodeType":"YulTypedName","src":"4117:5:3","type":""}]},{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"4145:3:3"},{"name":"_3","nodeType":"YulIdentifier","src":"4150:2:3"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4138:6:3"},"nodeType":"YulFunctionCall","src":"4138:15:3"},"nodeType":"YulExpressionStatement","src":"4138:15:3"},{"nodeType":"YulAssignment","src":"4162:19:3","value":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"4173:3:3"},{"name":"_1","nodeType":"YulIdentifier","src":"4178:2:3"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4169:3:3"},"nodeType":"YulFunctionCall","src":"4169:12:3"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"4162:3:3"}]},{"nodeType":"YulVariableDeclaration","src":"4190:22:3","value":{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"4205:2:3"},{"name":"_1","nodeType":"YulIdentifier","src":"4209:2:3"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4201:3:3"},"nodeType":"YulFunctionCall","src":"4201:11:3"},"variables":[{"name":"src","nodeType":"YulTypedName","src":"4194:3:3","type":""}]},{"body":{"nodeType":"YulBlock","src":"4266:26:3","statements":[{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"4275:6:3"},{"name":"value0","nodeType":"YulIdentifier","src":"4283:6:3"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4268:6:3"},"nodeType":"YulFunctionCall","src":"4268:22:3"},"nodeType":"YulExpressionStatement","src":"4268:22:3"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"4235:2:3"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4243:1:3","type":"","value":"5"},{"name":"_3","nodeType":"YulIdentifier","src":"4246:2:3"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"4239:3:3"},"nodeType":"YulFunctionCall","src":"4239:10:3"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4231:3:3"},"nodeType":"YulFunctionCall","src":"4231:19:3"},{"name":"_1","nodeType":"YulIdentifier","src":"4252:2:3"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4227:3:3"},"nodeType":"YulFunctionCall","src":"4227:28:3"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4257:7:3"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4224:2:3"},"nodeType":"YulFunctionCall","src":"4224:41:3"},"nodeType":"YulIf","src":"4221:2:3"},{"nodeType":"YulVariableDeclaration","src":"4301:15:3","value":{"name":"value0","nodeType":"YulIdentifier","src":"4310:6:3"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"4305:1:3","type":""}]},{"body":{"nodeType":"YulBlock","src":"4370:111:3","statements":[{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"4391:3:3"},{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"4402:3:3"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"4396:5:3"},"nodeType":"YulFunctionCall","src":"4396:10:3"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4384:6:3"},"nodeType":"YulFunctionCall","src":"4384:23:3"},"nodeType":"YulExpressionStatement","src":"4384:23:3"},{"nodeType":"YulAssignment","src":"4420:19:3","value":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"4431:3:3"},{"name":"_1","nodeType":"YulIdentifier","src":"4436:2:3"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4427:3:3"},"nodeType":"YulFunctionCall","src":"4427:12:3"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"4420:3:3"}]},{"nodeType":"YulAssignment","src":"4452:19:3","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"4463:3:3"},{"name":"_1","nodeType":"YulIdentifier","src":"4468:2:3"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4459:3:3"},"nodeType":"YulFunctionCall","src":"4459:12:3"},"variableNames":[{"name":"src","nodeType":"YulIdentifier","src":"4452:3:3"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"4336:1:3"},{"name":"_3","nodeType":"YulIdentifier","src":"4339:2:3"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"4333:2:3"},"nodeType":"YulFunctionCall","src":"4333:9:3"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"4343:18:3","statements":[{"nodeType":"YulAssignment","src":"4345:14:3","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"4354:1:3"},{"kind":"number","nodeType":"YulLiteral","src":"4357:1:3","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4350:3:3"},"nodeType":"YulFunctionCall","src":"4350:9:3"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"4345:1:3"}]}]},"pre":{"nodeType":"YulBlock","src":"4329:3:3","statements":[]},"src":"4325:156:3"},{"nodeType":"YulAssignment","src":"4490:15:3","value":{"name":"dst_1","nodeType":"YulIdentifier","src":"4500:5:3"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"4490:6:3"}]}]},"name":"abi_decode_tuple_t_array$_t_uint256_$dyn_memory_ptr_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3646:9:3","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"3657:7:3","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"3669:6:3","type":""}],"src":"3574:937:3"},{"body":{"nodeType":"YulBlock","src":"4594:134:3","statements":[{"body":{"nodeType":"YulBlock","src":"4640:26:3","statements":[{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"4649:6:3"},{"name":"value0","nodeType":"YulIdentifier","src":"4657:6:3"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4642:6:3"},"nodeType":"YulFunctionCall","src":"4642:22:3"},"nodeType":"YulExpressionStatement","src":"4642:22:3"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"4615:7:3"},{"name":"headStart","nodeType":"YulIdentifier","src":"4624:9:3"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4611:3:3"},"nodeType":"YulFunctionCall","src":"4611:23:3"},{"kind":"number","nodeType":"YulLiteral","src":"4636:2:3","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"4607:3:3"},"nodeType":"YulFunctionCall","src":"4607:32:3"},"nodeType":"YulIf","src":"4604:2:3"},{"nodeType":"YulAssignment","src":"4675:47:3","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4712:9:3"}],"functionName":{"name":"abi_decode_bool_fromMemory","nodeType":"YulIdentifier","src":"4685:26:3"},"nodeType":"YulFunctionCall","src":"4685:37:3"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"4675:6:3"}]}]},"name":"abi_decode_tuple_t_bool_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4560:9:3","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"4571:7:3","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"4583:6:3","type":""}],"src":"4516:212:3"},{"body":{"nodeType":"YulBlock","src":"4907:766:3","statements":[{"body":{"nodeType":"YulBlock","src":"4954:26:3","statements":[{"expression":{"arguments":[{"name":"value4","nodeType":"YulIdentifier","src":"4963:6:3"},{"name":"value4","nodeType":"YulIdentifier","src":"4971:6:3"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4956:6:3"},"nodeType":"YulFunctionCall","src":"4956:22:3"},"nodeType":"YulExpressionStatement","src":"4956:22:3"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"4928:7:3"},{"name":"headStart","nodeType":"YulIdentifier","src":"4937:9:3"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4924:3:3"},"nodeType":"YulFunctionCall","src":"4924:23:3"},{"kind":"number","nodeType":"YulLiteral","src":"4949:3:3","type":"","value":"224"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"4920:3:3"},"nodeType":"YulFunctionCall","src":"4920:33:3"},"nodeType":"YulIf","src":"4917:2:3"},{"nodeType":"YulVariableDeclaration","src":"4989:29:3","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5008:9:3"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"5002:5:3"},"nodeType":"YulFunctionCall","src":"5002:16:3"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"4993:5:3","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5052:5:3"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"5027:24:3"},"nodeType":"YulFunctionCall","src":"5027:31:3"},"nodeType":"YulExpressionStatement","src":"5027:31:3"},{"nodeType":"YulAssignment","src":"5067:15:3","value":{"name":"value","nodeType":"YulIdentifier","src":"5077:5:3"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"5067:6:3"}]},{"nodeType":"YulVariableDeclaration","src":"5091:40:3","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5116:9:3"},{"kind":"number","nodeType":"YulLiteral","src":"5127:2:3","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5112:3:3"},"nodeType":"YulFunctionCall","src":"5112:18:3"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"5106:5:3"},"nodeType":"YulFunctionCall","src":"5106:25:3"},"variables":[{"name":"value_1","nodeType":"YulTypedName","src":"5095:7:3","type":""}]},{"body":{"nodeType":"YulBlock","src":"5187:26:3","statements":[{"expression":{"arguments":[{"name":"value4","nodeType":"YulIdentifier","src":"5196:6:3"},{"name":"value4","nodeType":"YulIdentifier","src":"5204:6:3"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5189:6:3"},"nodeType":"YulFunctionCall","src":"5189:22:3"},"nodeType":"YulExpressionStatement","src":"5189:22:3"}]},"condition":{"arguments":[{"arguments":[{"name":"value_1","nodeType":"YulIdentifier","src":"5153:7:3"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5173:1:3","type":"","value":"2"},{"name":"value_1","nodeType":"YulIdentifier","src":"5176:7:3"}],"functionName":{"name":"signextend","nodeType":"YulIdentifier","src":"5162:10:3"},"nodeType":"YulFunctionCall","src":"5162:22:3"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"5150:2:3"},"nodeType":"YulFunctionCall","src":"5150:35:3"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"5143:6:3"},"nodeType":"YulFunctionCall","src":"5143:43:3"},"nodeType":"YulIf","src":"5140:2:3"},{"nodeType":"YulAssignment","src":"5222:17:3","value":{"name":"value_1","nodeType":"YulIdentifier","src":"5232:7:3"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"5222:6:3"}]},{"nodeType":"YulAssignment","src":"5248:58:3","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5291:9:3"},{"kind":"number","nodeType":"YulLiteral","src":"5302:2:3","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5287:3:3"},"nodeType":"YulFunctionCall","src":"5287:18:3"}],"functionName":{"name":"abi_decode_uint16_fromMemory","nodeType":"YulIdentifier","src":"5258:28:3"},"nodeType":"YulFunctionCall","src":"5258:48:3"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"5248:6:3"}]},{"nodeType":"YulAssignment","src":"5315:58:3","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5358:9:3"},{"kind":"number","nodeType":"YulLiteral","src":"5369:2:3","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5354:3:3"},"nodeType":"YulFunctionCall","src":"5354:18:3"}],"functionName":{"name":"abi_decode_uint16_fromMemory","nodeType":"YulIdentifier","src":"5325:28:3"},"nodeType":"YulFunctionCall","src":"5325:48:3"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"5315:6:3"}]},{"nodeType":"YulAssignment","src":"5382:59:3","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5425:9:3"},{"kind":"number","nodeType":"YulLiteral","src":"5436:3:3","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5421:3:3"},"nodeType":"YulFunctionCall","src":"5421:19:3"}],"functionName":{"name":"abi_decode_uint16_fromMemory","nodeType":"YulIdentifier","src":"5392:28:3"},"nodeType":"YulFunctionCall","src":"5392:49:3"},"variableNames":[{"name":"value4","nodeType":"YulIdentifier","src":"5382:6:3"}]},{"nodeType":"YulVariableDeclaration","src":"5450:41:3","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5475:9:3"},{"kind":"number","nodeType":"YulLiteral","src":"5486:3:3","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5471:3:3"},"nodeType":"YulFunctionCall","src":"5471:19:3"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"5465:5:3"},"nodeType":"YulFunctionCall","src":"5465:26:3"},"variables":[{"name":"value_2","nodeType":"YulTypedName","src":"5454:7:3","type":""}]},{"body":{"nodeType":"YulBlock","src":"5549:26:3","statements":[{"expression":{"arguments":[{"name":"value5","nodeType":"YulIdentifier","src":"5558:6:3"},{"name":"value5","nodeType":"YulIdentifier","src":"5566:6:3"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5551:6:3"},"nodeType":"YulFunctionCall","src":"5551:22:3"},"nodeType":"YulExpressionStatement","src":"5551:22:3"}]},"condition":{"arguments":[{"arguments":[{"name":"value_2","nodeType":"YulIdentifier","src":"5513:7:3"},{"arguments":[{"name":"value_2","nodeType":"YulIdentifier","src":"5526:7:3"},{"kind":"number","nodeType":"YulLiteral","src":"5535:10:3","type":"","value":"0xffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"5522:3:3"},"nodeType":"YulFunctionCall","src":"5522:24:3"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"5510:2:3"},"nodeType":"YulFunctionCall","src":"5510:37:3"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"5503:6:3"},"nodeType":"YulFunctionCall","src":"5503:45:3"},"nodeType":"YulIf","src":"5500:2:3"},{"nodeType":"YulAssignment","src":"5584:17:3","value":{"name":"value_2","nodeType":"YulIdentifier","src":"5594:7:3"},"variableNames":[{"name":"value5","nodeType":"YulIdentifier","src":"5584:6:3"}]},{"nodeType":"YulAssignment","src":"5610:57:3","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5651:9:3"},{"kind":"number","nodeType":"YulLiteral","src":"5662:3:3","type":"","value":"192"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5647:3:3"},"nodeType":"YulFunctionCall","src":"5647:19:3"}],"functionName":{"name":"abi_decode_bool_fromMemory","nodeType":"YulIdentifier","src":"5620:26:3"},"nodeType":"YulFunctionCall","src":"5620:47:3"},"variableNames":[{"name":"value6","nodeType":"YulIdentifier","src":"5610:6:3"}]}]},"name":"abi_decode_tuple_t_uint160t_int24t_uint16t_uint16t_uint16t_uint32t_bool_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4825:9:3","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"4836:7:3","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"4848:6:3","type":""},{"name":"value1","nodeType":"YulTypedName","src":"4856:6:3","type":""},{"name":"value2","nodeType":"YulTypedName","src":"4864:6:3","type":""},{"name":"value3","nodeType":"YulTypedName","src":"4872:6:3","type":""},{"name":"value4","nodeType":"YulTypedName","src":"4880:6:3","type":""},{"name":"value5","nodeType":"YulTypedName","src":"4888:6:3","type":""},{"name":"value6","nodeType":"YulTypedName","src":"4896:6:3","type":""}],"src":"4733:940:3"},{"body":{"nodeType":"YulBlock","src":"5748:120:3","statements":[{"body":{"nodeType":"YulBlock","src":"5794:26:3","statements":[{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"5803:6:3"},{"name":"value0","nodeType":"YulIdentifier","src":"5811:6:3"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5796:6:3"},"nodeType":"YulFunctionCall","src":"5796:22:3"},"nodeType":"YulExpressionStatement","src":"5796:22:3"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"5769:7:3"},{"name":"headStart","nodeType":"YulIdentifier","src":"5778:9:3"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5765:3:3"},"nodeType":"YulFunctionCall","src":"5765:23:3"},{"kind":"number","nodeType":"YulLiteral","src":"5790:2:3","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"5761:3:3"},"nodeType":"YulFunctionCall","src":"5761:32:3"},"nodeType":"YulIf","src":"5758:2:3"},{"nodeType":"YulAssignment","src":"5829:33:3","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5852:9:3"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"5839:12:3"},"nodeType":"YulFunctionCall","src":"5839:23:3"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"5829:6:3"}]}]},"name":"abi_decode_tuple_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5714:9:3","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"5725:7:3","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"5737:6:3","type":""}],"src":"5678:190:3"},{"body":{"nodeType":"YulBlock","src":"5954:113:3","statements":[{"body":{"nodeType":"YulBlock","src":"6000:26:3","statements":[{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"6009:6:3"},{"name":"value0","nodeType":"YulIdentifier","src":"6017:6:3"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6002:6:3"},"nodeType":"YulFunctionCall","src":"6002:22:3"},"nodeType":"YulExpressionStatement","src":"6002:22:3"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"5975:7:3"},{"name":"headStart","nodeType":"YulIdentifier","src":"5984:9:3"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5971:3:3"},"nodeType":"YulFunctionCall","src":"5971:23:3"},{"kind":"number","nodeType":"YulLiteral","src":"5996:2:3","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"5967:3:3"},"nodeType":"YulFunctionCall","src":"5967:32:3"},"nodeType":"YulIf","src":"5964:2:3"},{"nodeType":"YulAssignment","src":"6035:26:3","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6051:9:3"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"6045:5:3"},"nodeType":"YulFunctionCall","src":"6045:16:3"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"6035:6:3"}]}]},"name":"abi_decode_tuple_t_uint256_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5920:9:3","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"5931:7:3","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"5943:6:3","type":""}],"src":"5873:194:3"},{"body":{"nodeType":"YulBlock","src":"6176:362:3","statements":[{"body":{"nodeType":"YulBlock","src":"6222:26:3","statements":[{"expression":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"6231:6:3"},{"name":"value2","nodeType":"YulIdentifier","src":"6239:6:3"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6224:6:3"},"nodeType":"YulFunctionCall","src":"6224:22:3"},"nodeType":"YulExpressionStatement","src":"6224:22:3"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"6197:7:3"},{"name":"headStart","nodeType":"YulIdentifier","src":"6206:9:3"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"6193:3:3"},"nodeType":"YulFunctionCall","src":"6193:23:3"},{"kind":"number","nodeType":"YulLiteral","src":"6218:2:3","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"6189:3:3"},"nodeType":"YulFunctionCall","src":"6189:32:3"},"nodeType":"YulIf","src":"6186:2:3"},{"nodeType":"YulAssignment","src":"6257:33:3","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6280:9:3"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"6267:12:3"},"nodeType":"YulFunctionCall","src":"6267:23:3"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"6257:6:3"}]},{"nodeType":"YulVariableDeclaration","src":"6299:45:3","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6329:9:3"},{"kind":"number","nodeType":"YulLiteral","src":"6340:2:3","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6325:3:3"},"nodeType":"YulFunctionCall","src":"6325:18:3"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"6312:12:3"},"nodeType":"YulFunctionCall","src":"6312:32:3"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"6303:5:3","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6378:5:3"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"6353:24:3"},"nodeType":"YulFunctionCall","src":"6353:31:3"},"nodeType":"YulExpressionStatement","src":"6353:31:3"},{"nodeType":"YulAssignment","src":"6393:15:3","value":{"name":"value","nodeType":"YulIdentifier","src":"6403:5:3"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"6393:6:3"}]},{"nodeType":"YulVariableDeclaration","src":"6417:47:3","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6449:9:3"},{"kind":"number","nodeType":"YulLiteral","src":"6460:2:3","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6445:3:3"},"nodeType":"YulFunctionCall","src":"6445:18:3"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"6432:12:3"},"nodeType":"YulFunctionCall","src":"6432:32:3"},"variables":[{"name":"value_1","nodeType":"YulTypedName","src":"6421:7:3","type":""}]},{"expression":{"arguments":[{"name":"value_1","nodeType":"YulIdentifier","src":"6498:7:3"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"6473:24:3"},"nodeType":"YulFunctionCall","src":"6473:33:3"},"nodeType":"YulExpressionStatement","src":"6473:33:3"},{"nodeType":"YulAssignment","src":"6515:17:3","value":{"name":"value_1","nodeType":"YulIdentifier","src":"6525:7:3"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"6515:6:3"}]}]},"name":"abi_decode_tuple_t_uint256t_addresst_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6126:9:3","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"6137:7:3","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"6149:6:3","type":""},{"name":"value1","nodeType":"YulTypedName","src":"6157:6:3","type":""},{"name":"value2","nodeType":"YulTypedName","src":"6165:6:3","type":""}],"src":"6072:466:3"},{"body":{"nodeType":"YulBlock","src":"6655:324:3","statements":[{"body":{"nodeType":"YulBlock","src":"6701:26:3","statements":[{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"6710:6:3"},{"name":"value0","nodeType":"YulIdentifier","src":"6718:6:3"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6703:6:3"},"nodeType":"YulFunctionCall","src":"6703:22:3"},"nodeType":"YulExpressionStatement","src":"6703:22:3"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"6676:7:3"},{"name":"headStart","nodeType":"YulIdentifier","src":"6685:9:3"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"6672:3:3"},"nodeType":"YulFunctionCall","src":"6672:23:3"},{"kind":"number","nodeType":"YulLiteral","src":"6697:2:3","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"6668:3:3"},"nodeType":"YulFunctionCall","src":"6668:32:3"},"nodeType":"YulIf","src":"6665:2:3"},{"nodeType":"YulAssignment","src":"6736:33:3","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6759:9:3"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"6746:12:3"},"nodeType":"YulFunctionCall","src":"6746:23:3"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"6736:6:3"}]},{"nodeType":"YulVariableDeclaration","src":"6778:46:3","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6809:9:3"},{"kind":"number","nodeType":"YulLiteral","src":"6820:2:3","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6805:3:3"},"nodeType":"YulFunctionCall","src":"6805:18:3"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"6792:12:3"},"nodeType":"YulFunctionCall","src":"6792:32:3"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"6782:6:3","type":""}]},{"body":{"nodeType":"YulBlock","src":"6867:26:3","statements":[{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"6876:6:3"},{"name":"value1","nodeType":"YulIdentifier","src":"6884:6:3"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6869:6:3"},"nodeType":"YulFunctionCall","src":"6869:22:3"},"nodeType":"YulExpressionStatement","src":"6869:22:3"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"6839:6:3"},{"kind":"number","nodeType":"YulLiteral","src":"6847:18:3","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"6836:2:3"},"nodeType":"YulFunctionCall","src":"6836:30:3"},"nodeType":"YulIf","src":"6833:2:3"},{"nodeType":"YulAssignment","src":"6902:71:3","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6945:9:3"},{"name":"offset","nodeType":"YulIdentifier","src":"6956:6:3"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6941:3:3"},"nodeType":"YulFunctionCall","src":"6941:22:3"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"6965:7:3"}],"functionName":{"name":"abi_decode_array_address_dyn","nodeType":"YulIdentifier","src":"6912:28:3"},"nodeType":"YulFunctionCall","src":"6912:61:3"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"6902:6:3"}]}]},"name":"abi_decode_tuple_t_uint256t_array$_t_address_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6613:9:3","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"6624:7:3","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"6636:6:3","type":""},{"name":"value1","nodeType":"YulTypedName","src":"6644:6:3","type":""}],"src":"6543:436:3"},{"body":{"nodeType":"YulBlock","src":"7045:402:3","statements":[{"nodeType":"YulVariableDeclaration","src":"7055:26:3","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"7075:5:3"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"7069:5:3"},"nodeType":"YulFunctionCall","src":"7069:12:3"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"7059:6:3","type":""}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"7097:3:3"},{"name":"length","nodeType":"YulIdentifier","src":"7102:6:3"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7090:6:3"},"nodeType":"YulFunctionCall","src":"7090:19:3"},"nodeType":"YulExpressionStatement","src":"7090:19:3"},{"nodeType":"YulVariableDeclaration","src":"7118:14:3","value":{"kind":"number","nodeType":"YulLiteral","src":"7128:4:3","type":"","value":"0x20"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"7122:2:3","type":""}]},{"nodeType":"YulAssignment","src":"7141:19:3","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"7152:3:3"},{"name":"_1","nodeType":"YulIdentifier","src":"7157:2:3"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7148:3:3"},"nodeType":"YulFunctionCall","src":"7148:12:3"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"7141:3:3"}]},{"nodeType":"YulVariableDeclaration","src":"7169:28:3","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"7187:5:3"},{"name":"_1","nodeType":"YulIdentifier","src":"7194:2:3"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7183:3:3"},"nodeType":"YulFunctionCall","src":"7183:14:3"},"variables":[{"name":"srcPtr","nodeType":"YulTypedName","src":"7173:6:3","type":""}]},{"nodeType":"YulVariableDeclaration","src":"7206:12:3","value":{"name":"end","nodeType":"YulIdentifier","src":"7215:3:3"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"7210:1:3","type":""}]},{"body":{"nodeType":"YulBlock","src":"7276:146:3","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"7297:3:3"},{"arguments":[{"arguments":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"7312:6:3"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"7306:5:3"},"nodeType":"YulFunctionCall","src":"7306:13:3"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7329:3:3","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"7334:1:3","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"7325:3:3"},"nodeType":"YulFunctionCall","src":"7325:11:3"},{"kind":"number","nodeType":"YulLiteral","src":"7338:1:3","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"7321:3:3"},"nodeType":"YulFunctionCall","src":"7321:19:3"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"7302:3:3"},"nodeType":"YulFunctionCall","src":"7302:39:3"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7290:6:3"},"nodeType":"YulFunctionCall","src":"7290:52:3"},"nodeType":"YulExpressionStatement","src":"7290:52:3"},{"nodeType":"YulAssignment","src":"7355:19:3","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"7366:3:3"},{"name":"_1","nodeType":"YulIdentifier","src":"7371:2:3"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7362:3:3"},"nodeType":"YulFunctionCall","src":"7362:12:3"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"7355:3:3"}]},{"nodeType":"YulAssignment","src":"7387:25:3","value":{"arguments":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"7401:6:3"},{"name":"_1","nodeType":"YulIdentifier","src":"7409:2:3"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7397:3:3"},"nodeType":"YulFunctionCall","src":"7397:15:3"},"variableNames":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"7387:6:3"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"7238:1:3"},{"name":"length","nodeType":"YulIdentifier","src":"7241:6:3"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"7235:2:3"},"nodeType":"YulFunctionCall","src":"7235:13:3"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"7249:18:3","statements":[{"nodeType":"YulAssignment","src":"7251:14:3","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"7260:1:3"},{"kind":"number","nodeType":"YulLiteral","src":"7263:1:3","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7256:3:3"},"nodeType":"YulFunctionCall","src":"7256:9:3"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"7251:1:3"}]}]},"pre":{"nodeType":"YulBlock","src":"7231:3:3","statements":[]},"src":"7227:195:3"},{"nodeType":"YulAssignment","src":"7431:10:3","value":{"name":"pos","nodeType":"YulIdentifier","src":"7438:3:3"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"7431:3:3"}]}]},"name":"abi_encode_array_address_dyn","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"7022:5:3","type":""},{"name":"pos","nodeType":"YulTypedName","src":"7029:3:3","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"7037:3:3","type":""}],"src":"6984:463:3"},{"body":{"nodeType":"YulBlock","src":"7589:137:3","statements":[{"nodeType":"YulVariableDeclaration","src":"7599:27:3","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"7619:6:3"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"7613:5:3"},"nodeType":"YulFunctionCall","src":"7613:13:3"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"7603:6:3","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"7661:6:3"},{"kind":"number","nodeType":"YulLiteral","src":"7669:4:3","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7657:3:3"},"nodeType":"YulFunctionCall","src":"7657:17:3"},{"name":"pos","nodeType":"YulIdentifier","src":"7676:3:3"},{"name":"length","nodeType":"YulIdentifier","src":"7681:6:3"}],"functionName":{"name":"copy_memory_to_memory","nodeType":"YulIdentifier","src":"7635:21:3"},"nodeType":"YulFunctionCall","src":"7635:53:3"},"nodeType":"YulExpressionStatement","src":"7635:53:3"},{"nodeType":"YulAssignment","src":"7697:23:3","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"7708:3:3"},{"name":"length","nodeType":"YulIdentifier","src":"7713:6:3"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7704:3:3"},"nodeType":"YulFunctionCall","src":"7704:16:3"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"7697:3:3"}]}]},"name":"abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"7565:3:3","type":""},{"name":"value0","nodeType":"YulTypedName","src":"7570:6:3","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"7581:3:3","type":""}],"src":"7452:274:3"},{"body":{"nodeType":"YulBlock","src":"7922:14:3","statements":[{"nodeType":"YulAssignment","src":"7924:10:3","value":{"name":"pos","nodeType":"YulIdentifier","src":"7931:3:3"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"7924:3:3"}]}]},"name":"abi_encode_tuple_packed_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"7906:3:3","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"7914:3:3","type":""}],"src":"7731:205:3"},{"body":{"nodeType":"YulBlock","src":"8042:102:3","statements":[{"nodeType":"YulAssignment","src":"8052:26:3","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8064:9:3"},{"kind":"number","nodeType":"YulLiteral","src":"8075:2:3","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8060:3:3"},"nodeType":"YulFunctionCall","src":"8060:18:3"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"8052:4:3"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8094:9:3"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"8109:6:3"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8125:3:3","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"8130:1:3","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"8121:3:3"},"nodeType":"YulFunctionCall","src":"8121:11:3"},{"kind":"number","nodeType":"YulLiteral","src":"8134:1:3","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"8117:3:3"},"nodeType":"YulFunctionCall","src":"8117:19:3"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"8105:3:3"},"nodeType":"YulFunctionCall","src":"8105:32:3"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8087:6:3"},"nodeType":"YulFunctionCall","src":"8087:51:3"},"nodeType":"YulExpressionStatement","src":"8087:51:3"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8011:9:3","type":""},{"name":"value0","nodeType":"YulTypedName","src":"8022:6:3","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"8033:4:3","type":""}],"src":"7941:203:3"},{"body":{"nodeType":"YulBlock","src":"8304:233:3","statements":[{"nodeType":"YulAssignment","src":"8314:26:3","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8326:9:3"},{"kind":"number","nodeType":"YulLiteral","src":"8337:2:3","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8322:3:3"},"nodeType":"YulFunctionCall","src":"8322:18:3"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"8314:4:3"}]},{"nodeType":"YulVariableDeclaration","src":"8349:29:3","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8367:3:3","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"8372:1:3","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"8363:3:3"},"nodeType":"YulFunctionCall","src":"8363:11:3"},{"kind":"number","nodeType":"YulLiteral","src":"8376:1:3","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"8359:3:3"},"nodeType":"YulFunctionCall","src":"8359:19:3"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"8353:2:3","type":""}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8394:9:3"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"8409:6:3"},{"name":"_1","nodeType":"YulIdentifier","src":"8417:2:3"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"8405:3:3"},"nodeType":"YulFunctionCall","src":"8405:15:3"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8387:6:3"},"nodeType":"YulFunctionCall","src":"8387:34:3"},"nodeType":"YulExpressionStatement","src":"8387:34:3"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8441:9:3"},{"kind":"number","nodeType":"YulLiteral","src":"8452:2:3","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8437:3:3"},"nodeType":"YulFunctionCall","src":"8437:18:3"},{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"8461:6:3"},{"name":"_1","nodeType":"YulIdentifier","src":"8469:2:3"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"8457:3:3"},"nodeType":"YulFunctionCall","src":"8457:15:3"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8430:6:3"},"nodeType":"YulFunctionCall","src":"8430:43:3"},"nodeType":"YulExpressionStatement","src":"8430:43:3"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8493:9:3"},{"kind":"number","nodeType":"YulLiteral","src":"8504:2:3","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8489:3:3"},"nodeType":"YulFunctionCall","src":"8489:18:3"},{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"8513:6:3"},{"kind":"number","nodeType":"YulLiteral","src":"8521:8:3","type":"","value":"0xffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"8509:3:3"},"nodeType":"YulFunctionCall","src":"8509:21:3"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8482:6:3"},"nodeType":"YulFunctionCall","src":"8482:49:3"},"nodeType":"YulExpressionStatement","src":"8482:49:3"}]},"name":"abi_encode_tuple_t_address_t_address_t_uint24__to_t_address_t_address_t_uint24__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8257:9:3","type":""},{"name":"value2","nodeType":"YulTypedName","src":"8268:6:3","type":""},{"name":"value1","nodeType":"YulTypedName","src":"8276:6:3","type":""},{"name":"value0","nodeType":"YulTypedName","src":"8284:6:3","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"8295:4:3","type":""}],"src":"8149:388:3"},{"body":{"nodeType":"YulBlock","src":"8699:218:3","statements":[{"nodeType":"YulAssignment","src":"8709:26:3","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8721:9:3"},{"kind":"number","nodeType":"YulLiteral","src":"8732:2:3","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8717:3:3"},"nodeType":"YulFunctionCall","src":"8717:18:3"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"8709:4:3"}]},{"nodeType":"YulVariableDeclaration","src":"8744:29:3","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8762:3:3","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"8767:1:3","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"8758:3:3"},"nodeType":"YulFunctionCall","src":"8758:11:3"},{"kind":"number","nodeType":"YulLiteral","src":"8771:1:3","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"8754:3:3"},"nodeType":"YulFunctionCall","src":"8754:19:3"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"8748:2:3","type":""}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8789:9:3"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"8804:6:3"},{"name":"_1","nodeType":"YulIdentifier","src":"8812:2:3"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"8800:3:3"},"nodeType":"YulFunctionCall","src":"8800:15:3"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8782:6:3"},"nodeType":"YulFunctionCall","src":"8782:34:3"},"nodeType":"YulExpressionStatement","src":"8782:34:3"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8836:9:3"},{"kind":"number","nodeType":"YulLiteral","src":"8847:2:3","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8832:3:3"},"nodeType":"YulFunctionCall","src":"8832:18:3"},{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"8856:6:3"},{"name":"_1","nodeType":"YulIdentifier","src":"8864:2:3"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"8852:3:3"},"nodeType":"YulFunctionCall","src":"8852:15:3"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8825:6:3"},"nodeType":"YulFunctionCall","src":"8825:43:3"},"nodeType":"YulExpressionStatement","src":"8825:43:3"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8888:9:3"},{"kind":"number","nodeType":"YulLiteral","src":"8899:2:3","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8884:3:3"},"nodeType":"YulFunctionCall","src":"8884:18:3"},{"name":"value2","nodeType":"YulIdentifier","src":"8904:6:3"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8877:6:3"},"nodeType":"YulFunctionCall","src":"8877:34:3"},"nodeType":"YulExpressionStatement","src":"8877:34:3"}]},"name":"abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8652:9:3","type":""},{"name":"value2","nodeType":"YulTypedName","src":"8663:6:3","type":""},{"name":"value1","nodeType":"YulTypedName","src":"8671:6:3","type":""},{"name":"value0","nodeType":"YulTypedName","src":"8679:6:3","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"8690:4:3","type":""}],"src":"8542:375:3"},{"body":{"nodeType":"YulBlock","src":"9051:145:3","statements":[{"nodeType":"YulAssignment","src":"9061:26:3","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9073:9:3"},{"kind":"number","nodeType":"YulLiteral","src":"9084:2:3","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9069:3:3"},"nodeType":"YulFunctionCall","src":"9069:18:3"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"9061:4:3"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9103:9:3"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"9118:6:3"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9134:3:3","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"9139:1:3","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"9130:3:3"},"nodeType":"YulFunctionCall","src":"9130:11:3"},{"kind":"number","nodeType":"YulLiteral","src":"9143:1:3","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"9126:3:3"},"nodeType":"YulFunctionCall","src":"9126:19:3"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"9114:3:3"},"nodeType":"YulFunctionCall","src":"9114:32:3"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9096:6:3"},"nodeType":"YulFunctionCall","src":"9096:51:3"},"nodeType":"YulExpressionStatement","src":"9096:51:3"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9167:9:3"},{"kind":"number","nodeType":"YulLiteral","src":"9178:2:3","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9163:3:3"},"nodeType":"YulFunctionCall","src":"9163:18:3"},{"name":"value1","nodeType":"YulIdentifier","src":"9183:6:3"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9156:6:3"},"nodeType":"YulFunctionCall","src":"9156:34:3"},"nodeType":"YulExpressionStatement","src":"9156:34:3"}]},"name":"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"9012:9:3","type":""},{"name":"value1","nodeType":"YulTypedName","src":"9023:6:3","type":""},{"name":"value0","nodeType":"YulTypedName","src":"9031:6:3","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"9042:4:3","type":""}],"src":"8922:274:3"},{"body":{"nodeType":"YulBlock","src":"9444:267:3","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9461:9:3"},{"name":"value0","nodeType":"YulIdentifier","src":"9472:6:3"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9454:6:3"},"nodeType":"YulFunctionCall","src":"9454:25:3"},"nodeType":"YulExpressionStatement","src":"9454:25:3"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9499:9:3"},{"kind":"number","nodeType":"YulLiteral","src":"9510:2:3","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9495:3:3"},"nodeType":"YulFunctionCall","src":"9495:18:3"},{"kind":"number","nodeType":"YulLiteral","src":"9515:3:3","type":"","value":"128"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9488:6:3"},"nodeType":"YulFunctionCall","src":"9488:31:3"},"nodeType":"YulExpressionStatement","src":"9488:31:3"},{"nodeType":"YulAssignment","src":"9528:65:3","value":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"9565:6:3"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9577:9:3"},{"kind":"number","nodeType":"YulLiteral","src":"9588:3:3","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9573:3:3"},"nodeType":"YulFunctionCall","src":"9573:19:3"}],"functionName":{"name":"abi_encode_array_address_dyn","nodeType":"YulIdentifier","src":"9536:28:3"},"nodeType":"YulFunctionCall","src":"9536:57:3"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"9528:4:3"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9613:9:3"},{"kind":"number","nodeType":"YulLiteral","src":"9624:2:3","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9609:3:3"},"nodeType":"YulFunctionCall","src":"9609:18:3"},{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"9633:6:3"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9649:3:3","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"9654:1:3","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"9645:3:3"},"nodeType":"YulFunctionCall","src":"9645:11:3"},{"kind":"number","nodeType":"YulLiteral","src":"9658:1:3","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"9641:3:3"},"nodeType":"YulFunctionCall","src":"9641:19:3"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"9629:3:3"},"nodeType":"YulFunctionCall","src":"9629:32:3"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9602:6:3"},"nodeType":"YulFunctionCall","src":"9602:60:3"},"nodeType":"YulExpressionStatement","src":"9602:60:3"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9682:9:3"},{"kind":"number","nodeType":"YulLiteral","src":"9693:2:3","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9678:3:3"},"nodeType":"YulFunctionCall","src":"9678:18:3"},{"name":"value3","nodeType":"YulIdentifier","src":"9698:6:3"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9671:6:3"},"nodeType":"YulFunctionCall","src":"9671:34:3"},"nodeType":"YulExpressionStatement","src":"9671:34:3"}]},"name":"abi_encode_tuple_t_rational_0_by_1_t_array$_t_address_$dyn_memory_ptr_t_address_t_uint256__to_t_uint256_t_array$_t_address_$dyn_memory_ptr_t_address_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"9389:9:3","type":""},{"name":"value3","nodeType":"YulTypedName","src":"9400:6:3","type":""},{"name":"value2","nodeType":"YulTypedName","src":"9408:6:3","type":""},{"name":"value1","nodeType":"YulTypedName","src":"9416:6:3","type":""},{"name":"value0","nodeType":"YulTypedName","src":"9424:6:3","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"9435:4:3","type":""}],"src":"9201:510:3"},{"body":{"nodeType":"YulBlock","src":"9837:262:3","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9854:9:3"},{"kind":"number","nodeType":"YulLiteral","src":"9865:2:3","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9847:6:3"},"nodeType":"YulFunctionCall","src":"9847:21:3"},"nodeType":"YulExpressionStatement","src":"9847:21:3"},{"nodeType":"YulVariableDeclaration","src":"9877:27:3","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"9897:6:3"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"9891:5:3"},"nodeType":"YulFunctionCall","src":"9891:13:3"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"9881:6:3","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9924:9:3"},{"kind":"number","nodeType":"YulLiteral","src":"9935:2:3","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9920:3:3"},"nodeType":"YulFunctionCall","src":"9920:18:3"},{"name":"length","nodeType":"YulIdentifier","src":"9940:6:3"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9913:6:3"},"nodeType":"YulFunctionCall","src":"9913:34:3"},"nodeType":"YulExpressionStatement","src":"9913:34:3"},{"expression":{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"9982:6:3"},{"kind":"number","nodeType":"YulLiteral","src":"9990:2:3","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9978:3:3"},"nodeType":"YulFunctionCall","src":"9978:15:3"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9999:9:3"},{"kind":"number","nodeType":"YulLiteral","src":"10010:2:3","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9995:3:3"},"nodeType":"YulFunctionCall","src":"9995:18:3"},{"name":"length","nodeType":"YulIdentifier","src":"10015:6:3"}],"functionName":{"name":"copy_memory_to_memory","nodeType":"YulIdentifier","src":"9956:21:3"},"nodeType":"YulFunctionCall","src":"9956:66:3"},"nodeType":"YulExpressionStatement","src":"9956:66:3"},{"nodeType":"YulAssignment","src":"10031:62:3","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10047:9:3"},{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"10066:6:3"},{"kind":"number","nodeType":"YulLiteral","src":"10074:2:3","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10062:3:3"},"nodeType":"YulFunctionCall","src":"10062:15:3"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10083:2:3","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"10079:3:3"},"nodeType":"YulFunctionCall","src":"10079:7:3"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"10058:3:3"},"nodeType":"YulFunctionCall","src":"10058:29:3"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10043:3:3"},"nodeType":"YulFunctionCall","src":"10043:45:3"},{"kind":"number","nodeType":"YulLiteral","src":"10090:2:3","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10039:3:3"},"nodeType":"YulFunctionCall","src":"10039:54:3"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"10031:4:3"}]}]},"name":"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"9806:9:3","type":""},{"name":"value0","nodeType":"YulTypedName","src":"9817:6:3","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"9828:4:3","type":""}],"src":"9716:383:3"},{"body":{"nodeType":"YulBlock","src":"10278:178:3","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10295:9:3"},{"kind":"number","nodeType":"YulLiteral","src":"10306:2:3","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10288:6:3"},"nodeType":"YulFunctionCall","src":"10288:21:3"},"nodeType":"YulExpressionStatement","src":"10288:21:3"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10329:9:3"},{"kind":"number","nodeType":"YulLiteral","src":"10340:2:3","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10325:3:3"},"nodeType":"YulFunctionCall","src":"10325:18:3"},{"kind":"number","nodeType":"YulLiteral","src":"10345:2:3","type":"","value":"28"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10318:6:3"},"nodeType":"YulFunctionCall","src":"10318:30:3"},"nodeType":"YulExpressionStatement","src":"10318:30:3"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10368:9:3"},{"kind":"number","nodeType":"YulLiteral","src":"10379:2:3","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10364:3:3"},"nodeType":"YulFunctionCall","src":"10364:18:3"},{"kind":"string","nodeType":"YulLiteral","src":"10384:30:3","type":"","value":"PattieSwap: Insufficient ETH"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10357:6:3"},"nodeType":"YulFunctionCall","src":"10357:58:3"},"nodeType":"YulExpressionStatement","src":"10357:58:3"},{"nodeType":"YulAssignment","src":"10424:26:3","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10436:9:3"},{"kind":"number","nodeType":"YulLiteral","src":"10447:2:3","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10432:3:3"},"nodeType":"YulFunctionCall","src":"10432:18:3"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"10424:4:3"}]}]},"name":"abi_encode_tuple_t_stringliteral_01e87990a0dc07718ceddba976403cc2935fd21bf07b78a80df682aad724bf67__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"10255:9:3","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"10269:4:3","type":""}],"src":"10104:352:3"},{"body":{"nodeType":"YulBlock","src":"10635:224:3","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10652:9:3"},{"kind":"number","nodeType":"YulLiteral","src":"10663:2:3","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10645:6:3"},"nodeType":"YulFunctionCall","src":"10645:21:3"},"nodeType":"YulExpressionStatement","src":"10645:21:3"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10686:9:3"},{"kind":"number","nodeType":"YulLiteral","src":"10697:2:3","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10682:3:3"},"nodeType":"YulFunctionCall","src":"10682:18:3"},{"kind":"number","nodeType":"YulLiteral","src":"10702:2:3","type":"","value":"34"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10675:6:3"},"nodeType":"YulFunctionCall","src":"10675:30:3"},"nodeType":"YulExpressionStatement","src":"10675:30:3"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10725:9:3"},{"kind":"number","nodeType":"YulLiteral","src":"10736:2:3","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10721:3:3"},"nodeType":"YulFunctionCall","src":"10721:18:3"},{"kind":"string","nodeType":"YulLiteral","src":"10741:34:3","type":"","value":"PattieSwap: Path must be specifi"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10714:6:3"},"nodeType":"YulFunctionCall","src":"10714:62:3"},"nodeType":"YulExpressionStatement","src":"10714:62:3"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10796:9:3"},{"kind":"number","nodeType":"YulLiteral","src":"10807:2:3","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10792:3:3"},"nodeType":"YulFunctionCall","src":"10792:18:3"},{"kind":"string","nodeType":"YulLiteral","src":"10812:4:3","type":"","value":"ed"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10785:6:3"},"nodeType":"YulFunctionCall","src":"10785:32:3"},"nodeType":"YulExpressionStatement","src":"10785:32:3"},{"nodeType":"YulAssignment","src":"10826:27:3","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10838:9:3"},{"kind":"number","nodeType":"YulLiteral","src":"10849:3:3","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10834:3:3"},"nodeType":"YulFunctionCall","src":"10834:19:3"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"10826:4:3"}]}]},"name":"abi_encode_tuple_t_stringliteral_126adf17cba57bad3f5d489069f4b43a3c7599a72527e16e7e32dab66ae185ae__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"10612:9:3","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"10626:4:3","type":""}],"src":"10461:398:3"},{"body":{"nodeType":"YulBlock","src":"11038:228:3","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11055:9:3"},{"kind":"number","nodeType":"YulLiteral","src":"11066:2:3","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11048:6:3"},"nodeType":"YulFunctionCall","src":"11048:21:3"},"nodeType":"YulExpressionStatement","src":"11048:21:3"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11089:9:3"},{"kind":"number","nodeType":"YulLiteral","src":"11100:2:3","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11085:3:3"},"nodeType":"YulFunctionCall","src":"11085:18:3"},{"kind":"number","nodeType":"YulLiteral","src":"11105:2:3","type":"","value":"38"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11078:6:3"},"nodeType":"YulFunctionCall","src":"11078:30:3"},"nodeType":"YulExpressionStatement","src":"11078:30:3"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11128:9:3"},{"kind":"number","nodeType":"YulLiteral","src":"11139:2:3","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11124:3:3"},"nodeType":"YulFunctionCall","src":"11124:18:3"},{"kind":"string","nodeType":"YulLiteral","src":"11144:34:3","type":"","value":"Ownable: new owner is the zero a"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11117:6:3"},"nodeType":"YulFunctionCall","src":"11117:62:3"},"nodeType":"YulExpressionStatement","src":"11117:62:3"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11199:9:3"},{"kind":"number","nodeType":"YulLiteral","src":"11210:2:3","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11195:3:3"},"nodeType":"YulFunctionCall","src":"11195:18:3"},{"kind":"string","nodeType":"YulLiteral","src":"11215:8:3","type":"","value":"ddress"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11188:6:3"},"nodeType":"YulFunctionCall","src":"11188:36:3"},"nodeType":"YulExpressionStatement","src":"11188:36:3"},{"nodeType":"YulAssignment","src":"11233:27:3","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11245:9:3"},{"kind":"number","nodeType":"YulLiteral","src":"11256:3:3","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11241:3:3"},"nodeType":"YulFunctionCall","src":"11241:19:3"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"11233:4:3"}]}]},"name":"abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"11015:9:3","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"11029:4:3","type":""}],"src":"10864:402:3"},{"body":{"nodeType":"YulBlock","src":"11445:170:3","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11462:9:3"},{"kind":"number","nodeType":"YulLiteral","src":"11473:2:3","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11455:6:3"},"nodeType":"YulFunctionCall","src":"11455:21:3"},"nodeType":"YulExpressionStatement","src":"11455:21:3"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11496:9:3"},{"kind":"number","nodeType":"YulLiteral","src":"11507:2:3","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11492:3:3"},"nodeType":"YulFunctionCall","src":"11492:18:3"},{"kind":"number","nodeType":"YulLiteral","src":"11512:2:3","type":"","value":"20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11485:6:3"},"nodeType":"YulFunctionCall","src":"11485:30:3"},"nodeType":"YulExpressionStatement","src":"11485:30:3"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11535:9:3"},{"kind":"number","nodeType":"YulLiteral","src":"11546:2:3","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11531:3:3"},"nodeType":"YulFunctionCall","src":"11531:18:3"},{"kind":"string","nodeType":"YulLiteral","src":"11551:22:3","type":"","value":"Failed to send Ether"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11524:6:3"},"nodeType":"YulFunctionCall","src":"11524:50:3"},"nodeType":"YulExpressionStatement","src":"11524:50:3"},{"nodeType":"YulAssignment","src":"11583:26:3","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11595:9:3"},{"kind":"number","nodeType":"YulLiteral","src":"11606:2:3","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11591:3:3"},"nodeType":"YulFunctionCall","src":"11591:18:3"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"11583:4:3"}]}]},"name":"abi_encode_tuple_t_stringliteral_445140255c9d889994129d349e64078d6f76b4b37ec896948f7e858f9b8a0dcb__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"11422:9:3","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"11436:4:3","type":""}],"src":"11271:344:3"},{"body":{"nodeType":"YulBlock","src":"11794:228:3","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11811:9:3"},{"kind":"number","nodeType":"YulLiteral","src":"11822:2:3","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11804:6:3"},"nodeType":"YulFunctionCall","src":"11804:21:3"},"nodeType":"YulExpressionStatement","src":"11804:21:3"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11845:9:3"},{"kind":"number","nodeType":"YulLiteral","src":"11856:2:3","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11841:3:3"},"nodeType":"YulFunctionCall","src":"11841:18:3"},{"kind":"number","nodeType":"YulLiteral","src":"11861:2:3","type":"","value":"38"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11834:6:3"},"nodeType":"YulFunctionCall","src":"11834:30:3"},"nodeType":"YulExpressionStatement","src":"11834:30:3"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11884:9:3"},{"kind":"number","nodeType":"YulLiteral","src":"11895:2:3","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11880:3:3"},"nodeType":"YulFunctionCall","src":"11880:18:3"},{"kind":"string","nodeType":"YulLiteral","src":"11900:34:3","type":"","value":"Address: insufficient balance fo"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11873:6:3"},"nodeType":"YulFunctionCall","src":"11873:62:3"},"nodeType":"YulExpressionStatement","src":"11873:62:3"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11955:9:3"},{"kind":"number","nodeType":"YulLiteral","src":"11966:2:3","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11951:3:3"},"nodeType":"YulFunctionCall","src":"11951:18:3"},{"kind":"string","nodeType":"YulLiteral","src":"11971:8:3","type":"","value":"r call"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11944:6:3"},"nodeType":"YulFunctionCall","src":"11944:36:3"},"nodeType":"YulExpressionStatement","src":"11944:36:3"},{"nodeType":"YulAssignment","src":"11989:27:3","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12001:9:3"},{"kind":"number","nodeType":"YulLiteral","src":"12012:3:3","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11997:3:3"},"nodeType":"YulFunctionCall","src":"11997:19:3"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"11989:4:3"}]}]},"name":"abi_encode_tuple_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"11771:9:3","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"11785:4:3","type":""}],"src":"11620:402:3"},{"body":{"nodeType":"YulBlock","src":"12201:178:3","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12218:9:3"},{"kind":"number","nodeType":"YulLiteral","src":"12229:2:3","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12211:6:3"},"nodeType":"YulFunctionCall","src":"12211:21:3"},"nodeType":"YulExpressionStatement","src":"12211:21:3"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12252:9:3"},{"kind":"number","nodeType":"YulLiteral","src":"12263:2:3","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12248:3:3"},"nodeType":"YulFunctionCall","src":"12248:18:3"},{"kind":"number","nodeType":"YulLiteral","src":"12268:2:3","type":"","value":"28"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12241:6:3"},"nodeType":"YulFunctionCall","src":"12241:30:3"},"nodeType":"YulExpressionStatement","src":"12241:30:3"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12291:9:3"},{"kind":"number","nodeType":"YulLiteral","src":"12302:2:3","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12287:3:3"},"nodeType":"YulFunctionCall","src":"12287:18:3"},{"kind":"string","nodeType":"YulLiteral","src":"12307:30:3","type":"","value":"You did not swap in 24 hours"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12280:6:3"},"nodeType":"YulFunctionCall","src":"12280:58:3"},"nodeType":"YulExpressionStatement","src":"12280:58:3"},{"nodeType":"YulAssignment","src":"12347:26:3","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12359:9:3"},{"kind":"number","nodeType":"YulLiteral","src":"12370:2:3","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12355:3:3"},"nodeType":"YulFunctionCall","src":"12355:18:3"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"12347:4:3"}]}]},"name":"abi_encode_tuple_t_stringliteral_797abde7c0639a1dc8346b8f598cbf1957cf783fc0005f1a141aeb4674e15c74__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"12178:9:3","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"12192:4:3","type":""}],"src":"12027:352:3"},{"body":{"nodeType":"YulBlock","src":"12558:175:3","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12575:9:3"},{"kind":"number","nodeType":"YulLiteral","src":"12586:2:3","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12568:6:3"},"nodeType":"YulFunctionCall","src":"12568:21:3"},"nodeType":"YulExpressionStatement","src":"12568:21:3"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12609:9:3"},{"kind":"number","nodeType":"YulLiteral","src":"12620:2:3","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12605:3:3"},"nodeType":"YulFunctionCall","src":"12605:18:3"},{"kind":"number","nodeType":"YulLiteral","src":"12625:2:3","type":"","value":"25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12598:6:3"},"nodeType":"YulFunctionCall","src":"12598:30:3"},"nodeType":"YulExpressionStatement","src":"12598:30:3"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12648:9:3"},{"kind":"number","nodeType":"YulLiteral","src":"12659:2:3","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12644:3:3"},"nodeType":"YulFunctionCall","src":"12644:18:3"},{"kind":"string","nodeType":"YulLiteral","src":"12664:27:3","type":"","value":"You airdroped in 24 hours"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12637:6:3"},"nodeType":"YulFunctionCall","src":"12637:55:3"},"nodeType":"YulExpressionStatement","src":"12637:55:3"},{"nodeType":"YulAssignment","src":"12701:26:3","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12713:9:3"},{"kind":"number","nodeType":"YulLiteral","src":"12724:2:3","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12709:3:3"},"nodeType":"YulFunctionCall","src":"12709:18:3"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"12701:4:3"}]}]},"name":"abi_encode_tuple_t_stringliteral_8ff2a40bc13d030f2a459ef7b37b7fe78e1bb34bd7a7ef6ed1539774e9557e2d__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"12535:9:3","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"12549:4:3","type":""}],"src":"12384:349:3"},{"body":{"nodeType":"YulBlock","src":"12912:233:3","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12929:9:3"},{"kind":"number","nodeType":"YulLiteral","src":"12940:2:3","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12922:6:3"},"nodeType":"YulFunctionCall","src":"12922:21:3"},"nodeType":"YulExpressionStatement","src":"12922:21:3"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12963:9:3"},{"kind":"number","nodeType":"YulLiteral","src":"12974:2:3","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12959:3:3"},"nodeType":"YulFunctionCall","src":"12959:18:3"},{"kind":"number","nodeType":"YulLiteral","src":"12979:2:3","type":"","value":"43"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12952:6:3"},"nodeType":"YulFunctionCall","src":"12952:30:3"},"nodeType":"YulExpressionStatement","src":"12952:30:3"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13002:9:3"},{"kind":"number","nodeType":"YulLiteral","src":"13013:2:3","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12998:3:3"},"nodeType":"YulFunctionCall","src":"12998:18:3"},{"kind":"string","nodeType":"YulLiteral","src":"13018:34:3","type":"","value":"PattieSwap: amountIn must be gre"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12991:6:3"},"nodeType":"YulFunctionCall","src":"12991:62:3"},"nodeType":"YulExpressionStatement","src":"12991:62:3"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13073:9:3"},{"kind":"number","nodeType":"YulLiteral","src":"13084:2:3","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13069:3:3"},"nodeType":"YulFunctionCall","src":"13069:18:3"},{"kind":"string","nodeType":"YulLiteral","src":"13089:13:3","type":"","value":"ater than 0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13062:6:3"},"nodeType":"YulFunctionCall","src":"13062:41:3"},"nodeType":"YulExpressionStatement","src":"13062:41:3"},{"nodeType":"YulAssignment","src":"13112:27:3","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13124:9:3"},{"kind":"number","nodeType":"YulLiteral","src":"13135:3:3","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13120:3:3"},"nodeType":"YulFunctionCall","src":"13120:19:3"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"13112:4:3"}]}]},"name":"abi_encode_tuple_t_stringliteral_946fb9d4d3f17144c3d6e236e8acbd91334f49d924b06e35bc65e960716f6155__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"12889:9:3","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"12903:4:3","type":""}],"src":"12738:407:3"},{"body":{"nodeType":"YulBlock","src":"13324:182:3","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13341:9:3"},{"kind":"number","nodeType":"YulLiteral","src":"13352:2:3","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13334:6:3"},"nodeType":"YulFunctionCall","src":"13334:21:3"},"nodeType":"YulExpressionStatement","src":"13334:21:3"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13375:9:3"},{"kind":"number","nodeType":"YulLiteral","src":"13386:2:3","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13371:3:3"},"nodeType":"YulFunctionCall","src":"13371:18:3"},{"kind":"number","nodeType":"YulLiteral","src":"13391:2:3","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13364:6:3"},"nodeType":"YulFunctionCall","src":"13364:30:3"},"nodeType":"YulExpressionStatement","src":"13364:30:3"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13414:9:3"},{"kind":"number","nodeType":"YulLiteral","src":"13425:2:3","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13410:3:3"},"nodeType":"YulFunctionCall","src":"13410:18:3"},{"kind":"string","nodeType":"YulLiteral","src":"13430:34:3","type":"","value":"Ownable: caller is not the owner"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13403:6:3"},"nodeType":"YulFunctionCall","src":"13403:62:3"},"nodeType":"YulExpressionStatement","src":"13403:62:3"},{"nodeType":"YulAssignment","src":"13474:26:3","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13486:9:3"},{"kind":"number","nodeType":"YulLiteral","src":"13497:2:3","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13482:3:3"},"nodeType":"YulFunctionCall","src":"13482:18:3"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"13474:4:3"}]}]},"name":"abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"13301:9:3","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"13315:4:3","type":""}],"src":"13150:356:3"},{"body":{"nodeType":"YulBlock","src":"13685:179:3","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13702:9:3"},{"kind":"number","nodeType":"YulLiteral","src":"13713:2:3","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13695:6:3"},"nodeType":"YulFunctionCall","src":"13695:21:3"},"nodeType":"YulExpressionStatement","src":"13695:21:3"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13736:9:3"},{"kind":"number","nodeType":"YulLiteral","src":"13747:2:3","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13732:3:3"},"nodeType":"YulFunctionCall","src":"13732:18:3"},{"kind":"number","nodeType":"YulLiteral","src":"13752:2:3","type":"","value":"29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13725:6:3"},"nodeType":"YulFunctionCall","src":"13725:30:3"},"nodeType":"YulExpressionStatement","src":"13725:30:3"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13775:9:3"},{"kind":"number","nodeType":"YulLiteral","src":"13786:2:3","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13771:3:3"},"nodeType":"YulFunctionCall","src":"13771:18:3"},{"kind":"string","nodeType":"YulLiteral","src":"13791:31:3","type":"","value":"Address: call to non-contract"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13764:6:3"},"nodeType":"YulFunctionCall","src":"13764:59:3"},"nodeType":"YulExpressionStatement","src":"13764:59:3"},{"nodeType":"YulAssignment","src":"13832:26:3","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13844:9:3"},{"kind":"number","nodeType":"YulLiteral","src":"13855:2:3","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13840:3:3"},"nodeType":"YulFunctionCall","src":"13840:18:3"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"13832:4:3"}]}]},"name":"abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"13662:9:3","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"13676:4:3","type":""}],"src":"13511:353:3"},{"body":{"nodeType":"YulBlock","src":"14043:232:3","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14060:9:3"},{"kind":"number","nodeType":"YulLiteral","src":"14071:2:3","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14053:6:3"},"nodeType":"YulFunctionCall","src":"14053:21:3"},"nodeType":"YulExpressionStatement","src":"14053:21:3"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14094:9:3"},{"kind":"number","nodeType":"YulLiteral","src":"14105:2:3","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14090:3:3"},"nodeType":"YulFunctionCall","src":"14090:18:3"},{"kind":"number","nodeType":"YulLiteral","src":"14110:2:3","type":"","value":"42"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14083:6:3"},"nodeType":"YulFunctionCall","src":"14083:30:3"},"nodeType":"YulExpressionStatement","src":"14083:30:3"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14133:9:3"},{"kind":"number","nodeType":"YulLiteral","src":"14144:2:3","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14129:3:3"},"nodeType":"YulFunctionCall","src":"14129:18:3"},{"kind":"string","nodeType":"YulLiteral","src":"14149:34:3","type":"","value":"SafeERC20: ERC20 operation did n"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14122:6:3"},"nodeType":"YulFunctionCall","src":"14122:62:3"},"nodeType":"YulExpressionStatement","src":"14122:62:3"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14204:9:3"},{"kind":"number","nodeType":"YulLiteral","src":"14215:2:3","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14200:3:3"},"nodeType":"YulFunctionCall","src":"14200:18:3"},{"kind":"string","nodeType":"YulLiteral","src":"14220:12:3","type":"","value":"ot succeed"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14193:6:3"},"nodeType":"YulFunctionCall","src":"14193:40:3"},"nodeType":"YulExpressionStatement","src":"14193:40:3"},{"nodeType":"YulAssignment","src":"14242:27:3","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14254:9:3"},{"kind":"number","nodeType":"YulLiteral","src":"14265:3:3","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14250:3:3"},"nodeType":"YulFunctionCall","src":"14250:19:3"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"14242:4:3"}]}]},"name":"abi_encode_tuple_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"14020:9:3","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"14034:4:3","type":""}],"src":"13869:406:3"},{"body":{"nodeType":"YulBlock","src":"14454:163:3","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14471:9:3"},{"kind":"number","nodeType":"YulLiteral","src":"14482:2:3","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14464:6:3"},"nodeType":"YulFunctionCall","src":"14464:21:3"},"nodeType":"YulExpressionStatement","src":"14464:21:3"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14505:9:3"},{"kind":"number","nodeType":"YulLiteral","src":"14516:2:3","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14501:3:3"},"nodeType":"YulFunctionCall","src":"14501:18:3"},{"kind":"number","nodeType":"YulLiteral","src":"14521:2:3","type":"","value":"13"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14494:6:3"},"nodeType":"YulFunctionCall","src":"14494:30:3"},"nodeType":"YulExpressionStatement","src":"14494:30:3"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14544:9:3"},{"kind":"number","nodeType":"YulLiteral","src":"14555:2:3","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14540:3:3"},"nodeType":"YulFunctionCall","src":"14540:18:3"},{"kind":"string","nodeType":"YulLiteral","src":"14560:15:3","type":"","value":"refund failed"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14533:6:3"},"nodeType":"YulFunctionCall","src":"14533:43:3"},"nodeType":"YulExpressionStatement","src":"14533:43:3"},{"nodeType":"YulAssignment","src":"14585:26:3","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14597:9:3"},{"kind":"number","nodeType":"YulLiteral","src":"14608:2:3","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14593:3:3"},"nodeType":"YulFunctionCall","src":"14593:18:3"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"14585:4:3"}]}]},"name":"abi_encode_tuple_t_stringliteral_f9239079da98909f815170ee967acd53b4cf9b37ced6a4dd9f2f25df9bc54bf5__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"14431:9:3","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"14445:4:3","type":""}],"src":"14280:337:3"},{"body":{"nodeType":"YulBlock","src":"14803:551:3","statements":[{"nodeType":"YulAssignment","src":"14813:27:3","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14825:9:3"},{"kind":"number","nodeType":"YulLiteral","src":"14836:3:3","type":"","value":"224"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14821:3:3"},"nodeType":"YulFunctionCall","src":"14821:19:3"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"14813:4:3"}]},{"nodeType":"YulVariableDeclaration","src":"14849:29:3","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"14867:3:3","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"14872:1:3","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"14863:3:3"},"nodeType":"YulFunctionCall","src":"14863:11:3"},{"kind":"number","nodeType":"YulLiteral","src":"14876:1:3","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"14859:3:3"},"nodeType":"YulFunctionCall","src":"14859:19:3"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"14853:2:3","type":""}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14894:9:3"},{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"14915:6:3"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"14909:5:3"},"nodeType":"YulFunctionCall","src":"14909:13:3"},{"name":"_1","nodeType":"YulIdentifier","src":"14924:2:3"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"14905:3:3"},"nodeType":"YulFunctionCall","src":"14905:22:3"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14887:6:3"},"nodeType":"YulFunctionCall","src":"14887:41:3"},"nodeType":"YulExpressionStatement","src":"14887:41:3"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14948:9:3"},{"kind":"number","nodeType":"YulLiteral","src":"14959:4:3","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14944:3:3"},"nodeType":"YulFunctionCall","src":"14944:20:3"},{"arguments":[{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"14980:6:3"},{"kind":"number","nodeType":"YulLiteral","src":"14988:4:3","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14976:3:3"},"nodeType":"YulFunctionCall","src":"14976:17:3"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"14970:5:3"},"nodeType":"YulFunctionCall","src":"14970:24:3"},{"name":"_1","nodeType":"YulIdentifier","src":"14996:2:3"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"14966:3:3"},"nodeType":"YulFunctionCall","src":"14966:33:3"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14937:6:3"},"nodeType":"YulFunctionCall","src":"14937:63:3"},"nodeType":"YulExpressionStatement","src":"14937:63:3"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15020:9:3"},{"kind":"number","nodeType":"YulLiteral","src":"15031:4:3","type":"","value":"0x40"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15016:3:3"},"nodeType":"YulFunctionCall","src":"15016:20:3"},{"arguments":[{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"15052:6:3"},{"kind":"number","nodeType":"YulLiteral","src":"15060:4:3","type":"","value":"0x40"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15048:3:3"},"nodeType":"YulFunctionCall","src":"15048:17:3"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"15042:5:3"},"nodeType":"YulFunctionCall","src":"15042:24:3"},{"kind":"number","nodeType":"YulLiteral","src":"15068:8:3","type":"","value":"0xffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"15038:3:3"},"nodeType":"YulFunctionCall","src":"15038:39:3"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15009:6:3"},"nodeType":"YulFunctionCall","src":"15009:69:3"},"nodeType":"YulExpressionStatement","src":"15009:69:3"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15098:9:3"},{"kind":"number","nodeType":"YulLiteral","src":"15109:4:3","type":"","value":"0x60"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15094:3:3"},"nodeType":"YulFunctionCall","src":"15094:20:3"},{"arguments":[{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"15130:6:3"},{"kind":"number","nodeType":"YulLiteral","src":"15138:4:3","type":"","value":"0x60"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15126:3:3"},"nodeType":"YulFunctionCall","src":"15126:17:3"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"15120:5:3"},"nodeType":"YulFunctionCall","src":"15120:24:3"},{"name":"_1","nodeType":"YulIdentifier","src":"15146:2:3"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"15116:3:3"},"nodeType":"YulFunctionCall","src":"15116:33:3"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15087:6:3"},"nodeType":"YulFunctionCall","src":"15087:63:3"},"nodeType":"YulExpressionStatement","src":"15087:63:3"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15170:9:3"},{"kind":"number","nodeType":"YulLiteral","src":"15181:4:3","type":"","value":"0x80"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15166:3:3"},"nodeType":"YulFunctionCall","src":"15166:20:3"},{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"15198:6:3"},{"kind":"number","nodeType":"YulLiteral","src":"15206:4:3","type":"","value":"0x80"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15194:3:3"},"nodeType":"YulFunctionCall","src":"15194:17:3"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"15188:5:3"},"nodeType":"YulFunctionCall","src":"15188:24:3"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15159:6:3"},"nodeType":"YulFunctionCall","src":"15159:54:3"},"nodeType":"YulExpressionStatement","src":"15159:54:3"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15233:9:3"},{"kind":"number","nodeType":"YulLiteral","src":"15244:4:3","type":"","value":"0xa0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15229:3:3"},"nodeType":"YulFunctionCall","src":"15229:20:3"},{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"15261:6:3"},{"kind":"number","nodeType":"YulLiteral","src":"15269:4:3","type":"","value":"0xa0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15257:3:3"},"nodeType":"YulFunctionCall","src":"15257:17:3"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"15251:5:3"},"nodeType":"YulFunctionCall","src":"15251:24:3"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15222:6:3"},"nodeType":"YulFunctionCall","src":"15222:54:3"},"nodeType":"YulExpressionStatement","src":"15222:54:3"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15296:9:3"},{"kind":"number","nodeType":"YulLiteral","src":"15307:4:3","type":"","value":"0xc0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15292:3:3"},"nodeType":"YulFunctionCall","src":"15292:20:3"},{"arguments":[{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"15328:6:3"},{"kind":"number","nodeType":"YulLiteral","src":"15336:4:3","type":"","value":"0xc0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15324:3:3"},"nodeType":"YulFunctionCall","src":"15324:17:3"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"15318:5:3"},"nodeType":"YulFunctionCall","src":"15318:24:3"},{"name":"_1","nodeType":"YulIdentifier","src":"15344:2:3"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"15314:3:3"},"nodeType":"YulFunctionCall","src":"15314:33:3"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15285:6:3"},"nodeType":"YulFunctionCall","src":"15285:63:3"},"nodeType":"YulExpressionStatement","src":"15285:63:3"}]},"name":"abi_encode_tuple_t_struct$_ExactInputSingleParams_$1885_memory_ptr__to_t_struct$_ExactInputSingleParams_$1885_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"14772:9:3","type":""},{"name":"value0","nodeType":"YulTypedName","src":"14783:6:3","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"14794:4:3","type":""}],"src":"14622:732:3"},{"body":{"nodeType":"YulBlock","src":"15460:76:3","statements":[{"nodeType":"YulAssignment","src":"15470:26:3","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15482:9:3"},{"kind":"number","nodeType":"YulLiteral","src":"15493:2:3","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15478:3:3"},"nodeType":"YulFunctionCall","src":"15478:18:3"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"15470:4:3"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15512:9:3"},{"name":"value0","nodeType":"YulIdentifier","src":"15523:6:3"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15505:6:3"},"nodeType":"YulFunctionCall","src":"15505:25:3"},"nodeType":"YulExpressionStatement","src":"15505:25:3"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"15429:9:3","type":""},{"name":"value0","nodeType":"YulTypedName","src":"15440:6:3","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"15451:4:3","type":""}],"src":"15359:177:3"},{"body":{"nodeType":"YulBlock","src":"15720:153:3","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15737:9:3"},{"name":"value0","nodeType":"YulIdentifier","src":"15748:6:3"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15730:6:3"},"nodeType":"YulFunctionCall","src":"15730:25:3"},"nodeType":"YulExpressionStatement","src":"15730:25:3"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15775:9:3"},{"kind":"number","nodeType":"YulLiteral","src":"15786:2:3","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15771:3:3"},"nodeType":"YulFunctionCall","src":"15771:18:3"},{"kind":"number","nodeType":"YulLiteral","src":"15791:2:3","type":"","value":"64"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15764:6:3"},"nodeType":"YulFunctionCall","src":"15764:30:3"},"nodeType":"YulExpressionStatement","src":"15764:30:3"},{"nodeType":"YulAssignment","src":"15803:64:3","value":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"15840:6:3"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15852:9:3"},{"kind":"number","nodeType":"YulLiteral","src":"15863:2:3","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15848:3:3"},"nodeType":"YulFunctionCall","src":"15848:18:3"}],"functionName":{"name":"abi_encode_array_address_dyn","nodeType":"YulIdentifier","src":"15811:28:3"},"nodeType":"YulFunctionCall","src":"15811:56:3"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"15803:4:3"}]}]},"name":"abi_encode_tuple_t_uint256_t_array$_t_address_$dyn_memory_ptr__to_t_uint256_t_array$_t_address_$dyn_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"15681:9:3","type":""},{"name":"value1","nodeType":"YulTypedName","src":"15692:6:3","type":""},{"name":"value0","nodeType":"YulTypedName","src":"15700:6:3","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"15711:4:3","type":""}],"src":"15541:332:3"},{"body":{"nodeType":"YulBlock","src":"16149:311:3","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16166:9:3"},{"name":"value0","nodeType":"YulIdentifier","src":"16177:6:3"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16159:6:3"},"nodeType":"YulFunctionCall","src":"16159:25:3"},"nodeType":"YulExpressionStatement","src":"16159:25:3"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16204:9:3"},{"kind":"number","nodeType":"YulLiteral","src":"16215:2:3","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16200:3:3"},"nodeType":"YulFunctionCall","src":"16200:18:3"},{"name":"value1","nodeType":"YulIdentifier","src":"16220:6:3"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16193:6:3"},"nodeType":"YulFunctionCall","src":"16193:34:3"},"nodeType":"YulExpressionStatement","src":"16193:34:3"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16247:9:3"},{"kind":"number","nodeType":"YulLiteral","src":"16258:2:3","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16243:3:3"},"nodeType":"YulFunctionCall","src":"16243:18:3"},{"kind":"number","nodeType":"YulLiteral","src":"16263:3:3","type":"","value":"160"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16236:6:3"},"nodeType":"YulFunctionCall","src":"16236:31:3"},"nodeType":"YulExpressionStatement","src":"16236:31:3"},{"nodeType":"YulAssignment","src":"16276:65:3","value":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"16313:6:3"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16325:9:3"},{"kind":"number","nodeType":"YulLiteral","src":"16336:3:3","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16321:3:3"},"nodeType":"YulFunctionCall","src":"16321:19:3"}],"functionName":{"name":"abi_encode_array_address_dyn","nodeType":"YulIdentifier","src":"16284:28:3"},"nodeType":"YulFunctionCall","src":"16284:57:3"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"16276:4:3"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16361:9:3"},{"kind":"number","nodeType":"YulLiteral","src":"16372:2:3","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16357:3:3"},"nodeType":"YulFunctionCall","src":"16357:18:3"},{"arguments":[{"name":"value3","nodeType":"YulIdentifier","src":"16381:6:3"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"16397:3:3","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"16402:1:3","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"16393:3:3"},"nodeType":"YulFunctionCall","src":"16393:11:3"},{"kind":"number","nodeType":"YulLiteral","src":"16406:1:3","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"16389:3:3"},"nodeType":"YulFunctionCall","src":"16389:19:3"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"16377:3:3"},"nodeType":"YulFunctionCall","src":"16377:32:3"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16350:6:3"},"nodeType":"YulFunctionCall","src":"16350:60:3"},"nodeType":"YulExpressionStatement","src":"16350:60:3"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16430:9:3"},{"kind":"number","nodeType":"YulLiteral","src":"16441:3:3","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16426:3:3"},"nodeType":"YulFunctionCall","src":"16426:19:3"},{"name":"value4","nodeType":"YulIdentifier","src":"16447:6:3"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16419:6:3"},"nodeType":"YulFunctionCall","src":"16419:35:3"},"nodeType":"YulExpressionStatement","src":"16419:35:3"}]},"name":"abi_encode_tuple_t_uint256_t_rational_0_by_1_t_array$_t_address_$dyn_memory_ptr_t_address_t_uint256__to_t_uint256_t_uint256_t_array$_t_address_$dyn_memory_ptr_t_address_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"16086:9:3","type":""},{"name":"value4","nodeType":"YulTypedName","src":"16097:6:3","type":""},{"name":"value3","nodeType":"YulTypedName","src":"16105:6:3","type":""},{"name":"value2","nodeType":"YulTypedName","src":"16113:6:3","type":""},{"name":"value1","nodeType":"YulTypedName","src":"16121:6:3","type":""},{"name":"value0","nodeType":"YulTypedName","src":"16129:6:3","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"16140:4:3","type":""}],"src":"15878:582:3"},{"body":{"nodeType":"YulBlock","src":"16510:230:3","statements":[{"nodeType":"YulAssignment","src":"16520:19:3","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"16536:2:3","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"16530:5:3"},"nodeType":"YulFunctionCall","src":"16530:9:3"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"16520:6:3"}]},{"nodeType":"YulVariableDeclaration","src":"16548:58:3","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"16570:6:3"},{"arguments":[{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"16586:4:3"},{"kind":"number","nodeType":"YulLiteral","src":"16592:2:3","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16582:3:3"},"nodeType":"YulFunctionCall","src":"16582:13:3"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"16601:2:3","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"16597:3:3"},"nodeType":"YulFunctionCall","src":"16597:7:3"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"16578:3:3"},"nodeType":"YulFunctionCall","src":"16578:27:3"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16566:3:3"},"nodeType":"YulFunctionCall","src":"16566:40:3"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"16552:10:3","type":""}]},{"body":{"nodeType":"YulBlock","src":"16681:22:3","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"16683:16:3"},"nodeType":"YulFunctionCall","src":"16683:18:3"},"nodeType":"YulExpressionStatement","src":"16683:18:3"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"16624:10:3"},{"kind":"number","nodeType":"YulLiteral","src":"16636:18:3","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"16621:2:3"},"nodeType":"YulFunctionCall","src":"16621:34:3"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"16660:10:3"},{"name":"memPtr","nodeType":"YulIdentifier","src":"16672:6:3"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"16657:2:3"},"nodeType":"YulFunctionCall","src":"16657:22:3"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"16618:2:3"},"nodeType":"YulFunctionCall","src":"16618:62:3"},"nodeType":"YulIf","src":"16615:2:3"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"16719:2:3","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"16723:10:3"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16712:6:3"},"nodeType":"YulFunctionCall","src":"16712:22:3"},"nodeType":"YulExpressionStatement","src":"16712:22:3"}]},"name":"allocate_memory","nodeType":"YulFunctionDefinition","parameters":[{"name":"size","nodeType":"YulTypedName","src":"16490:4:3","type":""}],"returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"16499:6:3","type":""}],"src":"16465:275:3"},{"body":{"nodeType":"YulBlock","src":"16814:114:3","statements":[{"body":{"nodeType":"YulBlock","src":"16858:22:3","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"16860:16:3"},"nodeType":"YulFunctionCall","src":"16860:18:3"},"nodeType":"YulExpressionStatement","src":"16860:18:3"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"16830:6:3"},{"kind":"number","nodeType":"YulLiteral","src":"16838:18:3","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"16827:2:3"},"nodeType":"YulFunctionCall","src":"16827:30:3"},"nodeType":"YulIf","src":"16824:2:3"},{"nodeType":"YulAssignment","src":"16889:33:3","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"16905:1:3","type":"","value":"5"},{"name":"length","nodeType":"YulIdentifier","src":"16908:6:3"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"16901:3:3"},"nodeType":"YulFunctionCall","src":"16901:14:3"},{"kind":"number","nodeType":"YulLiteral","src":"16917:4:3","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16897:3:3"},"nodeType":"YulFunctionCall","src":"16897:25:3"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"16889:4:3"}]}]},"name":"array_allocation_size_array_address_dyn","nodeType":"YulFunctionDefinition","parameters":[{"name":"length","nodeType":"YulTypedName","src":"16794:6:3","type":""}],"returnVariables":[{"name":"size","nodeType":"YulTypedName","src":"16805:4:3","type":""}],"src":"16745:183:3"},{"body":{"nodeType":"YulBlock","src":"16981:80:3","statements":[{"body":{"nodeType":"YulBlock","src":"17008:22:3","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"17010:16:3"},"nodeType":"YulFunctionCall","src":"17010:18:3"},"nodeType":"YulExpressionStatement","src":"17010:18:3"}]},"condition":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"16997:1:3"},{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"17004:1:3"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"17000:3:3"},"nodeType":"YulFunctionCall","src":"17000:6:3"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"16994:2:3"},"nodeType":"YulFunctionCall","src":"16994:13:3"},"nodeType":"YulIf","src":"16991:2:3"},{"nodeType":"YulAssignment","src":"17039:16:3","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"17050:1:3"},{"name":"y","nodeType":"YulIdentifier","src":"17053:1:3"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17046:3:3"},"nodeType":"YulFunctionCall","src":"17046:9:3"},"variableNames":[{"name":"sum","nodeType":"YulIdentifier","src":"17039:3:3"}]}]},"name":"checked_add_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"16964:1:3","type":""},{"name":"y","nodeType":"YulTypedName","src":"16967:1:3","type":""}],"returnVariables":[{"name":"sum","nodeType":"YulTypedName","src":"16973:3:3","type":""}],"src":"16933:128:3"},{"body":{"nodeType":"YulBlock","src":"17112:171:3","statements":[{"body":{"nodeType":"YulBlock","src":"17143:111:3","statements":[{"expression":{"arguments":[{"name":"r","nodeType":"YulIdentifier","src":"17164:1:3"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"17171:3:3","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"17176:10:3","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"17167:3:3"},"nodeType":"YulFunctionCall","src":"17167:20:3"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17157:6:3"},"nodeType":"YulFunctionCall","src":"17157:31:3"},"nodeType":"YulExpressionStatement","src":"17157:31:3"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"17208:1:3","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"17211:4:3","type":"","value":"0x12"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17201:6:3"},"nodeType":"YulFunctionCall","src":"17201:15:3"},"nodeType":"YulExpressionStatement","src":"17201:15:3"},{"expression":{"arguments":[{"name":"r","nodeType":"YulIdentifier","src":"17236:1:3"},{"kind":"number","nodeType":"YulLiteral","src":"17239:4:3","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"17229:6:3"},"nodeType":"YulFunctionCall","src":"17229:15:3"},"nodeType":"YulExpressionStatement","src":"17229:15:3"}]},"condition":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"17132:1:3"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"17125:6:3"},"nodeType":"YulFunctionCall","src":"17125:9:3"},"nodeType":"YulIf","src":"17122:2:3"},{"nodeType":"YulAssignment","src":"17263:14:3","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"17272:1:3"},{"name":"y","nodeType":"YulIdentifier","src":"17275:1:3"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"17268:3:3"},"nodeType":"YulFunctionCall","src":"17268:9:3"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"17263:1:3"}]}]},"name":"checked_div_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"17097:1:3","type":""},{"name":"y","nodeType":"YulTypedName","src":"17100:1:3","type":""}],"returnVariables":[{"name":"r","nodeType":"YulTypedName","src":"17106:1:3","type":""}],"src":"17066:217:3"},{"body":{"nodeType":"YulBlock","src":"17352:358:3","statements":[{"nodeType":"YulVariableDeclaration","src":"17362:16:3","value":{"kind":"number","nodeType":"YulLiteral","src":"17377:1:3","type":"","value":"1"},"variables":[{"name":"power_1","nodeType":"YulTypedName","src":"17366:7:3","type":""}]},{"nodeType":"YulAssignment","src":"17387:16:3","value":{"name":"power_1","nodeType":"YulIdentifier","src":"17396:7:3"},"variableNames":[{"name":"power","nodeType":"YulIdentifier","src":"17387:5:3"}]},{"nodeType":"YulAssignment","src":"17412:13:3","value":{"name":"_base","nodeType":"YulIdentifier","src":"17420:5:3"},"variableNames":[{"name":"base","nodeType":"YulIdentifier","src":"17412:4:3"}]},{"body":{"nodeType":"YulBlock","src":"17476:228:3","statements":[{"body":{"nodeType":"YulBlock","src":"17521:22:3","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"17523:16:3"},"nodeType":"YulFunctionCall","src":"17523:18:3"},"nodeType":"YulExpressionStatement","src":"17523:18:3"}]},"condition":{"arguments":[{"name":"base","nodeType":"YulIdentifier","src":"17496:4:3"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"17510:1:3","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"17506:3:3"},"nodeType":"YulFunctionCall","src":"17506:6:3"},{"name":"base","nodeType":"YulIdentifier","src":"17514:4:3"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"17502:3:3"},"nodeType":"YulFunctionCall","src":"17502:17:3"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"17493:2:3"},"nodeType":"YulFunctionCall","src":"17493:27:3"},"nodeType":"YulIf","src":"17490:2:3"},{"body":{"nodeType":"YulBlock","src":"17582:29:3","statements":[{"nodeType":"YulAssignment","src":"17584:25:3","value":{"arguments":[{"name":"power","nodeType":"YulIdentifier","src":"17597:5:3"},{"name":"base","nodeType":"YulIdentifier","src":"17604:4:3"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"17593:3:3"},"nodeType":"YulFunctionCall","src":"17593:16:3"},"variableNames":[{"name":"power","nodeType":"YulIdentifier","src":"17584:5:3"}]}]},"condition":{"arguments":[{"name":"exponent","nodeType":"YulIdentifier","src":"17563:8:3"},{"name":"power_1","nodeType":"YulIdentifier","src":"17573:7:3"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"17559:3:3"},"nodeType":"YulFunctionCall","src":"17559:22:3"},"nodeType":"YulIf","src":"17556:2:3"},{"nodeType":"YulAssignment","src":"17624:23:3","value":{"arguments":[{"name":"base","nodeType":"YulIdentifier","src":"17636:4:3"},{"name":"base","nodeType":"YulIdentifier","src":"17642:4:3"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"17632:3:3"},"nodeType":"YulFunctionCall","src":"17632:15:3"},"variableNames":[{"name":"base","nodeType":"YulIdentifier","src":"17624:4:3"}]},{"nodeType":"YulAssignment","src":"17660:34:3","value":{"arguments":[{"name":"power_1","nodeType":"YulIdentifier","src":"17676:7:3"},{"name":"exponent","nodeType":"YulIdentifier","src":"17685:8:3"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"17672:3:3"},"nodeType":"YulFunctionCall","src":"17672:22:3"},"variableNames":[{"name":"exponent","nodeType":"YulIdentifier","src":"17660:8:3"}]}]},"condition":{"arguments":[{"name":"exponent","nodeType":"YulIdentifier","src":"17445:8:3"},{"name":"power_1","nodeType":"YulIdentifier","src":"17455:7:3"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"17442:2:3"},"nodeType":"YulFunctionCall","src":"17442:21:3"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"17464:3:3","statements":[]},"pre":{"nodeType":"YulBlock","src":"17438:3:3","statements":[]},"src":"17434:270:3"}]},"name":"checked_exp_helper","nodeType":"YulFunctionDefinition","parameters":[{"name":"_base","nodeType":"YulTypedName","src":"17316:5:3","type":""},{"name":"exponent","nodeType":"YulTypedName","src":"17323:8:3","type":""}],"returnVariables":[{"name":"power","nodeType":"YulTypedName","src":"17336:5:3","type":""},{"name":"base","nodeType":"YulTypedName","src":"17343:4:3","type":""}],"src":"17288:422:3"},{"body":{"nodeType":"YulBlock","src":"17783:72:3","statements":[{"nodeType":"YulAssignment","src":"17793:56:3","value":{"arguments":[{"name":"base","nodeType":"YulIdentifier","src":"17823:4:3"},{"arguments":[{"name":"exponent","nodeType":"YulIdentifier","src":"17833:8:3"},{"kind":"number","nodeType":"YulLiteral","src":"17843:4:3","type":"","value":"0xff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"17829:3:3"},"nodeType":"YulFunctionCall","src":"17829:19:3"}],"functionName":{"name":"checked_exp_unsigned","nodeType":"YulIdentifier","src":"17802:20:3"},"nodeType":"YulFunctionCall","src":"17802:47:3"},"variableNames":[{"name":"power","nodeType":"YulIdentifier","src":"17793:5:3"}]}]},"name":"checked_exp_t_uint256_t_uint8","nodeType":"YulFunctionDefinition","parameters":[{"name":"base","nodeType":"YulTypedName","src":"17754:4:3","type":""},{"name":"exponent","nodeType":"YulTypedName","src":"17760:8:3","type":""}],"returnVariables":[{"name":"power","nodeType":"YulTypedName","src":"17773:5:3","type":""}],"src":"17715:140:3"},{"body":{"nodeType":"YulBlock","src":"17919:747:3","statements":[{"body":{"nodeType":"YulBlock","src":"17957:52:3","statements":[{"nodeType":"YulAssignment","src":"17971:10:3","value":{"kind":"number","nodeType":"YulLiteral","src":"17980:1:3","type":"","value":"1"},"variableNames":[{"name":"power","nodeType":"YulIdentifier","src":"17971:5:3"}]},{"nodeType":"YulLeave","src":"17994:5:3"}]},"condition":{"arguments":[{"name":"exponent","nodeType":"YulIdentifier","src":"17939:8:3"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"17932:6:3"},"nodeType":"YulFunctionCall","src":"17932:16:3"},"nodeType":"YulIf","src":"17929:2:3"},{"body":{"nodeType":"YulBlock","src":"18042:52:3","statements":[{"nodeType":"YulAssignment","src":"18056:10:3","value":{"kind":"number","nodeType":"YulLiteral","src":"18065:1:3","type":"","value":"0"},"variableNames":[{"name":"power","nodeType":"YulIdentifier","src":"18056:5:3"}]},{"nodeType":"YulLeave","src":"18079:5:3"}]},"condition":{"arguments":[{"name":"base","nodeType":"YulIdentifier","src":"18028:4:3"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"18021:6:3"},"nodeType":"YulFunctionCall","src":"18021:12:3"},"nodeType":"YulIf","src":"18018:2:3"},{"cases":[{"body":{"nodeType":"YulBlock","src":"18130:52:3","statements":[{"nodeType":"YulAssignment","src":"18144:10:3","value":{"kind":"number","nodeType":"YulLiteral","src":"18153:1:3","type":"","value":"1"},"variableNames":[{"name":"power","nodeType":"YulIdentifier","src":"18144:5:3"}]},{"nodeType":"YulLeave","src":"18167:5:3"}]},"nodeType":"YulCase","src":"18123:59:3","value":{"kind":"number","nodeType":"YulLiteral","src":"18128:1:3","type":"","value":"1"}},{"body":{"nodeType":"YulBlock","src":"18198:123:3","statements":[{"body":{"nodeType":"YulBlock","src":"18233:22:3","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"18235:16:3"},"nodeType":"YulFunctionCall","src":"18235:18:3"},"nodeType":"YulExpressionStatement","src":"18235:18:3"}]},"condition":{"arguments":[{"name":"exponent","nodeType":"YulIdentifier","src":"18218:8:3"},{"kind":"number","nodeType":"YulLiteral","src":"18228:3:3","type":"","value":"255"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"18215:2:3"},"nodeType":"YulFunctionCall","src":"18215:17:3"},"nodeType":"YulIf","src":"18212:2:3"},{"nodeType":"YulAssignment","src":"18268:25:3","value":{"arguments":[{"name":"exponent","nodeType":"YulIdentifier","src":"18281:8:3"},{"kind":"number","nodeType":"YulLiteral","src":"18291:1:3","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"18277:3:3"},"nodeType":"YulFunctionCall","src":"18277:16:3"},"variableNames":[{"name":"power","nodeType":"YulIdentifier","src":"18268:5:3"}]},{"nodeType":"YulLeave","src":"18306:5:3"}]},"nodeType":"YulCase","src":"18191:130:3","value":{"kind":"number","nodeType":"YulLiteral","src":"18196:1:3","type":"","value":"2"}}],"expression":{"name":"base","nodeType":"YulIdentifier","src":"18110:4:3"},"nodeType":"YulSwitch","src":"18103:218:3"},{"body":{"nodeType":"YulBlock","src":"18419:70:3","statements":[{"nodeType":"YulAssignment","src":"18433:28:3","value":{"arguments":[{"name":"base","nodeType":"YulIdentifier","src":"18446:4:3"},{"name":"exponent","nodeType":"YulIdentifier","src":"18452:8:3"}],"functionName":{"name":"exp","nodeType":"YulIdentifier","src":"18442:3:3"},"nodeType":"YulFunctionCall","src":"18442:19:3"},"variableNames":[{"name":"power","nodeType":"YulIdentifier","src":"18433:5:3"}]},{"nodeType":"YulLeave","src":"18474:5:3"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"base","nodeType":"YulIdentifier","src":"18343:4:3"},{"kind":"number","nodeType":"YulLiteral","src":"18349:2:3","type":"","value":"11"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"18340:2:3"},"nodeType":"YulFunctionCall","src":"18340:12:3"},{"arguments":[{"name":"exponent","nodeType":"YulIdentifier","src":"18357:8:3"},{"kind":"number","nodeType":"YulLiteral","src":"18367:2:3","type":"","value":"78"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"18354:2:3"},"nodeType":"YulFunctionCall","src":"18354:16:3"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"18336:3:3"},"nodeType":"YulFunctionCall","src":"18336:35:3"},{"arguments":[{"arguments":[{"name":"base","nodeType":"YulIdentifier","src":"18380:4:3"},{"kind":"number","nodeType":"YulLiteral","src":"18386:3:3","type":"","value":"307"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"18377:2:3"},"nodeType":"YulFunctionCall","src":"18377:13:3"},{"arguments":[{"name":"exponent","nodeType":"YulIdentifier","src":"18395:8:3"},{"kind":"number","nodeType":"YulLiteral","src":"18405:2:3","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"18392:2:3"},"nodeType":"YulFunctionCall","src":"18392:16:3"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"18373:3:3"},"nodeType":"YulFunctionCall","src":"18373:36:3"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"18333:2:3"},"nodeType":"YulFunctionCall","src":"18333:77:3"},"nodeType":"YulIf","src":"18330:2:3"},{"nodeType":"YulVariableDeclaration","src":"18498:57:3","value":{"arguments":[{"name":"base","nodeType":"YulIdentifier","src":"18540:4:3"},{"name":"exponent","nodeType":"YulIdentifier","src":"18546:8:3"}],"functionName":{"name":"checked_exp_helper","nodeType":"YulIdentifier","src":"18521:18:3"},"nodeType":"YulFunctionCall","src":"18521:34:3"},"variables":[{"name":"power_1","nodeType":"YulTypedName","src":"18502:7:3","type":""},{"name":"base_1","nodeType":"YulTypedName","src":"18511:6:3","type":""}]},{"body":{"nodeType":"YulBlock","src":"18600:22:3","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"18602:16:3"},"nodeType":"YulFunctionCall","src":"18602:18:3"},"nodeType":"YulExpressionStatement","src":"18602:18:3"}]},"condition":{"arguments":[{"name":"power_1","nodeType":"YulIdentifier","src":"18570:7:3"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"18587:1:3","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"18583:3:3"},"nodeType":"YulFunctionCall","src":"18583:6:3"},{"name":"base_1","nodeType":"YulIdentifier","src":"18591:6:3"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"18579:3:3"},"nodeType":"YulFunctionCall","src":"18579:19:3"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"18567:2:3"},"nodeType":"YulFunctionCall","src":"18567:32:3"},"nodeType":"YulIf","src":"18564:2:3"},{"nodeType":"YulAssignment","src":"18631:29:3","value":{"arguments":[{"name":"power_1","nodeType":"YulIdentifier","src":"18644:7:3"},{"name":"base_1","nodeType":"YulIdentifier","src":"18653:6:3"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"18640:3:3"},"nodeType":"YulFunctionCall","src":"18640:20:3"},"variableNames":[{"name":"power","nodeType":"YulIdentifier","src":"18631:5:3"}]}]},"name":"checked_exp_unsigned","nodeType":"YulFunctionDefinition","parameters":[{"name":"base","nodeType":"YulTypedName","src":"17890:4:3","type":""},{"name":"exponent","nodeType":"YulTypedName","src":"17896:8:3","type":""}],"returnVariables":[{"name":"power","nodeType":"YulTypedName","src":"17909:5:3","type":""}],"src":"17860:806:3"},{"body":{"nodeType":"YulBlock","src":"18723:116:3","statements":[{"body":{"nodeType":"YulBlock","src":"18782:22:3","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"18784:16:3"},"nodeType":"YulFunctionCall","src":"18784:18:3"},"nodeType":"YulExpressionStatement","src":"18784:18:3"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"18754:1:3"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"18747:6:3"},"nodeType":"YulFunctionCall","src":"18747:9:3"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"18740:6:3"},"nodeType":"YulFunctionCall","src":"18740:17:3"},{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"18762:1:3"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"18773:1:3","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"18769:3:3"},"nodeType":"YulFunctionCall","src":"18769:6:3"},{"name":"x","nodeType":"YulIdentifier","src":"18777:1:3"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"18765:3:3"},"nodeType":"YulFunctionCall","src":"18765:14:3"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"18759:2:3"},"nodeType":"YulFunctionCall","src":"18759:21:3"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"18736:3:3"},"nodeType":"YulFunctionCall","src":"18736:45:3"},"nodeType":"YulIf","src":"18733:2:3"},{"nodeType":"YulAssignment","src":"18813:20:3","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"18828:1:3"},{"name":"y","nodeType":"YulIdentifier","src":"18831:1:3"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"18824:3:3"},"nodeType":"YulFunctionCall","src":"18824:9:3"},"variableNames":[{"name":"product","nodeType":"YulIdentifier","src":"18813:7:3"}]}]},"name":"checked_mul_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"18702:1:3","type":""},{"name":"y","nodeType":"YulTypedName","src":"18705:1:3","type":""}],"returnVariables":[{"name":"product","nodeType":"YulTypedName","src":"18711:7:3","type":""}],"src":"18671:168:3"},{"body":{"nodeType":"YulBlock","src":"18893:76:3","statements":[{"body":{"nodeType":"YulBlock","src":"18915:22:3","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"18917:16:3"},"nodeType":"YulFunctionCall","src":"18917:18:3"},"nodeType":"YulExpressionStatement","src":"18917:18:3"}]},"condition":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"18909:1:3"},{"name":"y","nodeType":"YulIdentifier","src":"18912:1:3"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"18906:2:3"},"nodeType":"YulFunctionCall","src":"18906:8:3"},"nodeType":"YulIf","src":"18903:2:3"},{"nodeType":"YulAssignment","src":"18946:17:3","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"18958:1:3"},{"name":"y","nodeType":"YulIdentifier","src":"18961:1:3"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"18954:3:3"},"nodeType":"YulFunctionCall","src":"18954:9:3"},"variableNames":[{"name":"diff","nodeType":"YulIdentifier","src":"18946:4:3"}]}]},"name":"checked_sub_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"18875:1:3","type":""},{"name":"y","nodeType":"YulTypedName","src":"18878:1:3","type":""}],"returnVariables":[{"name":"diff","nodeType":"YulTypedName","src":"18884:4:3","type":""}],"src":"18844:125:3"},{"body":{"nodeType":"YulBlock","src":"19027:205:3","statements":[{"nodeType":"YulVariableDeclaration","src":"19037:10:3","value":{"kind":"number","nodeType":"YulLiteral","src":"19046:1:3","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"19041:1:3","type":""}]},{"body":{"nodeType":"YulBlock","src":"19106:63:3","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"19131:3:3"},{"name":"i","nodeType":"YulIdentifier","src":"19136:1:3"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19127:3:3"},"nodeType":"YulFunctionCall","src":"19127:11:3"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"19150:3:3"},{"name":"i","nodeType":"YulIdentifier","src":"19155:1:3"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19146:3:3"},"nodeType":"YulFunctionCall","src":"19146:11:3"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"19140:5:3"},"nodeType":"YulFunctionCall","src":"19140:18:3"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19120:6:3"},"nodeType":"YulFunctionCall","src":"19120:39:3"},"nodeType":"YulExpressionStatement","src":"19120:39:3"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"19067:1:3"},{"name":"length","nodeType":"YulIdentifier","src":"19070:6:3"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"19064:2:3"},"nodeType":"YulFunctionCall","src":"19064:13:3"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"19078:19:3","statements":[{"nodeType":"YulAssignment","src":"19080:15:3","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"19089:1:3"},{"kind":"number","nodeType":"YulLiteral","src":"19092:2:3","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19085:3:3"},"nodeType":"YulFunctionCall","src":"19085:10:3"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"19080:1:3"}]}]},"pre":{"nodeType":"YulBlock","src":"19060:3:3","statements":[]},"src":"19056:113:3"},{"body":{"nodeType":"YulBlock","src":"19195:31:3","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"19208:3:3"},{"name":"length","nodeType":"YulIdentifier","src":"19213:6:3"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19204:3:3"},"nodeType":"YulFunctionCall","src":"19204:16:3"},{"kind":"number","nodeType":"YulLiteral","src":"19222:1:3","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19197:6:3"},"nodeType":"YulFunctionCall","src":"19197:27:3"},"nodeType":"YulExpressionStatement","src":"19197:27:3"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"19184:1:3"},{"name":"length","nodeType":"YulIdentifier","src":"19187:6:3"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"19181:2:3"},"nodeType":"YulFunctionCall","src":"19181:13:3"},"nodeType":"YulIf","src":"19178:2:3"}]},"name":"copy_memory_to_memory","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"19005:3:3","type":""},{"name":"dst","nodeType":"YulTypedName","src":"19010:3:3","type":""},{"name":"length","nodeType":"YulTypedName","src":"19015:6:3","type":""}],"src":"18974:258:3"},{"body":{"nodeType":"YulBlock","src":"19269:95:3","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"19286:1:3","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"19293:3:3","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"19298:10:3","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"19289:3:3"},"nodeType":"YulFunctionCall","src":"19289:20:3"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19279:6:3"},"nodeType":"YulFunctionCall","src":"19279:31:3"},"nodeType":"YulExpressionStatement","src":"19279:31:3"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"19326:1:3","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"19329:4:3","type":"","value":"0x11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19319:6:3"},"nodeType":"YulFunctionCall","src":"19319:15:3"},"nodeType":"YulExpressionStatement","src":"19319:15:3"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"19350:1:3","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"19353:4:3","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"19343:6:3"},"nodeType":"YulFunctionCall","src":"19343:15:3"},"nodeType":"YulExpressionStatement","src":"19343:15:3"}]},"name":"panic_error_0x11","nodeType":"YulFunctionDefinition","src":"19237:127:3"},{"body":{"nodeType":"YulBlock","src":"19401:95:3","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"19418:1:3","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"19425:3:3","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"19430:10:3","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"19421:3:3"},"nodeType":"YulFunctionCall","src":"19421:20:3"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19411:6:3"},"nodeType":"YulFunctionCall","src":"19411:31:3"},"nodeType":"YulExpressionStatement","src":"19411:31:3"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"19458:1:3","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"19461:4:3","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19451:6:3"},"nodeType":"YulFunctionCall","src":"19451:15:3"},"nodeType":"YulExpressionStatement","src":"19451:15:3"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"19482:1:3","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"19485:4:3","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"19475:6:3"},"nodeType":"YulFunctionCall","src":"19475:15:3"},"nodeType":"YulExpressionStatement","src":"19475:15:3"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"19369:127:3"},{"body":{"nodeType":"YulBlock","src":"19546:86:3","statements":[{"body":{"nodeType":"YulBlock","src":"19610:16:3","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"19619:1:3","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"19622:1:3","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"19612:6:3"},"nodeType":"YulFunctionCall","src":"19612:12:3"},"nodeType":"YulExpressionStatement","src":"19612:12:3"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"19569:5:3"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"19580:5:3"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"19595:3:3","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"19600:1:3","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"19591:3:3"},"nodeType":"YulFunctionCall","src":"19591:11:3"},{"kind":"number","nodeType":"YulLiteral","src":"19604:1:3","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"19587:3:3"},"nodeType":"YulFunctionCall","src":"19587:19:3"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"19576:3:3"},"nodeType":"YulFunctionCall","src":"19576:31:3"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"19566:2:3"},"nodeType":"YulFunctionCall","src":"19566:42:3"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"19559:6:3"},"nodeType":"YulFunctionCall","src":"19559:50:3"},"nodeType":"YulIf","src":"19556:2:3"}]},"name":"validator_revert_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"19535:5:3","type":""}],"src":"19501:131:3"}]},"contents":"{\n    { }\n    function abi_decode_array_address_dyn(offset, end) -> array\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(array, array) }\n        let _1 := calldataload(offset)\n        let _2 := 0x20\n        let dst := allocate_memory(array_allocation_size_array_address_dyn(_1))\n        let dst_1 := dst\n        mstore(dst, _1)\n        dst := add(dst, _2)\n        let src := add(offset, _2)\n        if gt(add(add(offset, shl(5, _1)), _2), end) { revert(array, array) }\n        let i := array\n        for { } lt(i, _1) { i := add(i, 1) }\n        {\n            let value := calldataload(src)\n            validator_revert_address(value)\n            mstore(dst, value)\n            dst := add(dst, _2)\n            src := add(src, _2)\n        }\n        array := dst_1\n    }\n    function abi_decode_bool_fromMemory(offset) -> value\n    {\n        value := mload(offset)\n        if iszero(eq(value, iszero(iszero(value)))) { revert(0, 0) }\n    }\n    function abi_decode_uint16_fromMemory(offset) -> value\n    {\n        value := mload(offset)\n        if iszero(eq(value, and(value, 0xffff))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n    }\n    function abi_decode_tuple_t_address_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        let value := mload(headStart)\n        validator_revert_address(value)\n        value0 := value\n    }\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(value1, value1) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        let value_1 := calldataload(add(headStart, 32))\n        validator_revert_address(value_1)\n        value1 := value_1\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(value2, value2) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        let value_1 := calldataload(add(headStart, 32))\n        validator_revert_address(value_1)\n        value1 := value_1\n        value2 := calldataload(add(headStart, 64))\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256t_array$_t_address_$dyn_memory_ptr(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 128) { revert(value3, value3) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        let value_1 := calldataload(add(headStart, 32))\n        validator_revert_address(value_1)\n        value1 := value_1\n        value2 := calldataload(add(headStart, 64))\n        let offset := calldataload(add(headStart, 96))\n        if gt(offset, 0xffffffffffffffff) { revert(value3, value3) }\n        value3 := abi_decode_array_address_dyn(add(headStart, offset), dataEnd)\n    }\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(value0, value0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_decode_tuple_t_array$_t_uint256_$dyn_memory_ptr_fromMemory(headStart, dataEnd) -> value0\n    {\n        let _1 := 32\n        if slt(sub(dataEnd, headStart), _1) { revert(value0, value0) }\n        let offset := mload(headStart)\n        if gt(offset, 0xffffffffffffffff) { revert(value0, value0) }\n        let _2 := add(headStart, offset)\n        if iszero(slt(add(_2, 0x1f), dataEnd)) { revert(value0, value0) }\n        let _3 := mload(_2)\n        let dst := allocate_memory(array_allocation_size_array_address_dyn(_3))\n        let dst_1 := dst\n        mstore(dst, _3)\n        dst := add(dst, _1)\n        let src := add(_2, _1)\n        if gt(add(add(_2, shl(5, _3)), _1), dataEnd) { revert(value0, value0) }\n        let i := value0\n        for { } lt(i, _3) { i := add(i, 1) }\n        {\n            mstore(dst, mload(src))\n            dst := add(dst, _1)\n            src := add(src, _1)\n        }\n        value0 := dst_1\n    }\n    function abi_decode_tuple_t_bool_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        value0 := abi_decode_bool_fromMemory(headStart)\n    }\n    function abi_decode_tuple_t_uint160t_int24t_uint16t_uint16t_uint16t_uint32t_bool_fromMemory(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5, value6\n    {\n        if slt(sub(dataEnd, headStart), 224) { revert(value4, value4) }\n        let value := mload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        let value_1 := mload(add(headStart, 32))\n        if iszero(eq(value_1, signextend(2, value_1))) { revert(value4, value4) }\n        value1 := value_1\n        value2 := abi_decode_uint16_fromMemory(add(headStart, 64))\n        value3 := abi_decode_uint16_fromMemory(add(headStart, 96))\n        value4 := abi_decode_uint16_fromMemory(add(headStart, 128))\n        let value_2 := mload(add(headStart, 160))\n        if iszero(eq(value_2, and(value_2, 0xffffffff))) { revert(value5, value5) }\n        value5 := value_2\n        value6 := abi_decode_bool_fromMemory(add(headStart, 192))\n    }\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_decode_tuple_t_uint256_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        value0 := mload(headStart)\n    }\n    function abi_decode_tuple_t_uint256t_addresst_address(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(value2, value2) }\n        value0 := calldataload(headStart)\n        let value := calldataload(add(headStart, 32))\n        validator_revert_address(value)\n        value1 := value\n        let value_1 := calldataload(add(headStart, 64))\n        validator_revert_address(value_1)\n        value2 := value_1\n    }\n    function abi_decode_tuple_t_uint256t_array$_t_address_$dyn_memory_ptr(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(value0, value0) }\n        value0 := calldataload(headStart)\n        let offset := calldataload(add(headStart, 32))\n        if gt(offset, 0xffffffffffffffff) { revert(value1, value1) }\n        value1 := abi_decode_array_address_dyn(add(headStart, offset), dataEnd)\n    }\n    function abi_encode_array_address_dyn(value, pos) -> end\n    {\n        let length := mload(value)\n        mstore(pos, length)\n        let _1 := 0x20\n        pos := add(pos, _1)\n        let srcPtr := add(value, _1)\n        let i := end\n        for { } lt(i, length) { i := add(i, 1) }\n        {\n            mstore(pos, and(mload(srcPtr), sub(shl(160, 1), 1)))\n            pos := add(pos, _1)\n            srcPtr := add(srcPtr, _1)\n        }\n        end := pos\n    }\n    function abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value0) -> end\n    {\n        let length := mload(value0)\n        copy_memory_to_memory(add(value0, 0x20), pos, length)\n        end := add(pos, length)\n    }\n    function abi_encode_tuple_packed_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos) -> end\n    { end := pos }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_encode_tuple_t_address_t_address_t_uint24__to_t_address_t_address_t_uint24__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        let _1 := sub(shl(160, 1), 1)\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), and(value2, 0xffffff))\n    }\n    function abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        let _1 := sub(shl(160, 1), 1)\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), value2)\n    }\n    function abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_encode_tuple_t_rational_0_by_1_t_array$_t_address_$dyn_memory_ptr_t_address_t_uint256__to_t_uint256_t_array$_t_address_$dyn_memory_ptr_t_address_t_uint256__fromStack_reversed(headStart, value3, value2, value1, value0) -> tail\n    {\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), 128)\n        tail := abi_encode_array_address_dyn(value1, add(headStart, 128))\n        mstore(add(headStart, 64), and(value2, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 96), value3)\n    }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        let length := mload(value0)\n        mstore(add(headStart, 32), length)\n        copy_memory_to_memory(add(value0, 32), add(headStart, 64), length)\n        tail := add(add(headStart, and(add(length, 31), not(31))), 64)\n    }\n    function abi_encode_tuple_t_stringliteral_01e87990a0dc07718ceddba976403cc2935fd21bf07b78a80df682aad724bf67__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 28)\n        mstore(add(headStart, 64), \"PattieSwap: Insufficient ETH\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_126adf17cba57bad3f5d489069f4b43a3c7599a72527e16e7e32dab66ae185ae__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 34)\n        mstore(add(headStart, 64), \"PattieSwap: Path must be specifi\")\n        mstore(add(headStart, 96), \"ed\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"Ownable: new owner is the zero a\")\n        mstore(add(headStart, 96), \"ddress\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_445140255c9d889994129d349e64078d6f76b4b37ec896948f7e858f9b8a0dcb__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 20)\n        mstore(add(headStart, 64), \"Failed to send Ether\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"Address: insufficient balance fo\")\n        mstore(add(headStart, 96), \"r call\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_797abde7c0639a1dc8346b8f598cbf1957cf783fc0005f1a141aeb4674e15c74__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 28)\n        mstore(add(headStart, 64), \"You did not swap in 24 hours\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_8ff2a40bc13d030f2a459ef7b37b7fe78e1bb34bd7a7ef6ed1539774e9557e2d__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 25)\n        mstore(add(headStart, 64), \"You airdroped in 24 hours\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_946fb9d4d3f17144c3d6e236e8acbd91334f49d924b06e35bc65e960716f6155__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 43)\n        mstore(add(headStart, 64), \"PattieSwap: amountIn must be gre\")\n        mstore(add(headStart, 96), \"ater than 0\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 32)\n        mstore(add(headStart, 64), \"Ownable: caller is not the owner\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 29)\n        mstore(add(headStart, 64), \"Address: call to non-contract\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 42)\n        mstore(add(headStart, 64), \"SafeERC20: ERC20 operation did n\")\n        mstore(add(headStart, 96), \"ot succeed\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_f9239079da98909f815170ee967acd53b4cf9b37ced6a4dd9f2f25df9bc54bf5__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 13)\n        mstore(add(headStart, 64), \"refund failed\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_struct$_ExactInputSingleParams_$1885_memory_ptr__to_t_struct$_ExactInputSingleParams_$1885_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 224)\n        let _1 := sub(shl(160, 1), 1)\n        mstore(headStart, and(mload(value0), _1))\n        mstore(add(headStart, 0x20), and(mload(add(value0, 0x20)), _1))\n        mstore(add(headStart, 0x40), and(mload(add(value0, 0x40)), 0xffffff))\n        mstore(add(headStart, 0x60), and(mload(add(value0, 0x60)), _1))\n        mstore(add(headStart, 0x80), mload(add(value0, 0x80)))\n        mstore(add(headStart, 0xa0), mload(add(value0, 0xa0)))\n        mstore(add(headStart, 0xc0), and(mload(add(value0, 0xc0)), _1))\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_encode_tuple_t_uint256_t_array$_t_address_$dyn_memory_ptr__to_t_uint256_t_array$_t_address_$dyn_memory_ptr__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), 64)\n        tail := abi_encode_array_address_dyn(value1, add(headStart, 64))\n    }\n    function abi_encode_tuple_t_uint256_t_rational_0_by_1_t_array$_t_address_$dyn_memory_ptr_t_address_t_uint256__to_t_uint256_t_uint256_t_array$_t_address_$dyn_memory_ptr_t_address_t_uint256__fromStack_reversed(headStart, value4, value3, value2, value1, value0) -> tail\n    {\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), 160)\n        tail := abi_encode_array_address_dyn(value2, add(headStart, 160))\n        mstore(add(headStart, 96), and(value3, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 128), value4)\n    }\n    function allocate_memory(size) -> memPtr\n    {\n        memPtr := mload(64)\n        let newFreePtr := add(memPtr, and(add(size, 31), not(31)))\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n    function array_allocation_size_array_address_dyn(length) -> size\n    {\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n        size := add(shl(5, length), 0x20)\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        if gt(x, not(y)) { panic_error_0x11() }\n        sum := add(x, y)\n    }\n    function checked_div_t_uint256(x, y) -> r\n    {\n        if iszero(y)\n        {\n            mstore(r, shl(224, 0x4e487b71))\n            mstore(4, 0x12)\n            revert(r, 0x24)\n        }\n        r := div(x, y)\n    }\n    function checked_exp_helper(_base, exponent) -> power, base\n    {\n        let power_1 := 1\n        power := power_1\n        base := _base\n        for { } gt(exponent, power_1) { }\n        {\n            if gt(base, div(not(0), base)) { panic_error_0x11() }\n            if and(exponent, power_1) { power := mul(power, base) }\n            base := mul(base, base)\n            exponent := shr(power_1, exponent)\n        }\n    }\n    function checked_exp_t_uint256_t_uint8(base, exponent) -> power\n    {\n        power := checked_exp_unsigned(base, and(exponent, 0xff))\n    }\n    function checked_exp_unsigned(base, exponent) -> power\n    {\n        if iszero(exponent)\n        {\n            power := 1\n            leave\n        }\n        if iszero(base)\n        {\n            power := 0\n            leave\n        }\n        switch base\n        case 1 {\n            power := 1\n            leave\n        }\n        case 2 {\n            if gt(exponent, 255) { panic_error_0x11() }\n            power := shl(exponent, 1)\n            leave\n        }\n        if or(and(lt(base, 11), lt(exponent, 78)), and(lt(base, 307), lt(exponent, 32)))\n        {\n            power := exp(base, exponent)\n            leave\n        }\n        let power_1, base_1 := checked_exp_helper(base, exponent)\n        if gt(power_1, div(not(0), base_1)) { panic_error_0x11() }\n        power := mul(power_1, base_1)\n    }\n    function checked_mul_t_uint256(x, y) -> product\n    {\n        if and(iszero(iszero(x)), gt(y, div(not(0), x))) { panic_error_0x11() }\n        product := mul(x, y)\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        if lt(x, y) { panic_error_0x11() }\n        diff := sub(x, y)\n    }\n    function copy_memory_to_memory(src, dst, length)\n    {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        if gt(i, length) { mstore(add(dst, length), 0) }\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function validator_revert_address(value)\n    {\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n}","id":3,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"60806040526004361061019c5760003560e01c80638cf57cb9116100ec578063c36c557f1161008a578063f2fde38b11610064578063f2fde38b14610465578063f7b2a7be14610485578063f887ea401461049b578063fe96973a146104bb57600080fd5b8063c36c557f14610412578063d654e9a414610432578063ec6cc0cc1461045257600080fd5b8063966dae0e116100c6578063966dae0e1461039f5780639cf355ad146103bf5780639de2827b146103df578063a8a65a78146103f257600080fd5b80638cf57cb9146103415780638da5cb5b1461036157806395ccea671461037f57600080fd5b806363fe3e3a11610159578063715018a611610133578063715018a6146102c85780637ce3489b146102dd5780637fd6f15c146102fd5780638aee81271461032157600080fd5b806363fe3e3a1461026857806365e17c9d146102885780636b792c4b146102a857600080fd5b8063117be4c2146101a15780631698755f146101de5780633268cc56146102005780633884d635146102205780634b023cf8146102355780634ce222da14610255575b600080fd5b3480156101ad57600080fd5b506006546101c1906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b3480156101ea57600080fd5b506101fe6101f9366004611c4c565b6104db565b005b34801561020c57600080fd5b506007546101c1906001600160a01b031681565b34801561022c57600080fd5b506101fe6105b5565b34801561024157600080fd5b506101fe610250366004611b32565b6106bd565b6101fe610263366004611ba2565b610709565b34801561027457600080fd5b506009546101c1906001600160a01b031681565b34801561029457600080fd5b506004546101c1906001600160a01b031681565b3480156102b457600080fd5b506101fe6102c3366004611dbe565b6108e8565b3480156102d457600080fd5b506101fe61094f565b3480156102e957600080fd5b506101fe6102f8366004611dbe565b610985565b34801561030957600080fd5b5061031360015481565b6040519081526020016101d5565b34801561032d57600080fd5b506101fe61033c366004611b32565b6109b4565b34801561034d57600080fd5b506003546101c1906001600160a01b031681565b34801561036d57600080fd5b506000546001600160a01b03166101c1565b34801561038b57600080fd5b506101fe61039a366004611c4c565b610a00565b3480156103ab57600080fd5b506008546101c1906001600160a01b031681565b3480156103cb57600080fd5b506101fe6103da366004611b6a565b610a3e565b6101fe6103ed366004611be2565b610a96565b3480156103fe57600080fd5b506101fe61040d366004611dbe565b610cb4565b34801561041e57600080fd5b5061031361042d366004611dee565b610ce3565b34801561043e57600080fd5b5061031361044d366004611e2f565b610ef4565b6101fe610460366004611ba2565b610fc0565b34801561047157600080fd5b506101fe610480366004611b32565b61125b565b34801561049157600080fd5b5061031360025481565b3480156104a757600080fd5b506005546101c1906001600160a01b031681565b3480156104c757600080fd5b506101fe6104d6366004611dbe565b6112f6565b6000546001600160a01b0316331461050e5760405162461bcd60e51b815260040161050590611f7d565b60405180910390fd5b816001600160a01b031663a9059cbb61052f6000546001600160a01b031690565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602481018490526044015b602060405180830381600087803b15801561057857600080fd5b505af115801561058c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105b09190611d0a565b505050565b336000908152600a602052604090205442906105d490620151806120ba565b116106215760405162461bcd60e51b815260206004820152601c60248201527f596f7520646964206e6f74207377617020696e20323420686f757273000000006044820152606401610505565b336000908152600b602052604090205461063e90620151806120ba565b421161068c5760405162461bcd60e51b815260206004820152601960248201527f596f752061697264726f70656420696e20323420686f757273000000000000006044820152606401610505565b6002546003546106a9916001600160a01b039091169033906113ba565b336000908152600b60205260409020429055565b6000546001600160a01b031633146106e75760405162461bcd60e51b815260040161050590611f7d565b600480546001600160a01b0319166001600160a01b0392909216919091179055565b336000908152600a60205260408082204290558051600280825260608201909252908160200160208202803683370190505090506001600160a01b0384166107e25760065481516001600160a01b0390911690829060009061077b57634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b03168152505082816001815181106107bd57634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b0316815250506108d6565b6001600160a01b03831661085157838160008151811061081257634e487b7160e01b600052603260045260246000fd5b6001600160a01b0392831660209182029290920101526006548251911690829060019081106107bd57634e487b7160e01b600052603260045260246000fd5b838160008151811061087357634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b03168152505082816001815181106108b557634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b0316815250505b6108e28484848461141d565b50505050565b6000546001600160a01b031633146109125760405162461bcd60e51b815260040161050590611f7d565b600080546040516001600160a01b039091169183156108fc02918491818181858888f1935050505015801561094b573d6000803e3d6000fd5b5050565b6000546001600160a01b031633146109795760405162461bcd60e51b815260040161050590611f7d565b61098360006115ed565b565b6000546001600160a01b031633146109af5760405162461bcd60e51b815260040161050590611f7d565b600155565b6000546001600160a01b031633146109de5760405162461bcd60e51b815260040161050590611f7d565b600380546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b03163314610a2a5760405162461bcd60e51b815260040161050590611f7d565b61094b6001600160a01b03831633836113ba565b6000546001600160a01b03163314610a685760405162461bcd60e51b815260040161050590611f7d565b600580546001600160a01b039384166001600160a01b03199182161790915560068054929093169116179055565b6001600160a01b038416610b535780600081518110610ac557634e487b7160e01b600052603260045260246000fd5b60209081029190910101516006546001600160a01b039081169116148015610b3257508060018251610af791906121ff565b81518110610b1557634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b0316836001600160a01b0316145b610b4e5760405162461bcd60e51b815260040161050590611f3b565b6108d6565b6001600160a01b038316610c0a5780600081518110610b8257634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b0316846001600160a01b0316148015610b3257508060018251610bb491906121ff565b81518110610bd257634e487b7160e01b600052603260045260246000fd5b60209081029190910101516006546001600160a01b03908116911614610b4e5760405162461bcd60e51b815260040161050590611f3b565b80600081518110610c2b57634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b0316846001600160a01b0316148015610c9857508060018251610c5d91906121ff565b81518110610c7b57634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b0316836001600160a01b0316145b6108d65760405162461bcd60e51b815260040161050590611f3b565b6000546001600160a01b03163314610cde5760405162461bcd60e51b815260040161050590611f7d565b600255565b600854600954604051630b4c774160e11b81526001600160a01b0385811660048301528481166024830152600160a01b90920462ffffff16604482015260009283928392911690631698ee829060640160206040518083038186803b158015610d4b57600080fd5b505afa158015610d5f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d839190611b4e565b9050806001600160a01b0316633850c7bd6040518163ffffffff1660e01b815260040160e06040518083038186803b158015610dbe57600080fd5b505afa158015610dd2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610df69190611d24565b505060408051630dfe168160e01b815290516001600160a01b03968716985060009688169550630dfe1681945060048083019450602093509091829003018186803b158015610e4457600080fd5b505afa158015610e58573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e7c9190611b4e565b9050806001600160a01b0316866001600160a01b03161415610ec457600160c01b87610ea9600286612135565b610eb391906121e0565b610ebd91906120d2565b9350610eea565b610ecf600284612135565b610edd88600160c01b6121e0565b610ee791906120d2565b93505b5050509392505050565b60055460405163d06ca61f60e01b815260009182916001600160a01b039091169063d06ca61f90610f2b9087908790600401612010565b60006040518083038186803b158015610f4357600080fd5b505afa158015610f57573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610f7f9190810190611c77565b90508060018251610f9091906121ff565b81518110610fae57634e487b7160e01b600052603260045260246000fd5b60200260200101519150505b92915050565b336000818152600a60209081526040808320429055805160e0810182526001600160a01b038881168083528882169483019490945260095462ffffff600160a01b8204169383019390935260608201959095526080810186905260a0810184905260c081019390935291929190911614156110bf576007546040516304e45aaf60e01b81526001600160a01b03909116906304e45aaf903490611067908590600401611fb2565b6020604051808303818588803b15801561108057600080fd5b505af1158015611094573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906110b99190611dd6565b50611164565b6110d46001600160a01b03851633308561163d565b6110de8483611675565b6007546040516304e45aaf60e01b81526001600160a01b03909116906304e45aaf903490611110908590600401611fb2565b6020604051808303818588803b15801561112957600080fd5b505af115801561113d573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906111629190611dd6565b505b600760009054906101000a90046001600160a01b03166001600160a01b03166312210e8a6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156111b457600080fd5b505af11580156111c8573d6000803e3d6000fd5b50506040516000925033915047908381818185875af1925050503d806000811461120e576040519150601f19603f3d011682016040523d82523d6000602084013e611213565b606091505b50509050806112545760405162461bcd60e51b815260206004820152600d60248201526c1c99599d5b990819985a5b1959609a1b6044820152606401610505565b5050505050565b6000546001600160a01b031633146112855760405162461bcd60e51b815260040161050590611f7d565b6001600160a01b0381166112ea5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610505565b6112f3816115ed565b50565b6000546001600160a01b031633146113205760405162461bcd60e51b815260040161050590611f7d565b600080546040516001600160a01b039091169083908381818185875af1925050503d806000811461136d576040519150601f19603f3d011682016040523d82523d6000602084013e611372565b606091505b505090508061094b5760405162461bcd60e51b81526020600482015260146024820152732330b4b632b2103a379039b2b7321022ba3432b960611b6044820152606401610505565b6040516001600160a01b0383166024820152604481018290526105b090849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526116ae565b600082116114815760405162461bcd60e51b815260206004820152602b60248201527f506174746965537761703a20616d6f756e74496e206d7573742062652067726560448201526a061746572207468616e20360ac1b6064820152608401610505565b6001600160a01b03841661155757348210156114df5760405162461bcd60e51b815260206004820152601c60248201527f506174746965537761703a20496e73756666696369656e7420455448000000006044820152606401610505565b6000612710600154846114f291906121e0565b6114fc91906120d2565b6004546040519192506001600160a01b03169082156108fc029083906000818181858888f19350505050158015611537573d6000803e3d6000fd5b50600061154482856121ff565b90506115508184611780565b50506108e2565b61156c6001600160a01b03851633308561163d565b60006127106001548461157f91906121e0565b61158991906120d2565b6004549091506115a6906001600160a01b038781169116836113ba565b60006115b282856121ff565b90506115be868261180f565b6001600160a01b0385166115db576115d68184611848565b6115e5565b6115e581846118d7565b505050505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6040516001600160a01b03808516602483015283166044820152606481018290526108e29085906323b872dd60e01b906084016113e6565b60075460405163095ea7b360e01b81526001600160a01b039182166004820152602481018390529083169063095ea7b39060440161055e565b6000611703826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166119109092919063ffffffff16565b8051909150156105b057808060200190518101906117219190611d0a565b6105b05760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610505565b600554604051637ff36ab560e01b81526001600160a01b0390911690637ff36ab59084906117b990600090869033904290600401611ed3565b6000604051808303818588803b1580156117d257600080fd5b505af11580156117e6573d6000803e3d6000fd5b50505050506040513d6000823e601f3d908101601f191682016040526105b09190810190611c77565b60055460405163095ea7b360e01b81526001600160a01b039182166004820152602481018390529083169063095ea7b39060440161055e565b6005546040516318cbafe560e01b81526001600160a01b03909116906318cbafe590611881908590600090869033904290600401612029565b600060405180830381600087803b15801561189b57600080fd5b505af11580156118af573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526105b09190810190611c77565b6005546040516338ed173960e01b81526001600160a01b03909116906338ed173990611881908590600090869033904290600401612029565b606061191f8484600085611929565b90505b9392505050565b60608247101561198a5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610505565b6001600160a01b0385163b6119e15760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610505565b600080866001600160a01b031685876040516119fd9190611eb7565b60006040518083038185875af1925050503d8060008114611a3a576040519150601f19603f3d011682016040523d82523d6000602084013e611a3f565b606091505b5091509150611a4f828286611a5a565b979650505050505050565b60608315611a69575081611922565b825115611a795782518084602001fd5b8160405162461bcd60e51b81526004016105059190611f08565b600082601f830112611aa3578081fd5b81356020611ab8611ab383612096565b612065565b80838252828201915082860187848660051b8901011115611ad7578586fd5b855b85811015611afe578135611aec8161226e565b84529284019290840190600101611ad9565b5090979650505050505050565b80518015158114611b1b57600080fd5b919050565b805161ffff81168114611b1b57600080fd5b600060208284031215611b43578081fd5b81356119228161226e565b600060208284031215611b5f578081fd5b81516119228161226e565b60008060408385031215611b7c578081fd5b8235611b878161226e565b91506020830135611b978161226e565b809150509250929050565b600080600060608486031215611bb6578081fd5b8335611bc18161226e565b92506020840135611bd18161226e565b929592945050506040919091013590565b60008060008060808587031215611bf7578081fd5b8435611c028161226e565b93506020850135611c128161226e565b925060408501359150606085013567ffffffffffffffff811115611c34578182fd5b611c4087828801611a93565b91505092959194509250565b60008060408385031215611c5e578182fd5b8235611c698161226e565b946020939093013593505050565b60006020808385031215611c89578182fd5b825167ffffffffffffffff811115611c9f578283fd5b8301601f81018513611caf578283fd5b8051611cbd611ab382612096565b80828252848201915084840188868560051b8701011115611cdc578687fd5b8694505b83851015611cfe578051835260019490940193918501918501611ce0565b50979650505050505050565b600060208284031215611d1b578081fd5b61192282611b0b565b600080600080600080600060e0888a031215611d3e578283fd5b8751611d498161226e565b8097505060208801518060020b8114611d60578384fd5b9550611d6e60408901611b20565b9450611d7c60608901611b20565b9350611d8a60808901611b20565b925060a088015163ffffffff81168114611da2578283fd5b9150611db060c08901611b0b565b905092959891949750929550565b600060208284031215611dcf578081fd5b5035919050565b600060208284031215611de7578081fd5b5051919050565b600080600060608486031215611e02578081fd5b833592506020840135611e148161226e565b91506040840135611e248161226e565b809150509250925092565b60008060408385031215611e41578182fd5b82359150602083013567ffffffffffffffff811115611e5e578182fd5b611e6a85828601611a93565b9150509250929050565b6000815180845260208085019450808401835b83811015611eac5781516001600160a01b031687529582019590820190600101611e87565b509495945050505050565b60008251611ec9818460208701612216565b9190910192915050565b848152608060208201526000611eec6080830186611e74565b6001600160a01b03949094166040830152506060015292915050565b6020815260008251806020840152611f27816040850160208701612216565b601f01601f19169190910160400192915050565b60208082526022908201527f506174746965537761703a2050617468206d7573742062652073706563696669604082015261195960f21b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b81516001600160a01b03908116825260208084015182169083015260408084015162ffffff16908301526060808401518216908301526080808401519083015260a0838101519083015260c092830151169181019190915260e00190565b82815260406020820152600061191f6040830184611e74565b85815284602082015260a06040820152600061204860a0830186611e74565b6001600160a01b0394909416606083015250608001529392505050565b604051601f8201601f1916810167ffffffffffffffff8111828210171561208e5761208e612258565b604052919050565b600067ffffffffffffffff8211156120b0576120b0612258565b5060051b60200190565b600082198211156120cd576120cd612242565b500190565b6000826120ed57634e487b7160e01b81526012600452602481fd5b500490565b600181815b8085111561212d57816000190482111561211357612113612242565b8085161561212057918102915b93841c93908002906120f7565b509250929050565b600061192260ff84168360008261214e57506001610fba565b8161215b57506000610fba565b8160018114612171576002811461217b57612197565b6001915050610fba565b60ff84111561218c5761218c612242565b50506001821b610fba565b5060208310610133831016604e8410600b84101617156121ba575081810a610fba565b6121c483836120f2565b80600019048211156121d8576121d8612242565b029392505050565b60008160001904831182151516156121fa576121fa612242565b500290565b60008282101561221157612211612242565b500390565b60005b83811015612231578181015183820152602001612219565b838111156108e25750506000910152565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146112f357600080fdfea26469706673582212209dbda73b49fc160183e00ef6842ab42a1920167db1dbb584c649c9398e194f1c64736f6c63430008040033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x19C JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8CF57CB9 GT PUSH2 0xEC JUMPI DUP1 PUSH4 0xC36C557F GT PUSH2 0x8A JUMPI DUP1 PUSH4 0xF2FDE38B GT PUSH2 0x64 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x465 JUMPI DUP1 PUSH4 0xF7B2A7BE EQ PUSH2 0x485 JUMPI DUP1 PUSH4 0xF887EA40 EQ PUSH2 0x49B JUMPI DUP1 PUSH4 0xFE96973A EQ PUSH2 0x4BB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xC36C557F EQ PUSH2 0x412 JUMPI DUP1 PUSH4 0xD654E9A4 EQ PUSH2 0x432 JUMPI DUP1 PUSH4 0xEC6CC0CC EQ PUSH2 0x452 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x966DAE0E GT PUSH2 0xC6 JUMPI DUP1 PUSH4 0x966DAE0E EQ PUSH2 0x39F JUMPI DUP1 PUSH4 0x9CF355AD EQ PUSH2 0x3BF JUMPI DUP1 PUSH4 0x9DE2827B EQ PUSH2 0x3DF JUMPI DUP1 PUSH4 0xA8A65A78 EQ PUSH2 0x3F2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x8CF57CB9 EQ PUSH2 0x341 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x361 JUMPI DUP1 PUSH4 0x95CCEA67 EQ PUSH2 0x37F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x63FE3E3A GT PUSH2 0x159 JUMPI DUP1 PUSH4 0x715018A6 GT PUSH2 0x133 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x2C8 JUMPI DUP1 PUSH4 0x7CE3489B EQ PUSH2 0x2DD JUMPI DUP1 PUSH4 0x7FD6F15C EQ PUSH2 0x2FD JUMPI DUP1 PUSH4 0x8AEE8127 EQ PUSH2 0x321 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x63FE3E3A EQ PUSH2 0x268 JUMPI DUP1 PUSH4 0x65E17C9D EQ PUSH2 0x288 JUMPI DUP1 PUSH4 0x6B792C4B EQ PUSH2 0x2A8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x117BE4C2 EQ PUSH2 0x1A1 JUMPI DUP1 PUSH4 0x1698755F EQ PUSH2 0x1DE JUMPI DUP1 PUSH4 0x3268CC56 EQ PUSH2 0x200 JUMPI DUP1 PUSH4 0x3884D635 EQ PUSH2 0x220 JUMPI DUP1 PUSH4 0x4B023CF8 EQ PUSH2 0x235 JUMPI DUP1 PUSH4 0x4CE222DA EQ PUSH2 0x255 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1AD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x6 SLOAD PUSH2 0x1C1 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1EA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1FE PUSH2 0x1F9 CALLDATASIZE PUSH1 0x4 PUSH2 0x1C4C JUMP JUMPDEST PUSH2 0x4DB JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x20C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x7 SLOAD PUSH2 0x1C1 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x22C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1FE PUSH2 0x5B5 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x241 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1FE PUSH2 0x250 CALLDATASIZE PUSH1 0x4 PUSH2 0x1B32 JUMP JUMPDEST PUSH2 0x6BD JUMP JUMPDEST PUSH2 0x1FE PUSH2 0x263 CALLDATASIZE PUSH1 0x4 PUSH2 0x1BA2 JUMP JUMPDEST PUSH2 0x709 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x274 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x9 SLOAD PUSH2 0x1C1 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x294 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 SLOAD PUSH2 0x1C1 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2B4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1FE PUSH2 0x2C3 CALLDATASIZE PUSH1 0x4 PUSH2 0x1DBE JUMP JUMPDEST PUSH2 0x8E8 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2D4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1FE PUSH2 0x94F JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2E9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1FE PUSH2 0x2F8 CALLDATASIZE PUSH1 0x4 PUSH2 0x1DBE JUMP JUMPDEST PUSH2 0x985 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x309 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x313 PUSH1 0x1 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1D5 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x32D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1FE PUSH2 0x33C CALLDATASIZE PUSH1 0x4 PUSH2 0x1B32 JUMP JUMPDEST PUSH2 0x9B4 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x34D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x3 SLOAD PUSH2 0x1C1 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x36D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x1C1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x38B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1FE PUSH2 0x39A CALLDATASIZE PUSH1 0x4 PUSH2 0x1C4C JUMP JUMPDEST PUSH2 0xA00 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3AB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x8 SLOAD PUSH2 0x1C1 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3CB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1FE PUSH2 0x3DA CALLDATASIZE PUSH1 0x4 PUSH2 0x1B6A JUMP JUMPDEST PUSH2 0xA3E JUMP JUMPDEST PUSH2 0x1FE PUSH2 0x3ED CALLDATASIZE PUSH1 0x4 PUSH2 0x1BE2 JUMP JUMPDEST PUSH2 0xA96 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3FE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1FE PUSH2 0x40D CALLDATASIZE PUSH1 0x4 PUSH2 0x1DBE JUMP JUMPDEST PUSH2 0xCB4 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x41E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x313 PUSH2 0x42D CALLDATASIZE PUSH1 0x4 PUSH2 0x1DEE JUMP JUMPDEST PUSH2 0xCE3 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x43E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x313 PUSH2 0x44D CALLDATASIZE PUSH1 0x4 PUSH2 0x1E2F JUMP JUMPDEST PUSH2 0xEF4 JUMP JUMPDEST PUSH2 0x1FE PUSH2 0x460 CALLDATASIZE PUSH1 0x4 PUSH2 0x1BA2 JUMP JUMPDEST PUSH2 0xFC0 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x471 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1FE PUSH2 0x480 CALLDATASIZE PUSH1 0x4 PUSH2 0x1B32 JUMP JUMPDEST PUSH2 0x125B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x491 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x313 PUSH1 0x2 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4A7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x5 SLOAD PUSH2 0x1C1 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4C7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1FE PUSH2 0x4D6 CALLDATASIZE PUSH1 0x4 PUSH2 0x1DBE JUMP JUMPDEST PUSH2 0x12F6 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x50E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x505 SWAP1 PUSH2 0x1F7D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xA9059CBB PUSH2 0x52F PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT PUSH1 0xE0 DUP5 SWAP1 SHL AND DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x44 ADD JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x578 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x58C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x5B0 SWAP2 SWAP1 PUSH2 0x1D0A JUMP JUMPDEST POP POP POP JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD TIMESTAMP SWAP1 PUSH2 0x5D4 SWAP1 PUSH3 0x15180 PUSH2 0x20BA JUMP JUMPDEST GT PUSH2 0x621 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x596F7520646964206E6F74207377617020696E20323420686F75727300000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x505 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x63E SWAP1 PUSH3 0x15180 PUSH2 0x20BA JUMP JUMPDEST TIMESTAMP GT PUSH2 0x68C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x19 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x596F752061697264726F70656420696E20323420686F75727300000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x505 JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x3 SLOAD PUSH2 0x6A9 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 CALLER SWAP1 PUSH2 0x13BA JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 TIMESTAMP SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x6E7 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x505 SWAP1 PUSH2 0x1F7D JUMP JUMPDEST PUSH1 0x4 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 TIMESTAMP SWAP1 SSTORE DUP1 MLOAD PUSH1 0x2 DUP1 DUP3 MSTORE PUSH1 0x60 DUP3 ADD SWAP1 SWAP3 MSTORE SWAP1 DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP SWAP1 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0x7E2 JUMPI PUSH1 0x6 SLOAD DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 DUP3 SWAP1 PUSH1 0x0 SWAP1 PUSH2 0x77B JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE POP POP DUP3 DUP2 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0x7BD JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE POP POP PUSH2 0x8D6 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x851 JUMPI DUP4 DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x812 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND PUSH1 0x20 SWAP2 DUP3 MUL SWAP3 SWAP1 SWAP3 ADD ADD MSTORE PUSH1 0x6 SLOAD DUP3 MLOAD SWAP2 AND SWAP1 DUP3 SWAP1 PUSH1 0x1 SWAP1 DUP2 LT PUSH2 0x7BD JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP4 DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x873 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE POP POP DUP3 DUP2 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0x8B5 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE POP POP JUMPDEST PUSH2 0x8E2 DUP5 DUP5 DUP5 DUP5 PUSH2 0x141D JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x912 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x505 SWAP1 PUSH2 0x1F7D JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP2 DUP4 ISZERO PUSH2 0x8FC MUL SWAP2 DUP5 SWAP2 DUP2 DUP2 DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0x94B JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x979 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x505 SWAP1 PUSH2 0x1F7D JUMP JUMPDEST PUSH2 0x983 PUSH1 0x0 PUSH2 0x15ED JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x9AF JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x505 SWAP1 PUSH2 0x1F7D JUMP JUMPDEST PUSH1 0x1 SSTORE JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x9DE JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x505 SWAP1 PUSH2 0x1F7D JUMP JUMPDEST PUSH1 0x3 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xA2A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x505 SWAP1 PUSH2 0x1F7D JUMP JUMPDEST PUSH2 0x94B PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND CALLER DUP4 PUSH2 0x13BA JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xA68 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x505 SWAP1 PUSH2 0x1F7D JUMP JUMPDEST PUSH1 0x5 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 DUP5 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP2 DUP3 AND OR SWAP1 SWAP2 SSTORE PUSH1 0x6 DUP1 SLOAD SWAP3 SWAP1 SWAP4 AND SWAP2 AND OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0xB53 JUMPI DUP1 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0xAC5 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MLOAD PUSH1 0x6 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND SWAP2 AND EQ DUP1 ISZERO PUSH2 0xB32 JUMPI POP DUP1 PUSH1 0x1 DUP3 MLOAD PUSH2 0xAF7 SWAP2 SWAP1 PUSH2 0x21FF JUMP JUMPDEST DUP2 MLOAD DUP2 LT PUSH2 0xB15 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ JUMPDEST PUSH2 0xB4E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x505 SWAP1 PUSH2 0x1F3B JUMP JUMPDEST PUSH2 0x8D6 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0xC0A JUMPI DUP1 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0xB82 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ DUP1 ISZERO PUSH2 0xB32 JUMPI POP DUP1 PUSH1 0x1 DUP3 MLOAD PUSH2 0xBB4 SWAP2 SWAP1 PUSH2 0x21FF JUMP JUMPDEST DUP2 MLOAD DUP2 LT PUSH2 0xBD2 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MLOAD PUSH1 0x6 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH2 0xB4E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x505 SWAP1 PUSH2 0x1F3B JUMP JUMPDEST DUP1 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0xC2B JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ DUP1 ISZERO PUSH2 0xC98 JUMPI POP DUP1 PUSH1 0x1 DUP3 MLOAD PUSH2 0xC5D SWAP2 SWAP1 PUSH2 0x21FF JUMP JUMPDEST DUP2 MLOAD DUP2 LT PUSH2 0xC7B JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ JUMPDEST PUSH2 0x8D6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x505 SWAP1 PUSH2 0x1F3B JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xCDE JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x505 SWAP1 PUSH2 0x1F7D JUMP JUMPDEST PUSH1 0x2 SSTORE JUMP JUMPDEST PUSH1 0x8 SLOAD PUSH1 0x9 SLOAD PUSH1 0x40 MLOAD PUSH4 0xB4C7741 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE DUP5 DUP2 AND PUSH1 0x24 DUP4 ADD MSTORE PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 SWAP3 DIV PUSH3 0xFFFFFF AND PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x0 SWAP3 DUP4 SWAP3 DUP4 SWAP3 SWAP2 AND SWAP1 PUSH4 0x1698EE82 SWAP1 PUSH1 0x64 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xD4B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xD5F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xD83 SWAP2 SWAP1 PUSH2 0x1B4E JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x3850C7BD PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0xE0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xDBE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xDD2 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xDF6 SWAP2 SWAP1 PUSH2 0x1D24 JUMP JUMPDEST POP POP PUSH1 0x40 DUP1 MLOAD PUSH4 0xDFE1681 PUSH1 0xE0 SHL DUP2 MSTORE SWAP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP7 DUP8 AND SWAP9 POP PUSH1 0x0 SWAP7 DUP9 AND SWAP6 POP PUSH4 0xDFE1681 SWAP5 POP PUSH1 0x4 DUP1 DUP4 ADD SWAP5 POP PUSH1 0x20 SWAP4 POP SWAP1 SWAP2 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xE44 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xE58 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xE7C SWAP2 SWAP1 PUSH2 0x1B4E JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0xEC4 JUMPI PUSH1 0x1 PUSH1 0xC0 SHL DUP8 PUSH2 0xEA9 PUSH1 0x2 DUP7 PUSH2 0x2135 JUMP JUMPDEST PUSH2 0xEB3 SWAP2 SWAP1 PUSH2 0x21E0 JUMP JUMPDEST PUSH2 0xEBD SWAP2 SWAP1 PUSH2 0x20D2 JUMP JUMPDEST SWAP4 POP PUSH2 0xEEA JUMP JUMPDEST PUSH2 0xECF PUSH1 0x2 DUP5 PUSH2 0x2135 JUMP JUMPDEST PUSH2 0xEDD DUP9 PUSH1 0x1 PUSH1 0xC0 SHL PUSH2 0x21E0 JUMP JUMPDEST PUSH2 0xEE7 SWAP2 SWAP1 PUSH2 0x20D2 JUMP JUMPDEST SWAP4 POP JUMPDEST POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x5 SLOAD PUSH1 0x40 MLOAD PUSH4 0xD06CA61F PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x0 SWAP2 DUP3 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0xD06CA61F SWAP1 PUSH2 0xF2B SWAP1 DUP8 SWAP1 DUP8 SWAP1 PUSH1 0x4 ADD PUSH2 0x2010 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xF43 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xF57 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0xF7F SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x1C77 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x1 DUP3 MLOAD PUSH2 0xF90 SWAP2 SWAP1 PUSH2 0x21FF JUMP JUMPDEST DUP2 MLOAD DUP2 LT PUSH2 0xFAE JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP2 POP POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0xA PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 TIMESTAMP SWAP1 SSTORE DUP1 MLOAD PUSH1 0xE0 DUP2 ADD DUP3 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 DUP2 AND DUP1 DUP4 MSTORE DUP9 DUP3 AND SWAP5 DUP4 ADD SWAP5 SWAP1 SWAP5 MSTORE PUSH1 0x9 SLOAD PUSH3 0xFFFFFF PUSH1 0x1 PUSH1 0xA0 SHL DUP3 DIV AND SWAP4 DUP4 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x60 DUP3 ADD SWAP6 SWAP1 SWAP6 MSTORE PUSH1 0x80 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0xA0 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0xC0 DUP2 ADD SWAP4 SWAP1 SWAP4 MSTORE SWAP2 SWAP3 SWAP2 SWAP1 SWAP2 AND EQ ISZERO PUSH2 0x10BF JUMPI PUSH1 0x7 SLOAD PUSH1 0x40 MLOAD PUSH4 0x4E45AAF PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x4E45AAF SWAP1 CALLVALUE SWAP1 PUSH2 0x1067 SWAP1 DUP6 SWAP1 PUSH1 0x4 ADD PUSH2 0x1FB2 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1080 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1094 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x10B9 SWAP2 SWAP1 PUSH2 0x1DD6 JUMP JUMPDEST POP PUSH2 0x1164 JUMP JUMPDEST PUSH2 0x10D4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND CALLER ADDRESS DUP6 PUSH2 0x163D JUMP JUMPDEST PUSH2 0x10DE DUP5 DUP4 PUSH2 0x1675 JUMP JUMPDEST PUSH1 0x7 SLOAD PUSH1 0x40 MLOAD PUSH4 0x4E45AAF PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x4E45AAF SWAP1 CALLVALUE SWAP1 PUSH2 0x1110 SWAP1 DUP6 SWAP1 PUSH1 0x4 ADD PUSH2 0x1FB2 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1129 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x113D JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1162 SWAP2 SWAP1 PUSH2 0x1DD6 JUMP JUMPDEST POP JUMPDEST PUSH1 0x7 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x12210E8A PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x11B4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x11C8 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x40 MLOAD PUSH1 0x0 SWAP3 POP CALLER SWAP2 POP SELFBALANCE SWAP1 DUP4 DUP2 DUP2 DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x120E JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1213 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0x1254 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xD PUSH1 0x24 DUP3 ADD MSTORE PUSH13 0x1C99599D5B990819985A5B1959 PUSH1 0x9A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x505 JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x1285 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x505 SWAP1 PUSH2 0x1F7D JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x12EA JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x646472657373 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x505 JUMP JUMPDEST PUSH2 0x12F3 DUP2 PUSH2 0x15ED JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x1320 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x505 SWAP1 PUSH2 0x1F7D JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 DUP4 SWAP1 DUP4 DUP2 DUP2 DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x136D JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1372 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0x94B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH20 0x2330B4B632B2103A379039B2B7321022BA3432B9 PUSH1 0x61 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x505 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP2 ADD DUP3 SWAP1 MSTORE PUSH2 0x5B0 SWAP1 DUP5 SWAP1 PUSH4 0xA9059CBB PUSH1 0xE0 SHL SWAP1 PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE PUSH2 0x16AE JUMP JUMPDEST PUSH1 0x0 DUP3 GT PUSH2 0x1481 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x506174746965537761703A20616D6F756E74496E206D75737420626520677265 PUSH1 0x44 DUP3 ADD MSTORE PUSH11 0x61746572207468616E203 PUSH1 0xAC SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x505 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0x1557 JUMPI CALLVALUE DUP3 LT ISZERO PUSH2 0x14DF JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x506174746965537761703A20496E73756666696369656E742045544800000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x505 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2710 PUSH1 0x1 SLOAD DUP5 PUSH2 0x14F2 SWAP2 SWAP1 PUSH2 0x21E0 JUMP JUMPDEST PUSH2 0x14FC SWAP2 SWAP1 PUSH2 0x20D2 JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH1 0x40 MLOAD SWAP2 SWAP3 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP3 ISZERO PUSH2 0x8FC MUL SWAP1 DUP4 SWAP1 PUSH1 0x0 DUP2 DUP2 DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0x1537 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP PUSH1 0x0 PUSH2 0x1544 DUP3 DUP6 PUSH2 0x21FF JUMP JUMPDEST SWAP1 POP PUSH2 0x1550 DUP2 DUP5 PUSH2 0x1780 JUMP JUMPDEST POP POP PUSH2 0x8E2 JUMP JUMPDEST PUSH2 0x156C PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND CALLER ADDRESS DUP6 PUSH2 0x163D JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2710 PUSH1 0x1 SLOAD DUP5 PUSH2 0x157F SWAP2 SWAP1 PUSH2 0x21E0 JUMP JUMPDEST PUSH2 0x1589 SWAP2 SWAP1 PUSH2 0x20D2 JUMP JUMPDEST PUSH1 0x4 SLOAD SWAP1 SWAP2 POP PUSH2 0x15A6 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 DUP2 AND SWAP2 AND DUP4 PUSH2 0x13BA JUMP JUMPDEST PUSH1 0x0 PUSH2 0x15B2 DUP3 DUP6 PUSH2 0x21FF JUMP JUMPDEST SWAP1 POP PUSH2 0x15BE DUP7 DUP3 PUSH2 0x180F JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH2 0x15DB JUMPI PUSH2 0x15D6 DUP2 DUP5 PUSH2 0x1848 JUMP JUMPDEST PUSH2 0x15E5 JUMP JUMPDEST PUSH2 0x15E5 DUP2 DUP5 PUSH2 0x18D7 JUMP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR DUP5 SSTORE PUSH1 0x40 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP3 DUP4 SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND PUSH1 0x24 DUP4 ADD MSTORE DUP4 AND PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 DUP2 ADD DUP3 SWAP1 MSTORE PUSH2 0x8E2 SWAP1 DUP6 SWAP1 PUSH4 0x23B872DD PUSH1 0xE0 SHL SWAP1 PUSH1 0x84 ADD PUSH2 0x13E6 JUMP JUMPDEST PUSH1 0x7 SLOAD PUSH1 0x40 MLOAD PUSH4 0x95EA7B3 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP4 SWAP1 MSTORE SWAP1 DUP4 AND SWAP1 PUSH4 0x95EA7B3 SWAP1 PUSH1 0x44 ADD PUSH2 0x55E JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1703 DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x5361666545524332303A206C6F772D6C6576656C2063616C6C206661696C6564 DUP2 MSTORE POP DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x1910 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP1 MLOAD SWAP1 SWAP2 POP ISZERO PUSH2 0x5B0 JUMPI DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x1721 SWAP2 SWAP1 PUSH2 0x1D0A JUMP JUMPDEST PUSH2 0x5B0 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5361666545524332303A204552433230206F7065726174696F6E20646964206E PUSH1 0x44 DUP3 ADD MSTORE PUSH10 0x1BDD081CDD58D8D95959 PUSH1 0xB2 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x505 JUMP JUMPDEST PUSH1 0x5 SLOAD PUSH1 0x40 MLOAD PUSH4 0x7FF36AB5 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x7FF36AB5 SWAP1 DUP5 SWAP1 PUSH2 0x17B9 SWAP1 PUSH1 0x0 SWAP1 DUP7 SWAP1 CALLER SWAP1 TIMESTAMP SWAP1 PUSH1 0x4 ADD PUSH2 0x1ED3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x17D2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x17E6 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x5B0 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x1C77 JUMP JUMPDEST PUSH1 0x5 SLOAD PUSH1 0x40 MLOAD PUSH4 0x95EA7B3 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP4 SWAP1 MSTORE SWAP1 DUP4 AND SWAP1 PUSH4 0x95EA7B3 SWAP1 PUSH1 0x44 ADD PUSH2 0x55E JUMP JUMPDEST PUSH1 0x5 SLOAD PUSH1 0x40 MLOAD PUSH4 0x18CBAFE5 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x18CBAFE5 SWAP1 PUSH2 0x1881 SWAP1 DUP6 SWAP1 PUSH1 0x0 SWAP1 DUP7 SWAP1 CALLER SWAP1 TIMESTAMP SWAP1 PUSH1 0x4 ADD PUSH2 0x2029 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x189B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x18AF JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x5B0 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x1C77 JUMP JUMPDEST PUSH1 0x5 SLOAD PUSH1 0x40 MLOAD PUSH4 0x38ED1739 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x38ED1739 SWAP1 PUSH2 0x1881 SWAP1 DUP6 SWAP1 PUSH1 0x0 SWAP1 DUP7 SWAP1 CALLER SWAP1 TIMESTAMP SWAP1 PUSH1 0x4 ADD PUSH2 0x2029 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x191F DUP5 DUP5 PUSH1 0x0 DUP6 PUSH2 0x1929 JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP3 SELFBALANCE LT ISZERO PUSH2 0x198A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A20696E73756666696369656E742062616C616E636520666F PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x1C8818D85B1B PUSH1 0xD2 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x505 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND EXTCODESIZE PUSH2 0x19E1 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x505 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 DUP8 PUSH1 0x40 MLOAD PUSH2 0x19FD SWAP2 SWAP1 PUSH2 0x1EB7 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1A3A JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1A3F JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x1A4F DUP3 DUP3 DUP7 PUSH2 0x1A5A JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0x1A69 JUMPI POP DUP2 PUSH2 0x1922 JUMP JUMPDEST DUP3 MLOAD ISZERO PUSH2 0x1A79 JUMPI DUP3 MLOAD DUP1 DUP5 PUSH1 0x20 ADD REVERT JUMPDEST DUP2 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x505 SWAP2 SWAP1 PUSH2 0x1F08 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1AA3 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x20 PUSH2 0x1AB8 PUSH2 0x1AB3 DUP4 PUSH2 0x2096 JUMP JUMPDEST PUSH2 0x2065 JUMP JUMPDEST DUP1 DUP4 DUP3 MSTORE DUP3 DUP3 ADD SWAP2 POP DUP3 DUP7 ADD DUP8 DUP5 DUP7 PUSH1 0x5 SHL DUP10 ADD ADD GT ISZERO PUSH2 0x1AD7 JUMPI DUP6 DUP7 REVERT JUMPDEST DUP6 JUMPDEST DUP6 DUP2 LT ISZERO PUSH2 0x1AFE JUMPI DUP2 CALLDATALOAD PUSH2 0x1AEC DUP2 PUSH2 0x226E JUMP JUMPDEST DUP5 MSTORE SWAP3 DUP5 ADD SWAP3 SWAP1 DUP5 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x1AD9 JUMP JUMPDEST POP SWAP1 SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST DUP1 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x1B1B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 MLOAD PUSH2 0xFFFF DUP2 AND DUP2 EQ PUSH2 0x1B1B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1B43 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x1922 DUP2 PUSH2 0x226E JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1B5F JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x1922 DUP2 PUSH2 0x226E JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1B7C JUMPI DUP1 DUP2 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x1B87 DUP2 PUSH2 0x226E JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0x1B97 DUP2 PUSH2 0x226E JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x1BB6 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 0x1BC1 DUP2 PUSH2 0x226E JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH2 0x1BD1 DUP2 PUSH2 0x226E JUMP JUMPDEST SWAP3 SWAP6 SWAP3 SWAP5 POP POP POP PUSH1 0x40 SWAP2 SWAP1 SWAP2 ADD CALLDATALOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x1BF7 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH2 0x1C02 DUP2 PUSH2 0x226E JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH2 0x1C12 DUP2 PUSH2 0x226E JUMP JUMPDEST SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD SWAP2 POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1C34 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x1C40 DUP8 DUP3 DUP9 ADD PUSH2 0x1A93 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1C5E JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x1C69 DUP2 PUSH2 0x226E JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1C89 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1C9F JUMPI DUP3 DUP4 REVERT JUMPDEST DUP4 ADD PUSH1 0x1F DUP2 ADD DUP6 SGT PUSH2 0x1CAF JUMPI DUP3 DUP4 REVERT JUMPDEST DUP1 MLOAD PUSH2 0x1CBD PUSH2 0x1AB3 DUP3 PUSH2 0x2096 JUMP JUMPDEST DUP1 DUP3 DUP3 MSTORE DUP5 DUP3 ADD SWAP2 POP DUP5 DUP5 ADD DUP9 DUP7 DUP6 PUSH1 0x5 SHL DUP8 ADD ADD GT ISZERO PUSH2 0x1CDC JUMPI DUP7 DUP8 REVERT JUMPDEST DUP7 SWAP5 POP JUMPDEST DUP4 DUP6 LT ISZERO PUSH2 0x1CFE JUMPI DUP1 MLOAD DUP4 MSTORE PUSH1 0x1 SWAP5 SWAP1 SWAP5 ADD SWAP4 SWAP2 DUP6 ADD SWAP2 DUP6 ADD PUSH2 0x1CE0 JUMP JUMPDEST POP SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1D1B JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x1922 DUP3 PUSH2 0x1B0B JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xE0 DUP9 DUP11 SUB SLT ISZERO PUSH2 0x1D3E JUMPI DUP3 DUP4 REVERT JUMPDEST DUP8 MLOAD PUSH2 0x1D49 DUP2 PUSH2 0x226E JUMP JUMPDEST DUP1 SWAP8 POP POP PUSH1 0x20 DUP9 ADD MLOAD DUP1 PUSH1 0x2 SIGNEXTEND DUP2 EQ PUSH2 0x1D60 JUMPI DUP4 DUP5 REVERT JUMPDEST SWAP6 POP PUSH2 0x1D6E PUSH1 0x40 DUP10 ADD PUSH2 0x1B20 JUMP JUMPDEST SWAP5 POP PUSH2 0x1D7C PUSH1 0x60 DUP10 ADD PUSH2 0x1B20 JUMP JUMPDEST SWAP4 POP PUSH2 0x1D8A PUSH1 0x80 DUP10 ADD PUSH2 0x1B20 JUMP JUMPDEST SWAP3 POP PUSH1 0xA0 DUP9 ADD MLOAD PUSH4 0xFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x1DA2 JUMPI DUP3 DUP4 REVERT JUMPDEST SWAP2 POP PUSH2 0x1DB0 PUSH1 0xC0 DUP10 ADD PUSH2 0x1B0B JUMP JUMPDEST SWAP1 POP SWAP3 SWAP6 SWAP9 SWAP2 SWAP5 SWAP8 POP SWAP3 SWAP6 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1DCF JUMPI DUP1 DUP2 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1DE7 JUMPI DUP1 DUP2 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x1E02 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 CALLDATALOAD SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH2 0x1E14 DUP2 PUSH2 0x226E JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD PUSH2 0x1E24 DUP2 PUSH2 0x226E JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1E41 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1E5E JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x1E6A DUP6 DUP3 DUP7 ADD PUSH2 0x1A93 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x20 DUP1 DUP6 ADD SWAP5 POP DUP1 DUP5 ADD DUP4 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1EAC JUMPI DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP8 MSTORE SWAP6 DUP3 ADD SWAP6 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x1E87 JUMP JUMPDEST POP SWAP5 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x1EC9 DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x2216 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP5 DUP2 MSTORE PUSH1 0x80 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x0 PUSH2 0x1EEC PUSH1 0x80 DUP4 ADD DUP7 PUSH2 0x1E74 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP5 SWAP1 SWAP5 AND PUSH1 0x40 DUP4 ADD MSTORE POP PUSH1 0x60 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 DUP3 MLOAD DUP1 PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x1F27 DUP2 PUSH1 0x40 DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0x2216 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP2 SWAP1 SWAP2 ADD PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x22 SWAP1 DUP3 ADD MSTORE PUSH32 0x506174746965537761703A2050617468206D7573742062652073706563696669 PUSH1 0x40 DUP3 ADD MSTORE PUSH2 0x1959 PUSH1 0xF2 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 DUP2 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND DUP3 MSTORE PUSH1 0x20 DUP1 DUP5 ADD MLOAD DUP3 AND SWAP1 DUP4 ADD MSTORE PUSH1 0x40 DUP1 DUP5 ADD MLOAD PUSH3 0xFFFFFF AND SWAP1 DUP4 ADD MSTORE PUSH1 0x60 DUP1 DUP5 ADD MLOAD DUP3 AND SWAP1 DUP4 ADD MSTORE PUSH1 0x80 DUP1 DUP5 ADD MLOAD SWAP1 DUP4 ADD MSTORE PUSH1 0xA0 DUP4 DUP2 ADD MLOAD SWAP1 DUP4 ADD MSTORE PUSH1 0xC0 SWAP3 DUP4 ADD MLOAD AND SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0xE0 ADD SWAP1 JUMP JUMPDEST DUP3 DUP2 MSTORE PUSH1 0x40 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x0 PUSH2 0x191F PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x1E74 JUMP JUMPDEST DUP6 DUP2 MSTORE DUP5 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0xA0 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x0 PUSH2 0x2048 PUSH1 0xA0 DUP4 ADD DUP7 PUSH2 0x1E74 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP5 SWAP1 SWAP5 AND PUSH1 0x60 DUP4 ADD MSTORE POP PUSH1 0x80 ADD MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT AND DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x208E JUMPI PUSH2 0x208E PUSH2 0x2258 JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x20B0 JUMPI PUSH2 0x20B0 PUSH2 0x2258 JUMP JUMPDEST POP PUSH1 0x5 SHL PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0x20CD JUMPI PUSH2 0x20CD PUSH2 0x2242 JUMP JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x20ED JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 DUP2 REVERT JUMPDEST POP DIV SWAP1 JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 JUMPDEST DUP1 DUP6 GT ISZERO PUSH2 0x212D JUMPI DUP2 PUSH1 0x0 NOT DIV DUP3 GT ISZERO PUSH2 0x2113 JUMPI PUSH2 0x2113 PUSH2 0x2242 JUMP JUMPDEST DUP1 DUP6 AND ISZERO PUSH2 0x2120 JUMPI SWAP2 DUP2 MUL SWAP2 JUMPDEST SWAP4 DUP5 SHR SWAP4 SWAP1 DUP1 MUL SWAP1 PUSH2 0x20F7 JUMP JUMPDEST POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1922 PUSH1 0xFF DUP5 AND DUP4 PUSH1 0x0 DUP3 PUSH2 0x214E JUMPI POP PUSH1 0x1 PUSH2 0xFBA JUMP JUMPDEST DUP2 PUSH2 0x215B JUMPI POP PUSH1 0x0 PUSH2 0xFBA JUMP JUMPDEST DUP2 PUSH1 0x1 DUP2 EQ PUSH2 0x2171 JUMPI PUSH1 0x2 DUP2 EQ PUSH2 0x217B JUMPI PUSH2 0x2197 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP PUSH2 0xFBA JUMP JUMPDEST PUSH1 0xFF DUP5 GT ISZERO PUSH2 0x218C JUMPI PUSH2 0x218C PUSH2 0x2242 JUMP JUMPDEST POP POP PUSH1 0x1 DUP3 SHL PUSH2 0xFBA JUMP JUMPDEST POP PUSH1 0x20 DUP4 LT PUSH2 0x133 DUP4 LT AND PUSH1 0x4E DUP5 LT PUSH1 0xB DUP5 LT AND OR ISZERO PUSH2 0x21BA JUMPI POP DUP2 DUP2 EXP PUSH2 0xFBA JUMP JUMPDEST PUSH2 0x21C4 DUP4 DUP4 PUSH2 0x20F2 JUMP JUMPDEST DUP1 PUSH1 0x0 NOT DIV DUP3 GT ISZERO PUSH2 0x21D8 JUMPI PUSH2 0x21D8 PUSH2 0x2242 JUMP JUMPDEST MUL SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 NOT DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0x21FA JUMPI PUSH2 0x21FA PUSH2 0x2242 JUMP JUMPDEST POP MUL SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 LT ISZERO PUSH2 0x2211 JUMPI PUSH2 0x2211 PUSH2 0x2242 JUMP JUMPDEST POP SUB SWAP1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x2231 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x2219 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x8E2 JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x12F3 JUMPI PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP14 0xBD 0xA7 EXTCODESIZE 0x49 0xFC AND ADD DUP4 0xE0 0xE 0xF6 DUP5 0x2A 0xB4 0x2A NOT KECCAK256 AND PUSH30 0xB1DBB584C649C9398E194F1C64736F6C6343000804003300000000000000 ","sourceMap":"34906:8344:1:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;35224:20;;;;;;;;;;-1:-1:-1;35224:20:1;;;;-1:-1:-1;;;;;35224:20:1;;;;;;-1:-1:-1;;;;;8105:32:3;;;8087:51;;8075:2;8060:18;35224:20:1;;;;;;;;34557:167;;;;;;;;;;-1:-1:-1;34557:167:1;;;;;:::i;:::-;;:::i;:::-;;35253:73;;;;;;;;;;-1:-1:-1;35253:73:1;;;;-1:-1:-1;;;;;35253:73:1;;;35899:447;;;;;;;;;;;;;:::i;41454:106::-;;;;;;;;;;-1:-1:-1;41454:106:1;;;;;:::i;:::-;;:::i;36354:605::-;;;;;;:::i;:::-;;:::i;35414:71::-;;;;;;;;;;-1:-1:-1;35414:71:1;;;;-1:-1:-1;;;;;35414:71:1;;;35164:25;;;;;;;;;;-1:-1:-1;35164:25:1;;;;-1:-1:-1;;;;;35164:25:1;;;41913:116;;;;;;;;;;-1:-1:-1;41913:116:1;;;;;:::i;:::-;;:::i;5438:103::-;;;;;;;;;;;;;:::i;41107:::-;;;;;;;;;;-1:-1:-1;41107:103:1;;;;;:::i;:::-;;:::i;35011:26::-;;;;;;;;;;;;;;;;;;;15505:25:3;;;15493:2;15478:18;35011:26:1;15460:76:3;41328:118:1;;;;;;;;;;-1:-1:-1;41328:118:1;;;;;:::i;:::-;;:::i;35129:28::-;;;;;;;;;;-1:-1:-1;35129:28:1;;;;-1:-1:-1;;;;;35129:28:1;;;4787:87;;;;;;;;;;-1:-1:-1;4833:7:1;4860:6;-1:-1:-1;;;;;4860:6:1;4787:87;;41737:168;;;;;;;;;;-1:-1:-1;41737:168:1;;;;;:::i;:::-;;:::i;35333:74::-;;;;;;;;;;-1:-1:-1;35333:74:1;;;;-1:-1:-1;;;;;35333:74:1;;;41568:161;;;;;;;;;;-1:-1:-1;41568:161:1;;;;;:::i;:::-;;:::i;36967:836::-;;;;;;:::i;:::-;;:::i;41218:102::-;;;;;;;;;;-1:-1:-1;41218:102:1;;;;;:::i;:::-;;:::i;40377:722::-;;;;;;;;;;-1:-1:-1;40377:722:1;;;;;:::i;:::-;;:::i;40058:311::-;;;;;;;;;;-1:-1:-1;40058:311:1;;;;;:::i;:::-;;:::i;42037:1210::-;;;;;;:::i;:::-;;:::i;5696:238::-;;;;;;;;;;-1:-1:-1;5696:238:1;;;;;:::i;:::-;;:::i;35055:50::-;;;;;;;;;;;;;;;;35196:21;;;;;;;;;;-1:-1:-1;35196:21:1;;;;-1:-1:-1;;;;;35196:21:1;;;34732:167;;;;;;;;;;-1:-1:-1;34732:167:1;;;;;:::i;:::-;;:::i;34557:::-;4833:7;4860:6;-1:-1:-1;;;;;4860:6:1;3564:10;5007:23;4999:68;;;;-1:-1:-1;;;4999:68:1;;;;;;;:::i;:::-;;;;;;;;;34677:12:::1;-1:-1:-1::0;;;;;34670:29:1::1;;34700:7;4833::::0;4860:6;-1:-1:-1;;;;;4860:6:1;;4787:87;34700:7:::1;34670:46;::::0;-1:-1:-1;;;;;;34670:46:1::1;::::0;;;;;;-1:-1:-1;;;;;9114:32:3;;;34670:46:1::1;::::0;::::1;9096:51:3::0;9163:18;;;9156:34;;;9069:18;;34670:46:1::1;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;34557:167:::0;;:::o;35899:447::-;35975:10;35960:26;;;;:14;:26;;;;;;35997:15;;35960:34;;35989:5;35960:34;:::i;:::-;:52;35938:130;;;;-1:-1:-1;;;35938:130:1;;12229:2:3;35938:130:1;;;12211:21:3;12268:2;12248:18;;;12241:30;12307;12287:18;;;12280:58;12355:18;;35938:130:1;12201:178:3;35938:130:1;36137:10;36121:27;;;;:15;:27;;;;;;:35;;36151:5;36121:35;:::i;:::-;36103:15;:53;36081:128;;;;-1:-1:-1;;;36081:128:1;;12586:2:3;36081:128:1;;;12568:21:3;12625:2;12605:18;;;12598:30;12664:27;12644:18;;;12637:55;12709:18;;36081:128:1;12558:175:3;36081:128:1;36269:12;;36229:13;;36222:60;;-1:-1:-1;;;;;36229:13:1;;;;36257:10;;36222:34;:60::i;:::-;36309:10;36293:27;;;;:15;:27;;;;;36323:15;36293:45;;35899:447::o;41454:106::-;4833:7;4860:6;-1:-1:-1;;;;;4860:6:1;3564:10;5007:23;4999:68;;;;-1:-1:-1;;;4999:68:1;;;;;;;:::i;:::-;41528:10:::1;:24:::0;;-1:-1:-1;;;;;;41528:24:1::1;-1:-1:-1::0;;;;;41528:24:1;;;::::1;::::0;;;::::1;::::0;;41454:106::o;36354:605::-;36506:10;36491:26;;;;:14;:26;;;;;;36520:15;36491:44;;36570:16;;36584:1;36570:16;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;36546:40:1;-1:-1:-1;;;;;;36601:21:1;;36597:290;;36649:5;;36639:7;;-1:-1:-1;;;;;36649:5:1;;;;36639:4;;36649:5;;36639:7;;-1:-1:-1;;;36639:7:1;;;;;;;;;;;;;;:15;-1:-1:-1;;;;;36639:15:1;;;-1:-1:-1;;;;;36639:15:1;;;;;36679:7;36669:4;36674:1;36669:7;;;;;;-1:-1:-1;;;36669:7:1;;;;;;;;;;;;;;:17;-1:-1:-1;;;;;36669:17:1;;;-1:-1:-1;;;;;36669:17:1;;;;;36597:290;;;-1:-1:-1;;;;;36708:21:1;;36704:183;;36756:7;36746:4;36751:1;36746:7;;;;;;-1:-1:-1;;;36746:7:1;;;;;;;;;-1:-1:-1;;;;;36746:17:1;;;:7;;;;;;;;;:17;36788:5;;36778:7;;36788:5;;;36778:4;;36788:5;;36778:7;;;;-1:-1:-1;;;36778:7:1;;;;;;;;36704:183;36836:7;36826:4;36831:1;36826:7;;;;;;-1:-1:-1;;;36826:7:1;;;;;;;;;;;;;;:17;-1:-1:-1;;;;;36826:17:1;;;-1:-1:-1;;;;;36826:17:1;;;;;36868:7;36858:4;36863:1;36858:7;;;;;;-1:-1:-1;;;36858:7:1;;;;;;;;;;;;;;:17;-1:-1:-1;;;;;36858:17:1;;;-1:-1:-1;;;;;36858:17:1;;;;;36704:183;36899:52;36917:7;36926;36935:9;36946:4;36899:17;:52::i;:::-;36354:605;;;;:::o;41913:116::-;4833:7;4860:6;-1:-1:-1;;;;;4860:6:1;3564:10;5007:23;4999:68;;;;-1:-1:-1;;;4999:68:1;;;;;;;:::i;:::-;4833:7;4860:6;;41987:34:::1;::::0;-1:-1:-1;;;;;4860:6:1;;;;41987:34;::::1;;;::::0;42013:7;;41987:34;4833:7;41987:34;42013:7;4860:6;41987:34;::::1;;;;;;;;;;;;;::::0;::::1;;;;;;41913:116:::0;:::o;5438:103::-;4833:7;4860:6;-1:-1:-1;;;;;4860:6:1;3564:10;5007:23;4999:68;;;;-1:-1:-1;;;4999:68:1;;;;;;;:::i;:::-;5503:30:::1;5530:1;5503:18;:30::i;:::-;5438:103::o:0;41107:::-;4833:7;4860:6;-1:-1:-1;;;;;4860:6:1;3564:10;5007:23;4999:68;;;;-1:-1:-1;;;4999:68:1;;;;;;;:::i;:::-;41178:10:::1;:24:::0;41107:103::o;41328:118::-;4833:7;4860:6;-1:-1:-1;;;;;4860:6:1;3564:10;5007:23;4999:68;;;;-1:-1:-1;;;4999:68:1;;;;;;;:::i;:::-;41407:13:::1;:31:::0;;-1:-1:-1;;;;;;41407:31:1::1;-1:-1:-1::0;;;;;41407:31:1;;;::::1;::::0;;;::::1;::::0;;41328:118::o;41737:168::-;4833:7;4860:6;-1:-1:-1;;;;;4860:6:1;3564:10;5007:23;4999:68;;;;-1:-1:-1;;;4999:68:1;;;;;;;:::i;:::-;41849:48:::1;-1:-1:-1::0;;;;;41849:27:1;::::1;41877:10;41889:7:::0;41849:27:::1;:48::i;41568:161::-:0;4833:7;4860:6;-1:-1:-1;;;;;4860:6:1;3564:10;5007:23;4999:68;;;;-1:-1:-1;;;4999:68:1;;;;;;;:::i;:::-;41680:6:::1;:16:::0;;-1:-1:-1;;;;;41680:16:1;;::::1;-1:-1:-1::0;;;;;;41680:16:1;;::::1;;::::0;;;41707:5:::1;:14:::0;;;;;::::1;::::0;::::1;;::::0;;41568:161::o;36967:836::-;-1:-1:-1;;;;;37144:21:1;;37140:593;;37217:4;37222:1;37217:7;;;;;;-1:-1:-1;;;37217:7:1;;;;;;;;;;;;;;;;;;;37208:5;;-1:-1:-1;;;;;37208:5:1;;;:16;;;:52;;;;;37239:4;37258:1;37244:4;:11;:15;;;;:::i;:::-;37239:21;;;;;;-1:-1:-1;;;37239:21:1;;;;;;;;;;;;;;;-1:-1:-1;;;;;37228:32:1;:7;-1:-1:-1;;;;;37228:32:1;;37208:52;37182:148;;;;-1:-1:-1;;;37182:148:1;;;;;;;:::i;:::-;37140:593;;;-1:-1:-1;;;;;37352:21:1;;37348:385;;37427:4;37432:1;37427:7;;;;;;-1:-1:-1;;;37427:7:1;;;;;;;;;;;;;;;-1:-1:-1;;;;;37416:18:1;:7;-1:-1:-1;;;;;37416:18:1;;:52;;;;;37447:4;37466:1;37452:4;:11;:15;;;;:::i;:::-;37447:21;;;;;;-1:-1:-1;;;37447:21:1;;;;;;;;;;;;;;;;;;;37438:5;;-1:-1:-1;;;;;37438:5:1;;;:30;;;37390:148;;;;-1:-1:-1;;;37390:148:1;;;;;;;:::i;37348:385::-;37608:4;37613:1;37608:7;;;;;;-1:-1:-1;;;37608:7:1;;;;;;;;;;;;;;;-1:-1:-1;;;;;37597:18:1;:7;-1:-1:-1;;;;;37597:18:1;;:54;;;;;37630:4;37649:1;37635:4;:11;:15;;;;:::i;:::-;37630:21;;;;;;-1:-1:-1;;;37630:21:1;;;;;;;;;;;;;;;-1:-1:-1;;;;;37619:32:1;:7;-1:-1:-1;;;;;37619:32:1;;37597:54;37571:150;;;;-1:-1:-1;;;37571:150:1;;;;;;;:::i;41218:102::-;4833:7;4860:6;-1:-1:-1;;;;;4860:6:1;3564:10;5007:23;4999:68;;;;-1:-1:-1;;;4999:68:1;;;;;;;:::i;:::-;41290:12:::1;:22:::0;41218:102::o;40377:722::-;40633:14;;40718:7;;40615:121;;-1:-1:-1;;;40615:121:1;;-1:-1:-1;;;;;8405:15:3;;;40615:121:1;;;8387:34:3;8457:15;;;8437:18;;;8430:43;-1:-1:-1;;;40718:7:1;;;;;8489:18:3;;;8482:49;40525:17:1;;;;;;40633:14;;;40615:41;;8322:18:3;;40615:121:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;40593:143;;40799:11;-1:-1:-1;;;;;40779:52:1;;:54;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;40861:36:1;;;-1:-1:-1;;;40861:36:1;;;;-1:-1:-1;;;;;40747:86:1;;;;-1:-1:-1;40844:14:1;;40861:34;;;-1:-1:-1;40861:34:1;;-1:-1:-1;40861:36:1;;;;;-1:-1:-1;40861:36:1;;-1:-1:-1;40861:36:1;;;;;;;:34;:36;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;40844:53;;40924:6;-1:-1:-1;;;;;40912:18:1;:8;-1:-1:-1;;;;;40912:18:1;;40908:183;;;-1:-1:-1;;;40985:12:1;40962:20;40981:1;40962:15;:20;:::i;:::-;:35;;;;:::i;:::-;40961:48;;;;:::i;:::-;40945:65;;40908:183;;;41070:20;41089:1;41070:15;:20;:::i;:::-;41043:23;41054:12;-1:-1:-1;;;41043:23:1;:::i;:::-;41042:48;;;;:::i;:::-;41026:65;;40908:183;40377:722;;;;;;;;:::o;40058:311::-;40239:6;;40231:85;;-1:-1:-1;;;40231:85:1;;40177:17;;;;-1:-1:-1;;;;;40239:6:1;;;;40231:29;;:85;;40275:11;;40301:4;;40231:85;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;40231:85:1;;;;;;;;;;;;:::i;:::-;40207:109;;40334:7;40359:1;40342:7;:14;:18;;;;:::i;:::-;40334:27;;;;;;-1:-1:-1;;;40334:27:1;;;;;;;;;;;;;;;40327:34;;;40058:311;;;;;:::o;42037:1210::-;42190:10;42175:26;;;;:14;:26;;;;;;;;42204:15;42175:44;;42283:243;;;;;;;-1:-1:-1;;;;;42283:243:1;;;;;;;;;;;;;;;;42407:7;;;-1:-1:-1;;;42407:7:1;;;42283:243;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;42553:11;;;;42541:23;42537:489;;;42593:13;;42579:103;;-1:-1:-1;;;42579:103:1;;-1:-1:-1;;;;;42593:13:1;;;;42579:45;;42632:9;;42579:103;;42661:6;;42579:103;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;42537:489;;;42713:137;-1:-1:-1;;;;;42713:33:1;;42765:10;42802:4;42826:9;42713:33;:137::i;:::-;42865:31;42876:8;42886:9;42865:10;:31::i;:::-;42925:13;;42911:103;;-1:-1:-1;;;42911:103:1;;-1:-1:-1;;;;;42925:13:1;;;;42911:45;;42964:9;;42911:103;;42993:6;;42911:103;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;42537:489;43050:13;;;;;;;;;-1:-1:-1;;;;;43050:13:1;-1:-1:-1;;;;;43036:38:1;;:40;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;43146:49:1;;43128:12;;-1:-1:-1;43146:10:1;;-1:-1:-1;43169:21:1;;43128:12;43146:49;43128:12;43146:49;43169:21;43146:10;:49;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;43127:68;;;43214:7;43206:33;;;;-1:-1:-1;;;43206:33:1;;14482:2:3;43206:33:1;;;14464:21:3;14521:2;14501:18;;;14494:30;-1:-1:-1;;;14540:18:3;;;14533:43;14593:18;;43206:33:1;14454:163:3;43206:33:1;42037:1210;;;;;:::o;5696:238::-;4833:7;4860:6;-1:-1:-1;;;;;4860:6:1;3564:10;5007:23;4999:68;;;;-1:-1:-1;;;4999:68:1;;;;;;;:::i;:::-;-1:-1:-1;;;;;5799:22:1;::::1;5777:110;;;::::0;-1:-1:-1;;;5777:110:1;;11066:2:3;5777:110:1::1;::::0;::::1;11048:21:3::0;11105:2;11085:18;;;11078:30;11144:34;11124:18;;;11117:62;-1:-1:-1;;;11195:18:3;;;11188:36;11241:19;;5777:110:1::1;11038:228:3::0;5777:110:1::1;5898:28;5917:8;5898:18;:28::i;:::-;5696:238:::0;:::o;34732:167::-;4833:7;4860:6;-1:-1:-1;;;;;4860:6:1;3564:10;5007:23;4999:68;;;;-1:-1:-1;;;4999:68:1;;;;;;;:::i;:::-;34797:9:::1;4860:6:::0;;34812:31:::1;::::0;-1:-1:-1;;;;;4860:6:1;;;;34832;;34797:9;34812:31;34797:9;34812:31;34832:6;4860;34812:31:::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;34796:47;;;34862:4;34854:37;;;::::0;-1:-1:-1;;;34854:37:1;;11473:2:3;34854:37:1::1;::::0;::::1;11455:21:3::0;11512:2;11492:18;;;11485:30;-1:-1:-1;;;11531:18:3;;;11524:50;11591:18;;34854:37:1::1;11445:170:3::0;23130:214:1;23267:58;;-1:-1:-1;;;;;9114:32:3;;23267:58:1;;;9096:51:3;9163:18;;;9156:34;;;23213:123:1;;23247:5;;-1:-1:-1;;;23290:23:1;9069:18:3;;23267:58:1;;;;-1:-1:-1;;23267:58:1;;;;;;;;;;;;;;-1:-1:-1;;;;;23267:58:1;-1:-1:-1;;;;;;23267:58:1;;;;;;;;;;23213:19;:123::i;37811:1159::-;37997:1;37985:9;:13;37977:69;;;;-1:-1:-1;;;37977:69:1;;12940:2:3;37977:69:1;;;12922:21:3;12979:2;12959:18;;;12952:30;13018:34;12998:18;;;12991:62;-1:-1:-1;;;13069:18:3;;;13062:41;13120:19;;37977:69:1;12912:233:3;37977:69:1;-1:-1:-1;;;;;38063:21:1;;38059:904;;38122:9;38109;:22;;38101:63;;;;-1:-1:-1;;;38101:63:1;;10306:2:3;38101:63:1;;;10288:21:3;10345:2;10325:18;;;10318:30;10384;10364:18;;;10357:58;10432:18;;38101:63:1;10278:178:3;38101:63:1;38179:8;38217:5;38203:10;;38191:9;:22;;;;:::i;:::-;38190:32;;;;:::i;:::-;38245:10;;38237:33;;38179:43;;-1:-1:-1;;;;;;38245:10:1;;38237:33;;;;;38179:43;;38245:10;38237:33;38245:10;38237:33;38179:43;38245:10;38237:33;;;;;;;;;;;;;;;;;;;;-1:-1:-1;38285:17:1;38305:15;38317:3;38305:9;:15;:::i;:::-;38285:35;;38335:38;38354:12;38368:4;38335:18;:38::i;:::-;38059:904;;;;;38406:136;-1:-1:-1;;;;;38406:32:1;;38457:10;38494:4;38518:9;38406:32;:136::i;:::-;38557:8;38595:5;38581:10;;38569:9;:22;;;;:::i;:::-;38568:32;;;;:::i;:::-;38644:10;;38557:43;;-1:-1:-1;38615:45:1;;-1:-1:-1;;;;;38615:28:1;;;;38644:10;38557:43;38615:28;:45::i;:::-;38675:17;38695:15;38707:3;38695:9;:15;:::i;:::-;38675:35;;38725:31;38734:7;38743:12;38725:8;:31::i;:::-;-1:-1:-1;;;;;38775:21:1;;38771:181;;38817:38;38836:12;38850:4;38817:18;:38::i;:::-;38771:181;;;38896:40;38917:12;38931:4;38896:20;:40::i;:::-;38059:904;;37811:1159;;;;:::o;6094:191::-;6168:16;6187:6;;-1:-1:-1;;;;;6204:17:1;;;-1:-1:-1;;;;;;6204:17:1;;;;;;6237:40;;6187:6;;;;;;;6237:40;;6168:16;6237:40;6094:191;;:::o;23352:285::-;23550:68;;-1:-1:-1;;;;;8800:15:3;;;23550:68:1;;;8782:34:3;8852:15;;8832:18;;;8825:43;8884:18;;;8877:34;;;23496:133:1;;23530:5;;-1:-1:-1;;;23573:27:1;8717:18:3;;23550:68:1;8699:218:3;39917:133:1;40018:13;;39987:55;;-1:-1:-1;;;39987:55:1;;-1:-1:-1;;;;;40018:13:1;;;39987:55;;;9096:51:3;9163:18;;;9156:34;;;39987:22:1;;;;;;9069:18:3;;39987:55:1;9051:145:3;26063:802:1;26487:23;26513:106;26555:4;26513:106;;;;;;;;;;;;;;;;;26521:5;-1:-1:-1;;;;;26513:27:1;;;:106;;;;;:::i;:::-;26634:17;;26487:132;;-1:-1:-1;26634:21:1;26630:228;;26749:10;26738:30;;;;;;;;;;;;:::i;:::-;26712:134;;;;-1:-1:-1;;;26712:134:1;;14071:2:3;26712:134:1;;;14053:21:3;14110:2;14090:18;;;14083:30;14149:34;14129:18;;;14122:62;-1:-1:-1;;;14200:18:3;;;14193:40;14250:19;;26712:134:1;14043:232:3;39371:247:1;39464:6;;39456:154;;-1:-1:-1;;;39456:154:1;;-1:-1:-1;;;;;39464:6:1;;;;39456:37;;39501:7;;39456:154;;39464:6;;39540:4;;39559:10;;39584:15;;39456:154;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;39456:154:1;;;;;;;;;;;;:::i;38978:124::-;39077:6;;39046:48;;-1:-1:-1;;;39046:48:1;;-1:-1:-1;;;;;39077:6:1;;;39046:48;;;9096:51:3;9163:18;;;9156:34;;;39046:22:1;;;;;;9069:18:3;;39046:48:1;9051:145:3;39110:253:1;39203:6;;39195:160;;-1:-1:-1;;;39195:160:1;;-1:-1:-1;;;;;39203:6:1;;;;39195:37;;:160;;39247:7;;39203:6;;39285:4;;39304:10;;39329:15;;39195:160;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;39195:160:1;;;;;;;;;;;;:::i;39626:283::-;39746:6;;39738:163;;-1:-1:-1;;;39738:163:1;;-1:-1:-1;;;;;39746:6:1;;;;39738:40;;:163;;39793:7;;39746:6;;39831:4;;39850:10;;39875:15;;39738:163;;;:::i;17543:229::-;17680:12;17712:52;17734:6;17742:4;17748:1;17751:12;17712:21;:52::i;:::-;17705:59;;17543:229;;;;;;:::o;18759:571::-;18929:12;19001:5;18976:21;:30;;18954:118;;;;-1:-1:-1;;;18954:118:1;;11822:2:3;18954:118:1;;;11804:21:3;11861:2;11841:18;;;11834:30;11900:34;11880:18;;;11873:62;-1:-1:-1;;;11951:18:3;;;11944:36;11997:19;;18954:118:1;11794:228:3;18954:118:1;-1:-1:-1;;;;;14994:19:1;;;19083:60;;;;-1:-1:-1;;;19083:60:1;;13713:2:3;19083:60:1;;;13695:21:3;13752:2;13732:18;;;13725:30;13791:31;13771:18;;;13764:59;13840:18;;19083:60:1;13685:179:3;19083:60:1;19157:12;19171:23;19198:6;-1:-1:-1;;;;;19198:11:1;19217:5;19238:4;19198:55;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;19156:97;;;;19271:51;19288:7;19297:10;19309:12;19271:16;:51::i;:::-;19264:58;18759:571;-1:-1:-1;;;;;;;18759:571:1:o;21714:712::-;21864:12;21893:7;21889:530;;;-1:-1:-1;21924:10:1;21917:17;;21889:530;22038:17;;:21;22034:374;;22236:10;22230:17;22297:15;22284:10;22280:2;22276:19;22269:44;22184:148;22379:12;22372:20;;-1:-1:-1;;;22372:20:1;;;;;;;;:::i;14:768:3:-;68:5;121:3;114:4;106:6;102:17;98:27;88:2;;143:5;136;129:20;88:2;183:6;170:20;209:4;233:60;249:43;289:2;249:43;:::i;:::-;233:60;:::i;:::-;315:3;339:2;334:3;327:15;367:2;362:3;358:12;351:19;;402:2;394:6;390:15;454:3;449:2;443;440:1;436:10;428:6;424:23;420:32;417:41;414:2;;;475:5;468;461:20;414:2;501:5;515:238;529:2;526:1;523:9;515:238;;;600:3;587:17;617:31;642:5;617:31;:::i;:::-;661:18;;699:12;;;;731;;;;547:1;540:9;515:238;;;-1:-1:-1;771:5:3;;78:704;-1:-1:-1;;;;;;;78:704:3:o;787:164::-;863:13;;912;;905:21;895:32;;885:2;;941:1;938;931:12;885:2;844:107;;;:::o;956:163::-;1034:13;;1087:6;1076:18;;1066:29;;1056:2;;1109:1;1106;1099:12;1124:257;1183:6;1236:2;1224:9;1215:7;1211:23;1207:32;1204:2;;;1257:6;1249;1242:22;1204:2;1301:9;1288:23;1320:31;1345:5;1320:31;:::i;1386:261::-;1456:6;1509:2;1497:9;1488:7;1484:23;1480:32;1477:2;;;1530:6;1522;1515:22;1477:2;1567:9;1561:16;1586:31;1611:5;1586:31;:::i;1652:398::-;1720:6;1728;1781:2;1769:9;1760:7;1756:23;1752:32;1749:2;;;1802:6;1794;1787:22;1749:2;1846:9;1833:23;1865:31;1890:5;1865:31;:::i;:::-;1915:5;-1:-1:-1;1972:2:3;1957:18;;1944:32;1985:33;1944:32;1985:33;:::i;:::-;2037:7;2027:17;;;1739:311;;;;;:::o;2055:466::-;2132:6;2140;2148;2201:2;2189:9;2180:7;2176:23;2172:32;2169:2;;;2222:6;2214;2207:22;2169:2;2266:9;2253:23;2285:31;2310:5;2285:31;:::i;:::-;2335:5;-1:-1:-1;2392:2:3;2377:18;;2364:32;2405:33;2364:32;2405:33;:::i;:::-;2159:362;;2457:7;;-1:-1:-1;;;2511:2:3;2496:18;;;;2483:32;;2159:362::o;2526:713::-;2637:6;2645;2653;2661;2714:3;2702:9;2693:7;2689:23;2685:33;2682:2;;;2736:6;2728;2721:22;2682:2;2780:9;2767:23;2799:31;2824:5;2799:31;:::i;:::-;2849:5;-1:-1:-1;2906:2:3;2891:18;;2878:32;2919:33;2878:32;2919:33;:::i;:::-;2971:7;-1:-1:-1;3025:2:3;3010:18;;2997:32;;-1:-1:-1;3080:2:3;3065:18;;3052:32;3107:18;3096:30;;3093:2;;;3144:6;3136;3129:22;3093:2;3172:61;3225:7;3216:6;3205:9;3201:22;3172:61;:::i;:::-;3162:71;;;2672:567;;;;;;;:::o;3244:325::-;3312:6;3320;3373:2;3361:9;3352:7;3348:23;3344:32;3341:2;;;3394:6;3386;3379:22;3341:2;3438:9;3425:23;3457:31;3482:5;3457:31;:::i;:::-;3507:5;3559:2;3544:18;;;;3531:32;;-1:-1:-1;;;3331:238:3:o;3574:937::-;3669:6;3700:2;3743;3731:9;3722:7;3718:23;3714:32;3711:2;;;3764:6;3756;3749:22;3711:2;3802:9;3796:16;3835:18;3827:6;3824:30;3821:2;;;3872:6;3864;3857:22;3821:2;3900:22;;3953:4;3945:13;;3941:27;-1:-1:-1;3931:2:3;;3987:6;3979;3972:22;3931:2;4021;4015:9;4044:60;4060:43;4100:2;4060:43;:::i;4044:60::-;4126:3;4150:2;4145:3;4138:15;4178:2;4173:3;4169:12;4162:19;;4209:2;4205;4201:11;4257:7;4252:2;4246;4243:1;4239:10;4235:2;4231:19;4227:28;4224:41;4221:2;;;4283:6;4275;4268:22;4221:2;4310:6;4301:15;;4325:156;4339:2;4336:1;4333:9;4325:156;;;4396:10;;4384:23;;4357:1;4350:9;;;;;4427:12;;;;4459;;4325:156;;;-1:-1:-1;4500:5:3;3680:831;-1:-1:-1;;;;;;;3680:831:3:o;4516:212::-;4583:6;4636:2;4624:9;4615:7;4611:23;4607:32;4604:2;;;4657:6;4649;4642:22;4604:2;4685:37;4712:9;4685:37;:::i;4733:940::-;4848:6;4856;4864;4872;4880;4888;4896;4949:3;4937:9;4928:7;4924:23;4920:33;4917:2;;;4971:6;4963;4956:22;4917:2;5008:9;5002:16;5027:31;5052:5;5027:31;:::i;:::-;5077:5;5067:15;;;5127:2;5116:9;5112:18;5106:25;5176:7;5173:1;5162:22;5153:7;5150:35;5140:2;;5204:6;5196;5189:22;5140:2;5232:7;-1:-1:-1;5258:48:3;5302:2;5287:18;;5258:48;:::i;:::-;5248:58;;5325:48;5369:2;5358:9;5354:18;5325:48;:::i;:::-;5315:58;;5392:49;5436:3;5425:9;5421:19;5392:49;:::i;:::-;5382:59;;5486:3;5475:9;5471:19;5465:26;5535:10;5526:7;5522:24;5513:7;5510:37;5500:2;;5566:6;5558;5551:22;5500:2;5594:7;-1:-1:-1;5620:47:3;5662:3;5647:19;;5620:47;:::i;:::-;5610:57;;4907:766;;;;;;;;;;:::o;5678:190::-;5737:6;5790:2;5778:9;5769:7;5765:23;5761:32;5758:2;;;5811:6;5803;5796:22;5758:2;-1:-1:-1;5839:23:3;;5748:120;-1:-1:-1;5748:120:3:o;5873:194::-;5943:6;5996:2;5984:9;5975:7;5971:23;5967:32;5964:2;;;6017:6;6009;6002:22;5964:2;-1:-1:-1;6045:16:3;;5954:113;-1:-1:-1;5954:113:3:o;6072:466::-;6149:6;6157;6165;6218:2;6206:9;6197:7;6193:23;6189:32;6186:2;;;6239:6;6231;6224:22;6186:2;6280:9;6267:23;6257:33;;6340:2;6329:9;6325:18;6312:32;6353:31;6378:5;6353:31;:::i;:::-;6403:5;-1:-1:-1;6460:2:3;6445:18;;6432:32;6473:33;6432:32;6473:33;:::i;:::-;6525:7;6515:17;;;6176:362;;;;;:::o;6543:436::-;6636:6;6644;6697:2;6685:9;6676:7;6672:23;6668:32;6665:2;;;6718:6;6710;6703:22;6665:2;6759:9;6746:23;6736:33;;6820:2;6809:9;6805:18;6792:32;6847:18;6839:6;6836:30;6833:2;;;6884:6;6876;6869:22;6833:2;6912:61;6965:7;6956:6;6945:9;6941:22;6912:61;:::i;:::-;6902:71;;;6655:324;;;;;:::o;6984:463::-;7037:3;7075:5;7069:12;7102:6;7097:3;7090:19;7128:4;7157:2;7152:3;7148:12;7141:19;;7194:2;7187:5;7183:14;7215:3;7227:195;7241:6;7238:1;7235:13;7227:195;;;7306:13;;-1:-1:-1;;;;;7302:39:3;7290:52;;7362:12;;;;7397:15;;;;7338:1;7256:9;7227:195;;;-1:-1:-1;7438:3:3;;7045:402;-1:-1:-1;;;;;7045:402:3:o;7452:274::-;7581:3;7619:6;7613:13;7635:53;7681:6;7676:3;7669:4;7661:6;7657:17;7635:53;:::i;:::-;7704:16;;;;;7589:137;-1:-1:-1;;7589:137:3:o;9201:510::-;9472:6;9461:9;9454:25;9515:3;9510:2;9499:9;9495:18;9488:31;9435:4;9536:57;9588:3;9577:9;9573:19;9565:6;9536:57;:::i;:::-;-1:-1:-1;;;;;9629:32:3;;;;9624:2;9609:18;;9602:60;-1:-1:-1;9693:2:3;9678:18;9671:34;9528:65;9444:267;-1:-1:-1;;9444:267:3:o;9716:383::-;9865:2;9854:9;9847:21;9828:4;9897:6;9891:13;9940:6;9935:2;9924:9;9920:18;9913:34;9956:66;10015:6;10010:2;9999:9;9995:18;9990:2;9982:6;9978:15;9956:66;:::i;:::-;10083:2;10062:15;-1:-1:-1;;10058:29:3;10043:45;;;;10090:2;10039:54;;9837:262;-1:-1:-1;;9837:262:3:o;10461:398::-;10663:2;10645:21;;;10702:2;10682:18;;;10675:30;10741:34;10736:2;10721:18;;10714:62;-1:-1:-1;;;10807:2:3;10792:18;;10785:32;10849:3;10834:19;;10635:224::o;13150:356::-;13352:2;13334:21;;;13371:18;;;13364:30;13430:34;13425:2;13410:18;;13403:62;13497:2;13482:18;;13324:182::o;14622:732::-;14909:13;;-1:-1:-1;;;;;14905:22:3;;;14887:41;;14988:4;14976:17;;;14970:24;14966:33;;14944:20;;;14937:63;15060:4;15048:17;;;15042:24;15068:8;15038:39;15016:20;;;15009:69;15138:4;15126:17;;;15120:24;15116:33;;15094:20;;;15087:63;15206:4;15194:17;;;15188:24;15166:20;;;15159:54;14867:3;15257:17;;;15251:24;15229:20;;;15222:54;15336:4;15324:17;;;15318:24;15314:33;15292:20;;;15285:63;;;;14836:3;14821:19;;14803:551::o;15541:332::-;15748:6;15737:9;15730:25;15791:2;15786;15775:9;15771:18;15764:30;15711:4;15811:56;15863:2;15852:9;15848:18;15840:6;15811:56;:::i;15878:582::-;16177:6;16166:9;16159:25;16220:6;16215:2;16204:9;16200:18;16193:34;16263:3;16258:2;16247:9;16243:18;16236:31;16140:4;16284:57;16336:3;16325:9;16321:19;16313:6;16284:57;:::i;:::-;-1:-1:-1;;;;;16377:32:3;;;;16372:2;16357:18;;16350:60;-1:-1:-1;16441:3:3;16426:19;16419:35;16276:65;16149:311;-1:-1:-1;;;16149:311:3:o;16465:275::-;16536:2;16530:9;16601:2;16582:13;;-1:-1:-1;;16578:27:3;16566:40;;16636:18;16621:34;;16657:22;;;16618:62;16615:2;;;16683:18;;:::i;:::-;16719:2;16712:22;16510:230;;-1:-1:-1;16510:230:3:o;16745:183::-;16805:4;16838:18;16830:6;16827:30;16824:2;;;16860:18;;:::i;:::-;-1:-1:-1;16905:1:3;16901:14;16917:4;16897:25;;16814:114::o;16933:128::-;16973:3;17004:1;17000:6;16997:1;16994:13;16991:2;;;17010:18;;:::i;:::-;-1:-1:-1;17046:9:3;;16981:80::o;17066:217::-;17106:1;17132;17122:2;;-1:-1:-1;;;17157:31:3;;17211:4;17208:1;17201:15;17239:4;17164:1;17229:15;17122:2;-1:-1:-1;17268:9:3;;17112:171::o;17288:422::-;17377:1;17420:5;17377:1;17434:270;17455:7;17445:8;17442:21;17434:270;;;17514:4;17510:1;17506:6;17502:17;17496:4;17493:27;17490:2;;;17523:18;;:::i;:::-;17573:7;17563:8;17559:22;17556:2;;;17593:16;;;;17556:2;17672:22;;;;17632:15;;;;17434:270;;;17438:3;17352:358;;;;;:::o;17715:140::-;17773:5;17802:47;17843:4;17833:8;17829:19;17823:4;17909:5;17939:8;17929:2;;-1:-1:-1;17980:1:3;17994:5;;17929:2;18028:4;18018:2;;-1:-1:-1;18065:1:3;18079:5;;18018:2;18110:4;18128:1;18123:59;;;;18196:1;18191:130;;;;18103:218;;18123:59;18153:1;18144:10;;18167:5;;;18191:130;18228:3;18218:8;18215:17;18212:2;;;18235:18;;:::i;:::-;-1:-1:-1;;18291:1:3;18277:16;;18306:5;;18103:218;;18405:2;18395:8;18392:16;18386:3;18380:4;18377:13;18373:36;18367:2;18357:8;18354:16;18349:2;18343:4;18340:12;18336:35;18333:77;18330:2;;;-1:-1:-1;18442:19:3;;;18474:5;;18330:2;18521:34;18546:8;18540:4;18521:34;:::i;:::-;18591:6;18587:1;18583:6;18579:19;18570:7;18567:32;18564:2;;;18602:18;;:::i;:::-;18640:20;;17919:747;-1:-1:-1;;;17919:747:3:o;18671:168::-;18711:7;18777:1;18773;18769:6;18765:14;18762:1;18759:21;18754:1;18747:9;18740:17;18736:45;18733:2;;;18784:18;;:::i;:::-;-1:-1:-1;18824:9:3;;18723:116::o;18844:125::-;18884:4;18912:1;18909;18906:8;18903:2;;;18917:18;;:::i;:::-;-1:-1:-1;18954:9:3;;18893:76::o;18974:258::-;19046:1;19056:113;19070:6;19067:1;19064:13;19056:113;;;19146:11;;;19140:18;19127:11;;;19120:39;19092:2;19085:10;19056:113;;;19187:6;19184:1;19181:13;19178:2;;;-1:-1:-1;;19222:1:3;19204:16;;19197:27;19027:205::o;19237:127::-;19298:10;19293:3;19289:20;19286:1;19279:31;19329:4;19326:1;19319:15;19353:4;19350:1;19343:15;19369:127;19430:10;19425:3;19421:20;19418:1;19411:31;19461:4;19458:1;19451:15;19485:4;19482:1;19475:15;19501:131;-1:-1:-1;;;;;19576:31:3;;19566:42;;19556:2;;19622:1;19619;19612:12"},"gasEstimates":{"creation":{"codeDepositCost":"1777800","executionCost":"infinite","totalCost":"infinite"},"external":{"airdrop()":"infinite","claimETH(uint256)":"infinite","claimToken(address,uint256)":"infinite","customSwapTokens(address,address,uint256,address[])":"infinite","emergencyWithdraw(address,uint256)":"infinite","emergencyWithdrawETH(uint256)":"infinite","factoryAddress()":"1071","feeAccount()":"1094","feePercent()":"1084","getOutputTokenAmount(uint256,address[])":"infinite","getV3OutputTokenAmount(uint256,address,address)":"infinite","owner()":"1088","renounceOwnership()":"23459","rewardAddress()":"1072","rewardAmount()":"1061","router()":"1114","routerAddress()":"1094","setFeeAccount(address)":"22117","setFeePercent(uint256)":"21131","setRewardAmount(uint256)":"21175","setRewardToken(address)":"22116","setRouterWAVAX(address,address)":"infinite","swapTokens(address,address,uint256)":"infinite","swapV2Tokens(address,address,uint256)":"infinite","transferOwnership(address)":"infinite","wavax()":"1050","wbnbAddress()":"1072"},"internal":{"_approve(address,uint256)":"infinite","_proceedToUniswap(address,address,uint256,address[] memory)":"infinite","_swapAVAXForTokens(uint256,address[] memory)":"infinite","_swapTokensForAVAX(uint256,address[] memory)":"infinite","_swapTokensForTokens(uint256,address[] memory)":"infinite","_v3Approve(address,uint256)":"infinite"}},"methodIdentifiers":{"airdrop()":"3884d635","claimETH(uint256)":"fe96973a","claimToken(address,uint256)":"1698755f","customSwapTokens(address,address,uint256,address[])":"9de2827b","emergencyWithdraw(address,uint256)":"95ccea67","emergencyWithdrawETH(uint256)":"6b792c4b","factoryAddress()":"966dae0e","feeAccount()":"65e17c9d","feePercent()":"7fd6f15c","getOutputTokenAmount(uint256,address[])":"d654e9a4","getV3OutputTokenAmount(uint256,address,address)":"c36c557f","owner()":"8da5cb5b","renounceOwnership()":"715018a6","rewardAddress()":"8cf57cb9","rewardAmount()":"f7b2a7be","router()":"f887ea40","routerAddress()":"3268cc56","setFeeAccount(address)":"4b023cf8","setFeePercent(uint256)":"7ce3489b","setRewardAmount(uint256)":"a8a65a78","setRewardToken(address)":"8aee8127","setRouterWAVAX(address,address)":"9cf355ad","swapTokens(address,address,uint256)":"ec6cc0cc","swapV2Tokens(address,address,uint256)":"4ce222da","transferOwnership(address)":"f2fde38b","wavax()":"117be4c2","wbnbAddress()":"63fe3e3a"}},"metadata":"{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeAccount\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_wavax\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"airdrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"claimETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"claimToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"name\":\"customSwapTokens\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdrawETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factoryAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeAccount\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"inputAmount\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"name\":\"getOutputTokenAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"outputAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_inputAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenOut\",\"type\":\"address\"}],\"name\":\"getV3OutputTokenAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"outputAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"routerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeAccount\",\"type\":\"address\"}],\"name\":\"setFeeAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_feePercent\",\"type\":\"uint256\"}],\"name\":\"setFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setRewardAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewawrdAddress\",\"type\":\"address\"}],\"name\":\"setRewardToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_wavax\",\"type\":\"address\"}],\"name\":\"setRouterWAVAX\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"}],\"name\":\"swapTokens\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"}],\"name\":\"swapV2Tokens\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wavax\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wbnbAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/swap.sol\":\"ProSwap\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/swap.sol\":{\"content\":\"pragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\r\\n */\\r\\ninterface IERC20 {\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(\\r\\n        address indexed owner,\\r\\n        address indexed spender,\\r\\n        uint256 value\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address to, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(\\r\\n        address owner,\\r\\n        address spender\\r\\n    ) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender's allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller's\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n}\\r\\n\\r\\n// File @openzeppelin/contracts/utils/Context.sol@v4.6.0\\r\\n\\r\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Provides information about the current execution context, including the\\r\\n * sender of the transaction and its data. While these are generally available\\r\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\r\\n * manner, since when dealing with meta-transactions the account sending and\\r\\n * paying for execution may not be the actual sender (as far as an application\\r\\n * is concerned).\\r\\n *\\r\\n * This contract is only required for intermediate, library-like contracts.\\r\\n */\\r\\nabstract contract Context {\\r\\n    function _msgSender() internal view virtual returns (address) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view virtual returns (bytes calldata) {\\r\\n        return msg.data;\\r\\n    }\\r\\n}\\r\\n\\r\\n// File @openzeppelin/contracts/access/Ownable.sol@v4.6.0\\r\\n\\r\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Contract module which provides a basic access control mechanism, where\\r\\n * there is an account (an owner) that can be granted exclusive access to\\r\\n * specific functions.\\r\\n *\\r\\n * By default, the owner account will be the one that deploys the contract. This\\r\\n * can later be changed with {transferOwnership}.\\r\\n *\\r\\n * This module is used through inheritance. It will make available the modifier\\r\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\r\\n * the owner.\\r\\n */\\r\\nabstract contract Ownable is Context {\\r\\n    address private _owner;\\r\\n\\r\\n    event OwnershipTransferred(\\r\\n        address indexed previousOwner,\\r\\n        address indexed newOwner\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\r\\n     */\\r\\n    constructor() {\\r\\n        _transferOwnership(_msgSender());\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current owner.\\r\\n     */\\r\\n    function owner() public view virtual returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier onlyOwner() {\\r\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Leaves the contract without owner. It will not be possible to call\\r\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\r\\n     *\\r\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\r\\n     * thereby removing any functionality that is only available to the owner.\\r\\n     */\\r\\n    function renounceOwnership() public virtual onlyOwner {\\r\\n        _transferOwnership(address(0));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n        require(\\r\\n            newOwner != address(0),\\r\\n            \\\"Ownable: new owner is the zero address\\\"\\r\\n        );\\r\\n        _transferOwnership(newOwner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Internal function without access restriction.\\r\\n     */\\r\\n    function _transferOwnership(address newOwner) internal virtual {\\r\\n        address oldOwner = _owner;\\r\\n        _owner = newOwner;\\r\\n        emit OwnershipTransferred(oldOwner, newOwner);\\r\\n    }\\r\\n}\\r\\n\\r\\n// File @openzeppelin/contracts/utils/math/SafeMath.sol@v4.6.0\\r\\n\\r\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n// CAUTION\\r\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\r\\n// because it relies on the compiler's built in overflow checks.\\r\\n\\r\\n/**\\r\\n * @dev Wrappers over Solidity's arithmetic operations.\\r\\n *\\r\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\r\\n * now has built in overflow checking.\\r\\n */\\r\\nlibrary SafeMath {\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryAdd(\\r\\n        uint256 a,\\r\\n        uint256 b\\r\\n    ) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            uint256 c = a + b;\\r\\n            if (c < a) return (false, 0);\\r\\n            return (true, c);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function trySub(\\r\\n        uint256 a,\\r\\n        uint256 b\\r\\n    ) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            if (b > a) return (false, 0);\\r\\n            return (true, a - b);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryMul(\\r\\n        uint256 a,\\r\\n        uint256 b\\r\\n    ) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\r\\n            // benefit is lost if 'b' is also tested.\\r\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\r\\n            if (a == 0) return (true, 0);\\r\\n            uint256 c = a * b;\\r\\n            if (c / a != b) return (false, 0);\\r\\n            return (true, c);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryDiv(\\r\\n        uint256 a,\\r\\n        uint256 b\\r\\n    ) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            if (b == 0) return (false, 0);\\r\\n            return (true, a / b);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryMod(\\r\\n        uint256 a,\\r\\n        uint256 b\\r\\n    ) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            if (b == 0) return (false, 0);\\r\\n            return (true, a % b);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity's `+` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Addition cannot overflow.\\r\\n     */\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a + b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity's `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a - b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity's `*` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Multiplication cannot overflow.\\r\\n     */\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a * b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `/` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a / b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * reverting when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a % b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\r\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\r\\n     *\\r\\n     * Counterpart to Solidity's `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            require(b <= a, errorMessage);\\r\\n            return a - b;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            require(b > 0, errorMessage);\\r\\n            return a / b;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * reverting with custom message when dividing by zero.\\r\\n     *\\r\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\r\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\r\\n     *\\r\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            require(b > 0, errorMessage);\\r\\n            return a % b;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\n// File @openzeppelin/contracts/utils/Address.sol@v4.6.0\\r\\n\\r\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\r\\n\\r\\npragma solidity ^0.8.1;\\r\\n\\r\\n/**\\r\\n * @dev Collection of functions related to the address type\\r\\n */\\r\\nlibrary Address {\\r\\n    /**\\r\\n     * @dev Returns true if `account` is a contract.\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * It is unsafe to assume that an address for which this function returns\\r\\n     * false is an externally-owned account (EOA) and not a contract.\\r\\n     *\\r\\n     * Among others, `isContract` will return false for the following\\r\\n     * types of addresses:\\r\\n     *\\r\\n     *  - an externally-owned account\\r\\n     *  - a contract in construction\\r\\n     *  - an address where a contract will be created\\r\\n     *  - an address where a contract lived, but was destroyed\\r\\n     * ====\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\r\\n     *\\r\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\r\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\r\\n     * constructor.\\r\\n     * ====\\r\\n     */\\r\\n    function isContract(address account) internal view returns (bool) {\\r\\n        // This method relies on extcodesize/address.code.length, which returns 0\\r\\n        // for contracts in construction, since the code is only stored at the end\\r\\n        // of the constructor execution.\\r\\n\\r\\n        return account.code.length > 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\r\\n     * `recipient`, forwarding all available gas and reverting on errors.\\r\\n     *\\r\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\r\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\r\\n     * imposed by `transfer`, making them unable to receive funds via\\r\\n     * `transfer`. {sendValue} removes this limitation.\\r\\n     *\\r\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\r\\n     *\\r\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\r\\n     * taken to not create reentrancy vulnerabilities. Consider using\\r\\n     * {ReentrancyGuard} or the\\r\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\r\\n     */\\r\\n    function sendValue(address payable recipient, uint256 amount) internal {\\r\\n        require(\\r\\n            address(this).balance >= amount,\\r\\n            \\\"Address: insufficient balance\\\"\\r\\n        );\\r\\n\\r\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\r\\n        require(\\r\\n            success,\\r\\n            \\\"Address: unable to send value, recipient may have reverted\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Performs a Solidity function call using a low level `call`. A\\r\\n     * plain `call` is an unsafe replacement for a function call: use this\\r\\n     * function instead.\\r\\n     *\\r\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\r\\n     * function (like regular Solidity function calls).\\r\\n     *\\r\\n     * Returns the raw returned data. To convert to the expected return value,\\r\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `target` must be a contract.\\r\\n     * - calling `target` with `data` must not revert.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(\\r\\n        address target,\\r\\n        bytes memory data\\r\\n    ) internal returns (bytes memory) {\\r\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\r\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, 0, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but also transferring `value` wei to `target`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the calling contract must have an ETH balance of at least `value`.\\r\\n     * - the called Solidity function must be `payable`.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        uint256 value\\r\\n    ) internal returns (bytes memory) {\\r\\n        return\\r\\n            functionCallWithValue(\\r\\n                target,\\r\\n                data,\\r\\n                value,\\r\\n                \\\"Address: low-level call with value failed\\\"\\r\\n            );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\r\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        uint256 value,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        require(\\r\\n            address(this).balance >= value,\\r\\n            \\\"Address: insufficient balance for call\\\"\\r\\n        );\\r\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\r\\n\\r\\n        (bool success, bytes memory returndata) = target.call{value: value}(\\r\\n            data\\r\\n        );\\r\\n        return verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(\\r\\n        address target,\\r\\n        bytes memory data\\r\\n    ) internal view returns (bytes memory) {\\r\\n        return\\r\\n            functionStaticCall(\\r\\n                target,\\r\\n                data,\\r\\n                \\\"Address: low-level static call failed\\\"\\r\\n            );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal view returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\r\\n\\r\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\r\\n        return verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function functionDelegateCall(\\r\\n        address target,\\r\\n        bytes memory data\\r\\n    ) internal returns (bytes memory) {\\r\\n        return\\r\\n            functionDelegateCall(\\r\\n                target,\\r\\n                data,\\r\\n                \\\"Address: low-level delegate call failed\\\"\\r\\n            );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function functionDelegateCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\r\\n\\r\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\r\\n        return verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\r\\n     * revert reason using the provided one.\\r\\n     *\\r\\n     * _Available since v4.3._\\r\\n     */\\r\\n    function verifyCallResult(\\r\\n        bool success,\\r\\n        bytes memory returndata,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (bytes memory) {\\r\\n        if (success) {\\r\\n            return returndata;\\r\\n        } else {\\r\\n            // Look for revert reason and bubble it up if present\\r\\n            if (returndata.length > 0) {\\r\\n                // The easiest way to bubble the revert reason is using memory via assembly\\r\\n\\r\\n                assembly {\\r\\n                    let returndata_size := mload(returndata)\\r\\n                    revert(add(32, returndata), returndata_size)\\r\\n                }\\r\\n            } else {\\r\\n                revert(errorMessage);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\n// File @openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol@v4.6.0\\r\\n\\r\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @title SafeERC20\\r\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\r\\n * contract returns false). Tokens that return no value (and instead revert or\\r\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\r\\n * successful.\\r\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\r\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\r\\n */\\r\\nlibrary SafeERC20 {\\r\\n    using Address for address;\\r\\n\\r\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\r\\n        _callOptionalReturn(\\r\\n            token,\\r\\n            abi.encodeWithSelector(token.transfer.selector, to, value)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function safeTransferFrom(\\r\\n        IERC20 token,\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        _callOptionalReturn(\\r\\n            token,\\r\\n            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Deprecated. This function has issues similar to the ones found in\\r\\n     * {IERC20-approve}, and its usage is discouraged.\\r\\n     *\\r\\n     * Whenever possible, use {safeIncreaseAllowance} and\\r\\n     * {safeDecreaseAllowance} instead.\\r\\n     */\\r\\n    function safeApprove(\\r\\n        IERC20 token,\\r\\n        address spender,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        // safeApprove should only be called when setting an initial allowance,\\r\\n        // or when resetting it to zero. To increase and decrease it, use\\r\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\r\\n        require(\\r\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\r\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\r\\n        );\\r\\n        _callOptionalReturn(\\r\\n            token,\\r\\n            abi.encodeWithSelector(token.approve.selector, spender, value)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function safeIncreaseAllowance(\\r\\n        IERC20 token,\\r\\n        address spender,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\r\\n        _callOptionalReturn(\\r\\n            token,\\r\\n            abi.encodeWithSelector(\\r\\n                token.approve.selector,\\r\\n                spender,\\r\\n                newAllowance\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function safeDecreaseAllowance(\\r\\n        IERC20 token,\\r\\n        address spender,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        unchecked {\\r\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\r\\n            require(\\r\\n                oldAllowance >= value,\\r\\n                \\\"SafeERC20: decreased allowance below zero\\\"\\r\\n            );\\r\\n            uint256 newAllowance = oldAllowance - value;\\r\\n            _callOptionalReturn(\\r\\n                token,\\r\\n                abi.encodeWithSelector(\\r\\n                    token.approve.selector,\\r\\n                    spender,\\r\\n                    newAllowance\\r\\n                )\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\r\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\r\\n     * @param token The token targeted by the call.\\r\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\r\\n     */\\r\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\r\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\r\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\r\\n        // the target address contains contract code and also asserts for success in the low-level call.\\r\\n\\r\\n        bytes memory returndata = address(token).functionCall(\\r\\n            data,\\r\\n            \\\"SafeERC20: low-level call failed\\\"\\r\\n        );\\r\\n        if (returndata.length > 0) {\\r\\n            // Return data is optional\\r\\n            require(\\r\\n                abi.decode(returndata, (bool)),\\r\\n                \\\"SafeERC20: ERC20 operation did not succeed\\\"\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\n// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IRouter {\\r\\n    function swapExactTokensForTokens(\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256[] memory amounts);\\r\\n\\r\\n    function swapExactETHForTokens(\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external payable returns (uint256[] memory amounts);\\r\\n\\r\\n    function swapExactTokensForETH(\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256[] memory amounts);\\r\\n\\r\\n    function getAmountsOut(\\r\\n        uint256 amountIn,\\r\\n        address[] calldata path\\r\\n    ) external view returns (uint256[] memory amounts);\\r\\n}\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\n/// @title The interface for the PancakeSwap V3 Factory\\r\\n/// @notice The PancakeSwap V3 Factory facilitates creation of PancakeSwap V3 pools and control over the protocol fees\\r\\ninterface IPancakeV3Factory {\\r\\n    function getPool(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint24 fee\\r\\n    ) external view returns (address pool);\\r\\n}\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\ninterface IPancakeV3PoolState {\\r\\n    function slot0()\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            uint160 sqrtPriceX96,\\r\\n            int24 tick,\\r\\n            uint16 observationIndex,\\r\\n            uint16 observationCardinality,\\r\\n            uint16 observationCardinalityNext,\\r\\n            uint32 feeProtocol,\\r\\n            bool unlocked\\r\\n        );\\r\\n}\\r\\n\\r\\ninterface IPancakeV3PoolImmutables {\\r\\n    /// @notice The contract that deployed the pool, which must adhere to the IPancakeV3Factory interface\\r\\n    /// @return The contract address\\r\\n    function factory() external view returns (address);\\r\\n\\r\\n    /// @notice The first of the two tokens of the pool, sorted by address\\r\\n    /// @return The token contract address\\r\\n    function token0() external view returns (address);\\r\\n\\r\\n    /// @notice The second of the two tokens of the pool, sorted by address\\r\\n    /// @return The token contract address\\r\\n    function token1() external view returns (address);\\r\\n\\r\\n    /// @notice The pool's fee in hundredths of a bip, i.e. 1e-6\\r\\n    /// @return The fee\\r\\n    function fee() external view returns (uint24);\\r\\n\\r\\n    /// @notice The pool tick spacing\\r\\n    /// @dev Ticks can only be used at multiples of this value, minimum of 1 and always positive\\r\\n    /// e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ...\\r\\n    /// This value is an int24 to avoid casting even though it is always positive.\\r\\n    /// @return The tick spacing\\r\\n    function tickSpacing() external view returns (int24);\\r\\n\\r\\n    /// @notice The maximum amount of position liquidity that can use any tick in the range\\r\\n    /// @dev This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and\\r\\n    /// also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\\r\\n    /// @return The max amount of liquidity per tick\\r\\n    function maxLiquidityPerTick() external view returns (uint128);\\r\\n}\\r\\n\\r\\ninterface IPancakeV3Pool is IPancakeV3PoolState, IPancakeV3PoolImmutables {}\\r\\n\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\n/// @title Callback for IPancakeV3PoolActions#swap\\r\\n/// @notice Any contract that calls IPancakeV3PoolActions#swap must implement this interface\\r\\ninterface IPancakeV3SwapCallback {\\r\\n    /// @notice Called to `msg.sender` after executing a swap via IPancakeV3Pool#swap.\\r\\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\\r\\n    /// The caller of this method must be checked to be a PancakeV3Pool deployed by the canonical PancakeV3Factory.\\r\\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\\r\\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\\r\\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\\r\\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\\r\\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\\r\\n    /// @param data Any data passed through by the caller via the IPancakeV3PoolActions#swap call\\r\\n    function pancakeV3SwapCallback(\\r\\n        int256 amount0Delta,\\r\\n        int256 amount1Delta,\\r\\n        bytes calldata data\\r\\n    ) external;\\r\\n}\\r\\n\\r\\ninterface IV3SwapRouter is IPancakeV3SwapCallback {\\r\\n    struct ExactInputSingleParams {\\r\\n        address tokenIn;\\r\\n        address tokenOut;\\r\\n        uint24 fee;\\r\\n        address recipient;\\r\\n        uint256 amountIn;\\r\\n        uint256 amountOutMinimum;\\r\\n        uint160 sqrtPriceLimitX96;\\r\\n    }\\r\\n\\r\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\\r\\n    /// @dev Setting `amountIn` to 0 will cause the contract to look up its own balance,\\r\\n    /// and swap the entire amount, enabling contracts to send tokens before calling this function.\\r\\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\\r\\n    /// @return amountOut The amount of the received token\\r\\n    function exactInputSingle(\\r\\n        ExactInputSingleParams calldata params\\r\\n    ) external payable returns (uint256 amountOut);\\r\\n\\r\\n    struct ExactInputParams {\\r\\n        bytes path;\\r\\n        address recipient;\\r\\n        uint256 amountIn;\\r\\n        uint256 amountOutMinimum;\\r\\n    }\\r\\n\\r\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\\r\\n    /// @dev Setting `amountIn` to 0 will cause the contract to look up its own balance,\\r\\n    /// and swap the entire amount, enabling contracts to send tokens before calling this function.\\r\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\\r\\n    /// @return amountOut The amount of the received token\\r\\n    function exactInput(\\r\\n        ExactInputParams calldata params\\r\\n    ) external payable returns (uint256 amountOut);\\r\\n\\r\\n    struct ExactOutputSingleParams {\\r\\n        address tokenIn;\\r\\n        address tokenOut;\\r\\n        uint24 fee;\\r\\n        address recipient;\\r\\n        uint256 amountOut;\\r\\n        uint256 amountInMaximum;\\r\\n        uint160 sqrtPriceLimitX96;\\r\\n    }\\r\\n\\r\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\\r\\n    /// that may remain in the router after the swap.\\r\\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\\r\\n    /// @return amountIn The amount of the input token\\r\\n    function exactOutputSingle(\\r\\n        ExactOutputSingleParams calldata params\\r\\n    ) external payable returns (uint256 amountIn);\\r\\n\\r\\n    struct ExactOutputParams {\\r\\n        bytes path;\\r\\n        address recipient;\\r\\n        uint256 amountOut;\\r\\n        uint256 amountInMaximum;\\r\\n    }\\r\\n\\r\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\\r\\n    /// that may remain in the router after the swap.\\r\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\\r\\n    /// @return amountIn The amount of the input token\\r\\n    function exactOutput(\\r\\n        ExactOutputParams calldata params\\r\\n    ) external payable returns (uint256 amountIn);\\r\\n\\r\\n    function refundETH() external payable;\\r\\n}\\r\\n\\r\\ncontract Claimable is Ownable {\\r\\n    function claimToken(\\r\\n        address tokenAddress,\\r\\n        uint256 amount\\r\\n    ) external onlyOwner {\\r\\n        IERC20(tokenAddress).transfer(owner(), amount);\\r\\n    }\\r\\n\\r\\n    function claimETH(uint256 amount) external onlyOwner {\\r\\n        (bool sent, ) = owner().call{value: amount}(\\\"\\\");\\r\\n        require(sent, \\\"Failed to send Ether\\\");\\r\\n    }\\r\\n}\\r\\n\\r\\ncontract ProSwap is Claimable {\\r\\n    using SafeMath for uint256;\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    uint public feePercent = 0; //10:0.25%\\r\\n    uint256 public rewardAmount = 10000000000000000000; //10 to tokens\\r\\n\\r\\n    address public rewardAddress;\\r\\n    address public feeAccount;\\r\\n    address public router;\\r\\n    address public wavax;\\r\\n\\r\\n    address public routerAddress = 0x13f4EA83D0bd40E75C8222255bc855a974568Dd4;\\r\\n    address public factoryAddress = 0x0BFbCF9fa4f9C56B0F40a671Ad40E0805A091865;\\r\\n    address public wbnbAddress = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;\\r\\n    uint24 poolFee = 100;\\r\\n\\r\\n    mapping(address => uint256) airdropAddress;\\r\\n    mapping(address => uint256) airdropLastTime;\\r\\n\\r\\n    constructor(\\r\\n        address _feeAccount,\\r\\n        address _router,\\r\\n        address _wavax,\\r\\n        address _rewardAddress\\r\\n    ) {\\r\\n        feeAccount = _feeAccount;\\r\\n        router = _router;\\r\\n        wavax = _wavax;\\r\\n        rewardAddress = _rewardAddress;\\r\\n    }\\r\\n\\r\\n    function airdrop() external {\\r\\n        require(\\r\\n            airdropAddress[msg.sender] + 86400 > block.timestamp,\\r\\n            \\\"You did not swap in 24 hours\\\"\\r\\n        );\\r\\n\\r\\n        require(\\r\\n            block.timestamp > airdropLastTime[msg.sender] + 86400,\\r\\n            \\\"You airdroped in 24 hours\\\"\\r\\n        );\\r\\n\\r\\n        IERC20(rewardAddress).safeTransfer(msg.sender, rewardAmount);\\r\\n        airdropLastTime[msg.sender] = block.timestamp;\\r\\n    }\\r\\n\\r\\n    function swapV2Tokens(\\r\\n        address _tokenA,\\r\\n        address _tokenB,\\r\\n        uint256 _amountIn\\r\\n    ) external payable {\\r\\n        airdropAddress[msg.sender] = block.timestamp;\\r\\n        address[] memory path = new address[](2);\\r\\n        if (_tokenA == address(0)) {\\r\\n            path[0] = wavax;\\r\\n            path[1] = _tokenB;\\r\\n        } else if (_tokenB == address(0)) {\\r\\n            path[0] = _tokenA;\\r\\n            path[1] = wavax;\\r\\n        } else {\\r\\n            path[0] = _tokenA;\\r\\n            path[1] = _tokenB;\\r\\n        }\\r\\n\\r\\n        _proceedToUniswap(_tokenA, _tokenB, _amountIn, path);\\r\\n    }\\r\\n\\r\\n    function customSwapTokens(\\r\\n        address _tokenA,\\r\\n        address _tokenB,\\r\\n        uint256 _amountIn,\\r\\n        address[] memory path\\r\\n    ) external payable {\\r\\n        if (_tokenA == address(0)) {\\r\\n            require(\\r\\n                wavax == path[0] && _tokenB == path[path.length - 1],\\r\\n                \\\"PattieSwap: Path must be specified\\\"\\r\\n            );\\r\\n        } else if (_tokenB == address(0)) {\\r\\n            require(\\r\\n                _tokenA == path[0] && wavax == path[path.length - 1],\\r\\n                \\\"PattieSwap: Path must be specified\\\"\\r\\n            );\\r\\n        } else {\\r\\n            require(\\r\\n                _tokenA == path[0] && _tokenB == path[path.length - 1],\\r\\n                \\\"PattieSwap: Path must be specified\\\"\\r\\n            );\\r\\n        }\\r\\n        _proceedToUniswap(_tokenA, _tokenB, _amountIn, path);\\r\\n    }\\r\\n\\r\\n    function _proceedToUniswap(\\r\\n        address _tokenA,\\r\\n        address _tokenB,\\r\\n        uint256 _amountIn,\\r\\n        address[] memory path\\r\\n    ) internal {\\r\\n        require(_amountIn > 0, \\\"PattieSwap: amountIn must be greater than 0\\\");\\r\\n\\r\\n        if (_tokenA == address(0)) {\\r\\n            require(_amountIn >= msg.value, \\\"PattieSwap: Insufficient ETH\\\");\\r\\n            uint fee = (_amountIn * feePercent) / 10000;\\r\\n            payable(feeAccount).transfer(fee);\\r\\n            uint amountToSwap = _amountIn - fee;\\r\\n            _swapAVAXForTokens(amountToSwap, path);\\r\\n        } else {\\r\\n            IERC20(_tokenA).safeTransferFrom(\\r\\n                msg.sender,\\r\\n                address(this),\\r\\n                _amountIn\\r\\n            );\\r\\n            uint fee = (_amountIn * feePercent) / 10000;\\r\\n            IERC20(_tokenA).safeTransfer(feeAccount, fee);\\r\\n            uint amountToSwap = _amountIn - fee;\\r\\n            _approve(_tokenA, amountToSwap);\\r\\n            if (_tokenB == address(0)) {\\r\\n                _swapTokensForAVAX(amountToSwap, path);\\r\\n            } else {\\r\\n                _swapTokensForTokens(amountToSwap, path);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _approve(address _token, uint _amount) internal {\\r\\n        IERC20(_token).approve(address(router), _amount);\\r\\n    }\\r\\n\\r\\n    function _swapTokensForAVAX(uint _amount, address[] memory path) internal {\\r\\n        IRouter(router).swapExactTokensForETH(\\r\\n            _amount,\\r\\n            0,\\r\\n            path,\\r\\n            msg.sender,\\r\\n            block.timestamp\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function _swapAVAXForTokens(uint _amount, address[] memory path) internal {\\r\\n        IRouter(router).swapExactETHForTokens{value: _amount}(\\r\\n            0,\\r\\n            path,\\r\\n            msg.sender,\\r\\n            block.timestamp\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function _swapTokensForTokens(\\r\\n        uint _amount,\\r\\n        address[] memory path\\r\\n    ) internal {\\r\\n        IRouter(router).swapExactTokensForTokens(\\r\\n            _amount,\\r\\n            0,\\r\\n            path,\\r\\n            msg.sender,\\r\\n            block.timestamp\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function _v3Approve(address _token, uint _amount) internal {\\r\\n        IERC20(_token).approve(address(routerAddress), _amount);\\r\\n    }\\r\\n\\r\\n    function getOutputTokenAmount(\\r\\n        uint inputAmount,\\r\\n        address[] memory path\\r\\n    ) external view returns (uint outputAmount) {\\r\\n        uint[] memory outputs = IRouter(router).getAmountsOut(\\r\\n            inputAmount,\\r\\n            path\\r\\n        );\\r\\n        return outputs[outputs.length - 1];\\r\\n    }\\r\\n\\r\\n    function getV3OutputTokenAmount(\\r\\n        uint256 _inputAmount,\\r\\n        address _tokenIn,\\r\\n        address _tokenOut\\r\\n    ) external view returns (uint outputAmount) {\\r\\n        uint256 slotReturnValue = 0;\\r\\n        address pairAddress = IPancakeV3Factory(factoryAddress).getPool(\\r\\n            _tokenIn,\\r\\n            _tokenOut,\\r\\n            poolFee\\r\\n        );\\r\\n        (slotReturnValue, , , , , , ) = IPancakeV3PoolState(pairAddress)\\r\\n            .slot0();\\r\\n        address token0 = IPancakeV3Pool(pairAddress).token0();\\r\\n        if (_tokenIn == token0)\\r\\n            outputAmount = ((slotReturnValue ** 2 * _inputAmount) / 2 ** 192);\\r\\n        else outputAmount = ((2 ** 192 * _inputAmount) / slotReturnValue ** 2);\\r\\n    }\\r\\n\\r\\n    function setFeePercent(uint _feePercent) external onlyOwner {\\r\\n        feePercent = _feePercent;\\r\\n    }\\r\\n\\r\\n    function setRewardAmount(uint256 _amount) external onlyOwner {\\r\\n        rewardAmount = _amount;\\r\\n    }\\r\\n\\r\\n    function setRewardToken(address _rewawrdAddress) external onlyOwner {\\r\\n        rewardAddress = _rewawrdAddress;\\r\\n    }\\r\\n\\r\\n    function setFeeAccount(address _feeAccount) external onlyOwner {\\r\\n        feeAccount = _feeAccount;\\r\\n    }\\r\\n\\r\\n    function setRouterWAVAX(\\r\\n        address _router,\\r\\n        address _wavax\\r\\n    ) external onlyOwner {\\r\\n        router = _router;\\r\\n        wavax = _wavax;\\r\\n    }\\r\\n\\r\\n    function emergencyWithdraw(\\r\\n        address _token,\\r\\n        uint _amount\\r\\n    ) external onlyOwner {\\r\\n        IERC20(_token).safeTransfer(msg.sender, _amount);\\r\\n    }\\r\\n\\r\\n    function emergencyWithdrawETH(uint _amount) external onlyOwner {\\r\\n        payable(owner()).transfer(_amount);\\r\\n    }\\r\\n\\r\\n    function swapTokens(\\r\\n        address _tokenIn,\\r\\n        address _tokenOut,\\r\\n        uint256 _amountIn\\r\\n    ) external payable {\\r\\n        airdropAddress[msg.sender] = block.timestamp;\\r\\n        IV3SwapRouter.ExactInputSingleParams memory params = IV3SwapRouter\\r\\n            .ExactInputSingleParams(\\r\\n                _tokenIn,\\r\\n                _tokenOut,\\r\\n                poolFee,\\r\\n                msg.sender,\\r\\n                _amountIn,\\r\\n                0,\\r\\n                0\\r\\n            );\\r\\n        if (_tokenIn == wbnbAddress)\\r\\n            IV3SwapRouter(routerAddress).exactInputSingle{value: msg.value}(\\r\\n                params\\r\\n            );\\r\\n        else {\\r\\n            IERC20(_tokenIn).safeTransferFrom(\\r\\n                msg.sender,\\r\\n                address(this),\\r\\n                _amountIn\\r\\n            );\\r\\n            _v3Approve(_tokenIn, _amountIn);\\r\\n            IV3SwapRouter(routerAddress).exactInputSingle{value: msg.value}(\\r\\n                params\\r\\n            );\\r\\n        }\\r\\n        IV3SwapRouter(routerAddress).refundETH();\\r\\n        // refund leftover ETH to user\\r\\n        (bool success, ) = msg.sender.call{value: address(this).balance}(\\\"\\\");\\r\\n        require(success, \\\"refund failed\\\");\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x014ebbd50111dbe2ffd46bfee0dca5b1dbbc4785ff10cb323cef7317398427ea\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":795,"contract":"contracts/swap.sol:ProSwap","label":"_owner","offset":0,"slot":"0","type":"t_address"},{"astId":2015,"contract":"contracts/swap.sol:ProSwap","label":"feePercent","offset":0,"slot":"1","type":"t_uint256"},{"astId":2018,"contract":"contracts/swap.sol:ProSwap","label":"rewardAmount","offset":0,"slot":"2","type":"t_uint256"},{"astId":2020,"contract":"contracts/swap.sol:ProSwap","label":"rewardAddress","offset":0,"slot":"3","type":"t_address"},{"astId":2022,"contract":"contracts/swap.sol:ProSwap","label":"feeAccount","offset":0,"slot":"4","type":"t_address"},{"astId":2024,"contract":"contracts/swap.sol:ProSwap","label":"router","offset":0,"slot":"5","type":"t_address"},{"astId":2026,"contract":"contracts/swap.sol:ProSwap","label":"wavax","offset":0,"slot":"6","type":"t_address"},{"astId":2029,"contract":"contracts/swap.sol:ProSwap","label":"routerAddress","offset":0,"slot":"7","type":"t_address"},{"astId":2032,"contract":"contracts/swap.sol:ProSwap","label":"factoryAddress","offset":0,"slot":"8","type":"t_address"},{"astId":2035,"contract":"contracts/swap.sol:ProSwap","label":"wbnbAddress","offset":0,"slot":"9","type":"t_address"},{"astId":2038,"contract":"contracts/swap.sol:ProSwap","label":"poolFee","offset":20,"slot":"9","type":"t_uint24"},{"astId":2042,"contract":"contracts/swap.sol:ProSwap","label":"airdropAddress","offset":0,"slot":"10","type":"t_mapping(t_address,t_uint256)"},{"astId":2046,"contract":"contracts/swap.sol:ProSwap","label":"airdropLastTime","offset":0,"slot":"11","type":"t_mapping(t_address,t_uint256)"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_uint24":{"encoding":"inplace","label":"uint24","numberOfBytes":"3"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"kind":"user","methods":{},"version":1}},"SafeERC20":{"abi":[],"devdoc":{"details":"Wrappers around ERC20 operations that throw on failure (when the token contract returns false). Tokens that return no value (and instead revert or throw on failure) are also supported, non-reverting calls are assumed to be successful. To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract, which allows you to call the safe operations as `token.safeTransfer(...)`, etc.","kind":"dev","methods":{},"title":"SafeERC20","version":1},"evm":{"bytecode":{"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212205d5c9baf2f3d899bee6b63c579404b6fdf7cab180b9e4174516fbda3494f7ff164736f6c63430008040033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x5D 0x5C SWAP12 0xAF 0x2F RETURNDATASIZE DUP10 SWAP12 0xEE PUSH12 0x63C579404B6FDF7CAB180B9E COINBASE PUSH21 0x516FBDA3494F7FF164736F6C634300080400330000 ","sourceMap":"23071:3797:1:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;23071:3797:1;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212205d5c9baf2f3d899bee6b63c579404b6fdf7cab180b9e4174516fbda3494f7ff164736f6c63430008040033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x5D 0x5C SWAP12 0xAF 0x2F RETURNDATASIZE DUP10 SWAP12 0xEE PUSH12 0x63C579404B6FDF7CAB180B9E COINBASE PUSH21 0x516FBDA3494F7FF164736F6C634300080400330000 ","sourceMap":"23071:3797:1:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"_callOptionalReturn(contract IERC20,bytes memory)":"infinite","safeApprove(contract IERC20,address,uint256)":"infinite","safeDecreaseAllowance(contract IERC20,address,uint256)":"infinite","safeIncreaseAllowance(contract IERC20,address,uint256)":"infinite","safeTransfer(contract IERC20,address,uint256)":"infinite","safeTransferFrom(contract IERC20,address,address,uint256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Wrappers around ERC20 operations that throw on failure (when the token contract returns false). Tokens that return no value (and instead revert or throw on failure) are also supported, non-reverting calls are assumed to be successful. To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract, which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\",\"kind\":\"dev\",\"methods\":{},\"title\":\"SafeERC20\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/swap.sol\":\"SafeERC20\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/swap.sol\":{\"content\":\"pragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\r\\n */\\r\\ninterface IERC20 {\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(\\r\\n        address indexed owner,\\r\\n        address indexed spender,\\r\\n        uint256 value\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address to, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(\\r\\n        address owner,\\r\\n        address spender\\r\\n    ) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender's allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller's\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n}\\r\\n\\r\\n// File @openzeppelin/contracts/utils/Context.sol@v4.6.0\\r\\n\\r\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Provides information about the current execution context, including the\\r\\n * sender of the transaction and its data. While these are generally available\\r\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\r\\n * manner, since when dealing with meta-transactions the account sending and\\r\\n * paying for execution may not be the actual sender (as far as an application\\r\\n * is concerned).\\r\\n *\\r\\n * This contract is only required for intermediate, library-like contracts.\\r\\n */\\r\\nabstract contract Context {\\r\\n    function _msgSender() internal view virtual returns (address) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view virtual returns (bytes calldata) {\\r\\n        return msg.data;\\r\\n    }\\r\\n}\\r\\n\\r\\n// File @openzeppelin/contracts/access/Ownable.sol@v4.6.0\\r\\n\\r\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Contract module which provides a basic access control mechanism, where\\r\\n * there is an account (an owner) that can be granted exclusive access to\\r\\n * specific functions.\\r\\n *\\r\\n * By default, the owner account will be the one that deploys the contract. This\\r\\n * can later be changed with {transferOwnership}.\\r\\n *\\r\\n * This module is used through inheritance. It will make available the modifier\\r\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\r\\n * the owner.\\r\\n */\\r\\nabstract contract Ownable is Context {\\r\\n    address private _owner;\\r\\n\\r\\n    event OwnershipTransferred(\\r\\n        address indexed previousOwner,\\r\\n        address indexed newOwner\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\r\\n     */\\r\\n    constructor() {\\r\\n        _transferOwnership(_msgSender());\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current owner.\\r\\n     */\\r\\n    function owner() public view virtual returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier onlyOwner() {\\r\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Leaves the contract without owner. It will not be possible to call\\r\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\r\\n     *\\r\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\r\\n     * thereby removing any functionality that is only available to the owner.\\r\\n     */\\r\\n    function renounceOwnership() public virtual onlyOwner {\\r\\n        _transferOwnership(address(0));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n        require(\\r\\n            newOwner != address(0),\\r\\n            \\\"Ownable: new owner is the zero address\\\"\\r\\n        );\\r\\n        _transferOwnership(newOwner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Internal function without access restriction.\\r\\n     */\\r\\n    function _transferOwnership(address newOwner) internal virtual {\\r\\n        address oldOwner = _owner;\\r\\n        _owner = newOwner;\\r\\n        emit OwnershipTransferred(oldOwner, newOwner);\\r\\n    }\\r\\n}\\r\\n\\r\\n// File @openzeppelin/contracts/utils/math/SafeMath.sol@v4.6.0\\r\\n\\r\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n// CAUTION\\r\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\r\\n// because it relies on the compiler's built in overflow checks.\\r\\n\\r\\n/**\\r\\n * @dev Wrappers over Solidity's arithmetic operations.\\r\\n *\\r\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\r\\n * now has built in overflow checking.\\r\\n */\\r\\nlibrary SafeMath {\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryAdd(\\r\\n        uint256 a,\\r\\n        uint256 b\\r\\n    ) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            uint256 c = a + b;\\r\\n            if (c < a) return (false, 0);\\r\\n            return (true, c);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function trySub(\\r\\n        uint256 a,\\r\\n        uint256 b\\r\\n    ) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            if (b > a) return (false, 0);\\r\\n            return (true, a - b);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryMul(\\r\\n        uint256 a,\\r\\n        uint256 b\\r\\n    ) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\r\\n            // benefit is lost if 'b' is also tested.\\r\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\r\\n            if (a == 0) return (true, 0);\\r\\n            uint256 c = a * b;\\r\\n            if (c / a != b) return (false, 0);\\r\\n            return (true, c);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryDiv(\\r\\n        uint256 a,\\r\\n        uint256 b\\r\\n    ) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            if (b == 0) return (false, 0);\\r\\n            return (true, a / b);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryMod(\\r\\n        uint256 a,\\r\\n        uint256 b\\r\\n    ) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            if (b == 0) return (false, 0);\\r\\n            return (true, a % b);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity's `+` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Addition cannot overflow.\\r\\n     */\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a + b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity's `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a - b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity's `*` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Multiplication cannot overflow.\\r\\n     */\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a * b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `/` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a / b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * reverting when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a % b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\r\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\r\\n     *\\r\\n     * Counterpart to Solidity's `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            require(b <= a, errorMessage);\\r\\n            return a - b;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            require(b > 0, errorMessage);\\r\\n            return a / b;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * reverting with custom message when dividing by zero.\\r\\n     *\\r\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\r\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\r\\n     *\\r\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            require(b > 0, errorMessage);\\r\\n            return a % b;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\n// File @openzeppelin/contracts/utils/Address.sol@v4.6.0\\r\\n\\r\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\r\\n\\r\\npragma solidity ^0.8.1;\\r\\n\\r\\n/**\\r\\n * @dev Collection of functions related to the address type\\r\\n */\\r\\nlibrary Address {\\r\\n    /**\\r\\n     * @dev Returns true if `account` is a contract.\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * It is unsafe to assume that an address for which this function returns\\r\\n     * false is an externally-owned account (EOA) and not a contract.\\r\\n     *\\r\\n     * Among others, `isContract` will return false for the following\\r\\n     * types of addresses:\\r\\n     *\\r\\n     *  - an externally-owned account\\r\\n     *  - a contract in construction\\r\\n     *  - an address where a contract will be created\\r\\n     *  - an address where a contract lived, but was destroyed\\r\\n     * ====\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\r\\n     *\\r\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\r\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\r\\n     * constructor.\\r\\n     * ====\\r\\n     */\\r\\n    function isContract(address account) internal view returns (bool) {\\r\\n        // This method relies on extcodesize/address.code.length, which returns 0\\r\\n        // for contracts in construction, since the code is only stored at the end\\r\\n        // of the constructor execution.\\r\\n\\r\\n        return account.code.length > 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\r\\n     * `recipient`, forwarding all available gas and reverting on errors.\\r\\n     *\\r\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\r\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\r\\n     * imposed by `transfer`, making them unable to receive funds via\\r\\n     * `transfer`. {sendValue} removes this limitation.\\r\\n     *\\r\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\r\\n     *\\r\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\r\\n     * taken to not create reentrancy vulnerabilities. Consider using\\r\\n     * {ReentrancyGuard} or the\\r\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\r\\n     */\\r\\n    function sendValue(address payable recipient, uint256 amount) internal {\\r\\n        require(\\r\\n            address(this).balance >= amount,\\r\\n            \\\"Address: insufficient balance\\\"\\r\\n        );\\r\\n\\r\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\r\\n        require(\\r\\n            success,\\r\\n            \\\"Address: unable to send value, recipient may have reverted\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Performs a Solidity function call using a low level `call`. A\\r\\n     * plain `call` is an unsafe replacement for a function call: use this\\r\\n     * function instead.\\r\\n     *\\r\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\r\\n     * function (like regular Solidity function calls).\\r\\n     *\\r\\n     * Returns the raw returned data. To convert to the expected return value,\\r\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `target` must be a contract.\\r\\n     * - calling `target` with `data` must not revert.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(\\r\\n        address target,\\r\\n        bytes memory data\\r\\n    ) internal returns (bytes memory) {\\r\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\r\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, 0, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but also transferring `value` wei to `target`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the calling contract must have an ETH balance of at least `value`.\\r\\n     * - the called Solidity function must be `payable`.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        uint256 value\\r\\n    ) internal returns (bytes memory) {\\r\\n        return\\r\\n            functionCallWithValue(\\r\\n                target,\\r\\n                data,\\r\\n                value,\\r\\n                \\\"Address: low-level call with value failed\\\"\\r\\n            );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\r\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        uint256 value,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        require(\\r\\n            address(this).balance >= value,\\r\\n            \\\"Address: insufficient balance for call\\\"\\r\\n        );\\r\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\r\\n\\r\\n        (bool success, bytes memory returndata) = target.call{value: value}(\\r\\n            data\\r\\n        );\\r\\n        return verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(\\r\\n        address target,\\r\\n        bytes memory data\\r\\n    ) internal view returns (bytes memory) {\\r\\n        return\\r\\n            functionStaticCall(\\r\\n                target,\\r\\n                data,\\r\\n                \\\"Address: low-level static call failed\\\"\\r\\n            );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal view returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\r\\n\\r\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\r\\n        return verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function functionDelegateCall(\\r\\n        address target,\\r\\n        bytes memory data\\r\\n    ) internal returns (bytes memory) {\\r\\n        return\\r\\n            functionDelegateCall(\\r\\n                target,\\r\\n                data,\\r\\n                \\\"Address: low-level delegate call failed\\\"\\r\\n            );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function functionDelegateCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\r\\n\\r\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\r\\n        return verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\r\\n     * revert reason using the provided one.\\r\\n     *\\r\\n     * _Available since v4.3._\\r\\n     */\\r\\n    function verifyCallResult(\\r\\n        bool success,\\r\\n        bytes memory returndata,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (bytes memory) {\\r\\n        if (success) {\\r\\n            return returndata;\\r\\n        } else {\\r\\n            // Look for revert reason and bubble it up if present\\r\\n            if (returndata.length > 0) {\\r\\n                // The easiest way to bubble the revert reason is using memory via assembly\\r\\n\\r\\n                assembly {\\r\\n                    let returndata_size := mload(returndata)\\r\\n                    revert(add(32, returndata), returndata_size)\\r\\n                }\\r\\n            } else {\\r\\n                revert(errorMessage);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\n// File @openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol@v4.6.0\\r\\n\\r\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @title SafeERC20\\r\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\r\\n * contract returns false). Tokens that return no value (and instead revert or\\r\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\r\\n * successful.\\r\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\r\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\r\\n */\\r\\nlibrary SafeERC20 {\\r\\n    using Address for address;\\r\\n\\r\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\r\\n        _callOptionalReturn(\\r\\n            token,\\r\\n            abi.encodeWithSelector(token.transfer.selector, to, value)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function safeTransferFrom(\\r\\n        IERC20 token,\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        _callOptionalReturn(\\r\\n            token,\\r\\n            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Deprecated. This function has issues similar to the ones found in\\r\\n     * {IERC20-approve}, and its usage is discouraged.\\r\\n     *\\r\\n     * Whenever possible, use {safeIncreaseAllowance} and\\r\\n     * {safeDecreaseAllowance} instead.\\r\\n     */\\r\\n    function safeApprove(\\r\\n        IERC20 token,\\r\\n        address spender,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        // safeApprove should only be called when setting an initial allowance,\\r\\n        // or when resetting it to zero. To increase and decrease it, use\\r\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\r\\n        require(\\r\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\r\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\r\\n        );\\r\\n        _callOptionalReturn(\\r\\n            token,\\r\\n            abi.encodeWithSelector(token.approve.selector, spender, value)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function safeIncreaseAllowance(\\r\\n        IERC20 token,\\r\\n        address spender,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\r\\n        _callOptionalReturn(\\r\\n            token,\\r\\n            abi.encodeWithSelector(\\r\\n                token.approve.selector,\\r\\n                spender,\\r\\n                newAllowance\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function safeDecreaseAllowance(\\r\\n        IERC20 token,\\r\\n        address spender,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        unchecked {\\r\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\r\\n            require(\\r\\n                oldAllowance >= value,\\r\\n                \\\"SafeERC20: decreased allowance below zero\\\"\\r\\n            );\\r\\n            uint256 newAllowance = oldAllowance - value;\\r\\n            _callOptionalReturn(\\r\\n                token,\\r\\n                abi.encodeWithSelector(\\r\\n                    token.approve.selector,\\r\\n                    spender,\\r\\n                    newAllowance\\r\\n                )\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\r\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\r\\n     * @param token The token targeted by the call.\\r\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\r\\n     */\\r\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\r\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\r\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\r\\n        // the target address contains contract code and also asserts for success in the low-level call.\\r\\n\\r\\n        bytes memory returndata = address(token).functionCall(\\r\\n            data,\\r\\n            \\\"SafeERC20: low-level call failed\\\"\\r\\n        );\\r\\n        if (returndata.length > 0) {\\r\\n            // Return data is optional\\r\\n            require(\\r\\n                abi.decode(returndata, (bool)),\\r\\n                \\\"SafeERC20: ERC20 operation did not succeed\\\"\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\n// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IRouter {\\r\\n    function swapExactTokensForTokens(\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256[] memory amounts);\\r\\n\\r\\n    function swapExactETHForTokens(\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external payable returns (uint256[] memory amounts);\\r\\n\\r\\n    function swapExactTokensForETH(\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256[] memory amounts);\\r\\n\\r\\n    function getAmountsOut(\\r\\n        uint256 amountIn,\\r\\n        address[] calldata path\\r\\n    ) external view returns (uint256[] memory amounts);\\r\\n}\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\n/// @title The interface for the PancakeSwap V3 Factory\\r\\n/// @notice The PancakeSwap V3 Factory facilitates creation of PancakeSwap V3 pools and control over the protocol fees\\r\\ninterface IPancakeV3Factory {\\r\\n    function getPool(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint24 fee\\r\\n    ) external view returns (address pool);\\r\\n}\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\ninterface IPancakeV3PoolState {\\r\\n    function slot0()\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            uint160 sqrtPriceX96,\\r\\n            int24 tick,\\r\\n            uint16 observationIndex,\\r\\n            uint16 observationCardinality,\\r\\n            uint16 observationCardinalityNext,\\r\\n            uint32 feeProtocol,\\r\\n            bool unlocked\\r\\n        );\\r\\n}\\r\\n\\r\\ninterface IPancakeV3PoolImmutables {\\r\\n    /// @notice The contract that deployed the pool, which must adhere to the IPancakeV3Factory interface\\r\\n    /// @return The contract address\\r\\n    function factory() external view returns (address);\\r\\n\\r\\n    /// @notice The first of the two tokens of the pool, sorted by address\\r\\n    /// @return The token contract address\\r\\n    function token0() external view returns (address);\\r\\n\\r\\n    /// @notice The second of the two tokens of the pool, sorted by address\\r\\n    /// @return The token contract address\\r\\n    function token1() external view returns (address);\\r\\n\\r\\n    /// @notice The pool's fee in hundredths of a bip, i.e. 1e-6\\r\\n    /// @return The fee\\r\\n    function fee() external view returns (uint24);\\r\\n\\r\\n    /// @notice The pool tick spacing\\r\\n    /// @dev Ticks can only be used at multiples of this value, minimum of 1 and always positive\\r\\n    /// e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ...\\r\\n    /// This value is an int24 to avoid casting even though it is always positive.\\r\\n    /// @return The tick spacing\\r\\n    function tickSpacing() external view returns (int24);\\r\\n\\r\\n    /// @notice The maximum amount of position liquidity that can use any tick in the range\\r\\n    /// @dev This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and\\r\\n    /// also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\\r\\n    /// @return The max amount of liquidity per tick\\r\\n    function maxLiquidityPerTick() external view returns (uint128);\\r\\n}\\r\\n\\r\\ninterface IPancakeV3Pool is IPancakeV3PoolState, IPancakeV3PoolImmutables {}\\r\\n\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\n/// @title Callback for IPancakeV3PoolActions#swap\\r\\n/// @notice Any contract that calls IPancakeV3PoolActions#swap must implement this interface\\r\\ninterface IPancakeV3SwapCallback {\\r\\n    /// @notice Called to `msg.sender` after executing a swap via IPancakeV3Pool#swap.\\r\\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\\r\\n    /// The caller of this method must be checked to be a PancakeV3Pool deployed by the canonical PancakeV3Factory.\\r\\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\\r\\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\\r\\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\\r\\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\\r\\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\\r\\n    /// @param data Any data passed through by the caller via the IPancakeV3PoolActions#swap call\\r\\n    function pancakeV3SwapCallback(\\r\\n        int256 amount0Delta,\\r\\n        int256 amount1Delta,\\r\\n        bytes calldata data\\r\\n    ) external;\\r\\n}\\r\\n\\r\\ninterface IV3SwapRouter is IPancakeV3SwapCallback {\\r\\n    struct ExactInputSingleParams {\\r\\n        address tokenIn;\\r\\n        address tokenOut;\\r\\n        uint24 fee;\\r\\n        address recipient;\\r\\n        uint256 amountIn;\\r\\n        uint256 amountOutMinimum;\\r\\n        uint160 sqrtPriceLimitX96;\\r\\n    }\\r\\n\\r\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\\r\\n    /// @dev Setting `amountIn` to 0 will cause the contract to look up its own balance,\\r\\n    /// and swap the entire amount, enabling contracts to send tokens before calling this function.\\r\\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\\r\\n    /// @return amountOut The amount of the received token\\r\\n    function exactInputSingle(\\r\\n        ExactInputSingleParams calldata params\\r\\n    ) external payable returns (uint256 amountOut);\\r\\n\\r\\n    struct ExactInputParams {\\r\\n        bytes path;\\r\\n        address recipient;\\r\\n        uint256 amountIn;\\r\\n        uint256 amountOutMinimum;\\r\\n    }\\r\\n\\r\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\\r\\n    /// @dev Setting `amountIn` to 0 will cause the contract to look up its own balance,\\r\\n    /// and swap the entire amount, enabling contracts to send tokens before calling this function.\\r\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\\r\\n    /// @return amountOut The amount of the received token\\r\\n    function exactInput(\\r\\n        ExactInputParams calldata params\\r\\n    ) external payable returns (uint256 amountOut);\\r\\n\\r\\n    struct ExactOutputSingleParams {\\r\\n        address tokenIn;\\r\\n        address tokenOut;\\r\\n        uint24 fee;\\r\\n        address recipient;\\r\\n        uint256 amountOut;\\r\\n        uint256 amountInMaximum;\\r\\n        uint160 sqrtPriceLimitX96;\\r\\n    }\\r\\n\\r\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\\r\\n    /// that may remain in the router after the swap.\\r\\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\\r\\n    /// @return amountIn The amount of the input token\\r\\n    function exactOutputSingle(\\r\\n        ExactOutputSingleParams calldata params\\r\\n    ) external payable returns (uint256 amountIn);\\r\\n\\r\\n    struct ExactOutputParams {\\r\\n        bytes path;\\r\\n        address recipient;\\r\\n        uint256 amountOut;\\r\\n        uint256 amountInMaximum;\\r\\n    }\\r\\n\\r\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\\r\\n    /// that may remain in the router after the swap.\\r\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\\r\\n    /// @return amountIn The amount of the input token\\r\\n    function exactOutput(\\r\\n        ExactOutputParams calldata params\\r\\n    ) external payable returns (uint256 amountIn);\\r\\n\\r\\n    function refundETH() external payable;\\r\\n}\\r\\n\\r\\ncontract Claimable is Ownable {\\r\\n    function claimToken(\\r\\n        address tokenAddress,\\r\\n        uint256 amount\\r\\n    ) external onlyOwner {\\r\\n        IERC20(tokenAddress).transfer(owner(), amount);\\r\\n    }\\r\\n\\r\\n    function claimETH(uint256 amount) external onlyOwner {\\r\\n        (bool sent, ) = owner().call{value: amount}(\\\"\\\");\\r\\n        require(sent, \\\"Failed to send Ether\\\");\\r\\n    }\\r\\n}\\r\\n\\r\\ncontract ProSwap is Claimable {\\r\\n    using SafeMath for uint256;\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    uint public feePercent = 0; //10:0.25%\\r\\n    uint256 public rewardAmount = 10000000000000000000; //10 to tokens\\r\\n\\r\\n    address public rewardAddress;\\r\\n    address public feeAccount;\\r\\n    address public router;\\r\\n    address public wavax;\\r\\n\\r\\n    address public routerAddress = 0x13f4EA83D0bd40E75C8222255bc855a974568Dd4;\\r\\n    address public factoryAddress = 0x0BFbCF9fa4f9C56B0F40a671Ad40E0805A091865;\\r\\n    address public wbnbAddress = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;\\r\\n    uint24 poolFee = 100;\\r\\n\\r\\n    mapping(address => uint256) airdropAddress;\\r\\n    mapping(address => uint256) airdropLastTime;\\r\\n\\r\\n    constructor(\\r\\n        address _feeAccount,\\r\\n        address _router,\\r\\n        address _wavax,\\r\\n        address _rewardAddress\\r\\n    ) {\\r\\n        feeAccount = _feeAccount;\\r\\n        router = _router;\\r\\n        wavax = _wavax;\\r\\n        rewardAddress = _rewardAddress;\\r\\n    }\\r\\n\\r\\n    function airdrop() external {\\r\\n        require(\\r\\n            airdropAddress[msg.sender] + 86400 > block.timestamp,\\r\\n            \\\"You did not swap in 24 hours\\\"\\r\\n        );\\r\\n\\r\\n        require(\\r\\n            block.timestamp > airdropLastTime[msg.sender] + 86400,\\r\\n            \\\"You airdroped in 24 hours\\\"\\r\\n        );\\r\\n\\r\\n        IERC20(rewardAddress).safeTransfer(msg.sender, rewardAmount);\\r\\n        airdropLastTime[msg.sender] = block.timestamp;\\r\\n    }\\r\\n\\r\\n    function swapV2Tokens(\\r\\n        address _tokenA,\\r\\n        address _tokenB,\\r\\n        uint256 _amountIn\\r\\n    ) external payable {\\r\\n        airdropAddress[msg.sender] = block.timestamp;\\r\\n        address[] memory path = new address[](2);\\r\\n        if (_tokenA == address(0)) {\\r\\n            path[0] = wavax;\\r\\n            path[1] = _tokenB;\\r\\n        } else if (_tokenB == address(0)) {\\r\\n            path[0] = _tokenA;\\r\\n            path[1] = wavax;\\r\\n        } else {\\r\\n            path[0] = _tokenA;\\r\\n            path[1] = _tokenB;\\r\\n        }\\r\\n\\r\\n        _proceedToUniswap(_tokenA, _tokenB, _amountIn, path);\\r\\n    }\\r\\n\\r\\n    function customSwapTokens(\\r\\n        address _tokenA,\\r\\n        address _tokenB,\\r\\n        uint256 _amountIn,\\r\\n        address[] memory path\\r\\n    ) external payable {\\r\\n        if (_tokenA == address(0)) {\\r\\n            require(\\r\\n                wavax == path[0] && _tokenB == path[path.length - 1],\\r\\n                \\\"PattieSwap: Path must be specified\\\"\\r\\n            );\\r\\n        } else if (_tokenB == address(0)) {\\r\\n            require(\\r\\n                _tokenA == path[0] && wavax == path[path.length - 1],\\r\\n                \\\"PattieSwap: Path must be specified\\\"\\r\\n            );\\r\\n        } else {\\r\\n            require(\\r\\n                _tokenA == path[0] && _tokenB == path[path.length - 1],\\r\\n                \\\"PattieSwap: Path must be specified\\\"\\r\\n            );\\r\\n        }\\r\\n        _proceedToUniswap(_tokenA, _tokenB, _amountIn, path);\\r\\n    }\\r\\n\\r\\n    function _proceedToUniswap(\\r\\n        address _tokenA,\\r\\n        address _tokenB,\\r\\n        uint256 _amountIn,\\r\\n        address[] memory path\\r\\n    ) internal {\\r\\n        require(_amountIn > 0, \\\"PattieSwap: amountIn must be greater than 0\\\");\\r\\n\\r\\n        if (_tokenA == address(0)) {\\r\\n            require(_amountIn >= msg.value, \\\"PattieSwap: Insufficient ETH\\\");\\r\\n            uint fee = (_amountIn * feePercent) / 10000;\\r\\n            payable(feeAccount).transfer(fee);\\r\\n            uint amountToSwap = _amountIn - fee;\\r\\n            _swapAVAXForTokens(amountToSwap, path);\\r\\n        } else {\\r\\n            IERC20(_tokenA).safeTransferFrom(\\r\\n                msg.sender,\\r\\n                address(this),\\r\\n                _amountIn\\r\\n            );\\r\\n            uint fee = (_amountIn * feePercent) / 10000;\\r\\n            IERC20(_tokenA).safeTransfer(feeAccount, fee);\\r\\n            uint amountToSwap = _amountIn - fee;\\r\\n            _approve(_tokenA, amountToSwap);\\r\\n            if (_tokenB == address(0)) {\\r\\n                _swapTokensForAVAX(amountToSwap, path);\\r\\n            } else {\\r\\n                _swapTokensForTokens(amountToSwap, path);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _approve(address _token, uint _amount) internal {\\r\\n        IERC20(_token).approve(address(router), _amount);\\r\\n    }\\r\\n\\r\\n    function _swapTokensForAVAX(uint _amount, address[] memory path) internal {\\r\\n        IRouter(router).swapExactTokensForETH(\\r\\n            _amount,\\r\\n            0,\\r\\n            path,\\r\\n            msg.sender,\\r\\n            block.timestamp\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function _swapAVAXForTokens(uint _amount, address[] memory path) internal {\\r\\n        IRouter(router).swapExactETHForTokens{value: _amount}(\\r\\n            0,\\r\\n            path,\\r\\n            msg.sender,\\r\\n            block.timestamp\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function _swapTokensForTokens(\\r\\n        uint _amount,\\r\\n        address[] memory path\\r\\n    ) internal {\\r\\n        IRouter(router).swapExactTokensForTokens(\\r\\n            _amount,\\r\\n            0,\\r\\n            path,\\r\\n            msg.sender,\\r\\n            block.timestamp\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function _v3Approve(address _token, uint _amount) internal {\\r\\n        IERC20(_token).approve(address(routerAddress), _amount);\\r\\n    }\\r\\n\\r\\n    function getOutputTokenAmount(\\r\\n        uint inputAmount,\\r\\n        address[] memory path\\r\\n    ) external view returns (uint outputAmount) {\\r\\n        uint[] memory outputs = IRouter(router).getAmountsOut(\\r\\n            inputAmount,\\r\\n            path\\r\\n        );\\r\\n        return outputs[outputs.length - 1];\\r\\n    }\\r\\n\\r\\n    function getV3OutputTokenAmount(\\r\\n        uint256 _inputAmount,\\r\\n        address _tokenIn,\\r\\n        address _tokenOut\\r\\n    ) external view returns (uint outputAmount) {\\r\\n        uint256 slotReturnValue = 0;\\r\\n        address pairAddress = IPancakeV3Factory(factoryAddress).getPool(\\r\\n            _tokenIn,\\r\\n            _tokenOut,\\r\\n            poolFee\\r\\n        );\\r\\n        (slotReturnValue, , , , , , ) = IPancakeV3PoolState(pairAddress)\\r\\n            .slot0();\\r\\n        address token0 = IPancakeV3Pool(pairAddress).token0();\\r\\n        if (_tokenIn == token0)\\r\\n            outputAmount = ((slotReturnValue ** 2 * _inputAmount) / 2 ** 192);\\r\\n        else outputAmount = ((2 ** 192 * _inputAmount) / slotReturnValue ** 2);\\r\\n    }\\r\\n\\r\\n    function setFeePercent(uint _feePercent) external onlyOwner {\\r\\n        feePercent = _feePercent;\\r\\n    }\\r\\n\\r\\n    function setRewardAmount(uint256 _amount) external onlyOwner {\\r\\n        rewardAmount = _amount;\\r\\n    }\\r\\n\\r\\n    function setRewardToken(address _rewawrdAddress) external onlyOwner {\\r\\n        rewardAddress = _rewawrdAddress;\\r\\n    }\\r\\n\\r\\n    function setFeeAccount(address _feeAccount) external onlyOwner {\\r\\n        feeAccount = _feeAccount;\\r\\n    }\\r\\n\\r\\n    function setRouterWAVAX(\\r\\n        address _router,\\r\\n        address _wavax\\r\\n    ) external onlyOwner {\\r\\n        router = _router;\\r\\n        wavax = _wavax;\\r\\n    }\\r\\n\\r\\n    function emergencyWithdraw(\\r\\n        address _token,\\r\\n        uint _amount\\r\\n    ) external onlyOwner {\\r\\n        IERC20(_token).safeTransfer(msg.sender, _amount);\\r\\n    }\\r\\n\\r\\n    function emergencyWithdrawETH(uint _amount) external onlyOwner {\\r\\n        payable(owner()).transfer(_amount);\\r\\n    }\\r\\n\\r\\n    function swapTokens(\\r\\n        address _tokenIn,\\r\\n        address _tokenOut,\\r\\n        uint256 _amountIn\\r\\n    ) external payable {\\r\\n        airdropAddress[msg.sender] = block.timestamp;\\r\\n        IV3SwapRouter.ExactInputSingleParams memory params = IV3SwapRouter\\r\\n            .ExactInputSingleParams(\\r\\n                _tokenIn,\\r\\n                _tokenOut,\\r\\n                poolFee,\\r\\n                msg.sender,\\r\\n                _amountIn,\\r\\n                0,\\r\\n                0\\r\\n            );\\r\\n        if (_tokenIn == wbnbAddress)\\r\\n            IV3SwapRouter(routerAddress).exactInputSingle{value: msg.value}(\\r\\n                params\\r\\n            );\\r\\n        else {\\r\\n            IERC20(_tokenIn).safeTransferFrom(\\r\\n                msg.sender,\\r\\n                address(this),\\r\\n                _amountIn\\r\\n            );\\r\\n            _v3Approve(_tokenIn, _amountIn);\\r\\n            IV3SwapRouter(routerAddress).exactInputSingle{value: msg.value}(\\r\\n                params\\r\\n            );\\r\\n        }\\r\\n        IV3SwapRouter(routerAddress).refundETH();\\r\\n        // refund leftover ETH to user\\r\\n        (bool success, ) = msg.sender.call{value: address(this).balance}(\\\"\\\");\\r\\n        require(success, \\\"refund failed\\\");\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x014ebbd50111dbe2ffd46bfee0dca5b1dbbc4785ff10cb323cef7317398427ea\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}},"SafeMath":{"abi":[],"devdoc":{"details":"Wrappers over Solidity's arithmetic operations. NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler now has built in overflow checking.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220690b28e87901a732171a484708362cdd30ce3eb80f9e37a1d02df2c618c20c7264736f6c63430008040033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH10 0xB28E87901A732171A48 SELFBALANCE ADDMOD CALLDATASIZE 0x2C 0xDD ADDRESS 0xCE RETURNDATACOPY 0xB8 0xF SWAP15 CALLDATACOPY LOG1 0xD0 0x2D CALLCODE 0xC6 XOR 0xC2 0xC PUSH19 0x64736F6C634300080400330000000000000000 ","sourceMap":"6822:6636:1:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;6822:6636:1;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220690b28e87901a732171a484708362cdd30ce3eb80f9e37a1d02df2c618c20c7264736f6c63430008040033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH10 0xB28E87901A732171A48 SELFBALANCE ADDMOD CALLDATASIZE 0x2C 0xDD ADDRESS 0xCE RETURNDATACOPY 0xB8 0xF SWAP15 CALLDATACOPY LOG1 0xD0 0x2D CALLCODE 0xC6 XOR 0xC2 0xC PUSH19 0x64736F6C634300080400330000000000000000 ","sourceMap":"6822:6636:1:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"add(uint256,uint256)":"infinite","div(uint256,uint256)":"infinite","div(uint256,uint256,string memory)":"infinite","mod(uint256,uint256)":"infinite","mod(uint256,uint256,string memory)":"infinite","mul(uint256,uint256)":"infinite","sub(uint256,uint256)":"infinite","sub(uint256,uint256,string memory)":"infinite","tryAdd(uint256,uint256)":"infinite","tryDiv(uint256,uint256)":"infinite","tryMod(uint256,uint256)":"infinite","tryMul(uint256,uint256)":"infinite","trySub(uint256,uint256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Wrappers over Solidity's arithmetic operations. NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler now has built in overflow checking.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/swap.sol\":\"SafeMath\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/swap.sol\":{\"content\":\"pragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\r\\n */\\r\\ninterface IERC20 {\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(\\r\\n        address indexed owner,\\r\\n        address indexed spender,\\r\\n        uint256 value\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address to, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(\\r\\n        address owner,\\r\\n        address spender\\r\\n    ) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender's allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller's\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n}\\r\\n\\r\\n// File @openzeppelin/contracts/utils/Context.sol@v4.6.0\\r\\n\\r\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Provides information about the current execution context, including the\\r\\n * sender of the transaction and its data. While these are generally available\\r\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\r\\n * manner, since when dealing with meta-transactions the account sending and\\r\\n * paying for execution may not be the actual sender (as far as an application\\r\\n * is concerned).\\r\\n *\\r\\n * This contract is only required for intermediate, library-like contracts.\\r\\n */\\r\\nabstract contract Context {\\r\\n    function _msgSender() internal view virtual returns (address) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view virtual returns (bytes calldata) {\\r\\n        return msg.data;\\r\\n    }\\r\\n}\\r\\n\\r\\n// File @openzeppelin/contracts/access/Ownable.sol@v4.6.0\\r\\n\\r\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Contract module which provides a basic access control mechanism, where\\r\\n * there is an account (an owner) that can be granted exclusive access to\\r\\n * specific functions.\\r\\n *\\r\\n * By default, the owner account will be the one that deploys the contract. This\\r\\n * can later be changed with {transferOwnership}.\\r\\n *\\r\\n * This module is used through inheritance. It will make available the modifier\\r\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\r\\n * the owner.\\r\\n */\\r\\nabstract contract Ownable is Context {\\r\\n    address private _owner;\\r\\n\\r\\n    event OwnershipTransferred(\\r\\n        address indexed previousOwner,\\r\\n        address indexed newOwner\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\r\\n     */\\r\\n    constructor() {\\r\\n        _transferOwnership(_msgSender());\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current owner.\\r\\n     */\\r\\n    function owner() public view virtual returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier onlyOwner() {\\r\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Leaves the contract without owner. It will not be possible to call\\r\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\r\\n     *\\r\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\r\\n     * thereby removing any functionality that is only available to the owner.\\r\\n     */\\r\\n    function renounceOwnership() public virtual onlyOwner {\\r\\n        _transferOwnership(address(0));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n        require(\\r\\n            newOwner != address(0),\\r\\n            \\\"Ownable: new owner is the zero address\\\"\\r\\n        );\\r\\n        _transferOwnership(newOwner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Internal function without access restriction.\\r\\n     */\\r\\n    function _transferOwnership(address newOwner) internal virtual {\\r\\n        address oldOwner = _owner;\\r\\n        _owner = newOwner;\\r\\n        emit OwnershipTransferred(oldOwner, newOwner);\\r\\n    }\\r\\n}\\r\\n\\r\\n// File @openzeppelin/contracts/utils/math/SafeMath.sol@v4.6.0\\r\\n\\r\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n// CAUTION\\r\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\r\\n// because it relies on the compiler's built in overflow checks.\\r\\n\\r\\n/**\\r\\n * @dev Wrappers over Solidity's arithmetic operations.\\r\\n *\\r\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\r\\n * now has built in overflow checking.\\r\\n */\\r\\nlibrary SafeMath {\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryAdd(\\r\\n        uint256 a,\\r\\n        uint256 b\\r\\n    ) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            uint256 c = a + b;\\r\\n            if (c < a) return (false, 0);\\r\\n            return (true, c);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function trySub(\\r\\n        uint256 a,\\r\\n        uint256 b\\r\\n    ) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            if (b > a) return (false, 0);\\r\\n            return (true, a - b);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryMul(\\r\\n        uint256 a,\\r\\n        uint256 b\\r\\n    ) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\r\\n            // benefit is lost if 'b' is also tested.\\r\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\r\\n            if (a == 0) return (true, 0);\\r\\n            uint256 c = a * b;\\r\\n            if (c / a != b) return (false, 0);\\r\\n            return (true, c);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryDiv(\\r\\n        uint256 a,\\r\\n        uint256 b\\r\\n    ) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            if (b == 0) return (false, 0);\\r\\n            return (true, a / b);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryMod(\\r\\n        uint256 a,\\r\\n        uint256 b\\r\\n    ) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            if (b == 0) return (false, 0);\\r\\n            return (true, a % b);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity's `+` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Addition cannot overflow.\\r\\n     */\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a + b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity's `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a - b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity's `*` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Multiplication cannot overflow.\\r\\n     */\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a * b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `/` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a / b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * reverting when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a % b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\r\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\r\\n     *\\r\\n     * Counterpart to Solidity's `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            require(b <= a, errorMessage);\\r\\n            return a - b;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            require(b > 0, errorMessage);\\r\\n            return a / b;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * reverting with custom message when dividing by zero.\\r\\n     *\\r\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\r\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\r\\n     *\\r\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            require(b > 0, errorMessage);\\r\\n            return a % b;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\n// File @openzeppelin/contracts/utils/Address.sol@v4.6.0\\r\\n\\r\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\r\\n\\r\\npragma solidity ^0.8.1;\\r\\n\\r\\n/**\\r\\n * @dev Collection of functions related to the address type\\r\\n */\\r\\nlibrary Address {\\r\\n    /**\\r\\n     * @dev Returns true if `account` is a contract.\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * It is unsafe to assume that an address for which this function returns\\r\\n     * false is an externally-owned account (EOA) and not a contract.\\r\\n     *\\r\\n     * Among others, `isContract` will return false for the following\\r\\n     * types of addresses:\\r\\n     *\\r\\n     *  - an externally-owned account\\r\\n     *  - a contract in construction\\r\\n     *  - an address where a contract will be created\\r\\n     *  - an address where a contract lived, but was destroyed\\r\\n     * ====\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\r\\n     *\\r\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\r\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\r\\n     * constructor.\\r\\n     * ====\\r\\n     */\\r\\n    function isContract(address account) internal view returns (bool) {\\r\\n        // This method relies on extcodesize/address.code.length, which returns 0\\r\\n        // for contracts in construction, since the code is only stored at the end\\r\\n        // of the constructor execution.\\r\\n\\r\\n        return account.code.length > 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\r\\n     * `recipient`, forwarding all available gas and reverting on errors.\\r\\n     *\\r\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\r\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\r\\n     * imposed by `transfer`, making them unable to receive funds via\\r\\n     * `transfer`. {sendValue} removes this limitation.\\r\\n     *\\r\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\r\\n     *\\r\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\r\\n     * taken to not create reentrancy vulnerabilities. Consider using\\r\\n     * {ReentrancyGuard} or the\\r\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\r\\n     */\\r\\n    function sendValue(address payable recipient, uint256 amount) internal {\\r\\n        require(\\r\\n            address(this).balance >= amount,\\r\\n            \\\"Address: insufficient balance\\\"\\r\\n        );\\r\\n\\r\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\r\\n        require(\\r\\n            success,\\r\\n            \\\"Address: unable to send value, recipient may have reverted\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Performs a Solidity function call using a low level `call`. A\\r\\n     * plain `call` is an unsafe replacement for a function call: use this\\r\\n     * function instead.\\r\\n     *\\r\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\r\\n     * function (like regular Solidity function calls).\\r\\n     *\\r\\n     * Returns the raw returned data. To convert to the expected return value,\\r\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `target` must be a contract.\\r\\n     * - calling `target` with `data` must not revert.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(\\r\\n        address target,\\r\\n        bytes memory data\\r\\n    ) internal returns (bytes memory) {\\r\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\r\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, 0, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but also transferring `value` wei to `target`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the calling contract must have an ETH balance of at least `value`.\\r\\n     * - the called Solidity function must be `payable`.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        uint256 value\\r\\n    ) internal returns (bytes memory) {\\r\\n        return\\r\\n            functionCallWithValue(\\r\\n                target,\\r\\n                data,\\r\\n                value,\\r\\n                \\\"Address: low-level call with value failed\\\"\\r\\n            );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\r\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        uint256 value,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        require(\\r\\n            address(this).balance >= value,\\r\\n            \\\"Address: insufficient balance for call\\\"\\r\\n        );\\r\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\r\\n\\r\\n        (bool success, bytes memory returndata) = target.call{value: value}(\\r\\n            data\\r\\n        );\\r\\n        return verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(\\r\\n        address target,\\r\\n        bytes memory data\\r\\n    ) internal view returns (bytes memory) {\\r\\n        return\\r\\n            functionStaticCall(\\r\\n                target,\\r\\n                data,\\r\\n                \\\"Address: low-level static call failed\\\"\\r\\n            );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal view returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\r\\n\\r\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\r\\n        return verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function functionDelegateCall(\\r\\n        address target,\\r\\n        bytes memory data\\r\\n    ) internal returns (bytes memory) {\\r\\n        return\\r\\n            functionDelegateCall(\\r\\n                target,\\r\\n                data,\\r\\n                \\\"Address: low-level delegate call failed\\\"\\r\\n            );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function functionDelegateCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\r\\n\\r\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\r\\n        return verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\r\\n     * revert reason using the provided one.\\r\\n     *\\r\\n     * _Available since v4.3._\\r\\n     */\\r\\n    function verifyCallResult(\\r\\n        bool success,\\r\\n        bytes memory returndata,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (bytes memory) {\\r\\n        if (success) {\\r\\n            return returndata;\\r\\n        } else {\\r\\n            // Look for revert reason and bubble it up if present\\r\\n            if (returndata.length > 0) {\\r\\n                // The easiest way to bubble the revert reason is using memory via assembly\\r\\n\\r\\n                assembly {\\r\\n                    let returndata_size := mload(returndata)\\r\\n                    revert(add(32, returndata), returndata_size)\\r\\n                }\\r\\n            } else {\\r\\n                revert(errorMessage);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\n// File @openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol@v4.6.0\\r\\n\\r\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @title SafeERC20\\r\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\r\\n * contract returns false). Tokens that return no value (and instead revert or\\r\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\r\\n * successful.\\r\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\r\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\r\\n */\\r\\nlibrary SafeERC20 {\\r\\n    using Address for address;\\r\\n\\r\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\r\\n        _callOptionalReturn(\\r\\n            token,\\r\\n            abi.encodeWithSelector(token.transfer.selector, to, value)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function safeTransferFrom(\\r\\n        IERC20 token,\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        _callOptionalReturn(\\r\\n            token,\\r\\n            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Deprecated. This function has issues similar to the ones found in\\r\\n     * {IERC20-approve}, and its usage is discouraged.\\r\\n     *\\r\\n     * Whenever possible, use {safeIncreaseAllowance} and\\r\\n     * {safeDecreaseAllowance} instead.\\r\\n     */\\r\\n    function safeApprove(\\r\\n        IERC20 token,\\r\\n        address spender,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        // safeApprove should only be called when setting an initial allowance,\\r\\n        // or when resetting it to zero. To increase and decrease it, use\\r\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\r\\n        require(\\r\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\r\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\r\\n        );\\r\\n        _callOptionalReturn(\\r\\n            token,\\r\\n            abi.encodeWithSelector(token.approve.selector, spender, value)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function safeIncreaseAllowance(\\r\\n        IERC20 token,\\r\\n        address spender,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\r\\n        _callOptionalReturn(\\r\\n            token,\\r\\n            abi.encodeWithSelector(\\r\\n                token.approve.selector,\\r\\n                spender,\\r\\n                newAllowance\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function safeDecreaseAllowance(\\r\\n        IERC20 token,\\r\\n        address spender,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        unchecked {\\r\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\r\\n            require(\\r\\n                oldAllowance >= value,\\r\\n                \\\"SafeERC20: decreased allowance below zero\\\"\\r\\n            );\\r\\n            uint256 newAllowance = oldAllowance - value;\\r\\n            _callOptionalReturn(\\r\\n                token,\\r\\n                abi.encodeWithSelector(\\r\\n                    token.approve.selector,\\r\\n                    spender,\\r\\n                    newAllowance\\r\\n                )\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\r\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\r\\n     * @param token The token targeted by the call.\\r\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\r\\n     */\\r\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\r\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\r\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\r\\n        // the target address contains contract code and also asserts for success in the low-level call.\\r\\n\\r\\n        bytes memory returndata = address(token).functionCall(\\r\\n            data,\\r\\n            \\\"SafeERC20: low-level call failed\\\"\\r\\n        );\\r\\n        if (returndata.length > 0) {\\r\\n            // Return data is optional\\r\\n            require(\\r\\n                abi.decode(returndata, (bool)),\\r\\n                \\\"SafeERC20: ERC20 operation did not succeed\\\"\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\n// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IRouter {\\r\\n    function swapExactTokensForTokens(\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256[] memory amounts);\\r\\n\\r\\n    function swapExactETHForTokens(\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external payable returns (uint256[] memory amounts);\\r\\n\\r\\n    function swapExactTokensForETH(\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256[] memory amounts);\\r\\n\\r\\n    function getAmountsOut(\\r\\n        uint256 amountIn,\\r\\n        address[] calldata path\\r\\n    ) external view returns (uint256[] memory amounts);\\r\\n}\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\n/// @title The interface for the PancakeSwap V3 Factory\\r\\n/// @notice The PancakeSwap V3 Factory facilitates creation of PancakeSwap V3 pools and control over the protocol fees\\r\\ninterface IPancakeV3Factory {\\r\\n    function getPool(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint24 fee\\r\\n    ) external view returns (address pool);\\r\\n}\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\ninterface IPancakeV3PoolState {\\r\\n    function slot0()\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            uint160 sqrtPriceX96,\\r\\n            int24 tick,\\r\\n            uint16 observationIndex,\\r\\n            uint16 observationCardinality,\\r\\n            uint16 observationCardinalityNext,\\r\\n            uint32 feeProtocol,\\r\\n            bool unlocked\\r\\n        );\\r\\n}\\r\\n\\r\\ninterface IPancakeV3PoolImmutables {\\r\\n    /// @notice The contract that deployed the pool, which must adhere to the IPancakeV3Factory interface\\r\\n    /// @return The contract address\\r\\n    function factory() external view returns (address);\\r\\n\\r\\n    /// @notice The first of the two tokens of the pool, sorted by address\\r\\n    /// @return The token contract address\\r\\n    function token0() external view returns (address);\\r\\n\\r\\n    /// @notice The second of the two tokens of the pool, sorted by address\\r\\n    /// @return The token contract address\\r\\n    function token1() external view returns (address);\\r\\n\\r\\n    /// @notice The pool's fee in hundredths of a bip, i.e. 1e-6\\r\\n    /// @return The fee\\r\\n    function fee() external view returns (uint24);\\r\\n\\r\\n    /// @notice The pool tick spacing\\r\\n    /// @dev Ticks can only be used at multiples of this value, minimum of 1 and always positive\\r\\n    /// e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ...\\r\\n    /// This value is an int24 to avoid casting even though it is always positive.\\r\\n    /// @return The tick spacing\\r\\n    function tickSpacing() external view returns (int24);\\r\\n\\r\\n    /// @notice The maximum amount of position liquidity that can use any tick in the range\\r\\n    /// @dev This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and\\r\\n    /// also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\\r\\n    /// @return The max amount of liquidity per tick\\r\\n    function maxLiquidityPerTick() external view returns (uint128);\\r\\n}\\r\\n\\r\\ninterface IPancakeV3Pool is IPancakeV3PoolState, IPancakeV3PoolImmutables {}\\r\\n\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\n/// @title Callback for IPancakeV3PoolActions#swap\\r\\n/// @notice Any contract that calls IPancakeV3PoolActions#swap must implement this interface\\r\\ninterface IPancakeV3SwapCallback {\\r\\n    /// @notice Called to `msg.sender` after executing a swap via IPancakeV3Pool#swap.\\r\\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\\r\\n    /// The caller of this method must be checked to be a PancakeV3Pool deployed by the canonical PancakeV3Factory.\\r\\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\\r\\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\\r\\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\\r\\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\\r\\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\\r\\n    /// @param data Any data passed through by the caller via the IPancakeV3PoolActions#swap call\\r\\n    function pancakeV3SwapCallback(\\r\\n        int256 amount0Delta,\\r\\n        int256 amount1Delta,\\r\\n        bytes calldata data\\r\\n    ) external;\\r\\n}\\r\\n\\r\\ninterface IV3SwapRouter is IPancakeV3SwapCallback {\\r\\n    struct ExactInputSingleParams {\\r\\n        address tokenIn;\\r\\n        address tokenOut;\\r\\n        uint24 fee;\\r\\n        address recipient;\\r\\n        uint256 amountIn;\\r\\n        uint256 amountOutMinimum;\\r\\n        uint160 sqrtPriceLimitX96;\\r\\n    }\\r\\n\\r\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\\r\\n    /// @dev Setting `amountIn` to 0 will cause the contract to look up its own balance,\\r\\n    /// and swap the entire amount, enabling contracts to send tokens before calling this function.\\r\\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\\r\\n    /// @return amountOut The amount of the received token\\r\\n    function exactInputSingle(\\r\\n        ExactInputSingleParams calldata params\\r\\n    ) external payable returns (uint256 amountOut);\\r\\n\\r\\n    struct ExactInputParams {\\r\\n        bytes path;\\r\\n        address recipient;\\r\\n        uint256 amountIn;\\r\\n        uint256 amountOutMinimum;\\r\\n    }\\r\\n\\r\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\\r\\n    /// @dev Setting `amountIn` to 0 will cause the contract to look up its own balance,\\r\\n    /// and swap the entire amount, enabling contracts to send tokens before calling this function.\\r\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\\r\\n    /// @return amountOut The amount of the received token\\r\\n    function exactInput(\\r\\n        ExactInputParams calldata params\\r\\n    ) external payable returns (uint256 amountOut);\\r\\n\\r\\n    struct ExactOutputSingleParams {\\r\\n        address tokenIn;\\r\\n        address tokenOut;\\r\\n        uint24 fee;\\r\\n        address recipient;\\r\\n        uint256 amountOut;\\r\\n        uint256 amountInMaximum;\\r\\n        uint160 sqrtPriceLimitX96;\\r\\n    }\\r\\n\\r\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\\r\\n    /// that may remain in the router after the swap.\\r\\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\\r\\n    /// @return amountIn The amount of the input token\\r\\n    function exactOutputSingle(\\r\\n        ExactOutputSingleParams calldata params\\r\\n    ) external payable returns (uint256 amountIn);\\r\\n\\r\\n    struct ExactOutputParams {\\r\\n        bytes path;\\r\\n        address recipient;\\r\\n        uint256 amountOut;\\r\\n        uint256 amountInMaximum;\\r\\n    }\\r\\n\\r\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\\r\\n    /// that may remain in the router after the swap.\\r\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\\r\\n    /// @return amountIn The amount of the input token\\r\\n    function exactOutput(\\r\\n        ExactOutputParams calldata params\\r\\n    ) external payable returns (uint256 amountIn);\\r\\n\\r\\n    function refundETH() external payable;\\r\\n}\\r\\n\\r\\ncontract Claimable is Ownable {\\r\\n    function claimToken(\\r\\n        address tokenAddress,\\r\\n        uint256 amount\\r\\n    ) external onlyOwner {\\r\\n        IERC20(tokenAddress).transfer(owner(), amount);\\r\\n    }\\r\\n\\r\\n    function claimETH(uint256 amount) external onlyOwner {\\r\\n        (bool sent, ) = owner().call{value: amount}(\\\"\\\");\\r\\n        require(sent, \\\"Failed to send Ether\\\");\\r\\n    }\\r\\n}\\r\\n\\r\\ncontract ProSwap is Claimable {\\r\\n    using SafeMath for uint256;\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    uint public feePercent = 0; //10:0.25%\\r\\n    uint256 public rewardAmount = 10000000000000000000; //10 to tokens\\r\\n\\r\\n    address public rewardAddress;\\r\\n    address public feeAccount;\\r\\n    address public router;\\r\\n    address public wavax;\\r\\n\\r\\n    address public routerAddress = 0x13f4EA83D0bd40E75C8222255bc855a974568Dd4;\\r\\n    address public factoryAddress = 0x0BFbCF9fa4f9C56B0F40a671Ad40E0805A091865;\\r\\n    address public wbnbAddress = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;\\r\\n    uint24 poolFee = 100;\\r\\n\\r\\n    mapping(address => uint256) airdropAddress;\\r\\n    mapping(address => uint256) airdropLastTime;\\r\\n\\r\\n    constructor(\\r\\n        address _feeAccount,\\r\\n        address _router,\\r\\n        address _wavax,\\r\\n        address _rewardAddress\\r\\n    ) {\\r\\n        feeAccount = _feeAccount;\\r\\n        router = _router;\\r\\n        wavax = _wavax;\\r\\n        rewardAddress = _rewardAddress;\\r\\n    }\\r\\n\\r\\n    function airdrop() external {\\r\\n        require(\\r\\n            airdropAddress[msg.sender] + 86400 > block.timestamp,\\r\\n            \\\"You did not swap in 24 hours\\\"\\r\\n        );\\r\\n\\r\\n        require(\\r\\n            block.timestamp > airdropLastTime[msg.sender] + 86400,\\r\\n            \\\"You airdroped in 24 hours\\\"\\r\\n        );\\r\\n\\r\\n        IERC20(rewardAddress).safeTransfer(msg.sender, rewardAmount);\\r\\n        airdropLastTime[msg.sender] = block.timestamp;\\r\\n    }\\r\\n\\r\\n    function swapV2Tokens(\\r\\n        address _tokenA,\\r\\n        address _tokenB,\\r\\n        uint256 _amountIn\\r\\n    ) external payable {\\r\\n        airdropAddress[msg.sender] = block.timestamp;\\r\\n        address[] memory path = new address[](2);\\r\\n        if (_tokenA == address(0)) {\\r\\n            path[0] = wavax;\\r\\n            path[1] = _tokenB;\\r\\n        } else if (_tokenB == address(0)) {\\r\\n            path[0] = _tokenA;\\r\\n            path[1] = wavax;\\r\\n        } else {\\r\\n            path[0] = _tokenA;\\r\\n            path[1] = _tokenB;\\r\\n        }\\r\\n\\r\\n        _proceedToUniswap(_tokenA, _tokenB, _amountIn, path);\\r\\n    }\\r\\n\\r\\n    function customSwapTokens(\\r\\n        address _tokenA,\\r\\n        address _tokenB,\\r\\n        uint256 _amountIn,\\r\\n        address[] memory path\\r\\n    ) external payable {\\r\\n        if (_tokenA == address(0)) {\\r\\n            require(\\r\\n                wavax == path[0] && _tokenB == path[path.length - 1],\\r\\n                \\\"PattieSwap: Path must be specified\\\"\\r\\n            );\\r\\n        } else if (_tokenB == address(0)) {\\r\\n            require(\\r\\n                _tokenA == path[0] && wavax == path[path.length - 1],\\r\\n                \\\"PattieSwap: Path must be specified\\\"\\r\\n            );\\r\\n        } else {\\r\\n            require(\\r\\n                _tokenA == path[0] && _tokenB == path[path.length - 1],\\r\\n                \\\"PattieSwap: Path must be specified\\\"\\r\\n            );\\r\\n        }\\r\\n        _proceedToUniswap(_tokenA, _tokenB, _amountIn, path);\\r\\n    }\\r\\n\\r\\n    function _proceedToUniswap(\\r\\n        address _tokenA,\\r\\n        address _tokenB,\\r\\n        uint256 _amountIn,\\r\\n        address[] memory path\\r\\n    ) internal {\\r\\n        require(_amountIn > 0, \\\"PattieSwap: amountIn must be greater than 0\\\");\\r\\n\\r\\n        if (_tokenA == address(0)) {\\r\\n            require(_amountIn >= msg.value, \\\"PattieSwap: Insufficient ETH\\\");\\r\\n            uint fee = (_amountIn * feePercent) / 10000;\\r\\n            payable(feeAccount).transfer(fee);\\r\\n            uint amountToSwap = _amountIn - fee;\\r\\n            _swapAVAXForTokens(amountToSwap, path);\\r\\n        } else {\\r\\n            IERC20(_tokenA).safeTransferFrom(\\r\\n                msg.sender,\\r\\n                address(this),\\r\\n                _amountIn\\r\\n            );\\r\\n            uint fee = (_amountIn * feePercent) / 10000;\\r\\n            IERC20(_tokenA).safeTransfer(feeAccount, fee);\\r\\n            uint amountToSwap = _amountIn - fee;\\r\\n            _approve(_tokenA, amountToSwap);\\r\\n            if (_tokenB == address(0)) {\\r\\n                _swapTokensForAVAX(amountToSwap, path);\\r\\n            } else {\\r\\n                _swapTokensForTokens(amountToSwap, path);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _approve(address _token, uint _amount) internal {\\r\\n        IERC20(_token).approve(address(router), _amount);\\r\\n    }\\r\\n\\r\\n    function _swapTokensForAVAX(uint _amount, address[] memory path) internal {\\r\\n        IRouter(router).swapExactTokensForETH(\\r\\n            _amount,\\r\\n            0,\\r\\n            path,\\r\\n            msg.sender,\\r\\n            block.timestamp\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function _swapAVAXForTokens(uint _amount, address[] memory path) internal {\\r\\n        IRouter(router).swapExactETHForTokens{value: _amount}(\\r\\n            0,\\r\\n            path,\\r\\n            msg.sender,\\r\\n            block.timestamp\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function _swapTokensForTokens(\\r\\n        uint _amount,\\r\\n        address[] memory path\\r\\n    ) internal {\\r\\n        IRouter(router).swapExactTokensForTokens(\\r\\n            _amount,\\r\\n            0,\\r\\n            path,\\r\\n            msg.sender,\\r\\n            block.timestamp\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function _v3Approve(address _token, uint _amount) internal {\\r\\n        IERC20(_token).approve(address(routerAddress), _amount);\\r\\n    }\\r\\n\\r\\n    function getOutputTokenAmount(\\r\\n        uint inputAmount,\\r\\n        address[] memory path\\r\\n    ) external view returns (uint outputAmount) {\\r\\n        uint[] memory outputs = IRouter(router).getAmountsOut(\\r\\n            inputAmount,\\r\\n            path\\r\\n        );\\r\\n        return outputs[outputs.length - 1];\\r\\n    }\\r\\n\\r\\n    function getV3OutputTokenAmount(\\r\\n        uint256 _inputAmount,\\r\\n        address _tokenIn,\\r\\n        address _tokenOut\\r\\n    ) external view returns (uint outputAmount) {\\r\\n        uint256 slotReturnValue = 0;\\r\\n        address pairAddress = IPancakeV3Factory(factoryAddress).getPool(\\r\\n            _tokenIn,\\r\\n            _tokenOut,\\r\\n            poolFee\\r\\n        );\\r\\n        (slotReturnValue, , , , , , ) = IPancakeV3PoolState(pairAddress)\\r\\n            .slot0();\\r\\n        address token0 = IPancakeV3Pool(pairAddress).token0();\\r\\n        if (_tokenIn == token0)\\r\\n            outputAmount = ((slotReturnValue ** 2 * _inputAmount) / 2 ** 192);\\r\\n        else outputAmount = ((2 ** 192 * _inputAmount) / slotReturnValue ** 2);\\r\\n    }\\r\\n\\r\\n    function setFeePercent(uint _feePercent) external onlyOwner {\\r\\n        feePercent = _feePercent;\\r\\n    }\\r\\n\\r\\n    function setRewardAmount(uint256 _amount) external onlyOwner {\\r\\n        rewardAmount = _amount;\\r\\n    }\\r\\n\\r\\n    function setRewardToken(address _rewawrdAddress) external onlyOwner {\\r\\n        rewardAddress = _rewawrdAddress;\\r\\n    }\\r\\n\\r\\n    function setFeeAccount(address _feeAccount) external onlyOwner {\\r\\n        feeAccount = _feeAccount;\\r\\n    }\\r\\n\\r\\n    function setRouterWAVAX(\\r\\n        address _router,\\r\\n        address _wavax\\r\\n    ) external onlyOwner {\\r\\n        router = _router;\\r\\n        wavax = _wavax;\\r\\n    }\\r\\n\\r\\n    function emergencyWithdraw(\\r\\n        address _token,\\r\\n        uint _amount\\r\\n    ) external onlyOwner {\\r\\n        IERC20(_token).safeTransfer(msg.sender, _amount);\\r\\n    }\\r\\n\\r\\n    function emergencyWithdrawETH(uint _amount) external onlyOwner {\\r\\n        payable(owner()).transfer(_amount);\\r\\n    }\\r\\n\\r\\n    function swapTokens(\\r\\n        address _tokenIn,\\r\\n        address _tokenOut,\\r\\n        uint256 _amountIn\\r\\n    ) external payable {\\r\\n        airdropAddress[msg.sender] = block.timestamp;\\r\\n        IV3SwapRouter.ExactInputSingleParams memory params = IV3SwapRouter\\r\\n            .ExactInputSingleParams(\\r\\n                _tokenIn,\\r\\n                _tokenOut,\\r\\n                poolFee,\\r\\n                msg.sender,\\r\\n                _amountIn,\\r\\n                0,\\r\\n                0\\r\\n            );\\r\\n        if (_tokenIn == wbnbAddress)\\r\\n            IV3SwapRouter(routerAddress).exactInputSingle{value: msg.value}(\\r\\n                params\\r\\n            );\\r\\n        else {\\r\\n            IERC20(_tokenIn).safeTransferFrom(\\r\\n                msg.sender,\\r\\n                address(this),\\r\\n                _amountIn\\r\\n            );\\r\\n            _v3Approve(_tokenIn, _amountIn);\\r\\n            IV3SwapRouter(routerAddress).exactInputSingle{value: msg.value}(\\r\\n                params\\r\\n            );\\r\\n        }\\r\\n        IV3SwapRouter(routerAddress).refundETH();\\r\\n        // refund leftover ETH to user\\r\\n        (bool success, ) = msg.sender.call{value: address(this).balance}(\\\"\\\");\\r\\n        require(success, \\\"refund failed\\\");\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x014ebbd50111dbe2ffd46bfee0dca5b1dbbc4785ff10cb323cef7317398427ea\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/v3dex.sol":{"Address":{"abi":[],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212206883042f965ea4d3ac562320a3f048a54759c66dafdb3afdcb675f8c1295aae564736f6c63430008040033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH9 0x83042F965EA4D3AC56 0x23 KECCAK256 LOG3 CREATE 0x48 0xA5 SELFBALANCE MSIZE 0xC6 PUSH14 0xAFDB3AFDCB675F8C1295AAE56473 PUSH16 0x6C634300080400330000000000000000 ","sourceMap":"12538:8738:2:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;12538:8738:2;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212206883042f965ea4d3ac562320a3f048a54759c66dafdb3afdcb675f8c1295aae564736f6c63430008040033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH9 0x83042F965EA4D3AC56 0x23 KECCAK256 LOG3 CREATE 0x48 0xA5 SELFBALANCE MSIZE 0xC6 PUSH14 0xAFDB3AFDCB675F8C1295AAE56473 PUSH16 0x6C634300080400330000000000000000 ","sourceMap":"12538:8738:2:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"functionCall(address,bytes memory)":"infinite","functionCall(address,bytes memory,string memory)":"infinite","functionCallWithValue(address,bytes memory,uint256)":"infinite","functionCallWithValue(address,bytes memory,uint256,string memory)":"infinite","functionDelegateCall(address,bytes memory)":"infinite","functionDelegateCall(address,bytes memory,string memory)":"infinite","functionStaticCall(address,bytes memory)":"infinite","functionStaticCall(address,bytes memory,string memory)":"infinite","isContract(address)":"infinite","sendValue(address payable,uint256)":"infinite","verifyCallResult(bool,bytes memory,string memory)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/v3dex.sol\":\"Address\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/v3dex.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\n/// @title The interface for the PancakeSwap V3 Factory\\r\\n/// @notice The PancakeSwap V3 Factory facilitates creation of PancakeSwap V3 pools and control over the protocol fees\\r\\ninterface IPancakeV3Factory {\\r\\n    function getPool(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint24 fee\\r\\n    ) external view returns (address pool);\\r\\n}\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\ninterface IPancakeV3PoolState {\\r\\n    function slot0()\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            uint160 sqrtPriceX96,\\r\\n            int24 tick,\\r\\n            uint16 observationIndex,\\r\\n            uint16 observationCardinality,\\r\\n            uint16 observationCardinalityNext,\\r\\n            uint32 feeProtocol,\\r\\n            bool unlocked\\r\\n        );\\r\\n}\\r\\n\\r\\ninterface IPancakeV3PoolImmutables {\\r\\n    /// @notice The contract that deployed the pool, which must adhere to the IPancakeV3Factory interface\\r\\n    /// @return The contract address\\r\\n    function factory() external view returns (address);\\r\\n\\r\\n    /// @notice The first of the two tokens of the pool, sorted by address\\r\\n    /// @return The token contract address\\r\\n    function token0() external view returns (address);\\r\\n\\r\\n    /// @notice The second of the two tokens of the pool, sorted by address\\r\\n    /// @return The token contract address\\r\\n    function token1() external view returns (address);\\r\\n\\r\\n    /// @notice The pool's fee in hundredths of a bip, i.e. 1e-6\\r\\n    /// @return The fee\\r\\n    function fee() external view returns (uint24);\\r\\n\\r\\n    /// @notice The pool tick spacing\\r\\n    /// @dev Ticks can only be used at multiples of this value, minimum of 1 and always positive\\r\\n    /// e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ...\\r\\n    /// This value is an int24 to avoid casting even though it is always positive.\\r\\n    /// @return The tick spacing\\r\\n    function tickSpacing() external view returns (int24);\\r\\n\\r\\n    /// @notice The maximum amount of position liquidity that can use any tick in the range\\r\\n    /// @dev This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and\\r\\n    /// also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\\r\\n    /// @return The max amount of liquidity per tick\\r\\n    function maxLiquidityPerTick() external view returns (uint128);\\r\\n}\\r\\n\\r\\ninterface IPancakeV3Pool is IPancakeV3PoolState, IPancakeV3PoolImmutables {}\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Provides information about the current execution context, including the\\r\\n * sender of the transaction and its data. While these are generally available\\r\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\r\\n * manner, since when dealing with meta-transactions the account sending and\\r\\n * paying for execution may not be the actual sender (as far as an application\\r\\n * is concerned).\\r\\n *\\r\\n * This contract is only required for intermediate, library-like contracts.\\r\\n */\\r\\nabstract contract Context {\\r\\n    function _msgSender() internal view virtual returns (address) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view virtual returns (bytes calldata) {\\r\\n        return msg.data;\\r\\n    }\\r\\n}\\r\\n\\r\\n// File @openzeppelin/contracts/access/Ownable.sol@v4.6.0\\r\\n\\r\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Contract module which provides a basic access control mechanism, where\\r\\n * there is an account (an owner) that can be granted exclusive access to\\r\\n * specific functions.\\r\\n *\\r\\n * By default, the owner account will be the one that deploys the contract. This\\r\\n * can later be changed with {transferOwnership}.\\r\\n *\\r\\n * This module is used through inheritance. It will make available the modifier\\r\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\r\\n * the owner.\\r\\n */\\r\\nabstract contract Ownable is Context {\\r\\n    address private _owner;\\r\\n\\r\\n    event OwnershipTransferred(\\r\\n        address indexed previousOwner,\\r\\n        address indexed newOwner\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\r\\n     */\\r\\n    constructor() {\\r\\n        _transferOwnership(_msgSender());\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current owner.\\r\\n     */\\r\\n    function owner() public view virtual returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier onlyOwner() {\\r\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Leaves the contract without owner. It will not be possible to call\\r\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\r\\n     *\\r\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\r\\n     * thereby removing any functionality that is only available to the owner.\\r\\n     */\\r\\n    function renounceOwnership() public virtual onlyOwner {\\r\\n        _transferOwnership(address(0));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n        require(\\r\\n            newOwner != address(0),\\r\\n            \\\"Ownable: new owner is the zero address\\\"\\r\\n        );\\r\\n        _transferOwnership(newOwner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Internal function without access restriction.\\r\\n     */\\r\\n    function _transferOwnership(address newOwner) internal virtual {\\r\\n        address oldOwner = _owner;\\r\\n        _owner = newOwner;\\r\\n        emit OwnershipTransferred(oldOwner, newOwner);\\r\\n    }\\r\\n}\\r\\n\\r\\nlibrary SafeMath {\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryAdd(\\r\\n        uint256 a,\\r\\n        uint256 b\\r\\n    ) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            uint256 c = a + b;\\r\\n            if (c < a) return (false, 0);\\r\\n            return (true, c);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function trySub(\\r\\n        uint256 a,\\r\\n        uint256 b\\r\\n    ) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            if (b > a) return (false, 0);\\r\\n            return (true, a - b);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryMul(\\r\\n        uint256 a,\\r\\n        uint256 b\\r\\n    ) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\r\\n            // benefit is lost if 'b' is also tested.\\r\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\r\\n            if (a == 0) return (true, 0);\\r\\n            uint256 c = a * b;\\r\\n            if (c / a != b) return (false, 0);\\r\\n            return (true, c);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryDiv(\\r\\n        uint256 a,\\r\\n        uint256 b\\r\\n    ) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            if (b == 0) return (false, 0);\\r\\n            return (true, a / b);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryMod(\\r\\n        uint256 a,\\r\\n        uint256 b\\r\\n    ) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            if (b == 0) return (false, 0);\\r\\n            return (true, a % b);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity's `+` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Addition cannot overflow.\\r\\n     */\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a + b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity's `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a - b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity's `*` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Multiplication cannot overflow.\\r\\n     */\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a * b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `/` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a / b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * reverting when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a % b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\r\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\r\\n     *\\r\\n     * Counterpart to Solidity's `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            require(b <= a, errorMessage);\\r\\n            return a - b;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            require(b > 0, errorMessage);\\r\\n            return a / b;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * reverting with custom message when dividing by zero.\\r\\n     *\\r\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\r\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\r\\n     *\\r\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            require(b > 0, errorMessage);\\r\\n            return a % b;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\nlibrary Address {\\r\\n    /**\\r\\n     * @dev Returns true if `account` is a contract.\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * It is unsafe to assume that an address for which this function returns\\r\\n     * false is an externally-owned account (EOA) and not a contract.\\r\\n     *\\r\\n     * Among others, `isContract` will return false for the following\\r\\n     * types of addresses:\\r\\n     *\\r\\n     *  - an externally-owned account\\r\\n     *  - a contract in construction\\r\\n     *  - an address where a contract will be created\\r\\n     *  - an address where a contract lived, but was destroyed\\r\\n     * ====\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\r\\n     *\\r\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\r\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\r\\n     * constructor.\\r\\n     * ====\\r\\n     */\\r\\n    function isContract(address account) internal view returns (bool) {\\r\\n        // This method relies on extcodesize/address.code.length, which returns 0\\r\\n        // for contracts in construction, since the code is only stored at the end\\r\\n        // of the constructor execution.\\r\\n\\r\\n        return account.code.length > 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\r\\n     * `recipient`, forwarding all available gas and reverting on errors.\\r\\n     *\\r\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\r\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\r\\n     * imposed by `transfer`, making them unable to receive funds via\\r\\n     * `transfer`. {sendValue} removes this limitation.\\r\\n     *\\r\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\r\\n     *\\r\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\r\\n     * taken to not create reentrancy vulnerabilities. Consider using\\r\\n     * {ReentrancyGuard} or the\\r\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\r\\n     */\\r\\n    function sendValue(address payable recipient, uint256 amount) internal {\\r\\n        require(\\r\\n            address(this).balance >= amount,\\r\\n            \\\"Address: insufficient balance\\\"\\r\\n        );\\r\\n\\r\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\r\\n        require(\\r\\n            success,\\r\\n            \\\"Address: unable to send value, recipient may have reverted\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Performs a Solidity function call using a low level `call`. A\\r\\n     * plain `call` is an unsafe replacement for a function call: use this\\r\\n     * function instead.\\r\\n     *\\r\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\r\\n     * function (like regular Solidity function calls).\\r\\n     *\\r\\n     * Returns the raw returned data. To convert to the expected return value,\\r\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `target` must be a contract.\\r\\n     * - calling `target` with `data` must not revert.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(\\r\\n        address target,\\r\\n        bytes memory data\\r\\n    ) internal returns (bytes memory) {\\r\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\r\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, 0, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but also transferring `value` wei to `target`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the calling contract must have an ETH balance of at least `value`.\\r\\n     * - the called Solidity function must be `payable`.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        uint256 value\\r\\n    ) internal returns (bytes memory) {\\r\\n        return\\r\\n            functionCallWithValue(\\r\\n                target,\\r\\n                data,\\r\\n                value,\\r\\n                \\\"Address: low-level call with value failed\\\"\\r\\n            );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\r\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        uint256 value,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        require(\\r\\n            address(this).balance >= value,\\r\\n            \\\"Address: insufficient balance for call\\\"\\r\\n        );\\r\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\r\\n\\r\\n        (bool success, bytes memory returndata) = target.call{value: value}(\\r\\n            data\\r\\n        );\\r\\n        return verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(\\r\\n        address target,\\r\\n        bytes memory data\\r\\n    ) internal view returns (bytes memory) {\\r\\n        return\\r\\n            functionStaticCall(\\r\\n                target,\\r\\n                data,\\r\\n                \\\"Address: low-level static call failed\\\"\\r\\n            );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal view returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\r\\n\\r\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\r\\n        return verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function functionDelegateCall(\\r\\n        address target,\\r\\n        bytes memory data\\r\\n    ) internal returns (bytes memory) {\\r\\n        return\\r\\n            functionDelegateCall(\\r\\n                target,\\r\\n                data,\\r\\n                \\\"Address: low-level delegate call failed\\\"\\r\\n            );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function functionDelegateCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\r\\n\\r\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\r\\n        return verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\r\\n     * revert reason using the provided one.\\r\\n     *\\r\\n     * _Available since v4.3._\\r\\n     */\\r\\n    function verifyCallResult(\\r\\n        bool success,\\r\\n        bytes memory returndata,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (bytes memory) {\\r\\n        if (success) {\\r\\n            return returndata;\\r\\n        } else {\\r\\n            // Look for revert reason and bubble it up if present\\r\\n            if (returndata.length > 0) {\\r\\n                // The easiest way to bubble the revert reason is using memory via assembly\\r\\n\\r\\n                assembly {\\r\\n                    let returndata_size := mload(returndata)\\r\\n                    revert(add(32, returndata), returndata_size)\\r\\n                }\\r\\n            } else {\\r\\n                revert(errorMessage);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\ninterface IERC20 {\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(\\r\\n        address indexed owner,\\r\\n        address indexed spender,\\r\\n        uint256 value\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address to, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(\\r\\n        address owner,\\r\\n        address spender\\r\\n    ) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender's allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller's\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n}\\r\\n\\r\\nlibrary SafeERC20 {\\r\\n    using Address for address;\\r\\n\\r\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\r\\n        _callOptionalReturn(\\r\\n            token,\\r\\n            abi.encodeWithSelector(token.transfer.selector, to, value)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function safeTransferFrom(\\r\\n        IERC20 token,\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        _callOptionalReturn(\\r\\n            token,\\r\\n            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Deprecated. This function has issues similar to the ones found in\\r\\n     * {IERC20-approve}, and its usage is discouraged.\\r\\n     *\\r\\n     * Whenever possible, use {safeIncreaseAllowance} and\\r\\n     * {safeDecreaseAllowance} instead.\\r\\n     */\\r\\n    function safeApprove(\\r\\n        IERC20 token,\\r\\n        address spender,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        // safeApprove should only be called when setting an initial allowance,\\r\\n        // or when resetting it to zero. To increase and decrease it, use\\r\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\r\\n        require(\\r\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\r\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\r\\n        );\\r\\n        _callOptionalReturn(\\r\\n            token,\\r\\n            abi.encodeWithSelector(token.approve.selector, spender, value)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function safeIncreaseAllowance(\\r\\n        IERC20 token,\\r\\n        address spender,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\r\\n        _callOptionalReturn(\\r\\n            token,\\r\\n            abi.encodeWithSelector(\\r\\n                token.approve.selector,\\r\\n                spender,\\r\\n                newAllowance\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function safeDecreaseAllowance(\\r\\n        IERC20 token,\\r\\n        address spender,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        unchecked {\\r\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\r\\n            require(\\r\\n                oldAllowance >= value,\\r\\n                \\\"SafeERC20: decreased allowance below zero\\\"\\r\\n            );\\r\\n            uint256 newAllowance = oldAllowance - value;\\r\\n            _callOptionalReturn(\\r\\n                token,\\r\\n                abi.encodeWithSelector(\\r\\n                    token.approve.selector,\\r\\n                    spender,\\r\\n                    newAllowance\\r\\n                )\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\r\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\r\\n     * @param token The token targeted by the call.\\r\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\r\\n     */\\r\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\r\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\r\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\r\\n        // the target address contains contract code and also asserts for success in the low-level call.\\r\\n\\r\\n        bytes memory returndata = address(token).functionCall(\\r\\n            data,\\r\\n            \\\"SafeERC20: low-level call failed\\\"\\r\\n        );\\r\\n        if (returndata.length > 0) {\\r\\n            // Return data is optional\\r\\n            require(\\r\\n                abi.decode(returndata, (bool)),\\r\\n                \\\"SafeERC20: ERC20 operation did not succeed\\\"\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n}\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\n/// @title Callback for IPancakeV3PoolActions#swap\\r\\n/// @notice Any contract that calls IPancakeV3PoolActions#swap must implement this interface\\r\\ninterface IPancakeV3SwapCallback {\\r\\n    /// @notice Called to `msg.sender` after executing a swap via IPancakeV3Pool#swap.\\r\\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\\r\\n    /// The caller of this method must be checked to be a PancakeV3Pool deployed by the canonical PancakeV3Factory.\\r\\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\\r\\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\\r\\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\\r\\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\\r\\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\\r\\n    /// @param data Any data passed through by the caller via the IPancakeV3PoolActions#swap call\\r\\n    function pancakeV3SwapCallback(\\r\\n        int256 amount0Delta,\\r\\n        int256 amount1Delta,\\r\\n        bytes calldata data\\r\\n    ) external;\\r\\n}\\r\\n\\r\\ninterface IV3SwapRouter is IPancakeV3SwapCallback {\\r\\n    struct ExactInputSingleParams {\\r\\n        address tokenIn;\\r\\n        address tokenOut;\\r\\n        uint24 fee;\\r\\n        address recipient;\\r\\n        uint256 amountIn;\\r\\n        uint256 amountOutMinimum;\\r\\n        uint160 sqrtPriceLimitX96;\\r\\n    }\\r\\n\\r\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\\r\\n    /// @dev Setting `amountIn` to 0 will cause the contract to look up its own balance,\\r\\n    /// and swap the entire amount, enabling contracts to send tokens before calling this function.\\r\\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\\r\\n    /// @return amountOut The amount of the received token\\r\\n    function exactInputSingle(\\r\\n        ExactInputSingleParams calldata params\\r\\n    ) external payable returns (uint256 amountOut);\\r\\n\\r\\n    struct ExactInputParams {\\r\\n        bytes path;\\r\\n        address recipient;\\r\\n        uint256 amountIn;\\r\\n        uint256 amountOutMinimum;\\r\\n    }\\r\\n\\r\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\\r\\n    /// @dev Setting `amountIn` to 0 will cause the contract to look up its own balance,\\r\\n    /// and swap the entire amount, enabling contracts to send tokens before calling this function.\\r\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\\r\\n    /// @return amountOut The amount of the received token\\r\\n    function exactInput(\\r\\n        ExactInputParams calldata params\\r\\n    ) external payable returns (uint256 amountOut);\\r\\n\\r\\n    struct ExactOutputSingleParams {\\r\\n        address tokenIn;\\r\\n        address tokenOut;\\r\\n        uint24 fee;\\r\\n        address recipient;\\r\\n        uint256 amountOut;\\r\\n        uint256 amountInMaximum;\\r\\n        uint160 sqrtPriceLimitX96;\\r\\n    }\\r\\n\\r\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\\r\\n    /// that may remain in the router after the swap.\\r\\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\\r\\n    /// @return amountIn The amount of the input token\\r\\n    function exactOutputSingle(\\r\\n        ExactOutputSingleParams calldata params\\r\\n    ) external payable returns (uint256 amountIn);\\r\\n\\r\\n    struct ExactOutputParams {\\r\\n        bytes path;\\r\\n        address recipient;\\r\\n        uint256 amountOut;\\r\\n        uint256 amountInMaximum;\\r\\n    }\\r\\n\\r\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\\r\\n    /// that may remain in the router after the swap.\\r\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\\r\\n    /// @return amountIn The amount of the input token\\r\\n    function exactOutput(\\r\\n        ExactOutputParams calldata params\\r\\n    ) external payable returns (uint256 amountIn);\\r\\n\\r\\n     function refundETH() external payable;\\r\\n}\\r\\n\\r\\ncontract V3Swap {\\r\\n    using SafeMath for uint256;\\r\\n    using SafeERC20 for IERC20;\\r\\n    address public routerAddress = 0x13f4EA83D0bd40E75C8222255bc855a974568Dd4;\\r\\n    address public factoryAddress = 0x0BFbCF9fa4f9C56B0F40a671Ad40E0805A091865;\\r\\n    address public wbnbAddress = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;\\r\\n    uint24 fee = 100;\\r\\n\\r\\n    constructor() {}\\r\\n\\r\\n    function getOutputTokenAmount(\\r\\n        uint256 _inputAmount,\\r\\n        address _tokenIn,\\r\\n        address _tokenOut\\r\\n    ) external view returns (uint outputAmount) {\\r\\n        uint256 slotReturnValue = 0;\\r\\n        address pairAddress = IPancakeV3Factory(factoryAddress).getPool(\\r\\n            _tokenIn,\\r\\n            _tokenOut,\\r\\n            fee\\r\\n        );\\r\\n        (slotReturnValue, , , , , , ) = IPancakeV3PoolState(pairAddress)\\r\\n            .slot0();\\r\\n        address token0 = IPancakeV3Pool(pairAddress).token0();\\r\\n        if (_tokenIn == token0)\\r\\n            outputAmount = ((slotReturnValue ** 2 * _inputAmount) / 2 ** 192);\\r\\n        else outputAmount = ((2 ** 192 * _inputAmount) / slotReturnValue ** 2);\\r\\n    }\\r\\n\\r\\n    function _approve(address _token, uint _amount) internal {\\r\\n        IERC20(_token).approve(address(routerAddress), _amount);\\r\\n    }\\r\\n\\r\\n    function swapTokens(\\r\\n        address _tokenIn,\\r\\n        address _tokenOut,\\r\\n        uint256 _amountIn\\r\\n    ) external payable {\\r\\n        IV3SwapRouter.ExactInputSingleParams memory params = IV3SwapRouter\\r\\n            .ExactInputSingleParams(\\r\\n                _tokenIn,\\r\\n                _tokenOut,\\r\\n                fee,\\r\\n                msg.sender,\\r\\n                _amountIn,\\r\\n                0,\\r\\n                0\\r\\n            );\\r\\n        if (_tokenIn == wbnbAddress)\\r\\n            IV3SwapRouter(routerAddress).exactInputSingle{value: msg.value}(\\r\\n                params\\r\\n            );\\r\\n        else {\\r\\n            IERC20(_tokenIn).safeTransferFrom(\\r\\n                msg.sender,\\r\\n                address(this),\\r\\n                _amountIn\\r\\n            );\\r\\n            _approve(_tokenIn,_amountIn);\\r\\n            IV3SwapRouter(routerAddress).exactInputSingle{value: msg.value}(\\r\\n                params\\r\\n            );\\r\\n        }\\r\\n        IV3SwapRouter(routerAddress).refundETH();\\r\\n        // refund leftover ETH to user\\r\\n        (bool success, ) = msg.sender.call{value: address(this).balance}(\\\"\\\");\\r\\n        require(success, \\\"refund failed\\\");\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xfe6ba12da9fa1b1eff0ef756a0460141c1a57ef8bc48bc9baa89ccc88b4b0fb0\",\"license\":\"GPL-2.0-or-later\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}},"Context":{"abi":[],"devdoc":{"details":"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/v3dex.sol\":\"Context\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/v3dex.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\n/// @title The interface for the PancakeSwap V3 Factory\\r\\n/// @notice The PancakeSwap V3 Factory facilitates creation of PancakeSwap V3 pools and control over the protocol fees\\r\\ninterface IPancakeV3Factory {\\r\\n    function getPool(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint24 fee\\r\\n    ) external view returns (address pool);\\r\\n}\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\ninterface IPancakeV3PoolState {\\r\\n    function slot0()\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            uint160 sqrtPriceX96,\\r\\n            int24 tick,\\r\\n            uint16 observationIndex,\\r\\n            uint16 observationCardinality,\\r\\n            uint16 observationCardinalityNext,\\r\\n            uint32 feeProtocol,\\r\\n            bool unlocked\\r\\n        );\\r\\n}\\r\\n\\r\\ninterface IPancakeV3PoolImmutables {\\r\\n    /// @notice The contract that deployed the pool, which must adhere to the IPancakeV3Factory interface\\r\\n    /// @return The contract address\\r\\n    function factory() external view returns (address);\\r\\n\\r\\n    /// @notice The first of the two tokens of the pool, sorted by address\\r\\n    /// @return The token contract address\\r\\n    function token0() external view returns (address);\\r\\n\\r\\n    /// @notice The second of the two tokens of the pool, sorted by address\\r\\n    /// @return The token contract address\\r\\n    function token1() external view returns (address);\\r\\n\\r\\n    /// @notice The pool's fee in hundredths of a bip, i.e. 1e-6\\r\\n    /// @return The fee\\r\\n    function fee() external view returns (uint24);\\r\\n\\r\\n    /// @notice The pool tick spacing\\r\\n    /// @dev Ticks can only be used at multiples of this value, minimum of 1 and always positive\\r\\n    /// e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ...\\r\\n    /// This value is an int24 to avoid casting even though it is always positive.\\r\\n    /// @return The tick spacing\\r\\n    function tickSpacing() external view returns (int24);\\r\\n\\r\\n    /// @notice The maximum amount of position liquidity that can use any tick in the range\\r\\n    /// @dev This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and\\r\\n    /// also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\\r\\n    /// @return The max amount of liquidity per tick\\r\\n    function maxLiquidityPerTick() external view returns (uint128);\\r\\n}\\r\\n\\r\\ninterface IPancakeV3Pool is IPancakeV3PoolState, IPancakeV3PoolImmutables {}\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Provides information about the current execution context, including the\\r\\n * sender of the transaction and its data. While these are generally available\\r\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\r\\n * manner, since when dealing with meta-transactions the account sending and\\r\\n * paying for execution may not be the actual sender (as far as an application\\r\\n * is concerned).\\r\\n *\\r\\n * This contract is only required for intermediate, library-like contracts.\\r\\n */\\r\\nabstract contract Context {\\r\\n    function _msgSender() internal view virtual returns (address) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view virtual returns (bytes calldata) {\\r\\n        return msg.data;\\r\\n    }\\r\\n}\\r\\n\\r\\n// File @openzeppelin/contracts/access/Ownable.sol@v4.6.0\\r\\n\\r\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Contract module which provides a basic access control mechanism, where\\r\\n * there is an account (an owner) that can be granted exclusive access to\\r\\n * specific functions.\\r\\n *\\r\\n * By default, the owner account will be the one that deploys the contract. This\\r\\n * can later be changed with {transferOwnership}.\\r\\n *\\r\\n * This module is used through inheritance. It will make available the modifier\\r\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\r\\n * the owner.\\r\\n */\\r\\nabstract contract Ownable is Context {\\r\\n    address private _owner;\\r\\n\\r\\n    event OwnershipTransferred(\\r\\n        address indexed previousOwner,\\r\\n        address indexed newOwner\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\r\\n     */\\r\\n    constructor() {\\r\\n        _transferOwnership(_msgSender());\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current owner.\\r\\n     */\\r\\n    function owner() public view virtual returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier onlyOwner() {\\r\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Leaves the contract without owner. It will not be possible to call\\r\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\r\\n     *\\r\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\r\\n     * thereby removing any functionality that is only available to the owner.\\r\\n     */\\r\\n    function renounceOwnership() public virtual onlyOwner {\\r\\n        _transferOwnership(address(0));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n        require(\\r\\n            newOwner != address(0),\\r\\n            \\\"Ownable: new owner is the zero address\\\"\\r\\n        );\\r\\n        _transferOwnership(newOwner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Internal function without access restriction.\\r\\n     */\\r\\n    function _transferOwnership(address newOwner) internal virtual {\\r\\n        address oldOwner = _owner;\\r\\n        _owner = newOwner;\\r\\n        emit OwnershipTransferred(oldOwner, newOwner);\\r\\n    }\\r\\n}\\r\\n\\r\\nlibrary SafeMath {\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryAdd(\\r\\n        uint256 a,\\r\\n        uint256 b\\r\\n    ) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            uint256 c = a + b;\\r\\n            if (c < a) return (false, 0);\\r\\n            return (true, c);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function trySub(\\r\\n        uint256 a,\\r\\n        uint256 b\\r\\n    ) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            if (b > a) return (false, 0);\\r\\n            return (true, a - b);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryMul(\\r\\n        uint256 a,\\r\\n        uint256 b\\r\\n    ) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\r\\n            // benefit is lost if 'b' is also tested.\\r\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\r\\n            if (a == 0) return (true, 0);\\r\\n            uint256 c = a * b;\\r\\n            if (c / a != b) return (false, 0);\\r\\n            return (true, c);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryDiv(\\r\\n        uint256 a,\\r\\n        uint256 b\\r\\n    ) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            if (b == 0) return (false, 0);\\r\\n            return (true, a / b);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryMod(\\r\\n        uint256 a,\\r\\n        uint256 b\\r\\n    ) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            if (b == 0) return (false, 0);\\r\\n            return (true, a % b);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity's `+` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Addition cannot overflow.\\r\\n     */\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a + b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity's `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a - b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity's `*` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Multiplication cannot overflow.\\r\\n     */\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a * b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `/` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a / b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * reverting when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a % b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\r\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\r\\n     *\\r\\n     * Counterpart to Solidity's `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            require(b <= a, errorMessage);\\r\\n            return a - b;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            require(b > 0, errorMessage);\\r\\n            return a / b;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * reverting with custom message when dividing by zero.\\r\\n     *\\r\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\r\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\r\\n     *\\r\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            require(b > 0, errorMessage);\\r\\n            return a % b;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\nlibrary Address {\\r\\n    /**\\r\\n     * @dev Returns true if `account` is a contract.\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * It is unsafe to assume that an address for which this function returns\\r\\n     * false is an externally-owned account (EOA) and not a contract.\\r\\n     *\\r\\n     * Among others, `isContract` will return false for the following\\r\\n     * types of addresses:\\r\\n     *\\r\\n     *  - an externally-owned account\\r\\n     *  - a contract in construction\\r\\n     *  - an address where a contract will be created\\r\\n     *  - an address where a contract lived, but was destroyed\\r\\n     * ====\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\r\\n     *\\r\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\r\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\r\\n     * constructor.\\r\\n     * ====\\r\\n     */\\r\\n    function isContract(address account) internal view returns (bool) {\\r\\n        // This method relies on extcodesize/address.code.length, which returns 0\\r\\n        // for contracts in construction, since the code is only stored at the end\\r\\n        // of the constructor execution.\\r\\n\\r\\n        return account.code.length > 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\r\\n     * `recipient`, forwarding all available gas and reverting on errors.\\r\\n     *\\r\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\r\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\r\\n     * imposed by `transfer`, making them unable to receive funds via\\r\\n     * `transfer`. {sendValue} removes this limitation.\\r\\n     *\\r\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\r\\n     *\\r\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\r\\n     * taken to not create reentrancy vulnerabilities. Consider using\\r\\n     * {ReentrancyGuard} or the\\r\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\r\\n     */\\r\\n    function sendValue(address payable recipient, uint256 amount) internal {\\r\\n        require(\\r\\n            address(this).balance >= amount,\\r\\n            \\\"Address: insufficient balance\\\"\\r\\n        );\\r\\n\\r\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\r\\n        require(\\r\\n            success,\\r\\n            \\\"Address: unable to send value, recipient may have reverted\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Performs a Solidity function call using a low level `call`. A\\r\\n     * plain `call` is an unsafe replacement for a function call: use this\\r\\n     * function instead.\\r\\n     *\\r\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\r\\n     * function (like regular Solidity function calls).\\r\\n     *\\r\\n     * Returns the raw returned data. To convert to the expected return value,\\r\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `target` must be a contract.\\r\\n     * - calling `target` with `data` must not revert.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(\\r\\n        address target,\\r\\n        bytes memory data\\r\\n    ) internal returns (bytes memory) {\\r\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\r\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, 0, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but also transferring `value` wei to `target`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the calling contract must have an ETH balance of at least `value`.\\r\\n     * - the called Solidity function must be `payable`.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        uint256 value\\r\\n    ) internal returns (bytes memory) {\\r\\n        return\\r\\n            functionCallWithValue(\\r\\n                target,\\r\\n                data,\\r\\n                value,\\r\\n                \\\"Address: low-level call with value failed\\\"\\r\\n            );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\r\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        uint256 value,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        require(\\r\\n            address(this).balance >= value,\\r\\n            \\\"Address: insufficient balance for call\\\"\\r\\n        );\\r\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\r\\n\\r\\n        (bool success, bytes memory returndata) = target.call{value: value}(\\r\\n            data\\r\\n        );\\r\\n        return verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(\\r\\n        address target,\\r\\n        bytes memory data\\r\\n    ) internal view returns (bytes memory) {\\r\\n        return\\r\\n            functionStaticCall(\\r\\n                target,\\r\\n                data,\\r\\n                \\\"Address: low-level static call failed\\\"\\r\\n            );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal view returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\r\\n\\r\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\r\\n        return verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function functionDelegateCall(\\r\\n        address target,\\r\\n        bytes memory data\\r\\n    ) internal returns (bytes memory) {\\r\\n        return\\r\\n            functionDelegateCall(\\r\\n                target,\\r\\n                data,\\r\\n                \\\"Address: low-level delegate call failed\\\"\\r\\n            );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function functionDelegateCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\r\\n\\r\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\r\\n        return verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\r\\n     * revert reason using the provided one.\\r\\n     *\\r\\n     * _Available since v4.3._\\r\\n     */\\r\\n    function verifyCallResult(\\r\\n        bool success,\\r\\n        bytes memory returndata,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (bytes memory) {\\r\\n        if (success) {\\r\\n            return returndata;\\r\\n        } else {\\r\\n            // Look for revert reason and bubble it up if present\\r\\n            if (returndata.length > 0) {\\r\\n                // The easiest way to bubble the revert reason is using memory via assembly\\r\\n\\r\\n                assembly {\\r\\n                    let returndata_size := mload(returndata)\\r\\n                    revert(add(32, returndata), returndata_size)\\r\\n                }\\r\\n            } else {\\r\\n                revert(errorMessage);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\ninterface IERC20 {\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(\\r\\n        address indexed owner,\\r\\n        address indexed spender,\\r\\n        uint256 value\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address to, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(\\r\\n        address owner,\\r\\n        address spender\\r\\n    ) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender's allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller's\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n}\\r\\n\\r\\nlibrary SafeERC20 {\\r\\n    using Address for address;\\r\\n\\r\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\r\\n        _callOptionalReturn(\\r\\n            token,\\r\\n            abi.encodeWithSelector(token.transfer.selector, to, value)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function safeTransferFrom(\\r\\n        IERC20 token,\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        _callOptionalReturn(\\r\\n            token,\\r\\n            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Deprecated. This function has issues similar to the ones found in\\r\\n     * {IERC20-approve}, and its usage is discouraged.\\r\\n     *\\r\\n     * Whenever possible, use {safeIncreaseAllowance} and\\r\\n     * {safeDecreaseAllowance} instead.\\r\\n     */\\r\\n    function safeApprove(\\r\\n        IERC20 token,\\r\\n        address spender,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        // safeApprove should only be called when setting an initial allowance,\\r\\n        // or when resetting it to zero. To increase and decrease it, use\\r\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\r\\n        require(\\r\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\r\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\r\\n        );\\r\\n        _callOptionalReturn(\\r\\n            token,\\r\\n            abi.encodeWithSelector(token.approve.selector, spender, value)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function safeIncreaseAllowance(\\r\\n        IERC20 token,\\r\\n        address spender,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\r\\n        _callOptionalReturn(\\r\\n            token,\\r\\n            abi.encodeWithSelector(\\r\\n                token.approve.selector,\\r\\n                spender,\\r\\n                newAllowance\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function safeDecreaseAllowance(\\r\\n        IERC20 token,\\r\\n        address spender,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        unchecked {\\r\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\r\\n            require(\\r\\n                oldAllowance >= value,\\r\\n                \\\"SafeERC20: decreased allowance below zero\\\"\\r\\n            );\\r\\n            uint256 newAllowance = oldAllowance - value;\\r\\n            _callOptionalReturn(\\r\\n                token,\\r\\n                abi.encodeWithSelector(\\r\\n                    token.approve.selector,\\r\\n                    spender,\\r\\n                    newAllowance\\r\\n                )\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\r\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\r\\n     * @param token The token targeted by the call.\\r\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\r\\n     */\\r\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\r\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\r\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\r\\n        // the target address contains contract code and also asserts for success in the low-level call.\\r\\n\\r\\n        bytes memory returndata = address(token).functionCall(\\r\\n            data,\\r\\n            \\\"SafeERC20: low-level call failed\\\"\\r\\n        );\\r\\n        if (returndata.length > 0) {\\r\\n            // Return data is optional\\r\\n            require(\\r\\n                abi.decode(returndata, (bool)),\\r\\n                \\\"SafeERC20: ERC20 operation did not succeed\\\"\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n}\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\n/// @title Callback for IPancakeV3PoolActions#swap\\r\\n/// @notice Any contract that calls IPancakeV3PoolActions#swap must implement this interface\\r\\ninterface IPancakeV3SwapCallback {\\r\\n    /// @notice Called to `msg.sender` after executing a swap via IPancakeV3Pool#swap.\\r\\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\\r\\n    /// The caller of this method must be checked to be a PancakeV3Pool deployed by the canonical PancakeV3Factory.\\r\\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\\r\\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\\r\\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\\r\\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\\r\\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\\r\\n    /// @param data Any data passed through by the caller via the IPancakeV3PoolActions#swap call\\r\\n    function pancakeV3SwapCallback(\\r\\n        int256 amount0Delta,\\r\\n        int256 amount1Delta,\\r\\n        bytes calldata data\\r\\n    ) external;\\r\\n}\\r\\n\\r\\ninterface IV3SwapRouter is IPancakeV3SwapCallback {\\r\\n    struct ExactInputSingleParams {\\r\\n        address tokenIn;\\r\\n        address tokenOut;\\r\\n        uint24 fee;\\r\\n        address recipient;\\r\\n        uint256 amountIn;\\r\\n        uint256 amountOutMinimum;\\r\\n        uint160 sqrtPriceLimitX96;\\r\\n    }\\r\\n\\r\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\\r\\n    /// @dev Setting `amountIn` to 0 will cause the contract to look up its own balance,\\r\\n    /// and swap the entire amount, enabling contracts to send tokens before calling this function.\\r\\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\\r\\n    /// @return amountOut The amount of the received token\\r\\n    function exactInputSingle(\\r\\n        ExactInputSingleParams calldata params\\r\\n    ) external payable returns (uint256 amountOut);\\r\\n\\r\\n    struct ExactInputParams {\\r\\n        bytes path;\\r\\n        address recipient;\\r\\n        uint256 amountIn;\\r\\n        uint256 amountOutMinimum;\\r\\n    }\\r\\n\\r\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\\r\\n    /// @dev Setting `amountIn` to 0 will cause the contract to look up its own balance,\\r\\n    /// and swap the entire amount, enabling contracts to send tokens before calling this function.\\r\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\\r\\n    /// @return amountOut The amount of the received token\\r\\n    function exactInput(\\r\\n        ExactInputParams calldata params\\r\\n    ) external payable returns (uint256 amountOut);\\r\\n\\r\\n    struct ExactOutputSingleParams {\\r\\n        address tokenIn;\\r\\n        address tokenOut;\\r\\n        uint24 fee;\\r\\n        address recipient;\\r\\n        uint256 amountOut;\\r\\n        uint256 amountInMaximum;\\r\\n        uint160 sqrtPriceLimitX96;\\r\\n    }\\r\\n\\r\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\\r\\n    /// that may remain in the router after the swap.\\r\\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\\r\\n    /// @return amountIn The amount of the input token\\r\\n    function exactOutputSingle(\\r\\n        ExactOutputSingleParams calldata params\\r\\n    ) external payable returns (uint256 amountIn);\\r\\n\\r\\n    struct ExactOutputParams {\\r\\n        bytes path;\\r\\n        address recipient;\\r\\n        uint256 amountOut;\\r\\n        uint256 amountInMaximum;\\r\\n    }\\r\\n\\r\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\\r\\n    /// that may remain in the router after the swap.\\r\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\\r\\n    /// @return amountIn The amount of the input token\\r\\n    function exactOutput(\\r\\n        ExactOutputParams calldata params\\r\\n    ) external payable returns (uint256 amountIn);\\r\\n\\r\\n     function refundETH() external payable;\\r\\n}\\r\\n\\r\\ncontract V3Swap {\\r\\n    using SafeMath for uint256;\\r\\n    using SafeERC20 for IERC20;\\r\\n    address public routerAddress = 0x13f4EA83D0bd40E75C8222255bc855a974568Dd4;\\r\\n    address public factoryAddress = 0x0BFbCF9fa4f9C56B0F40a671Ad40E0805A091865;\\r\\n    address public wbnbAddress = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;\\r\\n    uint24 fee = 100;\\r\\n\\r\\n    constructor() {}\\r\\n\\r\\n    function getOutputTokenAmount(\\r\\n        uint256 _inputAmount,\\r\\n        address _tokenIn,\\r\\n        address _tokenOut\\r\\n    ) external view returns (uint outputAmount) {\\r\\n        uint256 slotReturnValue = 0;\\r\\n        address pairAddress = IPancakeV3Factory(factoryAddress).getPool(\\r\\n            _tokenIn,\\r\\n            _tokenOut,\\r\\n            fee\\r\\n        );\\r\\n        (slotReturnValue, , , , , , ) = IPancakeV3PoolState(pairAddress)\\r\\n            .slot0();\\r\\n        address token0 = IPancakeV3Pool(pairAddress).token0();\\r\\n        if (_tokenIn == token0)\\r\\n            outputAmount = ((slotReturnValue ** 2 * _inputAmount) / 2 ** 192);\\r\\n        else outputAmount = ((2 ** 192 * _inputAmount) / slotReturnValue ** 2);\\r\\n    }\\r\\n\\r\\n    function _approve(address _token, uint _amount) internal {\\r\\n        IERC20(_token).approve(address(routerAddress), _amount);\\r\\n    }\\r\\n\\r\\n    function swapTokens(\\r\\n        address _tokenIn,\\r\\n        address _tokenOut,\\r\\n        uint256 _amountIn\\r\\n    ) external payable {\\r\\n        IV3SwapRouter.ExactInputSingleParams memory params = IV3SwapRouter\\r\\n            .ExactInputSingleParams(\\r\\n                _tokenIn,\\r\\n                _tokenOut,\\r\\n                fee,\\r\\n                msg.sender,\\r\\n                _amountIn,\\r\\n                0,\\r\\n                0\\r\\n            );\\r\\n        if (_tokenIn == wbnbAddress)\\r\\n            IV3SwapRouter(routerAddress).exactInputSingle{value: msg.value}(\\r\\n                params\\r\\n            );\\r\\n        else {\\r\\n            IERC20(_tokenIn).safeTransferFrom(\\r\\n                msg.sender,\\r\\n                address(this),\\r\\n                _amountIn\\r\\n            );\\r\\n            _approve(_tokenIn,_amountIn);\\r\\n            IV3SwapRouter(routerAddress).exactInputSingle{value: msg.value}(\\r\\n                params\\r\\n            );\\r\\n        }\\r\\n        IV3SwapRouter(routerAddress).refundETH();\\r\\n        // refund leftover ETH to user\\r\\n        (bool success, ) = msg.sender.call{value: address(this).balance}(\\\"\\\");\\r\\n        require(success, \\\"refund failed\\\");\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xfe6ba12da9fa1b1eff0ef756a0460141c1a57ef8bc48bc9baa89ccc88b4b0fb0\",\"license\":\"GPL-2.0-or-later\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}},"IERC20":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"events":{"Approval(address,address,uint256)":{"details":"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."},"Transfer(address,address,uint256)":{"details":"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."}},"kind":"dev","methods":{"allowance(address,address)":{"details":"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."},"approve(address,uint256)":{"details":"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."},"balanceOf(address)":{"details":"Returns the amount of tokens owned by `account`."},"totalSupply()":{"details":"Returns the amount of tokens in existence."},"transfer(address,uint256)":{"details":"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."},"transferFrom(address,address,uint256)":{"details":"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."}},"version":1},"evm":{"bytecode":{"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","totalSupply()":"18160ddd","transfer(address,uint256)":"a9059cbb","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/v3dex.sol\":\"IERC20\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/v3dex.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\n/// @title The interface for the PancakeSwap V3 Factory\\r\\n/// @notice The PancakeSwap V3 Factory facilitates creation of PancakeSwap V3 pools and control over the protocol fees\\r\\ninterface IPancakeV3Factory {\\r\\n    function getPool(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint24 fee\\r\\n    ) external view returns (address pool);\\r\\n}\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\ninterface IPancakeV3PoolState {\\r\\n    function slot0()\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            uint160 sqrtPriceX96,\\r\\n            int24 tick,\\r\\n            uint16 observationIndex,\\r\\n            uint16 observationCardinality,\\r\\n            uint16 observationCardinalityNext,\\r\\n            uint32 feeProtocol,\\r\\n            bool unlocked\\r\\n        );\\r\\n}\\r\\n\\r\\ninterface IPancakeV3PoolImmutables {\\r\\n    /// @notice The contract that deployed the pool, which must adhere to the IPancakeV3Factory interface\\r\\n    /// @return The contract address\\r\\n    function factory() external view returns (address);\\r\\n\\r\\n    /// @notice The first of the two tokens of the pool, sorted by address\\r\\n    /// @return The token contract address\\r\\n    function token0() external view returns (address);\\r\\n\\r\\n    /// @notice The second of the two tokens of the pool, sorted by address\\r\\n    /// @return The token contract address\\r\\n    function token1() external view returns (address);\\r\\n\\r\\n    /// @notice The pool's fee in hundredths of a bip, i.e. 1e-6\\r\\n    /// @return The fee\\r\\n    function fee() external view returns (uint24);\\r\\n\\r\\n    /// @notice The pool tick spacing\\r\\n    /// @dev Ticks can only be used at multiples of this value, minimum of 1 and always positive\\r\\n    /// e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ...\\r\\n    /// This value is an int24 to avoid casting even though it is always positive.\\r\\n    /// @return The tick spacing\\r\\n    function tickSpacing() external view returns (int24);\\r\\n\\r\\n    /// @notice The maximum amount of position liquidity that can use any tick in the range\\r\\n    /// @dev This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and\\r\\n    /// also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\\r\\n    /// @return The max amount of liquidity per tick\\r\\n    function maxLiquidityPerTick() external view returns (uint128);\\r\\n}\\r\\n\\r\\ninterface IPancakeV3Pool is IPancakeV3PoolState, IPancakeV3PoolImmutables {}\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Provides information about the current execution context, including the\\r\\n * sender of the transaction and its data. While these are generally available\\r\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\r\\n * manner, since when dealing with meta-transactions the account sending and\\r\\n * paying for execution may not be the actual sender (as far as an application\\r\\n * is concerned).\\r\\n *\\r\\n * This contract is only required for intermediate, library-like contracts.\\r\\n */\\r\\nabstract contract Context {\\r\\n    function _msgSender() internal view virtual returns (address) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view virtual returns (bytes calldata) {\\r\\n        return msg.data;\\r\\n    }\\r\\n}\\r\\n\\r\\n// File @openzeppelin/contracts/access/Ownable.sol@v4.6.0\\r\\n\\r\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Contract module which provides a basic access control mechanism, where\\r\\n * there is an account (an owner) that can be granted exclusive access to\\r\\n * specific functions.\\r\\n *\\r\\n * By default, the owner account will be the one that deploys the contract. This\\r\\n * can later be changed with {transferOwnership}.\\r\\n *\\r\\n * This module is used through inheritance. It will make available the modifier\\r\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\r\\n * the owner.\\r\\n */\\r\\nabstract contract Ownable is Context {\\r\\n    address private _owner;\\r\\n\\r\\n    event OwnershipTransferred(\\r\\n        address indexed previousOwner,\\r\\n        address indexed newOwner\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\r\\n     */\\r\\n    constructor() {\\r\\n        _transferOwnership(_msgSender());\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current owner.\\r\\n     */\\r\\n    function owner() public view virtual returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier onlyOwner() {\\r\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Leaves the contract without owner. It will not be possible to call\\r\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\r\\n     *\\r\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\r\\n     * thereby removing any functionality that is only available to the owner.\\r\\n     */\\r\\n    function renounceOwnership() public virtual onlyOwner {\\r\\n        _transferOwnership(address(0));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n        require(\\r\\n            newOwner != address(0),\\r\\n            \\\"Ownable: new owner is the zero address\\\"\\r\\n        );\\r\\n        _transferOwnership(newOwner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Internal function without access restriction.\\r\\n     */\\r\\n    function _transferOwnership(address newOwner) internal virtual {\\r\\n        address oldOwner = _owner;\\r\\n        _owner = newOwner;\\r\\n        emit OwnershipTransferred(oldOwner, newOwner);\\r\\n    }\\r\\n}\\r\\n\\r\\nlibrary SafeMath {\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryAdd(\\r\\n        uint256 a,\\r\\n        uint256 b\\r\\n    ) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            uint256 c = a + b;\\r\\n            if (c < a) return (false, 0);\\r\\n            return (true, c);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function trySub(\\r\\n        uint256 a,\\r\\n        uint256 b\\r\\n    ) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            if (b > a) return (false, 0);\\r\\n            return (true, a - b);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryMul(\\r\\n        uint256 a,\\r\\n        uint256 b\\r\\n    ) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\r\\n            // benefit is lost if 'b' is also tested.\\r\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\r\\n            if (a == 0) return (true, 0);\\r\\n            uint256 c = a * b;\\r\\n            if (c / a != b) return (false, 0);\\r\\n            return (true, c);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryDiv(\\r\\n        uint256 a,\\r\\n        uint256 b\\r\\n    ) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            if (b == 0) return (false, 0);\\r\\n            return (true, a / b);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryMod(\\r\\n        uint256 a,\\r\\n        uint256 b\\r\\n    ) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            if (b == 0) return (false, 0);\\r\\n            return (true, a % b);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity's `+` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Addition cannot overflow.\\r\\n     */\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a + b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity's `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a - b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity's `*` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Multiplication cannot overflow.\\r\\n     */\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a * b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `/` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a / b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * reverting when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a % b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\r\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\r\\n     *\\r\\n     * Counterpart to Solidity's `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            require(b <= a, errorMessage);\\r\\n            return a - b;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            require(b > 0, errorMessage);\\r\\n            return a / b;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * reverting with custom message when dividing by zero.\\r\\n     *\\r\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\r\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\r\\n     *\\r\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            require(b > 0, errorMessage);\\r\\n            return a % b;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\nlibrary Address {\\r\\n    /**\\r\\n     * @dev Returns true if `account` is a contract.\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * It is unsafe to assume that an address for which this function returns\\r\\n     * false is an externally-owned account (EOA) and not a contract.\\r\\n     *\\r\\n     * Among others, `isContract` will return false for the following\\r\\n     * types of addresses:\\r\\n     *\\r\\n     *  - an externally-owned account\\r\\n     *  - a contract in construction\\r\\n     *  - an address where a contract will be created\\r\\n     *  - an address where a contract lived, but was destroyed\\r\\n     * ====\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\r\\n     *\\r\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\r\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\r\\n     * constructor.\\r\\n     * ====\\r\\n     */\\r\\n    function isContract(address account) internal view returns (bool) {\\r\\n        // This method relies on extcodesize/address.code.length, which returns 0\\r\\n        // for contracts in construction, since the code is only stored at the end\\r\\n        // of the constructor execution.\\r\\n\\r\\n        return account.code.length > 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\r\\n     * `recipient`, forwarding all available gas and reverting on errors.\\r\\n     *\\r\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\r\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\r\\n     * imposed by `transfer`, making them unable to receive funds via\\r\\n     * `transfer`. {sendValue} removes this limitation.\\r\\n     *\\r\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\r\\n     *\\r\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\r\\n     * taken to not create reentrancy vulnerabilities. Consider using\\r\\n     * {ReentrancyGuard} or the\\r\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\r\\n     */\\r\\n    function sendValue(address payable recipient, uint256 amount) internal {\\r\\n        require(\\r\\n            address(this).balance >= amount,\\r\\n            \\\"Address: insufficient balance\\\"\\r\\n        );\\r\\n\\r\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\r\\n        require(\\r\\n            success,\\r\\n            \\\"Address: unable to send value, recipient may have reverted\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Performs a Solidity function call using a low level `call`. A\\r\\n     * plain `call` is an unsafe replacement for a function call: use this\\r\\n     * function instead.\\r\\n     *\\r\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\r\\n     * function (like regular Solidity function calls).\\r\\n     *\\r\\n     * Returns the raw returned data. To convert to the expected return value,\\r\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `target` must be a contract.\\r\\n     * - calling `target` with `data` must not revert.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(\\r\\n        address target,\\r\\n        bytes memory data\\r\\n    ) internal returns (bytes memory) {\\r\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\r\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, 0, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but also transferring `value` wei to `target`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the calling contract must have an ETH balance of at least `value`.\\r\\n     * - the called Solidity function must be `payable`.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        uint256 value\\r\\n    ) internal returns (bytes memory) {\\r\\n        return\\r\\n            functionCallWithValue(\\r\\n                target,\\r\\n                data,\\r\\n                value,\\r\\n                \\\"Address: low-level call with value failed\\\"\\r\\n            );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\r\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        uint256 value,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        require(\\r\\n            address(this).balance >= value,\\r\\n            \\\"Address: insufficient balance for call\\\"\\r\\n        );\\r\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\r\\n\\r\\n        (bool success, bytes memory returndata) = target.call{value: value}(\\r\\n            data\\r\\n        );\\r\\n        return verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(\\r\\n        address target,\\r\\n        bytes memory data\\r\\n    ) internal view returns (bytes memory) {\\r\\n        return\\r\\n            functionStaticCall(\\r\\n                target,\\r\\n                data,\\r\\n                \\\"Address: low-level static call failed\\\"\\r\\n            );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal view returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\r\\n\\r\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\r\\n        return verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function functionDelegateCall(\\r\\n        address target,\\r\\n        bytes memory data\\r\\n    ) internal returns (bytes memory) {\\r\\n        return\\r\\n            functionDelegateCall(\\r\\n                target,\\r\\n                data,\\r\\n                \\\"Address: low-level delegate call failed\\\"\\r\\n            );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function functionDelegateCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\r\\n\\r\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\r\\n        return verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\r\\n     * revert reason using the provided one.\\r\\n     *\\r\\n     * _Available since v4.3._\\r\\n     */\\r\\n    function verifyCallResult(\\r\\n        bool success,\\r\\n        bytes memory returndata,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (bytes memory) {\\r\\n        if (success) {\\r\\n            return returndata;\\r\\n        } else {\\r\\n            // Look for revert reason and bubble it up if present\\r\\n            if (returndata.length > 0) {\\r\\n                // The easiest way to bubble the revert reason is using memory via assembly\\r\\n\\r\\n                assembly {\\r\\n                    let returndata_size := mload(returndata)\\r\\n                    revert(add(32, returndata), returndata_size)\\r\\n                }\\r\\n            } else {\\r\\n                revert(errorMessage);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\ninterface IERC20 {\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(\\r\\n        address indexed owner,\\r\\n        address indexed spender,\\r\\n        uint256 value\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address to, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(\\r\\n        address owner,\\r\\n        address spender\\r\\n    ) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender's allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller's\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n}\\r\\n\\r\\nlibrary SafeERC20 {\\r\\n    using Address for address;\\r\\n\\r\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\r\\n        _callOptionalReturn(\\r\\n            token,\\r\\n            abi.encodeWithSelector(token.transfer.selector, to, value)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function safeTransferFrom(\\r\\n        IERC20 token,\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        _callOptionalReturn(\\r\\n            token,\\r\\n            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Deprecated. This function has issues similar to the ones found in\\r\\n     * {IERC20-approve}, and its usage is discouraged.\\r\\n     *\\r\\n     * Whenever possible, use {safeIncreaseAllowance} and\\r\\n     * {safeDecreaseAllowance} instead.\\r\\n     */\\r\\n    function safeApprove(\\r\\n        IERC20 token,\\r\\n        address spender,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        // safeApprove should only be called when setting an initial allowance,\\r\\n        // or when resetting it to zero. To increase and decrease it, use\\r\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\r\\n        require(\\r\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\r\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\r\\n        );\\r\\n        _callOptionalReturn(\\r\\n            token,\\r\\n            abi.encodeWithSelector(token.approve.selector, spender, value)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function safeIncreaseAllowance(\\r\\n        IERC20 token,\\r\\n        address spender,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\r\\n        _callOptionalReturn(\\r\\n            token,\\r\\n            abi.encodeWithSelector(\\r\\n                token.approve.selector,\\r\\n                spender,\\r\\n                newAllowance\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function safeDecreaseAllowance(\\r\\n        IERC20 token,\\r\\n        address spender,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        unchecked {\\r\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\r\\n            require(\\r\\n                oldAllowance >= value,\\r\\n                \\\"SafeERC20: decreased allowance below zero\\\"\\r\\n            );\\r\\n            uint256 newAllowance = oldAllowance - value;\\r\\n            _callOptionalReturn(\\r\\n                token,\\r\\n                abi.encodeWithSelector(\\r\\n                    token.approve.selector,\\r\\n                    spender,\\r\\n                    newAllowance\\r\\n                )\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\r\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\r\\n     * @param token The token targeted by the call.\\r\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\r\\n     */\\r\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\r\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\r\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\r\\n        // the target address contains contract code and also asserts for success in the low-level call.\\r\\n\\r\\n        bytes memory returndata = address(token).functionCall(\\r\\n            data,\\r\\n            \\\"SafeERC20: low-level call failed\\\"\\r\\n        );\\r\\n        if (returndata.length > 0) {\\r\\n            // Return data is optional\\r\\n            require(\\r\\n                abi.decode(returndata, (bool)),\\r\\n                \\\"SafeERC20: ERC20 operation did not succeed\\\"\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n}\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\n/// @title Callback for IPancakeV3PoolActions#swap\\r\\n/// @notice Any contract that calls IPancakeV3PoolActions#swap must implement this interface\\r\\ninterface IPancakeV3SwapCallback {\\r\\n    /// @notice Called to `msg.sender` after executing a swap via IPancakeV3Pool#swap.\\r\\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\\r\\n    /// The caller of this method must be checked to be a PancakeV3Pool deployed by the canonical PancakeV3Factory.\\r\\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\\r\\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\\r\\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\\r\\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\\r\\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\\r\\n    /// @param data Any data passed through by the caller via the IPancakeV3PoolActions#swap call\\r\\n    function pancakeV3SwapCallback(\\r\\n        int256 amount0Delta,\\r\\n        int256 amount1Delta,\\r\\n        bytes calldata data\\r\\n    ) external;\\r\\n}\\r\\n\\r\\ninterface IV3SwapRouter is IPancakeV3SwapCallback {\\r\\n    struct ExactInputSingleParams {\\r\\n        address tokenIn;\\r\\n        address tokenOut;\\r\\n        uint24 fee;\\r\\n        address recipient;\\r\\n        uint256 amountIn;\\r\\n        uint256 amountOutMinimum;\\r\\n        uint160 sqrtPriceLimitX96;\\r\\n    }\\r\\n\\r\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\\r\\n    /// @dev Setting `amountIn` to 0 will cause the contract to look up its own balance,\\r\\n    /// and swap the entire amount, enabling contracts to send tokens before calling this function.\\r\\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\\r\\n    /// @return amountOut The amount of the received token\\r\\n    function exactInputSingle(\\r\\n        ExactInputSingleParams calldata params\\r\\n    ) external payable returns (uint256 amountOut);\\r\\n\\r\\n    struct ExactInputParams {\\r\\n        bytes path;\\r\\n        address recipient;\\r\\n        uint256 amountIn;\\r\\n        uint256 amountOutMinimum;\\r\\n    }\\r\\n\\r\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\\r\\n    /// @dev Setting `amountIn` to 0 will cause the contract to look up its own balance,\\r\\n    /// and swap the entire amount, enabling contracts to send tokens before calling this function.\\r\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\\r\\n    /// @return amountOut The amount of the received token\\r\\n    function exactInput(\\r\\n        ExactInputParams calldata params\\r\\n    ) external payable returns (uint256 amountOut);\\r\\n\\r\\n    struct ExactOutputSingleParams {\\r\\n        address tokenIn;\\r\\n        address tokenOut;\\r\\n        uint24 fee;\\r\\n        address recipient;\\r\\n        uint256 amountOut;\\r\\n        uint256 amountInMaximum;\\r\\n        uint160 sqrtPriceLimitX96;\\r\\n    }\\r\\n\\r\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\\r\\n    /// that may remain in the router after the swap.\\r\\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\\r\\n    /// @return amountIn The amount of the input token\\r\\n    function exactOutputSingle(\\r\\n        ExactOutputSingleParams calldata params\\r\\n    ) external payable returns (uint256 amountIn);\\r\\n\\r\\n    struct ExactOutputParams {\\r\\n        bytes path;\\r\\n        address recipient;\\r\\n        uint256 amountOut;\\r\\n        uint256 amountInMaximum;\\r\\n    }\\r\\n\\r\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\\r\\n    /// that may remain in the router after the swap.\\r\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\\r\\n    /// @return amountIn The amount of the input token\\r\\n    function exactOutput(\\r\\n        ExactOutputParams calldata params\\r\\n    ) external payable returns (uint256 amountIn);\\r\\n\\r\\n     function refundETH() external payable;\\r\\n}\\r\\n\\r\\ncontract V3Swap {\\r\\n    using SafeMath for uint256;\\r\\n    using SafeERC20 for IERC20;\\r\\n    address public routerAddress = 0x13f4EA83D0bd40E75C8222255bc855a974568Dd4;\\r\\n    address public factoryAddress = 0x0BFbCF9fa4f9C56B0F40a671Ad40E0805A091865;\\r\\n    address public wbnbAddress = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;\\r\\n    uint24 fee = 100;\\r\\n\\r\\n    constructor() {}\\r\\n\\r\\n    function getOutputTokenAmount(\\r\\n        uint256 _inputAmount,\\r\\n        address _tokenIn,\\r\\n        address _tokenOut\\r\\n    ) external view returns (uint outputAmount) {\\r\\n        uint256 slotReturnValue = 0;\\r\\n        address pairAddress = IPancakeV3Factory(factoryAddress).getPool(\\r\\n            _tokenIn,\\r\\n            _tokenOut,\\r\\n            fee\\r\\n        );\\r\\n        (slotReturnValue, , , , , , ) = IPancakeV3PoolState(pairAddress)\\r\\n            .slot0();\\r\\n        address token0 = IPancakeV3Pool(pairAddress).token0();\\r\\n        if (_tokenIn == token0)\\r\\n            outputAmount = ((slotReturnValue ** 2 * _inputAmount) / 2 ** 192);\\r\\n        else outputAmount = ((2 ** 192 * _inputAmount) / slotReturnValue ** 2);\\r\\n    }\\r\\n\\r\\n    function _approve(address _token, uint _amount) internal {\\r\\n        IERC20(_token).approve(address(routerAddress), _amount);\\r\\n    }\\r\\n\\r\\n    function swapTokens(\\r\\n        address _tokenIn,\\r\\n        address _tokenOut,\\r\\n        uint256 _amountIn\\r\\n    ) external payable {\\r\\n        IV3SwapRouter.ExactInputSingleParams memory params = IV3SwapRouter\\r\\n            .ExactInputSingleParams(\\r\\n                _tokenIn,\\r\\n                _tokenOut,\\r\\n                fee,\\r\\n                msg.sender,\\r\\n                _amountIn,\\r\\n                0,\\r\\n                0\\r\\n            );\\r\\n        if (_tokenIn == wbnbAddress)\\r\\n            IV3SwapRouter(routerAddress).exactInputSingle{value: msg.value}(\\r\\n                params\\r\\n            );\\r\\n        else {\\r\\n            IERC20(_tokenIn).safeTransferFrom(\\r\\n                msg.sender,\\r\\n                address(this),\\r\\n                _amountIn\\r\\n            );\\r\\n            _approve(_tokenIn,_amountIn);\\r\\n            IV3SwapRouter(routerAddress).exactInputSingle{value: msg.value}(\\r\\n                params\\r\\n            );\\r\\n        }\\r\\n        IV3SwapRouter(routerAddress).refundETH();\\r\\n        // refund leftover ETH to user\\r\\n        (bool success, ) = msg.sender.call{value: address(this).balance}(\\\"\\\");\\r\\n        require(success, \\\"refund failed\\\");\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xfe6ba12da9fa1b1eff0ef756a0460141c1a57ef8bc48bc9baa89ccc88b4b0fb0\",\"license\":\"GPL-2.0-or-later\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}},"IPancakeV3Factory":{"abi":[{"inputs":[{"internalType":"address","name":"tokenA","type":"address"},{"internalType":"address","name":"tokenB","type":"address"},{"internalType":"uint24","name":"fee","type":"uint24"}],"name":"getPool","outputs":[{"internalType":"address","name":"pool","type":"address"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{},"title":"The interface for the PancakeSwap V3 Factory","version":1},"evm":{"bytecode":{"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"getPool(address,address,uint24)":"1698ee82"}},"metadata":"{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"}],\"name\":\"getPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"title\":\"The interface for the PancakeSwap V3 Factory\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"The PancakeSwap V3 Factory facilitates creation of PancakeSwap V3 pools and control over the protocol fees\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/v3dex.sol\":\"IPancakeV3Factory\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/v3dex.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\n/// @title The interface for the PancakeSwap V3 Factory\\r\\n/// @notice The PancakeSwap V3 Factory facilitates creation of PancakeSwap V3 pools and control over the protocol fees\\r\\ninterface IPancakeV3Factory {\\r\\n    function getPool(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint24 fee\\r\\n    ) external view returns (address pool);\\r\\n}\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\ninterface IPancakeV3PoolState {\\r\\n    function slot0()\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            uint160 sqrtPriceX96,\\r\\n            int24 tick,\\r\\n            uint16 observationIndex,\\r\\n            uint16 observationCardinality,\\r\\n            uint16 observationCardinalityNext,\\r\\n            uint32 feeProtocol,\\r\\n            bool unlocked\\r\\n        );\\r\\n}\\r\\n\\r\\ninterface IPancakeV3PoolImmutables {\\r\\n    /// @notice The contract that deployed the pool, which must adhere to the IPancakeV3Factory interface\\r\\n    /// @return The contract address\\r\\n    function factory() external view returns (address);\\r\\n\\r\\n    /// @notice The first of the two tokens of the pool, sorted by address\\r\\n    /// @return The token contract address\\r\\n    function token0() external view returns (address);\\r\\n\\r\\n    /// @notice The second of the two tokens of the pool, sorted by address\\r\\n    /// @return The token contract address\\r\\n    function token1() external view returns (address);\\r\\n\\r\\n    /// @notice The pool's fee in hundredths of a bip, i.e. 1e-6\\r\\n    /// @return The fee\\r\\n    function fee() external view returns (uint24);\\r\\n\\r\\n    /// @notice The pool tick spacing\\r\\n    /// @dev Ticks can only be used at multiples of this value, minimum of 1 and always positive\\r\\n    /// e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ...\\r\\n    /// This value is an int24 to avoid casting even though it is always positive.\\r\\n    /// @return The tick spacing\\r\\n    function tickSpacing() external view returns (int24);\\r\\n\\r\\n    /// @notice The maximum amount of position liquidity that can use any tick in the range\\r\\n    /// @dev This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and\\r\\n    /// also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\\r\\n    /// @return The max amount of liquidity per tick\\r\\n    function maxLiquidityPerTick() external view returns (uint128);\\r\\n}\\r\\n\\r\\ninterface IPancakeV3Pool is IPancakeV3PoolState, IPancakeV3PoolImmutables {}\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Provides information about the current execution context, including the\\r\\n * sender of the transaction and its data. While these are generally available\\r\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\r\\n * manner, since when dealing with meta-transactions the account sending and\\r\\n * paying for execution may not be the actual sender (as far as an application\\r\\n * is concerned).\\r\\n *\\r\\n * This contract is only required for intermediate, library-like contracts.\\r\\n */\\r\\nabstract contract Context {\\r\\n    function _msgSender() internal view virtual returns (address) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view virtual returns (bytes calldata) {\\r\\n        return msg.data;\\r\\n    }\\r\\n}\\r\\n\\r\\n// File @openzeppelin/contracts/access/Ownable.sol@v4.6.0\\r\\n\\r\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Contract module which provides a basic access control mechanism, where\\r\\n * there is an account (an owner) that can be granted exclusive access to\\r\\n * specific functions.\\r\\n *\\r\\n * By default, the owner account will be the one that deploys the contract. This\\r\\n * can later be changed with {transferOwnership}.\\r\\n *\\r\\n * This module is used through inheritance. It will make available the modifier\\r\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\r\\n * the owner.\\r\\n */\\r\\nabstract contract Ownable is Context {\\r\\n    address private _owner;\\r\\n\\r\\n    event OwnershipTransferred(\\r\\n        address indexed previousOwner,\\r\\n        address indexed newOwner\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\r\\n     */\\r\\n    constructor() {\\r\\n        _transferOwnership(_msgSender());\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current owner.\\r\\n     */\\r\\n    function owner() public view virtual returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier onlyOwner() {\\r\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Leaves the contract without owner. It will not be possible to call\\r\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\r\\n     *\\r\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\r\\n     * thereby removing any functionality that is only available to the owner.\\r\\n     */\\r\\n    function renounceOwnership() public virtual onlyOwner {\\r\\n        _transferOwnership(address(0));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n        require(\\r\\n            newOwner != address(0),\\r\\n            \\\"Ownable: new owner is the zero address\\\"\\r\\n        );\\r\\n        _transferOwnership(newOwner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Internal function without access restriction.\\r\\n     */\\r\\n    function _transferOwnership(address newOwner) internal virtual {\\r\\n        address oldOwner = _owner;\\r\\n        _owner = newOwner;\\r\\n        emit OwnershipTransferred(oldOwner, newOwner);\\r\\n    }\\r\\n}\\r\\n\\r\\nlibrary SafeMath {\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryAdd(\\r\\n        uint256 a,\\r\\n        uint256 b\\r\\n    ) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            uint256 c = a + b;\\r\\n            if (c < a) return (false, 0);\\r\\n            return (true, c);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function trySub(\\r\\n        uint256 a,\\r\\n        uint256 b\\r\\n    ) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            if (b > a) return (false, 0);\\r\\n            return (true, a - b);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryMul(\\r\\n        uint256 a,\\r\\n        uint256 b\\r\\n    ) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\r\\n            // benefit is lost if 'b' is also tested.\\r\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\r\\n            if (a == 0) return (true, 0);\\r\\n            uint256 c = a * b;\\r\\n            if (c / a != b) return (false, 0);\\r\\n            return (true, c);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryDiv(\\r\\n        uint256 a,\\r\\n        uint256 b\\r\\n    ) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            if (b == 0) return (false, 0);\\r\\n            return (true, a / b);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryMod(\\r\\n        uint256 a,\\r\\n        uint256 b\\r\\n    ) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            if (b == 0) return (false, 0);\\r\\n            return (true, a % b);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity's `+` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Addition cannot overflow.\\r\\n     */\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a + b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity's `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a - b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity's `*` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Multiplication cannot overflow.\\r\\n     */\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a * b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `/` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a / b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * reverting when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a % b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\r\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\r\\n     *\\r\\n     * Counterpart to Solidity's `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            require(b <= a, errorMessage);\\r\\n            return a - b;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            require(b > 0, errorMessage);\\r\\n            return a / b;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * reverting with custom message when dividing by zero.\\r\\n     *\\r\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\r\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\r\\n     *\\r\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            require(b > 0, errorMessage);\\r\\n            return a % b;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\nlibrary Address {\\r\\n    /**\\r\\n     * @dev Returns true if `account` is a contract.\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * It is unsafe to assume that an address for which this function returns\\r\\n     * false is an externally-owned account (EOA) and not a contract.\\r\\n     *\\r\\n     * Among others, `isContract` will return false for the following\\r\\n     * types of addresses:\\r\\n     *\\r\\n     *  - an externally-owned account\\r\\n     *  - a contract in construction\\r\\n     *  - an address where a contract will be created\\r\\n     *  - an address where a contract lived, but was destroyed\\r\\n     * ====\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\r\\n     *\\r\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\r\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\r\\n     * constructor.\\r\\n     * ====\\r\\n     */\\r\\n    function isContract(address account) internal view returns (bool) {\\r\\n        // This method relies on extcodesize/address.code.length, which returns 0\\r\\n        // for contracts in construction, since the code is only stored at the end\\r\\n        // of the constructor execution.\\r\\n\\r\\n        return account.code.length > 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\r\\n     * `recipient`, forwarding all available gas and reverting on errors.\\r\\n     *\\r\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\r\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\r\\n     * imposed by `transfer`, making them unable to receive funds via\\r\\n     * `transfer`. {sendValue} removes this limitation.\\r\\n     *\\r\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\r\\n     *\\r\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\r\\n     * taken to not create reentrancy vulnerabilities. Consider using\\r\\n     * {ReentrancyGuard} or the\\r\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\r\\n     */\\r\\n    function sendValue(address payable recipient, uint256 amount) internal {\\r\\n        require(\\r\\n            address(this).balance >= amount,\\r\\n            \\\"Address: insufficient balance\\\"\\r\\n        );\\r\\n\\r\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\r\\n        require(\\r\\n            success,\\r\\n            \\\"Address: unable to send value, recipient may have reverted\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Performs a Solidity function call using a low level `call`. A\\r\\n     * plain `call` is an unsafe replacement for a function call: use this\\r\\n     * function instead.\\r\\n     *\\r\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\r\\n     * function (like regular Solidity function calls).\\r\\n     *\\r\\n     * Returns the raw returned data. To convert to the expected return value,\\r\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `target` must be a contract.\\r\\n     * - calling `target` with `data` must not revert.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(\\r\\n        address target,\\r\\n        bytes memory data\\r\\n    ) internal returns (bytes memory) {\\r\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\r\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, 0, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but also transferring `value` wei to `target`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the calling contract must have an ETH balance of at least `value`.\\r\\n     * - the called Solidity function must be `payable`.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        uint256 value\\r\\n    ) internal returns (bytes memory) {\\r\\n        return\\r\\n            functionCallWithValue(\\r\\n                target,\\r\\n                data,\\r\\n                value,\\r\\n                \\\"Address: low-level call with value failed\\\"\\r\\n            );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\r\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        uint256 value,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        require(\\r\\n            address(this).balance >= value,\\r\\n            \\\"Address: insufficient balance for call\\\"\\r\\n        );\\r\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\r\\n\\r\\n        (bool success, bytes memory returndata) = target.call{value: value}(\\r\\n            data\\r\\n        );\\r\\n        return verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(\\r\\n        address target,\\r\\n        bytes memory data\\r\\n    ) internal view returns (bytes memory) {\\r\\n        return\\r\\n            functionStaticCall(\\r\\n                target,\\r\\n                data,\\r\\n                \\\"Address: low-level static call failed\\\"\\r\\n            );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal view returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\r\\n\\r\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\r\\n        return verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function functionDelegateCall(\\r\\n        address target,\\r\\n        bytes memory data\\r\\n    ) internal returns (bytes memory) {\\r\\n        return\\r\\n            functionDelegateCall(\\r\\n                target,\\r\\n                data,\\r\\n                \\\"Address: low-level delegate call failed\\\"\\r\\n            );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function functionDelegateCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\r\\n\\r\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\r\\n        return verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\r\\n     * revert reason using the provided one.\\r\\n     *\\r\\n     * _Available since v4.3._\\r\\n     */\\r\\n    function verifyCallResult(\\r\\n        bool success,\\r\\n        bytes memory returndata,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (bytes memory) {\\r\\n        if (success) {\\r\\n            return returndata;\\r\\n        } else {\\r\\n            // Look for revert reason and bubble it up if present\\r\\n            if (returndata.length > 0) {\\r\\n                // The easiest way to bubble the revert reason is using memory via assembly\\r\\n\\r\\n                assembly {\\r\\n                    let returndata_size := mload(returndata)\\r\\n                    revert(add(32, returndata), returndata_size)\\r\\n                }\\r\\n            } else {\\r\\n                revert(errorMessage);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\ninterface IERC20 {\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(\\r\\n        address indexed owner,\\r\\n        address indexed spender,\\r\\n        uint256 value\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address to, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(\\r\\n        address owner,\\r\\n        address spender\\r\\n    ) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender's allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller's\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n}\\r\\n\\r\\nlibrary SafeERC20 {\\r\\n    using Address for address;\\r\\n\\r\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\r\\n        _callOptionalReturn(\\r\\n            token,\\r\\n            abi.encodeWithSelector(token.transfer.selector, to, value)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function safeTransferFrom(\\r\\n        IERC20 token,\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        _callOptionalReturn(\\r\\n            token,\\r\\n            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Deprecated. This function has issues similar to the ones found in\\r\\n     * {IERC20-approve}, and its usage is discouraged.\\r\\n     *\\r\\n     * Whenever possible, use {safeIncreaseAllowance} and\\r\\n     * {safeDecreaseAllowance} instead.\\r\\n     */\\r\\n    function safeApprove(\\r\\n        IERC20 token,\\r\\n        address spender,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        // safeApprove should only be called when setting an initial allowance,\\r\\n        // or when resetting it to zero. To increase and decrease it, use\\r\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\r\\n        require(\\r\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\r\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\r\\n        );\\r\\n        _callOptionalReturn(\\r\\n            token,\\r\\n            abi.encodeWithSelector(token.approve.selector, spender, value)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function safeIncreaseAllowance(\\r\\n        IERC20 token,\\r\\n        address spender,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\r\\n        _callOptionalReturn(\\r\\n            token,\\r\\n            abi.encodeWithSelector(\\r\\n                token.approve.selector,\\r\\n                spender,\\r\\n                newAllowance\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function safeDecreaseAllowance(\\r\\n        IERC20 token,\\r\\n        address spender,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        unchecked {\\r\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\r\\n            require(\\r\\n                oldAllowance >= value,\\r\\n                \\\"SafeERC20: decreased allowance below zero\\\"\\r\\n            );\\r\\n            uint256 newAllowance = oldAllowance - value;\\r\\n            _callOptionalReturn(\\r\\n                token,\\r\\n                abi.encodeWithSelector(\\r\\n                    token.approve.selector,\\r\\n                    spender,\\r\\n                    newAllowance\\r\\n                )\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\r\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\r\\n     * @param token The token targeted by the call.\\r\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\r\\n     */\\r\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\r\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\r\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\r\\n        // the target address contains contract code and also asserts for success in the low-level call.\\r\\n\\r\\n        bytes memory returndata = address(token).functionCall(\\r\\n            data,\\r\\n            \\\"SafeERC20: low-level call failed\\\"\\r\\n        );\\r\\n        if (returndata.length > 0) {\\r\\n            // Return data is optional\\r\\n            require(\\r\\n                abi.decode(returndata, (bool)),\\r\\n                \\\"SafeERC20: ERC20 operation did not succeed\\\"\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n}\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\n/// @title Callback for IPancakeV3PoolActions#swap\\r\\n/// @notice Any contract that calls IPancakeV3PoolActions#swap must implement this interface\\r\\ninterface IPancakeV3SwapCallback {\\r\\n    /// @notice Called to `msg.sender` after executing a swap via IPancakeV3Pool#swap.\\r\\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\\r\\n    /// The caller of this method must be checked to be a PancakeV3Pool deployed by the canonical PancakeV3Factory.\\r\\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\\r\\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\\r\\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\\r\\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\\r\\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\\r\\n    /// @param data Any data passed through by the caller via the IPancakeV3PoolActions#swap call\\r\\n    function pancakeV3SwapCallback(\\r\\n        int256 amount0Delta,\\r\\n        int256 amount1Delta,\\r\\n        bytes calldata data\\r\\n    ) external;\\r\\n}\\r\\n\\r\\ninterface IV3SwapRouter is IPancakeV3SwapCallback {\\r\\n    struct ExactInputSingleParams {\\r\\n        address tokenIn;\\r\\n        address tokenOut;\\r\\n        uint24 fee;\\r\\n        address recipient;\\r\\n        uint256 amountIn;\\r\\n        uint256 amountOutMinimum;\\r\\n        uint160 sqrtPriceLimitX96;\\r\\n    }\\r\\n\\r\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\\r\\n    /// @dev Setting `amountIn` to 0 will cause the contract to look up its own balance,\\r\\n    /// and swap the entire amount, enabling contracts to send tokens before calling this function.\\r\\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\\r\\n    /// @return amountOut The amount of the received token\\r\\n    function exactInputSingle(\\r\\n        ExactInputSingleParams calldata params\\r\\n    ) external payable returns (uint256 amountOut);\\r\\n\\r\\n    struct ExactInputParams {\\r\\n        bytes path;\\r\\n        address recipient;\\r\\n        uint256 amountIn;\\r\\n        uint256 amountOutMinimum;\\r\\n    }\\r\\n\\r\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\\r\\n    /// @dev Setting `amountIn` to 0 will cause the contract to look up its own balance,\\r\\n    /// and swap the entire amount, enabling contracts to send tokens before calling this function.\\r\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\\r\\n    /// @return amountOut The amount of the received token\\r\\n    function exactInput(\\r\\n        ExactInputParams calldata params\\r\\n    ) external payable returns (uint256 amountOut);\\r\\n\\r\\n    struct ExactOutputSingleParams {\\r\\n        address tokenIn;\\r\\n        address tokenOut;\\r\\n        uint24 fee;\\r\\n        address recipient;\\r\\n        uint256 amountOut;\\r\\n        uint256 amountInMaximum;\\r\\n        uint160 sqrtPriceLimitX96;\\r\\n    }\\r\\n\\r\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\\r\\n    /// that may remain in the router after the swap.\\r\\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\\r\\n    /// @return amountIn The amount of the input token\\r\\n    function exactOutputSingle(\\r\\n        ExactOutputSingleParams calldata params\\r\\n    ) external payable returns (uint256 amountIn);\\r\\n\\r\\n    struct ExactOutputParams {\\r\\n        bytes path;\\r\\n        address recipient;\\r\\n        uint256 amountOut;\\r\\n        uint256 amountInMaximum;\\r\\n    }\\r\\n\\r\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\\r\\n    /// that may remain in the router after the swap.\\r\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\\r\\n    /// @return amountIn The amount of the input token\\r\\n    function exactOutput(\\r\\n        ExactOutputParams calldata params\\r\\n    ) external payable returns (uint256 amountIn);\\r\\n\\r\\n     function refundETH() external payable;\\r\\n}\\r\\n\\r\\ncontract V3Swap {\\r\\n    using SafeMath for uint256;\\r\\n    using SafeERC20 for IERC20;\\r\\n    address public routerAddress = 0x13f4EA83D0bd40E75C8222255bc855a974568Dd4;\\r\\n    address public factoryAddress = 0x0BFbCF9fa4f9C56B0F40a671Ad40E0805A091865;\\r\\n    address public wbnbAddress = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;\\r\\n    uint24 fee = 100;\\r\\n\\r\\n    constructor() {}\\r\\n\\r\\n    function getOutputTokenAmount(\\r\\n        uint256 _inputAmount,\\r\\n        address _tokenIn,\\r\\n        address _tokenOut\\r\\n    ) external view returns (uint outputAmount) {\\r\\n        uint256 slotReturnValue = 0;\\r\\n        address pairAddress = IPancakeV3Factory(factoryAddress).getPool(\\r\\n            _tokenIn,\\r\\n            _tokenOut,\\r\\n            fee\\r\\n        );\\r\\n        (slotReturnValue, , , , , , ) = IPancakeV3PoolState(pairAddress)\\r\\n            .slot0();\\r\\n        address token0 = IPancakeV3Pool(pairAddress).token0();\\r\\n        if (_tokenIn == token0)\\r\\n            outputAmount = ((slotReturnValue ** 2 * _inputAmount) / 2 ** 192);\\r\\n        else outputAmount = ((2 ** 192 * _inputAmount) / slotReturnValue ** 2);\\r\\n    }\\r\\n\\r\\n    function _approve(address _token, uint _amount) internal {\\r\\n        IERC20(_token).approve(address(routerAddress), _amount);\\r\\n    }\\r\\n\\r\\n    function swapTokens(\\r\\n        address _tokenIn,\\r\\n        address _tokenOut,\\r\\n        uint256 _amountIn\\r\\n    ) external payable {\\r\\n        IV3SwapRouter.ExactInputSingleParams memory params = IV3SwapRouter\\r\\n            .ExactInputSingleParams(\\r\\n                _tokenIn,\\r\\n                _tokenOut,\\r\\n                fee,\\r\\n                msg.sender,\\r\\n                _amountIn,\\r\\n                0,\\r\\n                0\\r\\n            );\\r\\n        if (_tokenIn == wbnbAddress)\\r\\n            IV3SwapRouter(routerAddress).exactInputSingle{value: msg.value}(\\r\\n                params\\r\\n            );\\r\\n        else {\\r\\n            IERC20(_tokenIn).safeTransferFrom(\\r\\n                msg.sender,\\r\\n                address(this),\\r\\n                _amountIn\\r\\n            );\\r\\n            _approve(_tokenIn,_amountIn);\\r\\n            IV3SwapRouter(routerAddress).exactInputSingle{value: msg.value}(\\r\\n                params\\r\\n            );\\r\\n        }\\r\\n        IV3SwapRouter(routerAddress).refundETH();\\r\\n        // refund leftover ETH to user\\r\\n        (bool success, ) = msg.sender.call{value: address(this).balance}(\\\"\\\");\\r\\n        require(success, \\\"refund failed\\\");\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xfe6ba12da9fa1b1eff0ef756a0460141c1a57ef8bc48bc9baa89ccc88b4b0fb0\",\"license\":\"GPL-2.0-or-later\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"notice":"The PancakeSwap V3 Factory facilitates creation of PancakeSwap V3 pools and control over the protocol fees","version":1}},"IPancakeV3Pool":{"abi":[{"inputs":[],"name":"factory","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"fee","outputs":[{"internalType":"uint24","name":"","type":"uint24"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"maxLiquidityPerTick","outputs":[{"internalType":"uint128","name":"","type":"uint128"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"slot0","outputs":[{"internalType":"uint160","name":"sqrtPriceX96","type":"uint160"},{"internalType":"int24","name":"tick","type":"int24"},{"internalType":"uint16","name":"observationIndex","type":"uint16"},{"internalType":"uint16","name":"observationCardinality","type":"uint16"},{"internalType":"uint16","name":"observationCardinalityNext","type":"uint16"},{"internalType":"uint32","name":"feeProtocol","type":"uint32"},{"internalType":"bool","name":"unlocked","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"tickSpacing","outputs":[{"internalType":"int24","name":"","type":"int24"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"token0","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"token1","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{"factory()":{"returns":{"_0":"The contract address"}},"fee()":{"returns":{"_0":"The fee"}},"maxLiquidityPerTick()":{"details":"This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool","returns":{"_0":"The max amount of liquidity per tick"}},"tickSpacing()":{"details":"Ticks can only be used at multiples of this value, minimum of 1 and always positive e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ... This value is an int24 to avoid casting even though it is always positive.","returns":{"_0":"The tick spacing"}},"token0()":{"returns":{"_0":"The token contract address"}},"token1()":{"returns":{"_0":"The token contract address"}}},"version":1},"evm":{"bytecode":{"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"factory()":"c45a0155","fee()":"ddca3f43","maxLiquidityPerTick()":"70cf754a","slot0()":"3850c7bd","tickSpacing()":"d0c93a7c","token0()":"0dfe1681","token1()":"d21220a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxLiquidityPerTick\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"slot0\",\"outputs\":[{\"internalType\":\"uint160\",\"name\":\"sqrtPriceX96\",\"type\":\"uint160\"},{\"internalType\":\"int24\",\"name\":\"tick\",\"type\":\"int24\"},{\"internalType\":\"uint16\",\"name\":\"observationIndex\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"observationCardinality\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"observationCardinalityNext\",\"type\":\"uint16\"},{\"internalType\":\"uint32\",\"name\":\"feeProtocol\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"unlocked\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tickSpacing\",\"outputs\":[{\"internalType\":\"int24\",\"name\":\"\",\"type\":\"int24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token0\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token1\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"factory()\":{\"returns\":{\"_0\":\"The contract address\"}},\"fee()\":{\"returns\":{\"_0\":\"The fee\"}},\"maxLiquidityPerTick()\":{\"details\":\"This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\",\"returns\":{\"_0\":\"The max amount of liquidity per tick\"}},\"tickSpacing()\":{\"details\":\"Ticks can only be used at multiples of this value, minimum of 1 and always positive e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ... This value is an int24 to avoid casting even though it is always positive.\",\"returns\":{\"_0\":\"The tick spacing\"}},\"token0()\":{\"returns\":{\"_0\":\"The token contract address\"}},\"token1()\":{\"returns\":{\"_0\":\"The token contract address\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"factory()\":{\"notice\":\"The contract that deployed the pool, which must adhere to the IPancakeV3Factory interface\"},\"fee()\":{\"notice\":\"The pool's fee in hundredths of a bip, i.e. 1e-6\"},\"maxLiquidityPerTick()\":{\"notice\":\"The maximum amount of position liquidity that can use any tick in the range\"},\"tickSpacing()\":{\"notice\":\"The pool tick spacing\"},\"token0()\":{\"notice\":\"The first of the two tokens of the pool, sorted by address\"},\"token1()\":{\"notice\":\"The second of the two tokens of the pool, sorted by address\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/v3dex.sol\":\"IPancakeV3Pool\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/v3dex.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\n/// @title The interface for the PancakeSwap V3 Factory\\r\\n/// @notice The PancakeSwap V3 Factory facilitates creation of PancakeSwap V3 pools and control over the protocol fees\\r\\ninterface IPancakeV3Factory {\\r\\n    function getPool(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint24 fee\\r\\n    ) external view returns (address pool);\\r\\n}\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\ninterface IPancakeV3PoolState {\\r\\n    function slot0()\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            uint160 sqrtPriceX96,\\r\\n            int24 tick,\\r\\n            uint16 observationIndex,\\r\\n            uint16 observationCardinality,\\r\\n            uint16 observationCardinalityNext,\\r\\n            uint32 feeProtocol,\\r\\n            bool unlocked\\r\\n        );\\r\\n}\\r\\n\\r\\ninterface IPancakeV3PoolImmutables {\\r\\n    /// @notice The contract that deployed the pool, which must adhere to the IPancakeV3Factory interface\\r\\n    /// @return The contract address\\r\\n    function factory() external view returns (address);\\r\\n\\r\\n    /// @notice The first of the two tokens of the pool, sorted by address\\r\\n    /// @return The token contract address\\r\\n    function token0() external view returns (address);\\r\\n\\r\\n    /// @notice The second of the two tokens of the pool, sorted by address\\r\\n    /// @return The token contract address\\r\\n    function token1() external view returns (address);\\r\\n\\r\\n    /// @notice The pool's fee in hundredths of a bip, i.e. 1e-6\\r\\n    /// @return The fee\\r\\n    function fee() external view returns (uint24);\\r\\n\\r\\n    /// @notice The pool tick spacing\\r\\n    /// @dev Ticks can only be used at multiples of this value, minimum of 1 and always positive\\r\\n    /// e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ...\\r\\n    /// This value is an int24 to avoid casting even though it is always positive.\\r\\n    /// @return The tick spacing\\r\\n    function tickSpacing() external view returns (int24);\\r\\n\\r\\n    /// @notice The maximum amount of position liquidity that can use any tick in the range\\r\\n    /// @dev This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and\\r\\n    /// also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\\r\\n    /// @return The max amount of liquidity per tick\\r\\n    function maxLiquidityPerTick() external view returns (uint128);\\r\\n}\\r\\n\\r\\ninterface IPancakeV3Pool is IPancakeV3PoolState, IPancakeV3PoolImmutables {}\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Provides information about the current execution context, including the\\r\\n * sender of the transaction and its data. While these are generally available\\r\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\r\\n * manner, since when dealing with meta-transactions the account sending and\\r\\n * paying for execution may not be the actual sender (as far as an application\\r\\n * is concerned).\\r\\n *\\r\\n * This contract is only required for intermediate, library-like contracts.\\r\\n */\\r\\nabstract contract Context {\\r\\n    function _msgSender() internal view virtual returns (address) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view virtual returns (bytes calldata) {\\r\\n        return msg.data;\\r\\n    }\\r\\n}\\r\\n\\r\\n// File @openzeppelin/contracts/access/Ownable.sol@v4.6.0\\r\\n\\r\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Contract module which provides a basic access control mechanism, where\\r\\n * there is an account (an owner) that can be granted exclusive access to\\r\\n * specific functions.\\r\\n *\\r\\n * By default, the owner account will be the one that deploys the contract. This\\r\\n * can later be changed with {transferOwnership}.\\r\\n *\\r\\n * This module is used through inheritance. It will make available the modifier\\r\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\r\\n * the owner.\\r\\n */\\r\\nabstract contract Ownable is Context {\\r\\n    address private _owner;\\r\\n\\r\\n    event OwnershipTransferred(\\r\\n        address indexed previousOwner,\\r\\n        address indexed newOwner\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\r\\n     */\\r\\n    constructor() {\\r\\n        _transferOwnership(_msgSender());\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current owner.\\r\\n     */\\r\\n    function owner() public view virtual returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier onlyOwner() {\\r\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Leaves the contract without owner. It will not be possible to call\\r\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\r\\n     *\\r\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\r\\n     * thereby removing any functionality that is only available to the owner.\\r\\n     */\\r\\n    function renounceOwnership() public virtual onlyOwner {\\r\\n        _transferOwnership(address(0));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n        require(\\r\\n            newOwner != address(0),\\r\\n            \\\"Ownable: new owner is the zero address\\\"\\r\\n        );\\r\\n        _transferOwnership(newOwner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Internal function without access restriction.\\r\\n     */\\r\\n    function _transferOwnership(address newOwner) internal virtual {\\r\\n        address oldOwner = _owner;\\r\\n        _owner = newOwner;\\r\\n        emit OwnershipTransferred(oldOwner, newOwner);\\r\\n    }\\r\\n}\\r\\n\\r\\nlibrary SafeMath {\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryAdd(\\r\\n        uint256 a,\\r\\n        uint256 b\\r\\n    ) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            uint256 c = a + b;\\r\\n            if (c < a) return (false, 0);\\r\\n            return (true, c);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function trySub(\\r\\n        uint256 a,\\r\\n        uint256 b\\r\\n    ) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            if (b > a) return (false, 0);\\r\\n            return (true, a - b);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryMul(\\r\\n        uint256 a,\\r\\n        uint256 b\\r\\n    ) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\r\\n            // benefit is lost if 'b' is also tested.\\r\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\r\\n            if (a == 0) return (true, 0);\\r\\n            uint256 c = a * b;\\r\\n            if (c / a != b) return (false, 0);\\r\\n            return (true, c);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryDiv(\\r\\n        uint256 a,\\r\\n        uint256 b\\r\\n    ) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            if (b == 0) return (false, 0);\\r\\n            return (true, a / b);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryMod(\\r\\n        uint256 a,\\r\\n        uint256 b\\r\\n    ) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            if (b == 0) return (false, 0);\\r\\n            return (true, a % b);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity's `+` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Addition cannot overflow.\\r\\n     */\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a + b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity's `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a - b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity's `*` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Multiplication cannot overflow.\\r\\n     */\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a * b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `/` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a / b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * reverting when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a % b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\r\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\r\\n     *\\r\\n     * Counterpart to Solidity's `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            require(b <= a, errorMessage);\\r\\n            return a - b;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            require(b > 0, errorMessage);\\r\\n            return a / b;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * reverting with custom message when dividing by zero.\\r\\n     *\\r\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\r\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\r\\n     *\\r\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            require(b > 0, errorMessage);\\r\\n            return a % b;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\nlibrary Address {\\r\\n    /**\\r\\n     * @dev Returns true if `account` is a contract.\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * It is unsafe to assume that an address for which this function returns\\r\\n     * false is an externally-owned account (EOA) and not a contract.\\r\\n     *\\r\\n     * Among others, `isContract` will return false for the following\\r\\n     * types of addresses:\\r\\n     *\\r\\n     *  - an externally-owned account\\r\\n     *  - a contract in construction\\r\\n     *  - an address where a contract will be created\\r\\n     *  - an address where a contract lived, but was destroyed\\r\\n     * ====\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\r\\n     *\\r\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\r\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\r\\n     * constructor.\\r\\n     * ====\\r\\n     */\\r\\n    function isContract(address account) internal view returns (bool) {\\r\\n        // This method relies on extcodesize/address.code.length, which returns 0\\r\\n        // for contracts in construction, since the code is only stored at the end\\r\\n        // of the constructor execution.\\r\\n\\r\\n        return account.code.length > 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\r\\n     * `recipient`, forwarding all available gas and reverting on errors.\\r\\n     *\\r\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\r\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\r\\n     * imposed by `transfer`, making them unable to receive funds via\\r\\n     * `transfer`. {sendValue} removes this limitation.\\r\\n     *\\r\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\r\\n     *\\r\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\r\\n     * taken to not create reentrancy vulnerabilities. Consider using\\r\\n     * {ReentrancyGuard} or the\\r\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\r\\n     */\\r\\n    function sendValue(address payable recipient, uint256 amount) internal {\\r\\n        require(\\r\\n            address(this).balance >= amount,\\r\\n            \\\"Address: insufficient balance\\\"\\r\\n        );\\r\\n\\r\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\r\\n        require(\\r\\n            success,\\r\\n            \\\"Address: unable to send value, recipient may have reverted\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Performs a Solidity function call using a low level `call`. A\\r\\n     * plain `call` is an unsafe replacement for a function call: use this\\r\\n     * function instead.\\r\\n     *\\r\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\r\\n     * function (like regular Solidity function calls).\\r\\n     *\\r\\n     * Returns the raw returned data. To convert to the expected return value,\\r\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `target` must be a contract.\\r\\n     * - calling `target` with `data` must not revert.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(\\r\\n        address target,\\r\\n        bytes memory data\\r\\n    ) internal returns (bytes memory) {\\r\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\r\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, 0, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but also transferring `value` wei to `target`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the calling contract must have an ETH balance of at least `value`.\\r\\n     * - the called Solidity function must be `payable`.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        uint256 value\\r\\n    ) internal returns (bytes memory) {\\r\\n        return\\r\\n            functionCallWithValue(\\r\\n                target,\\r\\n                data,\\r\\n                value,\\r\\n                \\\"Address: low-level call with value failed\\\"\\r\\n            );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\r\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        uint256 value,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        require(\\r\\n            address(this).balance >= value,\\r\\n            \\\"Address: insufficient balance for call\\\"\\r\\n        );\\r\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\r\\n\\r\\n        (bool success, bytes memory returndata) = target.call{value: value}(\\r\\n            data\\r\\n        );\\r\\n        return verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(\\r\\n        address target,\\r\\n        bytes memory data\\r\\n    ) internal view returns (bytes memory) {\\r\\n        return\\r\\n            functionStaticCall(\\r\\n                target,\\r\\n                data,\\r\\n                \\\"Address: low-level static call failed\\\"\\r\\n            );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal view returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\r\\n\\r\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\r\\n        return verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function functionDelegateCall(\\r\\n        address target,\\r\\n        bytes memory data\\r\\n    ) internal returns (bytes memory) {\\r\\n        return\\r\\n            functionDelegateCall(\\r\\n                target,\\r\\n                data,\\r\\n                \\\"Address: low-level delegate call failed\\\"\\r\\n            );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function functionDelegateCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\r\\n\\r\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\r\\n        return verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\r\\n     * revert reason using the provided one.\\r\\n     *\\r\\n     * _Available since v4.3._\\r\\n     */\\r\\n    function verifyCallResult(\\r\\n        bool success,\\r\\n        bytes memory returndata,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (bytes memory) {\\r\\n        if (success) {\\r\\n            return returndata;\\r\\n        } else {\\r\\n            // Look for revert reason and bubble it up if present\\r\\n            if (returndata.length > 0) {\\r\\n                // The easiest way to bubble the revert reason is using memory via assembly\\r\\n\\r\\n                assembly {\\r\\n                    let returndata_size := mload(returndata)\\r\\n                    revert(add(32, returndata), returndata_size)\\r\\n                }\\r\\n            } else {\\r\\n                revert(errorMessage);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\ninterface IERC20 {\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(\\r\\n        address indexed owner,\\r\\n        address indexed spender,\\r\\n        uint256 value\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address to, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(\\r\\n        address owner,\\r\\n        address spender\\r\\n    ) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender's allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller's\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n}\\r\\n\\r\\nlibrary SafeERC20 {\\r\\n    using Address for address;\\r\\n\\r\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\r\\n        _callOptionalReturn(\\r\\n            token,\\r\\n            abi.encodeWithSelector(token.transfer.selector, to, value)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function safeTransferFrom(\\r\\n        IERC20 token,\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        _callOptionalReturn(\\r\\n            token,\\r\\n            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Deprecated. This function has issues similar to the ones found in\\r\\n     * {IERC20-approve}, and its usage is discouraged.\\r\\n     *\\r\\n     * Whenever possible, use {safeIncreaseAllowance} and\\r\\n     * {safeDecreaseAllowance} instead.\\r\\n     */\\r\\n    function safeApprove(\\r\\n        IERC20 token,\\r\\n        address spender,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        // safeApprove should only be called when setting an initial allowance,\\r\\n        // or when resetting it to zero. To increase and decrease it, use\\r\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\r\\n        require(\\r\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\r\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\r\\n        );\\r\\n        _callOptionalReturn(\\r\\n            token,\\r\\n            abi.encodeWithSelector(token.approve.selector, spender, value)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function safeIncreaseAllowance(\\r\\n        IERC20 token,\\r\\n        address spender,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\r\\n        _callOptionalReturn(\\r\\n            token,\\r\\n            abi.encodeWithSelector(\\r\\n                token.approve.selector,\\r\\n                spender,\\r\\n                newAllowance\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function safeDecreaseAllowance(\\r\\n        IERC20 token,\\r\\n        address spender,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        unchecked {\\r\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\r\\n            require(\\r\\n                oldAllowance >= value,\\r\\n                \\\"SafeERC20: decreased allowance below zero\\\"\\r\\n            );\\r\\n            uint256 newAllowance = oldAllowance - value;\\r\\n            _callOptionalReturn(\\r\\n                token,\\r\\n                abi.encodeWithSelector(\\r\\n                    token.approve.selector,\\r\\n                    spender,\\r\\n                    newAllowance\\r\\n                )\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\r\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\r\\n     * @param token The token targeted by the call.\\r\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\r\\n     */\\r\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\r\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\r\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\r\\n        // the target address contains contract code and also asserts for success in the low-level call.\\r\\n\\r\\n        bytes memory returndata = address(token).functionCall(\\r\\n            data,\\r\\n            \\\"SafeERC20: low-level call failed\\\"\\r\\n        );\\r\\n        if (returndata.length > 0) {\\r\\n            // Return data is optional\\r\\n            require(\\r\\n                abi.decode(returndata, (bool)),\\r\\n                \\\"SafeERC20: ERC20 operation did not succeed\\\"\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n}\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\n/// @title Callback for IPancakeV3PoolActions#swap\\r\\n/// @notice Any contract that calls IPancakeV3PoolActions#swap must implement this interface\\r\\ninterface IPancakeV3SwapCallback {\\r\\n    /// @notice Called to `msg.sender` after executing a swap via IPancakeV3Pool#swap.\\r\\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\\r\\n    /// The caller of this method must be checked to be a PancakeV3Pool deployed by the canonical PancakeV3Factory.\\r\\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\\r\\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\\r\\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\\r\\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\\r\\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\\r\\n    /// @param data Any data passed through by the caller via the IPancakeV3PoolActions#swap call\\r\\n    function pancakeV3SwapCallback(\\r\\n        int256 amount0Delta,\\r\\n        int256 amount1Delta,\\r\\n        bytes calldata data\\r\\n    ) external;\\r\\n}\\r\\n\\r\\ninterface IV3SwapRouter is IPancakeV3SwapCallback {\\r\\n    struct ExactInputSingleParams {\\r\\n        address tokenIn;\\r\\n        address tokenOut;\\r\\n        uint24 fee;\\r\\n        address recipient;\\r\\n        uint256 amountIn;\\r\\n        uint256 amountOutMinimum;\\r\\n        uint160 sqrtPriceLimitX96;\\r\\n    }\\r\\n\\r\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\\r\\n    /// @dev Setting `amountIn` to 0 will cause the contract to look up its own balance,\\r\\n    /// and swap the entire amount, enabling contracts to send tokens before calling this function.\\r\\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\\r\\n    /// @return amountOut The amount of the received token\\r\\n    function exactInputSingle(\\r\\n        ExactInputSingleParams calldata params\\r\\n    ) external payable returns (uint256 amountOut);\\r\\n\\r\\n    struct ExactInputParams {\\r\\n        bytes path;\\r\\n        address recipient;\\r\\n        uint256 amountIn;\\r\\n        uint256 amountOutMinimum;\\r\\n    }\\r\\n\\r\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\\r\\n    /// @dev Setting `amountIn` to 0 will cause the contract to look up its own balance,\\r\\n    /// and swap the entire amount, enabling contracts to send tokens before calling this function.\\r\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\\r\\n    /// @return amountOut The amount of the received token\\r\\n    function exactInput(\\r\\n        ExactInputParams calldata params\\r\\n    ) external payable returns (uint256 amountOut);\\r\\n\\r\\n    struct ExactOutputSingleParams {\\r\\n        address tokenIn;\\r\\n        address tokenOut;\\r\\n        uint24 fee;\\r\\n        address recipient;\\r\\n        uint256 amountOut;\\r\\n        uint256 amountInMaximum;\\r\\n        uint160 sqrtPriceLimitX96;\\r\\n    }\\r\\n\\r\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\\r\\n    /// that may remain in the router after the swap.\\r\\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\\r\\n    /// @return amountIn The amount of the input token\\r\\n    function exactOutputSingle(\\r\\n        ExactOutputSingleParams calldata params\\r\\n    ) external payable returns (uint256 amountIn);\\r\\n\\r\\n    struct ExactOutputParams {\\r\\n        bytes path;\\r\\n        address recipient;\\r\\n        uint256 amountOut;\\r\\n        uint256 amountInMaximum;\\r\\n    }\\r\\n\\r\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\\r\\n    /// that may remain in the router after the swap.\\r\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\\r\\n    /// @return amountIn The amount of the input token\\r\\n    function exactOutput(\\r\\n        ExactOutputParams calldata params\\r\\n    ) external payable returns (uint256 amountIn);\\r\\n\\r\\n     function refundETH() external payable;\\r\\n}\\r\\n\\r\\ncontract V3Swap {\\r\\n    using SafeMath for uint256;\\r\\n    using SafeERC20 for IERC20;\\r\\n    address public routerAddress = 0x13f4EA83D0bd40E75C8222255bc855a974568Dd4;\\r\\n    address public factoryAddress = 0x0BFbCF9fa4f9C56B0F40a671Ad40E0805A091865;\\r\\n    address public wbnbAddress = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;\\r\\n    uint24 fee = 100;\\r\\n\\r\\n    constructor() {}\\r\\n\\r\\n    function getOutputTokenAmount(\\r\\n        uint256 _inputAmount,\\r\\n        address _tokenIn,\\r\\n        address _tokenOut\\r\\n    ) external view returns (uint outputAmount) {\\r\\n        uint256 slotReturnValue = 0;\\r\\n        address pairAddress = IPancakeV3Factory(factoryAddress).getPool(\\r\\n            _tokenIn,\\r\\n            _tokenOut,\\r\\n            fee\\r\\n        );\\r\\n        (slotReturnValue, , , , , , ) = IPancakeV3PoolState(pairAddress)\\r\\n            .slot0();\\r\\n        address token0 = IPancakeV3Pool(pairAddress).token0();\\r\\n        if (_tokenIn == token0)\\r\\n            outputAmount = ((slotReturnValue ** 2 * _inputAmount) / 2 ** 192);\\r\\n        else outputAmount = ((2 ** 192 * _inputAmount) / slotReturnValue ** 2);\\r\\n    }\\r\\n\\r\\n    function _approve(address _token, uint _amount) internal {\\r\\n        IERC20(_token).approve(address(routerAddress), _amount);\\r\\n    }\\r\\n\\r\\n    function swapTokens(\\r\\n        address _tokenIn,\\r\\n        address _tokenOut,\\r\\n        uint256 _amountIn\\r\\n    ) external payable {\\r\\n        IV3SwapRouter.ExactInputSingleParams memory params = IV3SwapRouter\\r\\n            .ExactInputSingleParams(\\r\\n                _tokenIn,\\r\\n                _tokenOut,\\r\\n                fee,\\r\\n                msg.sender,\\r\\n                _amountIn,\\r\\n                0,\\r\\n                0\\r\\n            );\\r\\n        if (_tokenIn == wbnbAddress)\\r\\n            IV3SwapRouter(routerAddress).exactInputSingle{value: msg.value}(\\r\\n                params\\r\\n            );\\r\\n        else {\\r\\n            IERC20(_tokenIn).safeTransferFrom(\\r\\n                msg.sender,\\r\\n                address(this),\\r\\n                _amountIn\\r\\n            );\\r\\n            _approve(_tokenIn,_amountIn);\\r\\n            IV3SwapRouter(routerAddress).exactInputSingle{value: msg.value}(\\r\\n                params\\r\\n            );\\r\\n        }\\r\\n        IV3SwapRouter(routerAddress).refundETH();\\r\\n        // refund leftover ETH to user\\r\\n        (bool success, ) = msg.sender.call{value: address(this).balance}(\\\"\\\");\\r\\n        require(success, \\\"refund failed\\\");\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xfe6ba12da9fa1b1eff0ef756a0460141c1a57ef8bc48bc9baa89ccc88b4b0fb0\",\"license\":\"GPL-2.0-or-later\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"factory()":{"notice":"The contract that deployed the pool, which must adhere to the IPancakeV3Factory interface"},"fee()":{"notice":"The pool's fee in hundredths of a bip, i.e. 1e-6"},"maxLiquidityPerTick()":{"notice":"The maximum amount of position liquidity that can use any tick in the range"},"tickSpacing()":{"notice":"The pool tick spacing"},"token0()":{"notice":"The first of the two tokens of the pool, sorted by address"},"token1()":{"notice":"The second of the two tokens of the pool, sorted by address"}},"version":1}},"IPancakeV3PoolImmutables":{"abi":[{"inputs":[],"name":"factory","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"fee","outputs":[{"internalType":"uint24","name":"","type":"uint24"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"maxLiquidityPerTick","outputs":[{"internalType":"uint128","name":"","type":"uint128"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"tickSpacing","outputs":[{"internalType":"int24","name":"","type":"int24"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"token0","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"token1","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{"factory()":{"returns":{"_0":"The contract address"}},"fee()":{"returns":{"_0":"The fee"}},"maxLiquidityPerTick()":{"details":"This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool","returns":{"_0":"The max amount of liquidity per tick"}},"tickSpacing()":{"details":"Ticks can only be used at multiples of this value, minimum of 1 and always positive e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ... This value is an int24 to avoid casting even though it is always positive.","returns":{"_0":"The tick spacing"}},"token0()":{"returns":{"_0":"The token contract address"}},"token1()":{"returns":{"_0":"The token contract address"}}},"version":1},"evm":{"bytecode":{"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"factory()":"c45a0155","fee()":"ddca3f43","maxLiquidityPerTick()":"70cf754a","tickSpacing()":"d0c93a7c","token0()":"0dfe1681","token1()":"d21220a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxLiquidityPerTick\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tickSpacing\",\"outputs\":[{\"internalType\":\"int24\",\"name\":\"\",\"type\":\"int24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token0\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token1\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"factory()\":{\"returns\":{\"_0\":\"The contract address\"}},\"fee()\":{\"returns\":{\"_0\":\"The fee\"}},\"maxLiquidityPerTick()\":{\"details\":\"This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\",\"returns\":{\"_0\":\"The max amount of liquidity per tick\"}},\"tickSpacing()\":{\"details\":\"Ticks can only be used at multiples of this value, minimum of 1 and always positive e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ... This value is an int24 to avoid casting even though it is always positive.\",\"returns\":{\"_0\":\"The tick spacing\"}},\"token0()\":{\"returns\":{\"_0\":\"The token contract address\"}},\"token1()\":{\"returns\":{\"_0\":\"The token contract address\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"factory()\":{\"notice\":\"The contract that deployed the pool, which must adhere to the IPancakeV3Factory interface\"},\"fee()\":{\"notice\":\"The pool's fee in hundredths of a bip, i.e. 1e-6\"},\"maxLiquidityPerTick()\":{\"notice\":\"The maximum amount of position liquidity that can use any tick in the range\"},\"tickSpacing()\":{\"notice\":\"The pool tick spacing\"},\"token0()\":{\"notice\":\"The first of the two tokens of the pool, sorted by address\"},\"token1()\":{\"notice\":\"The second of the two tokens of the pool, sorted by address\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/v3dex.sol\":\"IPancakeV3PoolImmutables\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/v3dex.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\n/// @title The interface for the PancakeSwap V3 Factory\\r\\n/// @notice The PancakeSwap V3 Factory facilitates creation of PancakeSwap V3 pools and control over the protocol fees\\r\\ninterface IPancakeV3Factory {\\r\\n    function getPool(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint24 fee\\r\\n    ) external view returns (address pool);\\r\\n}\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\ninterface IPancakeV3PoolState {\\r\\n    function slot0()\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            uint160 sqrtPriceX96,\\r\\n            int24 tick,\\r\\n            uint16 observationIndex,\\r\\n            uint16 observationCardinality,\\r\\n            uint16 observationCardinalityNext,\\r\\n            uint32 feeProtocol,\\r\\n            bool unlocked\\r\\n        );\\r\\n}\\r\\n\\r\\ninterface IPancakeV3PoolImmutables {\\r\\n    /// @notice The contract that deployed the pool, which must adhere to the IPancakeV3Factory interface\\r\\n    /// @return The contract address\\r\\n    function factory() external view returns (address);\\r\\n\\r\\n    /// @notice The first of the two tokens of the pool, sorted by address\\r\\n    /// @return The token contract address\\r\\n    function token0() external view returns (address);\\r\\n\\r\\n    /// @notice The second of the two tokens of the pool, sorted by address\\r\\n    /// @return The token contract address\\r\\n    function token1() external view returns (address);\\r\\n\\r\\n    /// @notice The pool's fee in hundredths of a bip, i.e. 1e-6\\r\\n    /// @return The fee\\r\\n    function fee() external view returns (uint24);\\r\\n\\r\\n    /// @notice The pool tick spacing\\r\\n    /// @dev Ticks can only be used at multiples of this value, minimum of 1 and always positive\\r\\n    /// e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ...\\r\\n    /// This value is an int24 to avoid casting even though it is always positive.\\r\\n    /// @return The tick spacing\\r\\n    function tickSpacing() external view returns (int24);\\r\\n\\r\\n    /// @notice The maximum amount of position liquidity that can use any tick in the range\\r\\n    /// @dev This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and\\r\\n    /// also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\\r\\n    /// @return The max amount of liquidity per tick\\r\\n    function maxLiquidityPerTick() external view returns (uint128);\\r\\n}\\r\\n\\r\\ninterface IPancakeV3Pool is IPancakeV3PoolState, IPancakeV3PoolImmutables {}\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Provides information about the current execution context, including the\\r\\n * sender of the transaction and its data. While these are generally available\\r\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\r\\n * manner, since when dealing with meta-transactions the account sending and\\r\\n * paying for execution may not be the actual sender (as far as an application\\r\\n * is concerned).\\r\\n *\\r\\n * This contract is only required for intermediate, library-like contracts.\\r\\n */\\r\\nabstract contract Context {\\r\\n    function _msgSender() internal view virtual returns (address) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view virtual returns (bytes calldata) {\\r\\n        return msg.data;\\r\\n    }\\r\\n}\\r\\n\\r\\n// File @openzeppelin/contracts/access/Ownable.sol@v4.6.0\\r\\n\\r\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Contract module which provides a basic access control mechanism, where\\r\\n * there is an account (an owner) that can be granted exclusive access to\\r\\n * specific functions.\\r\\n *\\r\\n * By default, the owner account will be the one that deploys the contract. This\\r\\n * can later be changed with {transferOwnership}.\\r\\n *\\r\\n * This module is used through inheritance. It will make available the modifier\\r\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\r\\n * the owner.\\r\\n */\\r\\nabstract contract Ownable is Context {\\r\\n    address private _owner;\\r\\n\\r\\n    event OwnershipTransferred(\\r\\n        address indexed previousOwner,\\r\\n        address indexed newOwner\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\r\\n     */\\r\\n    constructor() {\\r\\n        _transferOwnership(_msgSender());\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current owner.\\r\\n     */\\r\\n    function owner() public view virtual returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier onlyOwner() {\\r\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Leaves the contract without owner. It will not be possible to call\\r\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\r\\n     *\\r\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\r\\n     * thereby removing any functionality that is only available to the owner.\\r\\n     */\\r\\n    function renounceOwnership() public virtual onlyOwner {\\r\\n        _transferOwnership(address(0));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n        require(\\r\\n            newOwner != address(0),\\r\\n            \\\"Ownable: new owner is the zero address\\\"\\r\\n        );\\r\\n        _transferOwnership(newOwner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Internal function without access restriction.\\r\\n     */\\r\\n    function _transferOwnership(address newOwner) internal virtual {\\r\\n        address oldOwner = _owner;\\r\\n        _owner = newOwner;\\r\\n        emit OwnershipTransferred(oldOwner, newOwner);\\r\\n    }\\r\\n}\\r\\n\\r\\nlibrary SafeMath {\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryAdd(\\r\\n        uint256 a,\\r\\n        uint256 b\\r\\n    ) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            uint256 c = a + b;\\r\\n            if (c < a) return (false, 0);\\r\\n            return (true, c);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function trySub(\\r\\n        uint256 a,\\r\\n        uint256 b\\r\\n    ) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            if (b > a) return (false, 0);\\r\\n            return (true, a - b);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryMul(\\r\\n        uint256 a,\\r\\n        uint256 b\\r\\n    ) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\r\\n            // benefit is lost if 'b' is also tested.\\r\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\r\\n            if (a == 0) return (true, 0);\\r\\n            uint256 c = a * b;\\r\\n            if (c / a != b) return (false, 0);\\r\\n            return (true, c);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryDiv(\\r\\n        uint256 a,\\r\\n        uint256 b\\r\\n    ) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            if (b == 0) return (false, 0);\\r\\n            return (true, a / b);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryMod(\\r\\n        uint256 a,\\r\\n        uint256 b\\r\\n    ) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            if (b == 0) return (false, 0);\\r\\n            return (true, a % b);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity's `+` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Addition cannot overflow.\\r\\n     */\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a + b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity's `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a - b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity's `*` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Multiplication cannot overflow.\\r\\n     */\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a * b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `/` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a / b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * reverting when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a % b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\r\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\r\\n     *\\r\\n     * Counterpart to Solidity's `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            require(b <= a, errorMessage);\\r\\n            return a - b;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            require(b > 0, errorMessage);\\r\\n            return a / b;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * reverting with custom message when dividing by zero.\\r\\n     *\\r\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\r\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\r\\n     *\\r\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            require(b > 0, errorMessage);\\r\\n            return a % b;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\nlibrary Address {\\r\\n    /**\\r\\n     * @dev Returns true if `account` is a contract.\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * It is unsafe to assume that an address for which this function returns\\r\\n     * false is an externally-owned account (EOA) and not a contract.\\r\\n     *\\r\\n     * Among others, `isContract` will return false for the following\\r\\n     * types of addresses:\\r\\n     *\\r\\n     *  - an externally-owned account\\r\\n     *  - a contract in construction\\r\\n     *  - an address where a contract will be created\\r\\n     *  - an address where a contract lived, but was destroyed\\r\\n     * ====\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\r\\n     *\\r\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\r\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\r\\n     * constructor.\\r\\n     * ====\\r\\n     */\\r\\n    function isContract(address account) internal view returns (bool) {\\r\\n        // This method relies on extcodesize/address.code.length, which returns 0\\r\\n        // for contracts in construction, since the code is only stored at the end\\r\\n        // of the constructor execution.\\r\\n\\r\\n        return account.code.length > 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\r\\n     * `recipient`, forwarding all available gas and reverting on errors.\\r\\n     *\\r\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\r\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\r\\n     * imposed by `transfer`, making them unable to receive funds via\\r\\n     * `transfer`. {sendValue} removes this limitation.\\r\\n     *\\r\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\r\\n     *\\r\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\r\\n     * taken to not create reentrancy vulnerabilities. Consider using\\r\\n     * {ReentrancyGuard} or the\\r\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\r\\n     */\\r\\n    function sendValue(address payable recipient, uint256 amount) internal {\\r\\n        require(\\r\\n            address(this).balance >= amount,\\r\\n            \\\"Address: insufficient balance\\\"\\r\\n        );\\r\\n\\r\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\r\\n        require(\\r\\n            success,\\r\\n            \\\"Address: unable to send value, recipient may have reverted\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Performs a Solidity function call using a low level `call`. A\\r\\n     * plain `call` is an unsafe replacement for a function call: use this\\r\\n     * function instead.\\r\\n     *\\r\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\r\\n     * function (like regular Solidity function calls).\\r\\n     *\\r\\n     * Returns the raw returned data. To convert to the expected return value,\\r\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `target` must be a contract.\\r\\n     * - calling `target` with `data` must not revert.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(\\r\\n        address target,\\r\\n        bytes memory data\\r\\n    ) internal returns (bytes memory) {\\r\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\r\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, 0, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but also transferring `value` wei to `target`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the calling contract must have an ETH balance of at least `value`.\\r\\n     * - the called Solidity function must be `payable`.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        uint256 value\\r\\n    ) internal returns (bytes memory) {\\r\\n        return\\r\\n            functionCallWithValue(\\r\\n                target,\\r\\n                data,\\r\\n                value,\\r\\n                \\\"Address: low-level call with value failed\\\"\\r\\n            );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\r\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        uint256 value,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        require(\\r\\n            address(this).balance >= value,\\r\\n            \\\"Address: insufficient balance for call\\\"\\r\\n        );\\r\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\r\\n\\r\\n        (bool success, bytes memory returndata) = target.call{value: value}(\\r\\n            data\\r\\n        );\\r\\n        return verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(\\r\\n        address target,\\r\\n        bytes memory data\\r\\n    ) internal view returns (bytes memory) {\\r\\n        return\\r\\n            functionStaticCall(\\r\\n                target,\\r\\n                data,\\r\\n                \\\"Address: low-level static call failed\\\"\\r\\n            );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal view returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\r\\n\\r\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\r\\n        return verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function functionDelegateCall(\\r\\n        address target,\\r\\n        bytes memory data\\r\\n    ) internal returns (bytes memory) {\\r\\n        return\\r\\n            functionDelegateCall(\\r\\n                target,\\r\\n                data,\\r\\n                \\\"Address: low-level delegate call failed\\\"\\r\\n            );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function functionDelegateCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\r\\n\\r\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\r\\n        return verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\r\\n     * revert reason using the provided one.\\r\\n     *\\r\\n     * _Available since v4.3._\\r\\n     */\\r\\n    function verifyCallResult(\\r\\n        bool success,\\r\\n        bytes memory returndata,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (bytes memory) {\\r\\n        if (success) {\\r\\n            return returndata;\\r\\n        } else {\\r\\n            // Look for revert reason and bubble it up if present\\r\\n            if (returndata.length > 0) {\\r\\n                // The easiest way to bubble the revert reason is using memory via assembly\\r\\n\\r\\n                assembly {\\r\\n                    let returndata_size := mload(returndata)\\r\\n                    revert(add(32, returndata), returndata_size)\\r\\n                }\\r\\n            } else {\\r\\n                revert(errorMessage);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\ninterface IERC20 {\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(\\r\\n        address indexed owner,\\r\\n        address indexed spender,\\r\\n        uint256 value\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address to, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(\\r\\n        address owner,\\r\\n        address spender\\r\\n    ) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender's allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller's\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n}\\r\\n\\r\\nlibrary SafeERC20 {\\r\\n    using Address for address;\\r\\n\\r\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\r\\n        _callOptionalReturn(\\r\\n            token,\\r\\n            abi.encodeWithSelector(token.transfer.selector, to, value)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function safeTransferFrom(\\r\\n        IERC20 token,\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        _callOptionalReturn(\\r\\n            token,\\r\\n            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Deprecated. This function has issues similar to the ones found in\\r\\n     * {IERC20-approve}, and its usage is discouraged.\\r\\n     *\\r\\n     * Whenever possible, use {safeIncreaseAllowance} and\\r\\n     * {safeDecreaseAllowance} instead.\\r\\n     */\\r\\n    function safeApprove(\\r\\n        IERC20 token,\\r\\n        address spender,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        // safeApprove should only be called when setting an initial allowance,\\r\\n        // or when resetting it to zero. To increase and decrease it, use\\r\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\r\\n        require(\\r\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\r\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\r\\n        );\\r\\n        _callOptionalReturn(\\r\\n            token,\\r\\n            abi.encodeWithSelector(token.approve.selector, spender, value)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function safeIncreaseAllowance(\\r\\n        IERC20 token,\\r\\n        address spender,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\r\\n        _callOptionalReturn(\\r\\n            token,\\r\\n            abi.encodeWithSelector(\\r\\n                token.approve.selector,\\r\\n                spender,\\r\\n                newAllowance\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function safeDecreaseAllowance(\\r\\n        IERC20 token,\\r\\n        address spender,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        unchecked {\\r\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\r\\n            require(\\r\\n                oldAllowance >= value,\\r\\n                \\\"SafeERC20: decreased allowance below zero\\\"\\r\\n            );\\r\\n            uint256 newAllowance = oldAllowance - value;\\r\\n            _callOptionalReturn(\\r\\n                token,\\r\\n                abi.encodeWithSelector(\\r\\n                    token.approve.selector,\\r\\n                    spender,\\r\\n                    newAllowance\\r\\n                )\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\r\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\r\\n     * @param token The token targeted by the call.\\r\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\r\\n     */\\r\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\r\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\r\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\r\\n        // the target address contains contract code and also asserts for success in the low-level call.\\r\\n\\r\\n        bytes memory returndata = address(token).functionCall(\\r\\n            data,\\r\\n            \\\"SafeERC20: low-level call failed\\\"\\r\\n        );\\r\\n        if (returndata.length > 0) {\\r\\n            // Return data is optional\\r\\n            require(\\r\\n                abi.decode(returndata, (bool)),\\r\\n                \\\"SafeERC20: ERC20 operation did not succeed\\\"\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n}\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\n/// @title Callback for IPancakeV3PoolActions#swap\\r\\n/// @notice Any contract that calls IPancakeV3PoolActions#swap must implement this interface\\r\\ninterface IPancakeV3SwapCallback {\\r\\n    /// @notice Called to `msg.sender` after executing a swap via IPancakeV3Pool#swap.\\r\\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\\r\\n    /// The caller of this method must be checked to be a PancakeV3Pool deployed by the canonical PancakeV3Factory.\\r\\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\\r\\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\\r\\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\\r\\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\\r\\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\\r\\n    /// @param data Any data passed through by the caller via the IPancakeV3PoolActions#swap call\\r\\n    function pancakeV3SwapCallback(\\r\\n        int256 amount0Delta,\\r\\n        int256 amount1Delta,\\r\\n        bytes calldata data\\r\\n    ) external;\\r\\n}\\r\\n\\r\\ninterface IV3SwapRouter is IPancakeV3SwapCallback {\\r\\n    struct ExactInputSingleParams {\\r\\n        address tokenIn;\\r\\n        address tokenOut;\\r\\n        uint24 fee;\\r\\n        address recipient;\\r\\n        uint256 amountIn;\\r\\n        uint256 amountOutMinimum;\\r\\n        uint160 sqrtPriceLimitX96;\\r\\n    }\\r\\n\\r\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\\r\\n    /// @dev Setting `amountIn` to 0 will cause the contract to look up its own balance,\\r\\n    /// and swap the entire amount, enabling contracts to send tokens before calling this function.\\r\\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\\r\\n    /// @return amountOut The amount of the received token\\r\\n    function exactInputSingle(\\r\\n        ExactInputSingleParams calldata params\\r\\n    ) external payable returns (uint256 amountOut);\\r\\n\\r\\n    struct ExactInputParams {\\r\\n        bytes path;\\r\\n        address recipient;\\r\\n        uint256 amountIn;\\r\\n        uint256 amountOutMinimum;\\r\\n    }\\r\\n\\r\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\\r\\n    /// @dev Setting `amountIn` to 0 will cause the contract to look up its own balance,\\r\\n    /// and swap the entire amount, enabling contracts to send tokens before calling this function.\\r\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\\r\\n    /// @return amountOut The amount of the received token\\r\\n    function exactInput(\\r\\n        ExactInputParams calldata params\\r\\n    ) external payable returns (uint256 amountOut);\\r\\n\\r\\n    struct ExactOutputSingleParams {\\r\\n        address tokenIn;\\r\\n        address tokenOut;\\r\\n        uint24 fee;\\r\\n        address recipient;\\r\\n        uint256 amountOut;\\r\\n        uint256 amountInMaximum;\\r\\n        uint160 sqrtPriceLimitX96;\\r\\n    }\\r\\n\\r\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\\r\\n    /// that may remain in the router after the swap.\\r\\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\\r\\n    /// @return amountIn The amount of the input token\\r\\n    function exactOutputSingle(\\r\\n        ExactOutputSingleParams calldata params\\r\\n    ) external payable returns (uint256 amountIn);\\r\\n\\r\\n    struct ExactOutputParams {\\r\\n        bytes path;\\r\\n        address recipient;\\r\\n        uint256 amountOut;\\r\\n        uint256 amountInMaximum;\\r\\n    }\\r\\n\\r\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\\r\\n    /// that may remain in the router after the swap.\\r\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\\r\\n    /// @return amountIn The amount of the input token\\r\\n    function exactOutput(\\r\\n        ExactOutputParams calldata params\\r\\n    ) external payable returns (uint256 amountIn);\\r\\n\\r\\n     function refundETH() external payable;\\r\\n}\\r\\n\\r\\ncontract V3Swap {\\r\\n    using SafeMath for uint256;\\r\\n    using SafeERC20 for IERC20;\\r\\n    address public routerAddress = 0x13f4EA83D0bd40E75C8222255bc855a974568Dd4;\\r\\n    address public factoryAddress = 0x0BFbCF9fa4f9C56B0F40a671Ad40E0805A091865;\\r\\n    address public wbnbAddress = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;\\r\\n    uint24 fee = 100;\\r\\n\\r\\n    constructor() {}\\r\\n\\r\\n    function getOutputTokenAmount(\\r\\n        uint256 _inputAmount,\\r\\n        address _tokenIn,\\r\\n        address _tokenOut\\r\\n    ) external view returns (uint outputAmount) {\\r\\n        uint256 slotReturnValue = 0;\\r\\n        address pairAddress = IPancakeV3Factory(factoryAddress).getPool(\\r\\n            _tokenIn,\\r\\n            _tokenOut,\\r\\n            fee\\r\\n        );\\r\\n        (slotReturnValue, , , , , , ) = IPancakeV3PoolState(pairAddress)\\r\\n            .slot0();\\r\\n        address token0 = IPancakeV3Pool(pairAddress).token0();\\r\\n        if (_tokenIn == token0)\\r\\n            outputAmount = ((slotReturnValue ** 2 * _inputAmount) / 2 ** 192);\\r\\n        else outputAmount = ((2 ** 192 * _inputAmount) / slotReturnValue ** 2);\\r\\n    }\\r\\n\\r\\n    function _approve(address _token, uint _amount) internal {\\r\\n        IERC20(_token).approve(address(routerAddress), _amount);\\r\\n    }\\r\\n\\r\\n    function swapTokens(\\r\\n        address _tokenIn,\\r\\n        address _tokenOut,\\r\\n        uint256 _amountIn\\r\\n    ) external payable {\\r\\n        IV3SwapRouter.ExactInputSingleParams memory params = IV3SwapRouter\\r\\n            .ExactInputSingleParams(\\r\\n                _tokenIn,\\r\\n                _tokenOut,\\r\\n                fee,\\r\\n                msg.sender,\\r\\n                _amountIn,\\r\\n                0,\\r\\n                0\\r\\n            );\\r\\n        if (_tokenIn == wbnbAddress)\\r\\n            IV3SwapRouter(routerAddress).exactInputSingle{value: msg.value}(\\r\\n                params\\r\\n            );\\r\\n        else {\\r\\n            IERC20(_tokenIn).safeTransferFrom(\\r\\n                msg.sender,\\r\\n                address(this),\\r\\n                _amountIn\\r\\n            );\\r\\n            _approve(_tokenIn,_amountIn);\\r\\n            IV3SwapRouter(routerAddress).exactInputSingle{value: msg.value}(\\r\\n                params\\r\\n            );\\r\\n        }\\r\\n        IV3SwapRouter(routerAddress).refundETH();\\r\\n        // refund leftover ETH to user\\r\\n        (bool success, ) = msg.sender.call{value: address(this).balance}(\\\"\\\");\\r\\n        require(success, \\\"refund failed\\\");\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xfe6ba12da9fa1b1eff0ef756a0460141c1a57ef8bc48bc9baa89ccc88b4b0fb0\",\"license\":\"GPL-2.0-or-later\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"factory()":{"notice":"The contract that deployed the pool, which must adhere to the IPancakeV3Factory interface"},"fee()":{"notice":"The pool's fee in hundredths of a bip, i.e. 1e-6"},"maxLiquidityPerTick()":{"notice":"The maximum amount of position liquidity that can use any tick in the range"},"tickSpacing()":{"notice":"The pool tick spacing"},"token0()":{"notice":"The first of the two tokens of the pool, sorted by address"},"token1()":{"notice":"The second of the two tokens of the pool, sorted by address"}},"version":1}},"IPancakeV3PoolState":{"abi":[{"inputs":[],"name":"slot0","outputs":[{"internalType":"uint160","name":"sqrtPriceX96","type":"uint160"},{"internalType":"int24","name":"tick","type":"int24"},{"internalType":"uint16","name":"observationIndex","type":"uint16"},{"internalType":"uint16","name":"observationCardinality","type":"uint16"},{"internalType":"uint16","name":"observationCardinalityNext","type":"uint16"},{"internalType":"uint32","name":"feeProtocol","type":"uint32"},{"internalType":"bool","name":"unlocked","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"slot0()":"3850c7bd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"slot0\",\"outputs\":[{\"internalType\":\"uint160\",\"name\":\"sqrtPriceX96\",\"type\":\"uint160\"},{\"internalType\":\"int24\",\"name\":\"tick\",\"type\":\"int24\"},{\"internalType\":\"uint16\",\"name\":\"observationIndex\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"observationCardinality\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"observationCardinalityNext\",\"type\":\"uint16\"},{\"internalType\":\"uint32\",\"name\":\"feeProtocol\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"unlocked\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/v3dex.sol\":\"IPancakeV3PoolState\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/v3dex.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\n/// @title The interface for the PancakeSwap V3 Factory\\r\\n/// @notice The PancakeSwap V3 Factory facilitates creation of PancakeSwap V3 pools and control over the protocol fees\\r\\ninterface IPancakeV3Factory {\\r\\n    function getPool(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint24 fee\\r\\n    ) external view returns (address pool);\\r\\n}\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\ninterface IPancakeV3PoolState {\\r\\n    function slot0()\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            uint160 sqrtPriceX96,\\r\\n            int24 tick,\\r\\n            uint16 observationIndex,\\r\\n            uint16 observationCardinality,\\r\\n            uint16 observationCardinalityNext,\\r\\n            uint32 feeProtocol,\\r\\n            bool unlocked\\r\\n        );\\r\\n}\\r\\n\\r\\ninterface IPancakeV3PoolImmutables {\\r\\n    /// @notice The contract that deployed the pool, which must adhere to the IPancakeV3Factory interface\\r\\n    /// @return The contract address\\r\\n    function factory() external view returns (address);\\r\\n\\r\\n    /// @notice The first of the two tokens of the pool, sorted by address\\r\\n    /// @return The token contract address\\r\\n    function token0() external view returns (address);\\r\\n\\r\\n    /// @notice The second of the two tokens of the pool, sorted by address\\r\\n    /// @return The token contract address\\r\\n    function token1() external view returns (address);\\r\\n\\r\\n    /// @notice The pool's fee in hundredths of a bip, i.e. 1e-6\\r\\n    /// @return The fee\\r\\n    function fee() external view returns (uint24);\\r\\n\\r\\n    /// @notice The pool tick spacing\\r\\n    /// @dev Ticks can only be used at multiples of this value, minimum of 1 and always positive\\r\\n    /// e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ...\\r\\n    /// This value is an int24 to avoid casting even though it is always positive.\\r\\n    /// @return The tick spacing\\r\\n    function tickSpacing() external view returns (int24);\\r\\n\\r\\n    /// @notice The maximum amount of position liquidity that can use any tick in the range\\r\\n    /// @dev This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and\\r\\n    /// also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\\r\\n    /// @return The max amount of liquidity per tick\\r\\n    function maxLiquidityPerTick() external view returns (uint128);\\r\\n}\\r\\n\\r\\ninterface IPancakeV3Pool is IPancakeV3PoolState, IPancakeV3PoolImmutables {}\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Provides information about the current execution context, including the\\r\\n * sender of the transaction and its data. While these are generally available\\r\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\r\\n * manner, since when dealing with meta-transactions the account sending and\\r\\n * paying for execution may not be the actual sender (as far as an application\\r\\n * is concerned).\\r\\n *\\r\\n * This contract is only required for intermediate, library-like contracts.\\r\\n */\\r\\nabstract contract Context {\\r\\n    function _msgSender() internal view virtual returns (address) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view virtual returns (bytes calldata) {\\r\\n        return msg.data;\\r\\n    }\\r\\n}\\r\\n\\r\\n// File @openzeppelin/contracts/access/Ownable.sol@v4.6.0\\r\\n\\r\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Contract module which provides a basic access control mechanism, where\\r\\n * there is an account (an owner) that can be granted exclusive access to\\r\\n * specific functions.\\r\\n *\\r\\n * By default, the owner account will be the one that deploys the contract. This\\r\\n * can later be changed with {transferOwnership}.\\r\\n *\\r\\n * This module is used through inheritance. It will make available the modifier\\r\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\r\\n * the owner.\\r\\n */\\r\\nabstract contract Ownable is Context {\\r\\n    address private _owner;\\r\\n\\r\\n    event OwnershipTransferred(\\r\\n        address indexed previousOwner,\\r\\n        address indexed newOwner\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\r\\n     */\\r\\n    constructor() {\\r\\n        _transferOwnership(_msgSender());\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current owner.\\r\\n     */\\r\\n    function owner() public view virtual returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier onlyOwner() {\\r\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Leaves the contract without owner. It will not be possible to call\\r\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\r\\n     *\\r\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\r\\n     * thereby removing any functionality that is only available to the owner.\\r\\n     */\\r\\n    function renounceOwnership() public virtual onlyOwner {\\r\\n        _transferOwnership(address(0));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n        require(\\r\\n            newOwner != address(0),\\r\\n            \\\"Ownable: new owner is the zero address\\\"\\r\\n        );\\r\\n        _transferOwnership(newOwner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Internal function without access restriction.\\r\\n     */\\r\\n    function _transferOwnership(address newOwner) internal virtual {\\r\\n        address oldOwner = _owner;\\r\\n        _owner = newOwner;\\r\\n        emit OwnershipTransferred(oldOwner, newOwner);\\r\\n    }\\r\\n}\\r\\n\\r\\nlibrary SafeMath {\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryAdd(\\r\\n        uint256 a,\\r\\n        uint256 b\\r\\n    ) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            uint256 c = a + b;\\r\\n            if (c < a) return (false, 0);\\r\\n            return (true, c);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function trySub(\\r\\n        uint256 a,\\r\\n        uint256 b\\r\\n    ) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            if (b > a) return (false, 0);\\r\\n            return (true, a - b);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryMul(\\r\\n        uint256 a,\\r\\n        uint256 b\\r\\n    ) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\r\\n            // benefit is lost if 'b' is also tested.\\r\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\r\\n            if (a == 0) return (true, 0);\\r\\n            uint256 c = a * b;\\r\\n            if (c / a != b) return (false, 0);\\r\\n            return (true, c);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryDiv(\\r\\n        uint256 a,\\r\\n        uint256 b\\r\\n    ) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            if (b == 0) return (false, 0);\\r\\n            return (true, a / b);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryMod(\\r\\n        uint256 a,\\r\\n        uint256 b\\r\\n    ) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            if (b == 0) return (false, 0);\\r\\n            return (true, a % b);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity's `+` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Addition cannot overflow.\\r\\n     */\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a + b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity's `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a - b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity's `*` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Multiplication cannot overflow.\\r\\n     */\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a * b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `/` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a / b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * reverting when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a % b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\r\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\r\\n     *\\r\\n     * Counterpart to Solidity's `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            require(b <= a, errorMessage);\\r\\n            return a - b;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            require(b > 0, errorMessage);\\r\\n            return a / b;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * reverting with custom message when dividing by zero.\\r\\n     *\\r\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\r\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\r\\n     *\\r\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            require(b > 0, errorMessage);\\r\\n            return a % b;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\nlibrary Address {\\r\\n    /**\\r\\n     * @dev Returns true if `account` is a contract.\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * It is unsafe to assume that an address for which this function returns\\r\\n     * false is an externally-owned account (EOA) and not a contract.\\r\\n     *\\r\\n     * Among others, `isContract` will return false for the following\\r\\n     * types of addresses:\\r\\n     *\\r\\n     *  - an externally-owned account\\r\\n     *  - a contract in construction\\r\\n     *  - an address where a contract will be created\\r\\n     *  - an address where a contract lived, but was destroyed\\r\\n     * ====\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\r\\n     *\\r\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\r\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\r\\n     * constructor.\\r\\n     * ====\\r\\n     */\\r\\n    function isContract(address account) internal view returns (bool) {\\r\\n        // This method relies on extcodesize/address.code.length, which returns 0\\r\\n        // for contracts in construction, since the code is only stored at the end\\r\\n        // of the constructor execution.\\r\\n\\r\\n        return account.code.length > 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\r\\n     * `recipient`, forwarding all available gas and reverting on errors.\\r\\n     *\\r\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\r\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\r\\n     * imposed by `transfer`, making them unable to receive funds via\\r\\n     * `transfer`. {sendValue} removes this limitation.\\r\\n     *\\r\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\r\\n     *\\r\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\r\\n     * taken to not create reentrancy vulnerabilities. Consider using\\r\\n     * {ReentrancyGuard} or the\\r\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\r\\n     */\\r\\n    function sendValue(address payable recipient, uint256 amount) internal {\\r\\n        require(\\r\\n            address(this).balance >= amount,\\r\\n            \\\"Address: insufficient balance\\\"\\r\\n        );\\r\\n\\r\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\r\\n        require(\\r\\n            success,\\r\\n            \\\"Address: unable to send value, recipient may have reverted\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Performs a Solidity function call using a low level `call`. A\\r\\n     * plain `call` is an unsafe replacement for a function call: use this\\r\\n     * function instead.\\r\\n     *\\r\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\r\\n     * function (like regular Solidity function calls).\\r\\n     *\\r\\n     * Returns the raw returned data. To convert to the expected return value,\\r\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `target` must be a contract.\\r\\n     * - calling `target` with `data` must not revert.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(\\r\\n        address target,\\r\\n        bytes memory data\\r\\n    ) internal returns (bytes memory) {\\r\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\r\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, 0, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but also transferring `value` wei to `target`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the calling contract must have an ETH balance of at least `value`.\\r\\n     * - the called Solidity function must be `payable`.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        uint256 value\\r\\n    ) internal returns (bytes memory) {\\r\\n        return\\r\\n            functionCallWithValue(\\r\\n                target,\\r\\n                data,\\r\\n                value,\\r\\n                \\\"Address: low-level call with value failed\\\"\\r\\n            );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\r\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        uint256 value,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        require(\\r\\n            address(this).balance >= value,\\r\\n            \\\"Address: insufficient balance for call\\\"\\r\\n        );\\r\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\r\\n\\r\\n        (bool success, bytes memory returndata) = target.call{value: value}(\\r\\n            data\\r\\n        );\\r\\n        return verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(\\r\\n        address target,\\r\\n        bytes memory data\\r\\n    ) internal view returns (bytes memory) {\\r\\n        return\\r\\n            functionStaticCall(\\r\\n                target,\\r\\n                data,\\r\\n                \\\"Address: low-level static call failed\\\"\\r\\n            );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal view returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\r\\n\\r\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\r\\n        return verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function functionDelegateCall(\\r\\n        address target,\\r\\n        bytes memory data\\r\\n    ) internal returns (bytes memory) {\\r\\n        return\\r\\n            functionDelegateCall(\\r\\n                target,\\r\\n                data,\\r\\n                \\\"Address: low-level delegate call failed\\\"\\r\\n            );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function functionDelegateCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\r\\n\\r\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\r\\n        return verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\r\\n     * revert reason using the provided one.\\r\\n     *\\r\\n     * _Available since v4.3._\\r\\n     */\\r\\n    function verifyCallResult(\\r\\n        bool success,\\r\\n        bytes memory returndata,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (bytes memory) {\\r\\n        if (success) {\\r\\n            return returndata;\\r\\n        } else {\\r\\n            // Look for revert reason and bubble it up if present\\r\\n            if (returndata.length > 0) {\\r\\n                // The easiest way to bubble the revert reason is using memory via assembly\\r\\n\\r\\n                assembly {\\r\\n                    let returndata_size := mload(returndata)\\r\\n                    revert(add(32, returndata), returndata_size)\\r\\n                }\\r\\n            } else {\\r\\n                revert(errorMessage);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\ninterface IERC20 {\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(\\r\\n        address indexed owner,\\r\\n        address indexed spender,\\r\\n        uint256 value\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address to, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(\\r\\n        address owner,\\r\\n        address spender\\r\\n    ) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender's allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller's\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n}\\r\\n\\r\\nlibrary SafeERC20 {\\r\\n    using Address for address;\\r\\n\\r\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\r\\n        _callOptionalReturn(\\r\\n            token,\\r\\n            abi.encodeWithSelector(token.transfer.selector, to, value)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function safeTransferFrom(\\r\\n        IERC20 token,\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        _callOptionalReturn(\\r\\n            token,\\r\\n            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Deprecated. This function has issues similar to the ones found in\\r\\n     * {IERC20-approve}, and its usage is discouraged.\\r\\n     *\\r\\n     * Whenever possible, use {safeIncreaseAllowance} and\\r\\n     * {safeDecreaseAllowance} instead.\\r\\n     */\\r\\n    function safeApprove(\\r\\n        IERC20 token,\\r\\n        address spender,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        // safeApprove should only be called when setting an initial allowance,\\r\\n        // or when resetting it to zero. To increase and decrease it, use\\r\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\r\\n        require(\\r\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\r\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\r\\n        );\\r\\n        _callOptionalReturn(\\r\\n            token,\\r\\n            abi.encodeWithSelector(token.approve.selector, spender, value)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function safeIncreaseAllowance(\\r\\n        IERC20 token,\\r\\n        address spender,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\r\\n        _callOptionalReturn(\\r\\n            token,\\r\\n            abi.encodeWithSelector(\\r\\n                token.approve.selector,\\r\\n                spender,\\r\\n                newAllowance\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function safeDecreaseAllowance(\\r\\n        IERC20 token,\\r\\n        address spender,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        unchecked {\\r\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\r\\n            require(\\r\\n                oldAllowance >= value,\\r\\n                \\\"SafeERC20: decreased allowance below zero\\\"\\r\\n            );\\r\\n            uint256 newAllowance = oldAllowance - value;\\r\\n            _callOptionalReturn(\\r\\n                token,\\r\\n                abi.encodeWithSelector(\\r\\n                    token.approve.selector,\\r\\n                    spender,\\r\\n                    newAllowance\\r\\n                )\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\r\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\r\\n     * @param token The token targeted by the call.\\r\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\r\\n     */\\r\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\r\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\r\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\r\\n        // the target address contains contract code and also asserts for success in the low-level call.\\r\\n\\r\\n        bytes memory returndata = address(token).functionCall(\\r\\n            data,\\r\\n            \\\"SafeERC20: low-level call failed\\\"\\r\\n        );\\r\\n        if (returndata.length > 0) {\\r\\n            // Return data is optional\\r\\n            require(\\r\\n                abi.decode(returndata, (bool)),\\r\\n                \\\"SafeERC20: ERC20 operation did not succeed\\\"\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n}\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\n/// @title Callback for IPancakeV3PoolActions#swap\\r\\n/// @notice Any contract that calls IPancakeV3PoolActions#swap must implement this interface\\r\\ninterface IPancakeV3SwapCallback {\\r\\n    /// @notice Called to `msg.sender` after executing a swap via IPancakeV3Pool#swap.\\r\\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\\r\\n    /// The caller of this method must be checked to be a PancakeV3Pool deployed by the canonical PancakeV3Factory.\\r\\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\\r\\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\\r\\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\\r\\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\\r\\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\\r\\n    /// @param data Any data passed through by the caller via the IPancakeV3PoolActions#swap call\\r\\n    function pancakeV3SwapCallback(\\r\\n        int256 amount0Delta,\\r\\n        int256 amount1Delta,\\r\\n        bytes calldata data\\r\\n    ) external;\\r\\n}\\r\\n\\r\\ninterface IV3SwapRouter is IPancakeV3SwapCallback {\\r\\n    struct ExactInputSingleParams {\\r\\n        address tokenIn;\\r\\n        address tokenOut;\\r\\n        uint24 fee;\\r\\n        address recipient;\\r\\n        uint256 amountIn;\\r\\n        uint256 amountOutMinimum;\\r\\n        uint160 sqrtPriceLimitX96;\\r\\n    }\\r\\n\\r\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\\r\\n    /// @dev Setting `amountIn` to 0 will cause the contract to look up its own balance,\\r\\n    /// and swap the entire amount, enabling contracts to send tokens before calling this function.\\r\\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\\r\\n    /// @return amountOut The amount of the received token\\r\\n    function exactInputSingle(\\r\\n        ExactInputSingleParams calldata params\\r\\n    ) external payable returns (uint256 amountOut);\\r\\n\\r\\n    struct ExactInputParams {\\r\\n        bytes path;\\r\\n        address recipient;\\r\\n        uint256 amountIn;\\r\\n        uint256 amountOutMinimum;\\r\\n    }\\r\\n\\r\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\\r\\n    /// @dev Setting `amountIn` to 0 will cause the contract to look up its own balance,\\r\\n    /// and swap the entire amount, enabling contracts to send tokens before calling this function.\\r\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\\r\\n    /// @return amountOut The amount of the received token\\r\\n    function exactInput(\\r\\n        ExactInputParams calldata params\\r\\n    ) external payable returns (uint256 amountOut);\\r\\n\\r\\n    struct ExactOutputSingleParams {\\r\\n        address tokenIn;\\r\\n        address tokenOut;\\r\\n        uint24 fee;\\r\\n        address recipient;\\r\\n        uint256 amountOut;\\r\\n        uint256 amountInMaximum;\\r\\n        uint160 sqrtPriceLimitX96;\\r\\n    }\\r\\n\\r\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\\r\\n    /// that may remain in the router after the swap.\\r\\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\\r\\n    /// @return amountIn The amount of the input token\\r\\n    function exactOutputSingle(\\r\\n        ExactOutputSingleParams calldata params\\r\\n    ) external payable returns (uint256 amountIn);\\r\\n\\r\\n    struct ExactOutputParams {\\r\\n        bytes path;\\r\\n        address recipient;\\r\\n        uint256 amountOut;\\r\\n        uint256 amountInMaximum;\\r\\n    }\\r\\n\\r\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\\r\\n    /// that may remain in the router after the swap.\\r\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\\r\\n    /// @return amountIn The amount of the input token\\r\\n    function exactOutput(\\r\\n        ExactOutputParams calldata params\\r\\n    ) external payable returns (uint256 amountIn);\\r\\n\\r\\n     function refundETH() external payable;\\r\\n}\\r\\n\\r\\ncontract V3Swap {\\r\\n    using SafeMath for uint256;\\r\\n    using SafeERC20 for IERC20;\\r\\n    address public routerAddress = 0x13f4EA83D0bd40E75C8222255bc855a974568Dd4;\\r\\n    address public factoryAddress = 0x0BFbCF9fa4f9C56B0F40a671Ad40E0805A091865;\\r\\n    address public wbnbAddress = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;\\r\\n    uint24 fee = 100;\\r\\n\\r\\n    constructor() {}\\r\\n\\r\\n    function getOutputTokenAmount(\\r\\n        uint256 _inputAmount,\\r\\n        address _tokenIn,\\r\\n        address _tokenOut\\r\\n    ) external view returns (uint outputAmount) {\\r\\n        uint256 slotReturnValue = 0;\\r\\n        address pairAddress = IPancakeV3Factory(factoryAddress).getPool(\\r\\n            _tokenIn,\\r\\n            _tokenOut,\\r\\n            fee\\r\\n        );\\r\\n        (slotReturnValue, , , , , , ) = IPancakeV3PoolState(pairAddress)\\r\\n            .slot0();\\r\\n        address token0 = IPancakeV3Pool(pairAddress).token0();\\r\\n        if (_tokenIn == token0)\\r\\n            outputAmount = ((slotReturnValue ** 2 * _inputAmount) / 2 ** 192);\\r\\n        else outputAmount = ((2 ** 192 * _inputAmount) / slotReturnValue ** 2);\\r\\n    }\\r\\n\\r\\n    function _approve(address _token, uint _amount) internal {\\r\\n        IERC20(_token).approve(address(routerAddress), _amount);\\r\\n    }\\r\\n\\r\\n    function swapTokens(\\r\\n        address _tokenIn,\\r\\n        address _tokenOut,\\r\\n        uint256 _amountIn\\r\\n    ) external payable {\\r\\n        IV3SwapRouter.ExactInputSingleParams memory params = IV3SwapRouter\\r\\n            .ExactInputSingleParams(\\r\\n                _tokenIn,\\r\\n                _tokenOut,\\r\\n                fee,\\r\\n                msg.sender,\\r\\n                _amountIn,\\r\\n                0,\\r\\n                0\\r\\n            );\\r\\n        if (_tokenIn == wbnbAddress)\\r\\n            IV3SwapRouter(routerAddress).exactInputSingle{value: msg.value}(\\r\\n                params\\r\\n            );\\r\\n        else {\\r\\n            IERC20(_tokenIn).safeTransferFrom(\\r\\n                msg.sender,\\r\\n                address(this),\\r\\n                _amountIn\\r\\n            );\\r\\n            _approve(_tokenIn,_amountIn);\\r\\n            IV3SwapRouter(routerAddress).exactInputSingle{value: msg.value}(\\r\\n                params\\r\\n            );\\r\\n        }\\r\\n        IV3SwapRouter(routerAddress).refundETH();\\r\\n        // refund leftover ETH to user\\r\\n        (bool success, ) = msg.sender.call{value: address(this).balance}(\\\"\\\");\\r\\n        require(success, \\\"refund failed\\\");\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xfe6ba12da9fa1b1eff0ef756a0460141c1a57ef8bc48bc9baa89ccc88b4b0fb0\",\"license\":\"GPL-2.0-or-later\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}},"IPancakeV3SwapCallback":{"abi":[{"inputs":[{"internalType":"int256","name":"amount0Delta","type":"int256"},{"internalType":"int256","name":"amount1Delta","type":"int256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"pancakeV3SwapCallback","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{"pancakeV3SwapCallback(int256,int256,bytes)":{"details":"In the implementation you must pay the pool tokens owed for the swap. The caller of this method must be checked to be a PancakeV3Pool deployed by the canonical PancakeV3Factory. amount0Delta and amount1Delta can both be 0 if no tokens were swapped.","params":{"amount0Delta":"The amount of token0 that was sent (negative) or must be received (positive) by the pool by the end of the swap. If positive, the callback must send that amount of token0 to the pool.","amount1Delta":"The amount of token1 that was sent (negative) or must be received (positive) by the pool by the end of the swap. If positive, the callback must send that amount of token1 to the pool.","data":"Any data passed through by the caller via the IPancakeV3PoolActions#swap call"}}},"title":"Callback for IPancakeV3PoolActions#swap","version":1},"evm":{"bytecode":{"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"pancakeV3SwapCallback(int256,int256,bytes)":"23a69e75"}},"metadata":"{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"amount0Delta\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"amount1Delta\",\"type\":\"int256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"pancakeV3SwapCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"pancakeV3SwapCallback(int256,int256,bytes)\":{\"details\":\"In the implementation you must pay the pool tokens owed for the swap. The caller of this method must be checked to be a PancakeV3Pool deployed by the canonical PancakeV3Factory. amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\",\"params\":{\"amount0Delta\":\"The amount of token0 that was sent (negative) or must be received (positive) by the pool by the end of the swap. If positive, the callback must send that amount of token0 to the pool.\",\"amount1Delta\":\"The amount of token1 that was sent (negative) or must be received (positive) by the pool by the end of the swap. If positive, the callback must send that amount of token1 to the pool.\",\"data\":\"Any data passed through by the caller via the IPancakeV3PoolActions#swap call\"}}},\"title\":\"Callback for IPancakeV3PoolActions#swap\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"pancakeV3SwapCallback(int256,int256,bytes)\":{\"notice\":\"Called to `msg.sender` after executing a swap via IPancakeV3Pool#swap.\"}},\"notice\":\"Any contract that calls IPancakeV3PoolActions#swap must implement this interface\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/v3dex.sol\":\"IPancakeV3SwapCallback\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/v3dex.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\n/// @title The interface for the PancakeSwap V3 Factory\\r\\n/// @notice The PancakeSwap V3 Factory facilitates creation of PancakeSwap V3 pools and control over the protocol fees\\r\\ninterface IPancakeV3Factory {\\r\\n    function getPool(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint24 fee\\r\\n    ) external view returns (address pool);\\r\\n}\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\ninterface IPancakeV3PoolState {\\r\\n    function slot0()\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            uint160 sqrtPriceX96,\\r\\n            int24 tick,\\r\\n            uint16 observationIndex,\\r\\n            uint16 observationCardinality,\\r\\n            uint16 observationCardinalityNext,\\r\\n            uint32 feeProtocol,\\r\\n            bool unlocked\\r\\n        );\\r\\n}\\r\\n\\r\\ninterface IPancakeV3PoolImmutables {\\r\\n    /// @notice The contract that deployed the pool, which must adhere to the IPancakeV3Factory interface\\r\\n    /// @return The contract address\\r\\n    function factory() external view returns (address);\\r\\n\\r\\n    /// @notice The first of the two tokens of the pool, sorted by address\\r\\n    /// @return The token contract address\\r\\n    function token0() external view returns (address);\\r\\n\\r\\n    /// @notice The second of the two tokens of the pool, sorted by address\\r\\n    /// @return The token contract address\\r\\n    function token1() external view returns (address);\\r\\n\\r\\n    /// @notice The pool's fee in hundredths of a bip, i.e. 1e-6\\r\\n    /// @return The fee\\r\\n    function fee() external view returns (uint24);\\r\\n\\r\\n    /// @notice The pool tick spacing\\r\\n    /// @dev Ticks can only be used at multiples of this value, minimum of 1 and always positive\\r\\n    /// e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ...\\r\\n    /// This value is an int24 to avoid casting even though it is always positive.\\r\\n    /// @return The tick spacing\\r\\n    function tickSpacing() external view returns (int24);\\r\\n\\r\\n    /// @notice The maximum amount of position liquidity that can use any tick in the range\\r\\n    /// @dev This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and\\r\\n    /// also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\\r\\n    /// @return The max amount of liquidity per tick\\r\\n    function maxLiquidityPerTick() external view returns (uint128);\\r\\n}\\r\\n\\r\\ninterface IPancakeV3Pool is IPancakeV3PoolState, IPancakeV3PoolImmutables {}\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Provides information about the current execution context, including the\\r\\n * sender of the transaction and its data. While these are generally available\\r\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\r\\n * manner, since when dealing with meta-transactions the account sending and\\r\\n * paying for execution may not be the actual sender (as far as an application\\r\\n * is concerned).\\r\\n *\\r\\n * This contract is only required for intermediate, library-like contracts.\\r\\n */\\r\\nabstract contract Context {\\r\\n    function _msgSender() internal view virtual returns (address) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view virtual returns (bytes calldata) {\\r\\n        return msg.data;\\r\\n    }\\r\\n}\\r\\n\\r\\n// File @openzeppelin/contracts/access/Ownable.sol@v4.6.0\\r\\n\\r\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Contract module which provides a basic access control mechanism, where\\r\\n * there is an account (an owner) that can be granted exclusive access to\\r\\n * specific functions.\\r\\n *\\r\\n * By default, the owner account will be the one that deploys the contract. This\\r\\n * can later be changed with {transferOwnership}.\\r\\n *\\r\\n * This module is used through inheritance. It will make available the modifier\\r\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\r\\n * the owner.\\r\\n */\\r\\nabstract contract Ownable is Context {\\r\\n    address private _owner;\\r\\n\\r\\n    event OwnershipTransferred(\\r\\n        address indexed previousOwner,\\r\\n        address indexed newOwner\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\r\\n     */\\r\\n    constructor() {\\r\\n        _transferOwnership(_msgSender());\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current owner.\\r\\n     */\\r\\n    function owner() public view virtual returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier onlyOwner() {\\r\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Leaves the contract without owner. It will not be possible to call\\r\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\r\\n     *\\r\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\r\\n     * thereby removing any functionality that is only available to the owner.\\r\\n     */\\r\\n    function renounceOwnership() public virtual onlyOwner {\\r\\n        _transferOwnership(address(0));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n        require(\\r\\n            newOwner != address(0),\\r\\n            \\\"Ownable: new owner is the zero address\\\"\\r\\n        );\\r\\n        _transferOwnership(newOwner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Internal function without access restriction.\\r\\n     */\\r\\n    function _transferOwnership(address newOwner) internal virtual {\\r\\n        address oldOwner = _owner;\\r\\n        _owner = newOwner;\\r\\n        emit OwnershipTransferred(oldOwner, newOwner);\\r\\n    }\\r\\n}\\r\\n\\r\\nlibrary SafeMath {\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryAdd(\\r\\n        uint256 a,\\r\\n        uint256 b\\r\\n    ) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            uint256 c = a + b;\\r\\n            if (c < a) return (false, 0);\\r\\n            return (true, c);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function trySub(\\r\\n        uint256 a,\\r\\n        uint256 b\\r\\n    ) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            if (b > a) return (false, 0);\\r\\n            return (true, a - b);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryMul(\\r\\n        uint256 a,\\r\\n        uint256 b\\r\\n    ) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\r\\n            // benefit is lost if 'b' is also tested.\\r\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\r\\n            if (a == 0) return (true, 0);\\r\\n            uint256 c = a * b;\\r\\n            if (c / a != b) return (false, 0);\\r\\n            return (true, c);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryDiv(\\r\\n        uint256 a,\\r\\n        uint256 b\\r\\n    ) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            if (b == 0) return (false, 0);\\r\\n            return (true, a / b);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryMod(\\r\\n        uint256 a,\\r\\n        uint256 b\\r\\n    ) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            if (b == 0) return (false, 0);\\r\\n            return (true, a % b);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity's `+` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Addition cannot overflow.\\r\\n     */\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a + b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity's `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a - b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity's `*` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Multiplication cannot overflow.\\r\\n     */\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a * b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `/` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a / b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * reverting when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a % b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\r\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\r\\n     *\\r\\n     * Counterpart to Solidity's `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            require(b <= a, errorMessage);\\r\\n            return a - b;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            require(b > 0, errorMessage);\\r\\n            return a / b;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * reverting with custom message when dividing by zero.\\r\\n     *\\r\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\r\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\r\\n     *\\r\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            require(b > 0, errorMessage);\\r\\n            return a % b;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\nlibrary Address {\\r\\n    /**\\r\\n     * @dev Returns true if `account` is a contract.\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * It is unsafe to assume that an address for which this function returns\\r\\n     * false is an externally-owned account (EOA) and not a contract.\\r\\n     *\\r\\n     * Among others, `isContract` will return false for the following\\r\\n     * types of addresses:\\r\\n     *\\r\\n     *  - an externally-owned account\\r\\n     *  - a contract in construction\\r\\n     *  - an address where a contract will be created\\r\\n     *  - an address where a contract lived, but was destroyed\\r\\n     * ====\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\r\\n     *\\r\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\r\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\r\\n     * constructor.\\r\\n     * ====\\r\\n     */\\r\\n    function isContract(address account) internal view returns (bool) {\\r\\n        // This method relies on extcodesize/address.code.length, which returns 0\\r\\n        // for contracts in construction, since the code is only stored at the end\\r\\n        // of the constructor execution.\\r\\n\\r\\n        return account.code.length > 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\r\\n     * `recipient`, forwarding all available gas and reverting on errors.\\r\\n     *\\r\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\r\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\r\\n     * imposed by `transfer`, making them unable to receive funds via\\r\\n     * `transfer`. {sendValue} removes this limitation.\\r\\n     *\\r\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\r\\n     *\\r\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\r\\n     * taken to not create reentrancy vulnerabilities. Consider using\\r\\n     * {ReentrancyGuard} or the\\r\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\r\\n     */\\r\\n    function sendValue(address payable recipient, uint256 amount) internal {\\r\\n        require(\\r\\n            address(this).balance >= amount,\\r\\n            \\\"Address: insufficient balance\\\"\\r\\n        );\\r\\n\\r\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\r\\n        require(\\r\\n            success,\\r\\n            \\\"Address: unable to send value, recipient may have reverted\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Performs a Solidity function call using a low level `call`. A\\r\\n     * plain `call` is an unsafe replacement for a function call: use this\\r\\n     * function instead.\\r\\n     *\\r\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\r\\n     * function (like regular Solidity function calls).\\r\\n     *\\r\\n     * Returns the raw returned data. To convert to the expected return value,\\r\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `target` must be a contract.\\r\\n     * - calling `target` with `data` must not revert.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(\\r\\n        address target,\\r\\n        bytes memory data\\r\\n    ) internal returns (bytes memory) {\\r\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\r\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, 0, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but also transferring `value` wei to `target`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the calling contract must have an ETH balance of at least `value`.\\r\\n     * - the called Solidity function must be `payable`.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        uint256 value\\r\\n    ) internal returns (bytes memory) {\\r\\n        return\\r\\n            functionCallWithValue(\\r\\n                target,\\r\\n                data,\\r\\n                value,\\r\\n                \\\"Address: low-level call with value failed\\\"\\r\\n            );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\r\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        uint256 value,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        require(\\r\\n            address(this).balance >= value,\\r\\n            \\\"Address: insufficient balance for call\\\"\\r\\n        );\\r\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\r\\n\\r\\n        (bool success, bytes memory returndata) = target.call{value: value}(\\r\\n            data\\r\\n        );\\r\\n        return verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(\\r\\n        address target,\\r\\n        bytes memory data\\r\\n    ) internal view returns (bytes memory) {\\r\\n        return\\r\\n            functionStaticCall(\\r\\n                target,\\r\\n                data,\\r\\n                \\\"Address: low-level static call failed\\\"\\r\\n            );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal view returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\r\\n\\r\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\r\\n        return verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function functionDelegateCall(\\r\\n        address target,\\r\\n        bytes memory data\\r\\n    ) internal returns (bytes memory) {\\r\\n        return\\r\\n            functionDelegateCall(\\r\\n                target,\\r\\n                data,\\r\\n                \\\"Address: low-level delegate call failed\\\"\\r\\n            );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function functionDelegateCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\r\\n\\r\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\r\\n        return verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\r\\n     * revert reason using the provided one.\\r\\n     *\\r\\n     * _Available since v4.3._\\r\\n     */\\r\\n    function verifyCallResult(\\r\\n        bool success,\\r\\n        bytes memory returndata,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (bytes memory) {\\r\\n        if (success) {\\r\\n            return returndata;\\r\\n        } else {\\r\\n            // Look for revert reason and bubble it up if present\\r\\n            if (returndata.length > 0) {\\r\\n                // The easiest way to bubble the revert reason is using memory via assembly\\r\\n\\r\\n                assembly {\\r\\n                    let returndata_size := mload(returndata)\\r\\n                    revert(add(32, returndata), returndata_size)\\r\\n                }\\r\\n            } else {\\r\\n                revert(errorMessage);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\ninterface IERC20 {\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(\\r\\n        address indexed owner,\\r\\n        address indexed spender,\\r\\n        uint256 value\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address to, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(\\r\\n        address owner,\\r\\n        address spender\\r\\n    ) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender's allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller's\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n}\\r\\n\\r\\nlibrary SafeERC20 {\\r\\n    using Address for address;\\r\\n\\r\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\r\\n        _callOptionalReturn(\\r\\n            token,\\r\\n            abi.encodeWithSelector(token.transfer.selector, to, value)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function safeTransferFrom(\\r\\n        IERC20 token,\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        _callOptionalReturn(\\r\\n            token,\\r\\n            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Deprecated. This function has issues similar to the ones found in\\r\\n     * {IERC20-approve}, and its usage is discouraged.\\r\\n     *\\r\\n     * Whenever possible, use {safeIncreaseAllowance} and\\r\\n     * {safeDecreaseAllowance} instead.\\r\\n     */\\r\\n    function safeApprove(\\r\\n        IERC20 token,\\r\\n        address spender,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        // safeApprove should only be called when setting an initial allowance,\\r\\n        // or when resetting it to zero. To increase and decrease it, use\\r\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\r\\n        require(\\r\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\r\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\r\\n        );\\r\\n        _callOptionalReturn(\\r\\n            token,\\r\\n            abi.encodeWithSelector(token.approve.selector, spender, value)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function safeIncreaseAllowance(\\r\\n        IERC20 token,\\r\\n        address spender,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\r\\n        _callOptionalReturn(\\r\\n            token,\\r\\n            abi.encodeWithSelector(\\r\\n                token.approve.selector,\\r\\n                spender,\\r\\n                newAllowance\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function safeDecreaseAllowance(\\r\\n        IERC20 token,\\r\\n        address spender,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        unchecked {\\r\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\r\\n            require(\\r\\n                oldAllowance >= value,\\r\\n                \\\"SafeERC20: decreased allowance below zero\\\"\\r\\n            );\\r\\n            uint256 newAllowance = oldAllowance - value;\\r\\n            _callOptionalReturn(\\r\\n                token,\\r\\n                abi.encodeWithSelector(\\r\\n                    token.approve.selector,\\r\\n                    spender,\\r\\n                    newAllowance\\r\\n                )\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\r\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\r\\n     * @param token The token targeted by the call.\\r\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\r\\n     */\\r\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\r\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\r\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\r\\n        // the target address contains contract code and also asserts for success in the low-level call.\\r\\n\\r\\n        bytes memory returndata = address(token).functionCall(\\r\\n            data,\\r\\n            \\\"SafeERC20: low-level call failed\\\"\\r\\n        );\\r\\n        if (returndata.length > 0) {\\r\\n            // Return data is optional\\r\\n            require(\\r\\n                abi.decode(returndata, (bool)),\\r\\n                \\\"SafeERC20: ERC20 operation did not succeed\\\"\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n}\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\n/// @title Callback for IPancakeV3PoolActions#swap\\r\\n/// @notice Any contract that calls IPancakeV3PoolActions#swap must implement this interface\\r\\ninterface IPancakeV3SwapCallback {\\r\\n    /// @notice Called to `msg.sender` after executing a swap via IPancakeV3Pool#swap.\\r\\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\\r\\n    /// The caller of this method must be checked to be a PancakeV3Pool deployed by the canonical PancakeV3Factory.\\r\\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\\r\\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\\r\\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\\r\\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\\r\\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\\r\\n    /// @param data Any data passed through by the caller via the IPancakeV3PoolActions#swap call\\r\\n    function pancakeV3SwapCallback(\\r\\n        int256 amount0Delta,\\r\\n        int256 amount1Delta,\\r\\n        bytes calldata data\\r\\n    ) external;\\r\\n}\\r\\n\\r\\ninterface IV3SwapRouter is IPancakeV3SwapCallback {\\r\\n    struct ExactInputSingleParams {\\r\\n        address tokenIn;\\r\\n        address tokenOut;\\r\\n        uint24 fee;\\r\\n        address recipient;\\r\\n        uint256 amountIn;\\r\\n        uint256 amountOutMinimum;\\r\\n        uint160 sqrtPriceLimitX96;\\r\\n    }\\r\\n\\r\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\\r\\n    /// @dev Setting `amountIn` to 0 will cause the contract to look up its own balance,\\r\\n    /// and swap the entire amount, enabling contracts to send tokens before calling this function.\\r\\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\\r\\n    /// @return amountOut The amount of the received token\\r\\n    function exactInputSingle(\\r\\n        ExactInputSingleParams calldata params\\r\\n    ) external payable returns (uint256 amountOut);\\r\\n\\r\\n    struct ExactInputParams {\\r\\n        bytes path;\\r\\n        address recipient;\\r\\n        uint256 amountIn;\\r\\n        uint256 amountOutMinimum;\\r\\n    }\\r\\n\\r\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\\r\\n    /// @dev Setting `amountIn` to 0 will cause the contract to look up its own balance,\\r\\n    /// and swap the entire amount, enabling contracts to send tokens before calling this function.\\r\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\\r\\n    /// @return amountOut The amount of the received token\\r\\n    function exactInput(\\r\\n        ExactInputParams calldata params\\r\\n    ) external payable returns (uint256 amountOut);\\r\\n\\r\\n    struct ExactOutputSingleParams {\\r\\n        address tokenIn;\\r\\n        address tokenOut;\\r\\n        uint24 fee;\\r\\n        address recipient;\\r\\n        uint256 amountOut;\\r\\n        uint256 amountInMaximum;\\r\\n        uint160 sqrtPriceLimitX96;\\r\\n    }\\r\\n\\r\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\\r\\n    /// that may remain in the router after the swap.\\r\\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\\r\\n    /// @return amountIn The amount of the input token\\r\\n    function exactOutputSingle(\\r\\n        ExactOutputSingleParams calldata params\\r\\n    ) external payable returns (uint256 amountIn);\\r\\n\\r\\n    struct ExactOutputParams {\\r\\n        bytes path;\\r\\n        address recipient;\\r\\n        uint256 amountOut;\\r\\n        uint256 amountInMaximum;\\r\\n    }\\r\\n\\r\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\\r\\n    /// that may remain in the router after the swap.\\r\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\\r\\n    /// @return amountIn The amount of the input token\\r\\n    function exactOutput(\\r\\n        ExactOutputParams calldata params\\r\\n    ) external payable returns (uint256 amountIn);\\r\\n\\r\\n     function refundETH() external payable;\\r\\n}\\r\\n\\r\\ncontract V3Swap {\\r\\n    using SafeMath for uint256;\\r\\n    using SafeERC20 for IERC20;\\r\\n    address public routerAddress = 0x13f4EA83D0bd40E75C8222255bc855a974568Dd4;\\r\\n    address public factoryAddress = 0x0BFbCF9fa4f9C56B0F40a671Ad40E0805A091865;\\r\\n    address public wbnbAddress = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;\\r\\n    uint24 fee = 100;\\r\\n\\r\\n    constructor() {}\\r\\n\\r\\n    function getOutputTokenAmount(\\r\\n        uint256 _inputAmount,\\r\\n        address _tokenIn,\\r\\n        address _tokenOut\\r\\n    ) external view returns (uint outputAmount) {\\r\\n        uint256 slotReturnValue = 0;\\r\\n        address pairAddress = IPancakeV3Factory(factoryAddress).getPool(\\r\\n            _tokenIn,\\r\\n            _tokenOut,\\r\\n            fee\\r\\n        );\\r\\n        (slotReturnValue, , , , , , ) = IPancakeV3PoolState(pairAddress)\\r\\n            .slot0();\\r\\n        address token0 = IPancakeV3Pool(pairAddress).token0();\\r\\n        if (_tokenIn == token0)\\r\\n            outputAmount = ((slotReturnValue ** 2 * _inputAmount) / 2 ** 192);\\r\\n        else outputAmount = ((2 ** 192 * _inputAmount) / slotReturnValue ** 2);\\r\\n    }\\r\\n\\r\\n    function _approve(address _token, uint _amount) internal {\\r\\n        IERC20(_token).approve(address(routerAddress), _amount);\\r\\n    }\\r\\n\\r\\n    function swapTokens(\\r\\n        address _tokenIn,\\r\\n        address _tokenOut,\\r\\n        uint256 _amountIn\\r\\n    ) external payable {\\r\\n        IV3SwapRouter.ExactInputSingleParams memory params = IV3SwapRouter\\r\\n            .ExactInputSingleParams(\\r\\n                _tokenIn,\\r\\n                _tokenOut,\\r\\n                fee,\\r\\n                msg.sender,\\r\\n                _amountIn,\\r\\n                0,\\r\\n                0\\r\\n            );\\r\\n        if (_tokenIn == wbnbAddress)\\r\\n            IV3SwapRouter(routerAddress).exactInputSingle{value: msg.value}(\\r\\n                params\\r\\n            );\\r\\n        else {\\r\\n            IERC20(_tokenIn).safeTransferFrom(\\r\\n                msg.sender,\\r\\n                address(this),\\r\\n                _amountIn\\r\\n            );\\r\\n            _approve(_tokenIn,_amountIn);\\r\\n            IV3SwapRouter(routerAddress).exactInputSingle{value: msg.value}(\\r\\n                params\\r\\n            );\\r\\n        }\\r\\n        IV3SwapRouter(routerAddress).refundETH();\\r\\n        // refund leftover ETH to user\\r\\n        (bool success, ) = msg.sender.call{value: address(this).balance}(\\\"\\\");\\r\\n        require(success, \\\"refund failed\\\");\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xfe6ba12da9fa1b1eff0ef756a0460141c1a57ef8bc48bc9baa89ccc88b4b0fb0\",\"license\":\"GPL-2.0-or-later\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"pancakeV3SwapCallback(int256,int256,bytes)":{"notice":"Called to `msg.sender` after executing a swap via IPancakeV3Pool#swap."}},"notice":"Any contract that calls IPancakeV3PoolActions#swap must implement this interface","version":1}},"IV3SwapRouter":{"abi":[{"inputs":[{"components":[{"internalType":"bytes","name":"path","type":"bytes"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"amountIn","type":"uint256"},{"internalType":"uint256","name":"amountOutMinimum","type":"uint256"}],"internalType":"struct IV3SwapRouter.ExactInputParams","name":"params","type":"tuple"}],"name":"exactInput","outputs":[{"internalType":"uint256","name":"amountOut","type":"uint256"}],"stateMutability":"payable","type":"function"},{"inputs":[{"components":[{"internalType":"address","name":"tokenIn","type":"address"},{"internalType":"address","name":"tokenOut","type":"address"},{"internalType":"uint24","name":"fee","type":"uint24"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"amountIn","type":"uint256"},{"internalType":"uint256","name":"amountOutMinimum","type":"uint256"},{"internalType":"uint160","name":"sqrtPriceLimitX96","type":"uint160"}],"internalType":"struct IV3SwapRouter.ExactInputSingleParams","name":"params","type":"tuple"}],"name":"exactInputSingle","outputs":[{"internalType":"uint256","name":"amountOut","type":"uint256"}],"stateMutability":"payable","type":"function"},{"inputs":[{"components":[{"internalType":"bytes","name":"path","type":"bytes"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"amountOut","type":"uint256"},{"internalType":"uint256","name":"amountInMaximum","type":"uint256"}],"internalType":"struct IV3SwapRouter.ExactOutputParams","name":"params","type":"tuple"}],"name":"exactOutput","outputs":[{"internalType":"uint256","name":"amountIn","type":"uint256"}],"stateMutability":"payable","type":"function"},{"inputs":[{"components":[{"internalType":"address","name":"tokenIn","type":"address"},{"internalType":"address","name":"tokenOut","type":"address"},{"internalType":"uint24","name":"fee","type":"uint24"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"amountOut","type":"uint256"},{"internalType":"uint256","name":"amountInMaximum","type":"uint256"},{"internalType":"uint160","name":"sqrtPriceLimitX96","type":"uint160"}],"internalType":"struct IV3SwapRouter.ExactOutputSingleParams","name":"params","type":"tuple"}],"name":"exactOutputSingle","outputs":[{"internalType":"uint256","name":"amountIn","type":"uint256"}],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"int256","name":"amount0Delta","type":"int256"},{"internalType":"int256","name":"amount1Delta","type":"int256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"pancakeV3SwapCallback","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"refundETH","outputs":[],"stateMutability":"payable","type":"function"}],"devdoc":{"kind":"dev","methods":{"exactInput((bytes,address,uint256,uint256))":{"details":"Setting `amountIn` to 0 will cause the contract to look up its own balance, and swap the entire amount, enabling contracts to send tokens before calling this function.","params":{"params":"The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata"},"returns":{"amountOut":"The amount of the received token"}},"exactInputSingle((address,address,uint24,address,uint256,uint256,uint160))":{"details":"Setting `amountIn` to 0 will cause the contract to look up its own balance, and swap the entire amount, enabling contracts to send tokens before calling this function.","params":{"params":"The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata"},"returns":{"amountOut":"The amount of the received token"}},"exactOutput((bytes,address,uint256,uint256))":{"params":{"params":"The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata"},"returns":{"amountIn":"The amount of the input token"}},"exactOutputSingle((address,address,uint24,address,uint256,uint256,uint160))":{"params":{"params":"The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata"},"returns":{"amountIn":"The amount of the input token"}},"pancakeV3SwapCallback(int256,int256,bytes)":{"details":"In the implementation you must pay the pool tokens owed for the swap. The caller of this method must be checked to be a PancakeV3Pool deployed by the canonical PancakeV3Factory. amount0Delta and amount1Delta can both be 0 if no tokens were swapped.","params":{"amount0Delta":"The amount of token0 that was sent (negative) or must be received (positive) by the pool by the end of the swap. If positive, the callback must send that amount of token0 to the pool.","amount1Delta":"The amount of token1 that was sent (negative) or must be received (positive) by the pool by the end of the swap. If positive, the callback must send that amount of token1 to the pool.","data":"Any data passed through by the caller via the IPancakeV3PoolActions#swap call"}}},"version":1},"evm":{"bytecode":{"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"exactInput((bytes,address,uint256,uint256))":"b858183f","exactInputSingle((address,address,uint24,address,uint256,uint256,uint160))":"04e45aaf","exactOutput((bytes,address,uint256,uint256))":"09b81346","exactOutputSingle((address,address,uint24,address,uint256,uint256,uint160))":"5023b4df","pancakeV3SwapCallback(int256,int256,bytes)":"23a69e75","refundETH()":"12210e8a"}},"metadata":"{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"components\":[{\"internalType\":\"bytes\",\"name\":\"path\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMinimum\",\"type\":\"uint256\"}],\"internalType\":\"struct IV3SwapRouter.ExactInputParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"exactInput\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMinimum\",\"type\":\"uint256\"},{\"internalType\":\"uint160\",\"name\":\"sqrtPriceLimitX96\",\"type\":\"uint160\"}],\"internalType\":\"struct IV3SwapRouter.ExactInputSingleParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"exactInputSingle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes\",\"name\":\"path\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInMaximum\",\"type\":\"uint256\"}],\"internalType\":\"struct IV3SwapRouter.ExactOutputParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"exactOutput\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInMaximum\",\"type\":\"uint256\"},{\"internalType\":\"uint160\",\"name\":\"sqrtPriceLimitX96\",\"type\":\"uint160\"}],\"internalType\":\"struct IV3SwapRouter.ExactOutputSingleParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"exactOutputSingle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"amount0Delta\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"amount1Delta\",\"type\":\"int256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"pancakeV3SwapCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"refundETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"exactInput((bytes,address,uint256,uint256))\":{\"details\":\"Setting `amountIn` to 0 will cause the contract to look up its own balance, and swap the entire amount, enabling contracts to send tokens before calling this function.\",\"params\":{\"params\":\"The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\"},\"returns\":{\"amountOut\":\"The amount of the received token\"}},\"exactInputSingle((address,address,uint24,address,uint256,uint256,uint160))\":{\"details\":\"Setting `amountIn` to 0 will cause the contract to look up its own balance, and swap the entire amount, enabling contracts to send tokens before calling this function.\",\"params\":{\"params\":\"The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\"},\"returns\":{\"amountOut\":\"The amount of the received token\"}},\"exactOutput((bytes,address,uint256,uint256))\":{\"params\":{\"params\":\"The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\"},\"returns\":{\"amountIn\":\"The amount of the input token\"}},\"exactOutputSingle((address,address,uint24,address,uint256,uint256,uint160))\":{\"params\":{\"params\":\"The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\"},\"returns\":{\"amountIn\":\"The amount of the input token\"}},\"pancakeV3SwapCallback(int256,int256,bytes)\":{\"details\":\"In the implementation you must pay the pool tokens owed for the swap. The caller of this method must be checked to be a PancakeV3Pool deployed by the canonical PancakeV3Factory. amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\",\"params\":{\"amount0Delta\":\"The amount of token0 that was sent (negative) or must be received (positive) by the pool by the end of the swap. If positive, the callback must send that amount of token0 to the pool.\",\"amount1Delta\":\"The amount of token1 that was sent (negative) or must be received (positive) by the pool by the end of the swap. If positive, the callback must send that amount of token1 to the pool.\",\"data\":\"Any data passed through by the caller via the IPancakeV3PoolActions#swap call\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"exactInput((bytes,address,uint256,uint256))\":{\"notice\":\"Swaps `amountIn` of one token for as much as possible of another along the specified path\"},\"exactInputSingle((address,address,uint24,address,uint256,uint256,uint160))\":{\"notice\":\"Swaps `amountIn` of one token for as much as possible of another token\"},\"exactOutput((bytes,address,uint256,uint256))\":{\"notice\":\"Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed) that may remain in the router after the swap.\"},\"exactOutputSingle((address,address,uint24,address,uint256,uint256,uint160))\":{\"notice\":\"Swaps as little as possible of one token for `amountOut` of another token that may remain in the router after the swap.\"},\"pancakeV3SwapCallback(int256,int256,bytes)\":{\"notice\":\"Called to `msg.sender` after executing a swap via IPancakeV3Pool#swap.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/v3dex.sol\":\"IV3SwapRouter\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/v3dex.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\n/// @title The interface for the PancakeSwap V3 Factory\\r\\n/// @notice The PancakeSwap V3 Factory facilitates creation of PancakeSwap V3 pools and control over the protocol fees\\r\\ninterface IPancakeV3Factory {\\r\\n    function getPool(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint24 fee\\r\\n    ) external view returns (address pool);\\r\\n}\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\ninterface IPancakeV3PoolState {\\r\\n    function slot0()\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            uint160 sqrtPriceX96,\\r\\n            int24 tick,\\r\\n            uint16 observationIndex,\\r\\n            uint16 observationCardinality,\\r\\n            uint16 observationCardinalityNext,\\r\\n            uint32 feeProtocol,\\r\\n            bool unlocked\\r\\n        );\\r\\n}\\r\\n\\r\\ninterface IPancakeV3PoolImmutables {\\r\\n    /// @notice The contract that deployed the pool, which must adhere to the IPancakeV3Factory interface\\r\\n    /// @return The contract address\\r\\n    function factory() external view returns (address);\\r\\n\\r\\n    /// @notice The first of the two tokens of the pool, sorted by address\\r\\n    /// @return The token contract address\\r\\n    function token0() external view returns (address);\\r\\n\\r\\n    /// @notice The second of the two tokens of the pool, sorted by address\\r\\n    /// @return The token contract address\\r\\n    function token1() external view returns (address);\\r\\n\\r\\n    /// @notice The pool's fee in hundredths of a bip, i.e. 1e-6\\r\\n    /// @return The fee\\r\\n    function fee() external view returns (uint24);\\r\\n\\r\\n    /// @notice The pool tick spacing\\r\\n    /// @dev Ticks can only be used at multiples of this value, minimum of 1 and always positive\\r\\n    /// e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ...\\r\\n    /// This value is an int24 to avoid casting even though it is always positive.\\r\\n    /// @return The tick spacing\\r\\n    function tickSpacing() external view returns (int24);\\r\\n\\r\\n    /// @notice The maximum amount of position liquidity that can use any tick in the range\\r\\n    /// @dev This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and\\r\\n    /// also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\\r\\n    /// @return The max amount of liquidity per tick\\r\\n    function maxLiquidityPerTick() external view returns (uint128);\\r\\n}\\r\\n\\r\\ninterface IPancakeV3Pool is IPancakeV3PoolState, IPancakeV3PoolImmutables {}\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Provides information about the current execution context, including the\\r\\n * sender of the transaction and its data. While these are generally available\\r\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\r\\n * manner, since when dealing with meta-transactions the account sending and\\r\\n * paying for execution may not be the actual sender (as far as an application\\r\\n * is concerned).\\r\\n *\\r\\n * This contract is only required for intermediate, library-like contracts.\\r\\n */\\r\\nabstract contract Context {\\r\\n    function _msgSender() internal view virtual returns (address) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view virtual returns (bytes calldata) {\\r\\n        return msg.data;\\r\\n    }\\r\\n}\\r\\n\\r\\n// File @openzeppelin/contracts/access/Ownable.sol@v4.6.0\\r\\n\\r\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Contract module which provides a basic access control mechanism, where\\r\\n * there is an account (an owner) that can be granted exclusive access to\\r\\n * specific functions.\\r\\n *\\r\\n * By default, the owner account will be the one that deploys the contract. This\\r\\n * can later be changed with {transferOwnership}.\\r\\n *\\r\\n * This module is used through inheritance. It will make available the modifier\\r\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\r\\n * the owner.\\r\\n */\\r\\nabstract contract Ownable is Context {\\r\\n    address private _owner;\\r\\n\\r\\n    event OwnershipTransferred(\\r\\n        address indexed previousOwner,\\r\\n        address indexed newOwner\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\r\\n     */\\r\\n    constructor() {\\r\\n        _transferOwnership(_msgSender());\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current owner.\\r\\n     */\\r\\n    function owner() public view virtual returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier onlyOwner() {\\r\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Leaves the contract without owner. It will not be possible to call\\r\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\r\\n     *\\r\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\r\\n     * thereby removing any functionality that is only available to the owner.\\r\\n     */\\r\\n    function renounceOwnership() public virtual onlyOwner {\\r\\n        _transferOwnership(address(0));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n        require(\\r\\n            newOwner != address(0),\\r\\n            \\\"Ownable: new owner is the zero address\\\"\\r\\n        );\\r\\n        _transferOwnership(newOwner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Internal function without access restriction.\\r\\n     */\\r\\n    function _transferOwnership(address newOwner) internal virtual {\\r\\n        address oldOwner = _owner;\\r\\n        _owner = newOwner;\\r\\n        emit OwnershipTransferred(oldOwner, newOwner);\\r\\n    }\\r\\n}\\r\\n\\r\\nlibrary SafeMath {\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryAdd(\\r\\n        uint256 a,\\r\\n        uint256 b\\r\\n    ) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            uint256 c = a + b;\\r\\n            if (c < a) return (false, 0);\\r\\n            return (true, c);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function trySub(\\r\\n        uint256 a,\\r\\n        uint256 b\\r\\n    ) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            if (b > a) return (false, 0);\\r\\n            return (true, a - b);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryMul(\\r\\n        uint256 a,\\r\\n        uint256 b\\r\\n    ) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\r\\n            // benefit is lost if 'b' is also tested.\\r\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\r\\n            if (a == 0) return (true, 0);\\r\\n            uint256 c = a * b;\\r\\n            if (c / a != b) return (false, 0);\\r\\n            return (true, c);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryDiv(\\r\\n        uint256 a,\\r\\n        uint256 b\\r\\n    ) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            if (b == 0) return (false, 0);\\r\\n            return (true, a / b);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryMod(\\r\\n        uint256 a,\\r\\n        uint256 b\\r\\n    ) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            if (b == 0) return (false, 0);\\r\\n            return (true, a % b);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity's `+` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Addition cannot overflow.\\r\\n     */\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a + b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity's `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a - b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity's `*` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Multiplication cannot overflow.\\r\\n     */\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a * b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `/` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a / b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * reverting when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a % b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\r\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\r\\n     *\\r\\n     * Counterpart to Solidity's `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            require(b <= a, errorMessage);\\r\\n            return a - b;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            require(b > 0, errorMessage);\\r\\n            return a / b;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * reverting with custom message when dividing by zero.\\r\\n     *\\r\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\r\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\r\\n     *\\r\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            require(b > 0, errorMessage);\\r\\n            return a % b;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\nlibrary Address {\\r\\n    /**\\r\\n     * @dev Returns true if `account` is a contract.\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * It is unsafe to assume that an address for which this function returns\\r\\n     * false is an externally-owned account (EOA) and not a contract.\\r\\n     *\\r\\n     * Among others, `isContract` will return false for the following\\r\\n     * types of addresses:\\r\\n     *\\r\\n     *  - an externally-owned account\\r\\n     *  - a contract in construction\\r\\n     *  - an address where a contract will be created\\r\\n     *  - an address where a contract lived, but was destroyed\\r\\n     * ====\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\r\\n     *\\r\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\r\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\r\\n     * constructor.\\r\\n     * ====\\r\\n     */\\r\\n    function isContract(address account) internal view returns (bool) {\\r\\n        // This method relies on extcodesize/address.code.length, which returns 0\\r\\n        // for contracts in construction, since the code is only stored at the end\\r\\n        // of the constructor execution.\\r\\n\\r\\n        return account.code.length > 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\r\\n     * `recipient`, forwarding all available gas and reverting on errors.\\r\\n     *\\r\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\r\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\r\\n     * imposed by `transfer`, making them unable to receive funds via\\r\\n     * `transfer`. {sendValue} removes this limitation.\\r\\n     *\\r\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\r\\n     *\\r\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\r\\n     * taken to not create reentrancy vulnerabilities. Consider using\\r\\n     * {ReentrancyGuard} or the\\r\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\r\\n     */\\r\\n    function sendValue(address payable recipient, uint256 amount) internal {\\r\\n        require(\\r\\n            address(this).balance >= amount,\\r\\n            \\\"Address: insufficient balance\\\"\\r\\n        );\\r\\n\\r\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\r\\n        require(\\r\\n            success,\\r\\n            \\\"Address: unable to send value, recipient may have reverted\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Performs a Solidity function call using a low level `call`. A\\r\\n     * plain `call` is an unsafe replacement for a function call: use this\\r\\n     * function instead.\\r\\n     *\\r\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\r\\n     * function (like regular Solidity function calls).\\r\\n     *\\r\\n     * Returns the raw returned data. To convert to the expected return value,\\r\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `target` must be a contract.\\r\\n     * - calling `target` with `data` must not revert.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(\\r\\n        address target,\\r\\n        bytes memory data\\r\\n    ) internal returns (bytes memory) {\\r\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\r\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, 0, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but also transferring `value` wei to `target`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the calling contract must have an ETH balance of at least `value`.\\r\\n     * - the called Solidity function must be `payable`.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        uint256 value\\r\\n    ) internal returns (bytes memory) {\\r\\n        return\\r\\n            functionCallWithValue(\\r\\n                target,\\r\\n                data,\\r\\n                value,\\r\\n                \\\"Address: low-level call with value failed\\\"\\r\\n            );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\r\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        uint256 value,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        require(\\r\\n            address(this).balance >= value,\\r\\n            \\\"Address: insufficient balance for call\\\"\\r\\n        );\\r\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\r\\n\\r\\n        (bool success, bytes memory returndata) = target.call{value: value}(\\r\\n            data\\r\\n        );\\r\\n        return verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(\\r\\n        address target,\\r\\n        bytes memory data\\r\\n    ) internal view returns (bytes memory) {\\r\\n        return\\r\\n            functionStaticCall(\\r\\n                target,\\r\\n                data,\\r\\n                \\\"Address: low-level static call failed\\\"\\r\\n            );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal view returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\r\\n\\r\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\r\\n        return verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function functionDelegateCall(\\r\\n        address target,\\r\\n        bytes memory data\\r\\n    ) internal returns (bytes memory) {\\r\\n        return\\r\\n            functionDelegateCall(\\r\\n                target,\\r\\n                data,\\r\\n                \\\"Address: low-level delegate call failed\\\"\\r\\n            );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function functionDelegateCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\r\\n\\r\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\r\\n        return verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\r\\n     * revert reason using the provided one.\\r\\n     *\\r\\n     * _Available since v4.3._\\r\\n     */\\r\\n    function verifyCallResult(\\r\\n        bool success,\\r\\n        bytes memory returndata,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (bytes memory) {\\r\\n        if (success) {\\r\\n            return returndata;\\r\\n        } else {\\r\\n            // Look for revert reason and bubble it up if present\\r\\n            if (returndata.length > 0) {\\r\\n                // The easiest way to bubble the revert reason is using memory via assembly\\r\\n\\r\\n                assembly {\\r\\n                    let returndata_size := mload(returndata)\\r\\n                    revert(add(32, returndata), returndata_size)\\r\\n                }\\r\\n            } else {\\r\\n                revert(errorMessage);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\ninterface IERC20 {\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(\\r\\n        address indexed owner,\\r\\n        address indexed spender,\\r\\n        uint256 value\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address to, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(\\r\\n        address owner,\\r\\n        address spender\\r\\n    ) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender's allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller's\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n}\\r\\n\\r\\nlibrary SafeERC20 {\\r\\n    using Address for address;\\r\\n\\r\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\r\\n        _callOptionalReturn(\\r\\n            token,\\r\\n            abi.encodeWithSelector(token.transfer.selector, to, value)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function safeTransferFrom(\\r\\n        IERC20 token,\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        _callOptionalReturn(\\r\\n            token,\\r\\n            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Deprecated. This function has issues similar to the ones found in\\r\\n     * {IERC20-approve}, and its usage is discouraged.\\r\\n     *\\r\\n     * Whenever possible, use {safeIncreaseAllowance} and\\r\\n     * {safeDecreaseAllowance} instead.\\r\\n     */\\r\\n    function safeApprove(\\r\\n        IERC20 token,\\r\\n        address spender,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        // safeApprove should only be called when setting an initial allowance,\\r\\n        // or when resetting it to zero. To increase and decrease it, use\\r\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\r\\n        require(\\r\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\r\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\r\\n        );\\r\\n        _callOptionalReturn(\\r\\n            token,\\r\\n            abi.encodeWithSelector(token.approve.selector, spender, value)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function safeIncreaseAllowance(\\r\\n        IERC20 token,\\r\\n        address spender,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\r\\n        _callOptionalReturn(\\r\\n            token,\\r\\n            abi.encodeWithSelector(\\r\\n                token.approve.selector,\\r\\n                spender,\\r\\n                newAllowance\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function safeDecreaseAllowance(\\r\\n        IERC20 token,\\r\\n        address spender,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        unchecked {\\r\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\r\\n            require(\\r\\n                oldAllowance >= value,\\r\\n                \\\"SafeERC20: decreased allowance below zero\\\"\\r\\n            );\\r\\n            uint256 newAllowance = oldAllowance - value;\\r\\n            _callOptionalReturn(\\r\\n                token,\\r\\n                abi.encodeWithSelector(\\r\\n                    token.approve.selector,\\r\\n                    spender,\\r\\n                    newAllowance\\r\\n                )\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\r\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\r\\n     * @param token The token targeted by the call.\\r\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\r\\n     */\\r\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\r\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\r\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\r\\n        // the target address contains contract code and also asserts for success in the low-level call.\\r\\n\\r\\n        bytes memory returndata = address(token).functionCall(\\r\\n            data,\\r\\n            \\\"SafeERC20: low-level call failed\\\"\\r\\n        );\\r\\n        if (returndata.length > 0) {\\r\\n            // Return data is optional\\r\\n            require(\\r\\n                abi.decode(returndata, (bool)),\\r\\n                \\\"SafeERC20: ERC20 operation did not succeed\\\"\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n}\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\n/// @title Callback for IPancakeV3PoolActions#swap\\r\\n/// @notice Any contract that calls IPancakeV3PoolActions#swap must implement this interface\\r\\ninterface IPancakeV3SwapCallback {\\r\\n    /// @notice Called to `msg.sender` after executing a swap via IPancakeV3Pool#swap.\\r\\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\\r\\n    /// The caller of this method must be checked to be a PancakeV3Pool deployed by the canonical PancakeV3Factory.\\r\\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\\r\\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\\r\\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\\r\\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\\r\\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\\r\\n    /// @param data Any data passed through by the caller via the IPancakeV3PoolActions#swap call\\r\\n    function pancakeV3SwapCallback(\\r\\n        int256 amount0Delta,\\r\\n        int256 amount1Delta,\\r\\n        bytes calldata data\\r\\n    ) external;\\r\\n}\\r\\n\\r\\ninterface IV3SwapRouter is IPancakeV3SwapCallback {\\r\\n    struct ExactInputSingleParams {\\r\\n        address tokenIn;\\r\\n        address tokenOut;\\r\\n        uint24 fee;\\r\\n        address recipient;\\r\\n        uint256 amountIn;\\r\\n        uint256 amountOutMinimum;\\r\\n        uint160 sqrtPriceLimitX96;\\r\\n    }\\r\\n\\r\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\\r\\n    /// @dev Setting `amountIn` to 0 will cause the contract to look up its own balance,\\r\\n    /// and swap the entire amount, enabling contracts to send tokens before calling this function.\\r\\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\\r\\n    /// @return amountOut The amount of the received token\\r\\n    function exactInputSingle(\\r\\n        ExactInputSingleParams calldata params\\r\\n    ) external payable returns (uint256 amountOut);\\r\\n\\r\\n    struct ExactInputParams {\\r\\n        bytes path;\\r\\n        address recipient;\\r\\n        uint256 amountIn;\\r\\n        uint256 amountOutMinimum;\\r\\n    }\\r\\n\\r\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\\r\\n    /// @dev Setting `amountIn` to 0 will cause the contract to look up its own balance,\\r\\n    /// and swap the entire amount, enabling contracts to send tokens before calling this function.\\r\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\\r\\n    /// @return amountOut The amount of the received token\\r\\n    function exactInput(\\r\\n        ExactInputParams calldata params\\r\\n    ) external payable returns (uint256 amountOut);\\r\\n\\r\\n    struct ExactOutputSingleParams {\\r\\n        address tokenIn;\\r\\n        address tokenOut;\\r\\n        uint24 fee;\\r\\n        address recipient;\\r\\n        uint256 amountOut;\\r\\n        uint256 amountInMaximum;\\r\\n        uint160 sqrtPriceLimitX96;\\r\\n    }\\r\\n\\r\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\\r\\n    /// that may remain in the router after the swap.\\r\\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\\r\\n    /// @return amountIn The amount of the input token\\r\\n    function exactOutputSingle(\\r\\n        ExactOutputSingleParams calldata params\\r\\n    ) external payable returns (uint256 amountIn);\\r\\n\\r\\n    struct ExactOutputParams {\\r\\n        bytes path;\\r\\n        address recipient;\\r\\n        uint256 amountOut;\\r\\n        uint256 amountInMaximum;\\r\\n    }\\r\\n\\r\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\\r\\n    /// that may remain in the router after the swap.\\r\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\\r\\n    /// @return amountIn The amount of the input token\\r\\n    function exactOutput(\\r\\n        ExactOutputParams calldata params\\r\\n    ) external payable returns (uint256 amountIn);\\r\\n\\r\\n     function refundETH() external payable;\\r\\n}\\r\\n\\r\\ncontract V3Swap {\\r\\n    using SafeMath for uint256;\\r\\n    using SafeERC20 for IERC20;\\r\\n    address public routerAddress = 0x13f4EA83D0bd40E75C8222255bc855a974568Dd4;\\r\\n    address public factoryAddress = 0x0BFbCF9fa4f9C56B0F40a671Ad40E0805A091865;\\r\\n    address public wbnbAddress = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;\\r\\n    uint24 fee = 100;\\r\\n\\r\\n    constructor() {}\\r\\n\\r\\n    function getOutputTokenAmount(\\r\\n        uint256 _inputAmount,\\r\\n        address _tokenIn,\\r\\n        address _tokenOut\\r\\n    ) external view returns (uint outputAmount) {\\r\\n        uint256 slotReturnValue = 0;\\r\\n        address pairAddress = IPancakeV3Factory(factoryAddress).getPool(\\r\\n            _tokenIn,\\r\\n            _tokenOut,\\r\\n            fee\\r\\n        );\\r\\n        (slotReturnValue, , , , , , ) = IPancakeV3PoolState(pairAddress)\\r\\n            .slot0();\\r\\n        address token0 = IPancakeV3Pool(pairAddress).token0();\\r\\n        if (_tokenIn == token0)\\r\\n            outputAmount = ((slotReturnValue ** 2 * _inputAmount) / 2 ** 192);\\r\\n        else outputAmount = ((2 ** 192 * _inputAmount) / slotReturnValue ** 2);\\r\\n    }\\r\\n\\r\\n    function _approve(address _token, uint _amount) internal {\\r\\n        IERC20(_token).approve(address(routerAddress), _amount);\\r\\n    }\\r\\n\\r\\n    function swapTokens(\\r\\n        address _tokenIn,\\r\\n        address _tokenOut,\\r\\n        uint256 _amountIn\\r\\n    ) external payable {\\r\\n        IV3SwapRouter.ExactInputSingleParams memory params = IV3SwapRouter\\r\\n            .ExactInputSingleParams(\\r\\n                _tokenIn,\\r\\n                _tokenOut,\\r\\n                fee,\\r\\n                msg.sender,\\r\\n                _amountIn,\\r\\n                0,\\r\\n                0\\r\\n            );\\r\\n        if (_tokenIn == wbnbAddress)\\r\\n            IV3SwapRouter(routerAddress).exactInputSingle{value: msg.value}(\\r\\n                params\\r\\n            );\\r\\n        else {\\r\\n            IERC20(_tokenIn).safeTransferFrom(\\r\\n                msg.sender,\\r\\n                address(this),\\r\\n                _amountIn\\r\\n            );\\r\\n            _approve(_tokenIn,_amountIn);\\r\\n            IV3SwapRouter(routerAddress).exactInputSingle{value: msg.value}(\\r\\n                params\\r\\n            );\\r\\n        }\\r\\n        IV3SwapRouter(routerAddress).refundETH();\\r\\n        // refund leftover ETH to user\\r\\n        (bool success, ) = msg.sender.call{value: address(this).balance}(\\\"\\\");\\r\\n        require(success, \\\"refund failed\\\");\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xfe6ba12da9fa1b1eff0ef756a0460141c1a57ef8bc48bc9baa89ccc88b4b0fb0\",\"license\":\"GPL-2.0-or-later\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"exactInput((bytes,address,uint256,uint256))":{"notice":"Swaps `amountIn` of one token for as much as possible of another along the specified path"},"exactInputSingle((address,address,uint24,address,uint256,uint256,uint160))":{"notice":"Swaps `amountIn` of one token for as much as possible of another token"},"exactOutput((bytes,address,uint256,uint256))":{"notice":"Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed) that may remain in the router after the swap."},"exactOutputSingle((address,address,uint24,address,uint256,uint256,uint160))":{"notice":"Swaps as little as possible of one token for `amountOut` of another token that may remain in the router after the swap."},"pancakeV3SwapCallback(int256,int256,bytes)":{"notice":"Called to `msg.sender` after executing a swap via IPancakeV3Pool#swap."}},"version":1}},"Ownable":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.","kind":"dev","methods":{"constructor":{"details":"Initializes the contract setting the deployer as the initial owner."},"owner()":{"details":"Returns the address of the current owner."},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}},"version":1},"evm":{"bytecode":{"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"owner()":"8da5cb5b","renounceOwnership()":"715018a6","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Initializes the contract setting the deployer as the initial owner.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/v3dex.sol\":\"Ownable\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/v3dex.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\n/// @title The interface for the PancakeSwap V3 Factory\\r\\n/// @notice The PancakeSwap V3 Factory facilitates creation of PancakeSwap V3 pools and control over the protocol fees\\r\\ninterface IPancakeV3Factory {\\r\\n    function getPool(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint24 fee\\r\\n    ) external view returns (address pool);\\r\\n}\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\ninterface IPancakeV3PoolState {\\r\\n    function slot0()\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            uint160 sqrtPriceX96,\\r\\n            int24 tick,\\r\\n            uint16 observationIndex,\\r\\n            uint16 observationCardinality,\\r\\n            uint16 observationCardinalityNext,\\r\\n            uint32 feeProtocol,\\r\\n            bool unlocked\\r\\n        );\\r\\n}\\r\\n\\r\\ninterface IPancakeV3PoolImmutables {\\r\\n    /// @notice The contract that deployed the pool, which must adhere to the IPancakeV3Factory interface\\r\\n    /// @return The contract address\\r\\n    function factory() external view returns (address);\\r\\n\\r\\n    /// @notice The first of the two tokens of the pool, sorted by address\\r\\n    /// @return The token contract address\\r\\n    function token0() external view returns (address);\\r\\n\\r\\n    /// @notice The second of the two tokens of the pool, sorted by address\\r\\n    /// @return The token contract address\\r\\n    function token1() external view returns (address);\\r\\n\\r\\n    /// @notice The pool's fee in hundredths of a bip, i.e. 1e-6\\r\\n    /// @return The fee\\r\\n    function fee() external view returns (uint24);\\r\\n\\r\\n    /// @notice The pool tick spacing\\r\\n    /// @dev Ticks can only be used at multiples of this value, minimum of 1 and always positive\\r\\n    /// e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ...\\r\\n    /// This value is an int24 to avoid casting even though it is always positive.\\r\\n    /// @return The tick spacing\\r\\n    function tickSpacing() external view returns (int24);\\r\\n\\r\\n    /// @notice The maximum amount of position liquidity that can use any tick in the range\\r\\n    /// @dev This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and\\r\\n    /// also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\\r\\n    /// @return The max amount of liquidity per tick\\r\\n    function maxLiquidityPerTick() external view returns (uint128);\\r\\n}\\r\\n\\r\\ninterface IPancakeV3Pool is IPancakeV3PoolState, IPancakeV3PoolImmutables {}\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Provides information about the current execution context, including the\\r\\n * sender of the transaction and its data. While these are generally available\\r\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\r\\n * manner, since when dealing with meta-transactions the account sending and\\r\\n * paying for execution may not be the actual sender (as far as an application\\r\\n * is concerned).\\r\\n *\\r\\n * This contract is only required for intermediate, library-like contracts.\\r\\n */\\r\\nabstract contract Context {\\r\\n    function _msgSender() internal view virtual returns (address) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view virtual returns (bytes calldata) {\\r\\n        return msg.data;\\r\\n    }\\r\\n}\\r\\n\\r\\n// File @openzeppelin/contracts/access/Ownable.sol@v4.6.0\\r\\n\\r\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Contract module which provides a basic access control mechanism, where\\r\\n * there is an account (an owner) that can be granted exclusive access to\\r\\n * specific functions.\\r\\n *\\r\\n * By default, the owner account will be the one that deploys the contract. This\\r\\n * can later be changed with {transferOwnership}.\\r\\n *\\r\\n * This module is used through inheritance. It will make available the modifier\\r\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\r\\n * the owner.\\r\\n */\\r\\nabstract contract Ownable is Context {\\r\\n    address private _owner;\\r\\n\\r\\n    event OwnershipTransferred(\\r\\n        address indexed previousOwner,\\r\\n        address indexed newOwner\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\r\\n     */\\r\\n    constructor() {\\r\\n        _transferOwnership(_msgSender());\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current owner.\\r\\n     */\\r\\n    function owner() public view virtual returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier onlyOwner() {\\r\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Leaves the contract without owner. It will not be possible to call\\r\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\r\\n     *\\r\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\r\\n     * thereby removing any functionality that is only available to the owner.\\r\\n     */\\r\\n    function renounceOwnership() public virtual onlyOwner {\\r\\n        _transferOwnership(address(0));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n        require(\\r\\n            newOwner != address(0),\\r\\n            \\\"Ownable: new owner is the zero address\\\"\\r\\n        );\\r\\n        _transferOwnership(newOwner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Internal function without access restriction.\\r\\n     */\\r\\n    function _transferOwnership(address newOwner) internal virtual {\\r\\n        address oldOwner = _owner;\\r\\n        _owner = newOwner;\\r\\n        emit OwnershipTransferred(oldOwner, newOwner);\\r\\n    }\\r\\n}\\r\\n\\r\\nlibrary SafeMath {\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryAdd(\\r\\n        uint256 a,\\r\\n        uint256 b\\r\\n    ) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            uint256 c = a + b;\\r\\n            if (c < a) return (false, 0);\\r\\n            return (true, c);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function trySub(\\r\\n        uint256 a,\\r\\n        uint256 b\\r\\n    ) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            if (b > a) return (false, 0);\\r\\n            return (true, a - b);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryMul(\\r\\n        uint256 a,\\r\\n        uint256 b\\r\\n    ) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\r\\n            // benefit is lost if 'b' is also tested.\\r\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\r\\n            if (a == 0) return (true, 0);\\r\\n            uint256 c = a * b;\\r\\n            if (c / a != b) return (false, 0);\\r\\n            return (true, c);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryDiv(\\r\\n        uint256 a,\\r\\n        uint256 b\\r\\n    ) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            if (b == 0) return (false, 0);\\r\\n            return (true, a / b);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryMod(\\r\\n        uint256 a,\\r\\n        uint256 b\\r\\n    ) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            if (b == 0) return (false, 0);\\r\\n            return (true, a % b);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity's `+` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Addition cannot overflow.\\r\\n     */\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a + b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity's `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a - b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity's `*` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Multiplication cannot overflow.\\r\\n     */\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a * b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `/` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a / b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * reverting when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a % b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\r\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\r\\n     *\\r\\n     * Counterpart to Solidity's `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            require(b <= a, errorMessage);\\r\\n            return a - b;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            require(b > 0, errorMessage);\\r\\n            return a / b;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * reverting with custom message when dividing by zero.\\r\\n     *\\r\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\r\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\r\\n     *\\r\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            require(b > 0, errorMessage);\\r\\n            return a % b;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\nlibrary Address {\\r\\n    /**\\r\\n     * @dev Returns true if `account` is a contract.\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * It is unsafe to assume that an address for which this function returns\\r\\n     * false is an externally-owned account (EOA) and not a contract.\\r\\n     *\\r\\n     * Among others, `isContract` will return false for the following\\r\\n     * types of addresses:\\r\\n     *\\r\\n     *  - an externally-owned account\\r\\n     *  - a contract in construction\\r\\n     *  - an address where a contract will be created\\r\\n     *  - an address where a contract lived, but was destroyed\\r\\n     * ====\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\r\\n     *\\r\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\r\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\r\\n     * constructor.\\r\\n     * ====\\r\\n     */\\r\\n    function isContract(address account) internal view returns (bool) {\\r\\n        // This method relies on extcodesize/address.code.length, which returns 0\\r\\n        // for contracts in construction, since the code is only stored at the end\\r\\n        // of the constructor execution.\\r\\n\\r\\n        return account.code.length > 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\r\\n     * `recipient`, forwarding all available gas and reverting on errors.\\r\\n     *\\r\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\r\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\r\\n     * imposed by `transfer`, making them unable to receive funds via\\r\\n     * `transfer`. {sendValue} removes this limitation.\\r\\n     *\\r\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\r\\n     *\\r\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\r\\n     * taken to not create reentrancy vulnerabilities. Consider using\\r\\n     * {ReentrancyGuard} or the\\r\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\r\\n     */\\r\\n    function sendValue(address payable recipient, uint256 amount) internal {\\r\\n        require(\\r\\n            address(this).balance >= amount,\\r\\n            \\\"Address: insufficient balance\\\"\\r\\n        );\\r\\n\\r\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\r\\n        require(\\r\\n            success,\\r\\n            \\\"Address: unable to send value, recipient may have reverted\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Performs a Solidity function call using a low level `call`. A\\r\\n     * plain `call` is an unsafe replacement for a function call: use this\\r\\n     * function instead.\\r\\n     *\\r\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\r\\n     * function (like regular Solidity function calls).\\r\\n     *\\r\\n     * Returns the raw returned data. To convert to the expected return value,\\r\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `target` must be a contract.\\r\\n     * - calling `target` with `data` must not revert.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(\\r\\n        address target,\\r\\n        bytes memory data\\r\\n    ) internal returns (bytes memory) {\\r\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\r\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, 0, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but also transferring `value` wei to `target`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the calling contract must have an ETH balance of at least `value`.\\r\\n     * - the called Solidity function must be `payable`.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        uint256 value\\r\\n    ) internal returns (bytes memory) {\\r\\n        return\\r\\n            functionCallWithValue(\\r\\n                target,\\r\\n                data,\\r\\n                value,\\r\\n                \\\"Address: low-level call with value failed\\\"\\r\\n            );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\r\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        uint256 value,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        require(\\r\\n            address(this).balance >= value,\\r\\n            \\\"Address: insufficient balance for call\\\"\\r\\n        );\\r\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\r\\n\\r\\n        (bool success, bytes memory returndata) = target.call{value: value}(\\r\\n            data\\r\\n        );\\r\\n        return verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(\\r\\n        address target,\\r\\n        bytes memory data\\r\\n    ) internal view returns (bytes memory) {\\r\\n        return\\r\\n            functionStaticCall(\\r\\n                target,\\r\\n                data,\\r\\n                \\\"Address: low-level static call failed\\\"\\r\\n            );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal view returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\r\\n\\r\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\r\\n        return verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function functionDelegateCall(\\r\\n        address target,\\r\\n        bytes memory data\\r\\n    ) internal returns (bytes memory) {\\r\\n        return\\r\\n            functionDelegateCall(\\r\\n                target,\\r\\n                data,\\r\\n                \\\"Address: low-level delegate call failed\\\"\\r\\n            );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function functionDelegateCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\r\\n\\r\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\r\\n        return verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\r\\n     * revert reason using the provided one.\\r\\n     *\\r\\n     * _Available since v4.3._\\r\\n     */\\r\\n    function verifyCallResult(\\r\\n        bool success,\\r\\n        bytes memory returndata,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (bytes memory) {\\r\\n        if (success) {\\r\\n            return returndata;\\r\\n        } else {\\r\\n            // Look for revert reason and bubble it up if present\\r\\n            if (returndata.length > 0) {\\r\\n                // The easiest way to bubble the revert reason is using memory via assembly\\r\\n\\r\\n                assembly {\\r\\n                    let returndata_size := mload(returndata)\\r\\n                    revert(add(32, returndata), returndata_size)\\r\\n                }\\r\\n            } else {\\r\\n                revert(errorMessage);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\ninterface IERC20 {\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(\\r\\n        address indexed owner,\\r\\n        address indexed spender,\\r\\n        uint256 value\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address to, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(\\r\\n        address owner,\\r\\n        address spender\\r\\n    ) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender's allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller's\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n}\\r\\n\\r\\nlibrary SafeERC20 {\\r\\n    using Address for address;\\r\\n\\r\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\r\\n        _callOptionalReturn(\\r\\n            token,\\r\\n            abi.encodeWithSelector(token.transfer.selector, to, value)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function safeTransferFrom(\\r\\n        IERC20 token,\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        _callOptionalReturn(\\r\\n            token,\\r\\n            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Deprecated. This function has issues similar to the ones found in\\r\\n     * {IERC20-approve}, and its usage is discouraged.\\r\\n     *\\r\\n     * Whenever possible, use {safeIncreaseAllowance} and\\r\\n     * {safeDecreaseAllowance} instead.\\r\\n     */\\r\\n    function safeApprove(\\r\\n        IERC20 token,\\r\\n        address spender,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        // safeApprove should only be called when setting an initial allowance,\\r\\n        // or when resetting it to zero. To increase and decrease it, use\\r\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\r\\n        require(\\r\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\r\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\r\\n        );\\r\\n        _callOptionalReturn(\\r\\n            token,\\r\\n            abi.encodeWithSelector(token.approve.selector, spender, value)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function safeIncreaseAllowance(\\r\\n        IERC20 token,\\r\\n        address spender,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\r\\n        _callOptionalReturn(\\r\\n            token,\\r\\n            abi.encodeWithSelector(\\r\\n                token.approve.selector,\\r\\n                spender,\\r\\n                newAllowance\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function safeDecreaseAllowance(\\r\\n        IERC20 token,\\r\\n        address spender,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        unchecked {\\r\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\r\\n            require(\\r\\n                oldAllowance >= value,\\r\\n                \\\"SafeERC20: decreased allowance below zero\\\"\\r\\n            );\\r\\n            uint256 newAllowance = oldAllowance - value;\\r\\n            _callOptionalReturn(\\r\\n                token,\\r\\n                abi.encodeWithSelector(\\r\\n                    token.approve.selector,\\r\\n                    spender,\\r\\n                    newAllowance\\r\\n                )\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\r\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\r\\n     * @param token The token targeted by the call.\\r\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\r\\n     */\\r\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\r\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\r\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\r\\n        // the target address contains contract code and also asserts for success in the low-level call.\\r\\n\\r\\n        bytes memory returndata = address(token).functionCall(\\r\\n            data,\\r\\n            \\\"SafeERC20: low-level call failed\\\"\\r\\n        );\\r\\n        if (returndata.length > 0) {\\r\\n            // Return data is optional\\r\\n            require(\\r\\n                abi.decode(returndata, (bool)),\\r\\n                \\\"SafeERC20: ERC20 operation did not succeed\\\"\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n}\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\n/// @title Callback for IPancakeV3PoolActions#swap\\r\\n/// @notice Any contract that calls IPancakeV3PoolActions#swap must implement this interface\\r\\ninterface IPancakeV3SwapCallback {\\r\\n    /// @notice Called to `msg.sender` after executing a swap via IPancakeV3Pool#swap.\\r\\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\\r\\n    /// The caller of this method must be checked to be a PancakeV3Pool deployed by the canonical PancakeV3Factory.\\r\\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\\r\\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\\r\\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\\r\\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\\r\\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\\r\\n    /// @param data Any data passed through by the caller via the IPancakeV3PoolActions#swap call\\r\\n    function pancakeV3SwapCallback(\\r\\n        int256 amount0Delta,\\r\\n        int256 amount1Delta,\\r\\n        bytes calldata data\\r\\n    ) external;\\r\\n}\\r\\n\\r\\ninterface IV3SwapRouter is IPancakeV3SwapCallback {\\r\\n    struct ExactInputSingleParams {\\r\\n        address tokenIn;\\r\\n        address tokenOut;\\r\\n        uint24 fee;\\r\\n        address recipient;\\r\\n        uint256 amountIn;\\r\\n        uint256 amountOutMinimum;\\r\\n        uint160 sqrtPriceLimitX96;\\r\\n    }\\r\\n\\r\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\\r\\n    /// @dev Setting `amountIn` to 0 will cause the contract to look up its own balance,\\r\\n    /// and swap the entire amount, enabling contracts to send tokens before calling this function.\\r\\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\\r\\n    /// @return amountOut The amount of the received token\\r\\n    function exactInputSingle(\\r\\n        ExactInputSingleParams calldata params\\r\\n    ) external payable returns (uint256 amountOut);\\r\\n\\r\\n    struct ExactInputParams {\\r\\n        bytes path;\\r\\n        address recipient;\\r\\n        uint256 amountIn;\\r\\n        uint256 amountOutMinimum;\\r\\n    }\\r\\n\\r\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\\r\\n    /// @dev Setting `amountIn` to 0 will cause the contract to look up its own balance,\\r\\n    /// and swap the entire amount, enabling contracts to send tokens before calling this function.\\r\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\\r\\n    /// @return amountOut The amount of the received token\\r\\n    function exactInput(\\r\\n        ExactInputParams calldata params\\r\\n    ) external payable returns (uint256 amountOut);\\r\\n\\r\\n    struct ExactOutputSingleParams {\\r\\n        address tokenIn;\\r\\n        address tokenOut;\\r\\n        uint24 fee;\\r\\n        address recipient;\\r\\n        uint256 amountOut;\\r\\n        uint256 amountInMaximum;\\r\\n        uint160 sqrtPriceLimitX96;\\r\\n    }\\r\\n\\r\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\\r\\n    /// that may remain in the router after the swap.\\r\\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\\r\\n    /// @return amountIn The amount of the input token\\r\\n    function exactOutputSingle(\\r\\n        ExactOutputSingleParams calldata params\\r\\n    ) external payable returns (uint256 amountIn);\\r\\n\\r\\n    struct ExactOutputParams {\\r\\n        bytes path;\\r\\n        address recipient;\\r\\n        uint256 amountOut;\\r\\n        uint256 amountInMaximum;\\r\\n    }\\r\\n\\r\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\\r\\n    /// that may remain in the router after the swap.\\r\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\\r\\n    /// @return amountIn The amount of the input token\\r\\n    function exactOutput(\\r\\n        ExactOutputParams calldata params\\r\\n    ) external payable returns (uint256 amountIn);\\r\\n\\r\\n     function refundETH() external payable;\\r\\n}\\r\\n\\r\\ncontract V3Swap {\\r\\n    using SafeMath for uint256;\\r\\n    using SafeERC20 for IERC20;\\r\\n    address public routerAddress = 0x13f4EA83D0bd40E75C8222255bc855a974568Dd4;\\r\\n    address public factoryAddress = 0x0BFbCF9fa4f9C56B0F40a671Ad40E0805A091865;\\r\\n    address public wbnbAddress = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;\\r\\n    uint24 fee = 100;\\r\\n\\r\\n    constructor() {}\\r\\n\\r\\n    function getOutputTokenAmount(\\r\\n        uint256 _inputAmount,\\r\\n        address _tokenIn,\\r\\n        address _tokenOut\\r\\n    ) external view returns (uint outputAmount) {\\r\\n        uint256 slotReturnValue = 0;\\r\\n        address pairAddress = IPancakeV3Factory(factoryAddress).getPool(\\r\\n            _tokenIn,\\r\\n            _tokenOut,\\r\\n            fee\\r\\n        );\\r\\n        (slotReturnValue, , , , , , ) = IPancakeV3PoolState(pairAddress)\\r\\n            .slot0();\\r\\n        address token0 = IPancakeV3Pool(pairAddress).token0();\\r\\n        if (_tokenIn == token0)\\r\\n            outputAmount = ((slotReturnValue ** 2 * _inputAmount) / 2 ** 192);\\r\\n        else outputAmount = ((2 ** 192 * _inputAmount) / slotReturnValue ** 2);\\r\\n    }\\r\\n\\r\\n    function _approve(address _token, uint _amount) internal {\\r\\n        IERC20(_token).approve(address(routerAddress), _amount);\\r\\n    }\\r\\n\\r\\n    function swapTokens(\\r\\n        address _tokenIn,\\r\\n        address _tokenOut,\\r\\n        uint256 _amountIn\\r\\n    ) external payable {\\r\\n        IV3SwapRouter.ExactInputSingleParams memory params = IV3SwapRouter\\r\\n            .ExactInputSingleParams(\\r\\n                _tokenIn,\\r\\n                _tokenOut,\\r\\n                fee,\\r\\n                msg.sender,\\r\\n                _amountIn,\\r\\n                0,\\r\\n                0\\r\\n            );\\r\\n        if (_tokenIn == wbnbAddress)\\r\\n            IV3SwapRouter(routerAddress).exactInputSingle{value: msg.value}(\\r\\n                params\\r\\n            );\\r\\n        else {\\r\\n            IERC20(_tokenIn).safeTransferFrom(\\r\\n                msg.sender,\\r\\n                address(this),\\r\\n                _amountIn\\r\\n            );\\r\\n            _approve(_tokenIn,_amountIn);\\r\\n            IV3SwapRouter(routerAddress).exactInputSingle{value: msg.value}(\\r\\n                params\\r\\n            );\\r\\n        }\\r\\n        IV3SwapRouter(routerAddress).refundETH();\\r\\n        // refund leftover ETH to user\\r\\n        (bool success, ) = msg.sender.call{value: address(this).balance}(\\\"\\\");\\r\\n        require(success, \\\"refund failed\\\");\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xfe6ba12da9fa1b1eff0ef756a0460141c1a57ef8bc48bc9baa89ccc88b4b0fb0\",\"license\":\"GPL-2.0-or-later\"}},\"version\":1}","storageLayout":{"storage":[{"astId":2947,"contract":"contracts/v3dex.sol:Ownable","label":"_owner","offset":0,"slot":"0","type":"t_address"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"}}},"userdoc":{"kind":"user","methods":{},"version":1}},"SafeERC20":{"abi":[],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122077f95e75e0fc2bf3892c32adda96e2cdcd669bc3cb00aca5c7381dfa78605b8064736f6c63430008040033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH24 0xF95E75E0FC2BF3892C32ADDA96E2CDCD669BC3CB00ACA5C7 CODESIZE SAR STATICCALL PUSH25 0x605B8064736F6C634300080400330000000000000000000000 ","sourceMap":"23980:3797:2:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;23980:3797:2;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122077f95e75e0fc2bf3892c32adda96e2cdcd669bc3cb00aca5c7381dfa78605b8064736f6c63430008040033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH24 0xF95E75E0FC2BF3892C32ADDA96E2CDCD669BC3CB00ACA5C7 CODESIZE SAR STATICCALL PUSH25 0x605B8064736F6C634300080400330000000000000000000000 ","sourceMap":"23980:3797:2:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"_callOptionalReturn(contract IERC20,bytes memory)":"infinite","safeApprove(contract IERC20,address,uint256)":"infinite","safeDecreaseAllowance(contract IERC20,address,uint256)":"infinite","safeIncreaseAllowance(contract IERC20,address,uint256)":"infinite","safeTransfer(contract IERC20,address,uint256)":"infinite","safeTransferFrom(contract IERC20,address,address,uint256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/v3dex.sol\":\"SafeERC20\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/v3dex.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\n/// @title The interface for the PancakeSwap V3 Factory\\r\\n/// @notice The PancakeSwap V3 Factory facilitates creation of PancakeSwap V3 pools and control over the protocol fees\\r\\ninterface IPancakeV3Factory {\\r\\n    function getPool(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint24 fee\\r\\n    ) external view returns (address pool);\\r\\n}\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\ninterface IPancakeV3PoolState {\\r\\n    function slot0()\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            uint160 sqrtPriceX96,\\r\\n            int24 tick,\\r\\n            uint16 observationIndex,\\r\\n            uint16 observationCardinality,\\r\\n            uint16 observationCardinalityNext,\\r\\n            uint32 feeProtocol,\\r\\n            bool unlocked\\r\\n        );\\r\\n}\\r\\n\\r\\ninterface IPancakeV3PoolImmutables {\\r\\n    /// @notice The contract that deployed the pool, which must adhere to the IPancakeV3Factory interface\\r\\n    /// @return The contract address\\r\\n    function factory() external view returns (address);\\r\\n\\r\\n    /// @notice The first of the two tokens of the pool, sorted by address\\r\\n    /// @return The token contract address\\r\\n    function token0() external view returns (address);\\r\\n\\r\\n    /// @notice The second of the two tokens of the pool, sorted by address\\r\\n    /// @return The token contract address\\r\\n    function token1() external view returns (address);\\r\\n\\r\\n    /// @notice The pool's fee in hundredths of a bip, i.e. 1e-6\\r\\n    /// @return The fee\\r\\n    function fee() external view returns (uint24);\\r\\n\\r\\n    /// @notice The pool tick spacing\\r\\n    /// @dev Ticks can only be used at multiples of this value, minimum of 1 and always positive\\r\\n    /// e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ...\\r\\n    /// This value is an int24 to avoid casting even though it is always positive.\\r\\n    /// @return The tick spacing\\r\\n    function tickSpacing() external view returns (int24);\\r\\n\\r\\n    /// @notice The maximum amount of position liquidity that can use any tick in the range\\r\\n    /// @dev This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and\\r\\n    /// also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\\r\\n    /// @return The max amount of liquidity per tick\\r\\n    function maxLiquidityPerTick() external view returns (uint128);\\r\\n}\\r\\n\\r\\ninterface IPancakeV3Pool is IPancakeV3PoolState, IPancakeV3PoolImmutables {}\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Provides information about the current execution context, including the\\r\\n * sender of the transaction and its data. While these are generally available\\r\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\r\\n * manner, since when dealing with meta-transactions the account sending and\\r\\n * paying for execution may not be the actual sender (as far as an application\\r\\n * is concerned).\\r\\n *\\r\\n * This contract is only required for intermediate, library-like contracts.\\r\\n */\\r\\nabstract contract Context {\\r\\n    function _msgSender() internal view virtual returns (address) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view virtual returns (bytes calldata) {\\r\\n        return msg.data;\\r\\n    }\\r\\n}\\r\\n\\r\\n// File @openzeppelin/contracts/access/Ownable.sol@v4.6.0\\r\\n\\r\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Contract module which provides a basic access control mechanism, where\\r\\n * there is an account (an owner) that can be granted exclusive access to\\r\\n * specific functions.\\r\\n *\\r\\n * By default, the owner account will be the one that deploys the contract. This\\r\\n * can later be changed with {transferOwnership}.\\r\\n *\\r\\n * This module is used through inheritance. It will make available the modifier\\r\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\r\\n * the owner.\\r\\n */\\r\\nabstract contract Ownable is Context {\\r\\n    address private _owner;\\r\\n\\r\\n    event OwnershipTransferred(\\r\\n        address indexed previousOwner,\\r\\n        address indexed newOwner\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\r\\n     */\\r\\n    constructor() {\\r\\n        _transferOwnership(_msgSender());\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current owner.\\r\\n     */\\r\\n    function owner() public view virtual returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier onlyOwner() {\\r\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Leaves the contract without owner. It will not be possible to call\\r\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\r\\n     *\\r\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\r\\n     * thereby removing any functionality that is only available to the owner.\\r\\n     */\\r\\n    function renounceOwnership() public virtual onlyOwner {\\r\\n        _transferOwnership(address(0));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n        require(\\r\\n            newOwner != address(0),\\r\\n            \\\"Ownable: new owner is the zero address\\\"\\r\\n        );\\r\\n        _transferOwnership(newOwner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Internal function without access restriction.\\r\\n     */\\r\\n    function _transferOwnership(address newOwner) internal virtual {\\r\\n        address oldOwner = _owner;\\r\\n        _owner = newOwner;\\r\\n        emit OwnershipTransferred(oldOwner, newOwner);\\r\\n    }\\r\\n}\\r\\n\\r\\nlibrary SafeMath {\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryAdd(\\r\\n        uint256 a,\\r\\n        uint256 b\\r\\n    ) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            uint256 c = a + b;\\r\\n            if (c < a) return (false, 0);\\r\\n            return (true, c);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function trySub(\\r\\n        uint256 a,\\r\\n        uint256 b\\r\\n    ) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            if (b > a) return (false, 0);\\r\\n            return (true, a - b);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryMul(\\r\\n        uint256 a,\\r\\n        uint256 b\\r\\n    ) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\r\\n            // benefit is lost if 'b' is also tested.\\r\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\r\\n            if (a == 0) return (true, 0);\\r\\n            uint256 c = a * b;\\r\\n            if (c / a != b) return (false, 0);\\r\\n            return (true, c);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryDiv(\\r\\n        uint256 a,\\r\\n        uint256 b\\r\\n    ) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            if (b == 0) return (false, 0);\\r\\n            return (true, a / b);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryMod(\\r\\n        uint256 a,\\r\\n        uint256 b\\r\\n    ) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            if (b == 0) return (false, 0);\\r\\n            return (true, a % b);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity's `+` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Addition cannot overflow.\\r\\n     */\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a + b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity's `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a - b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity's `*` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Multiplication cannot overflow.\\r\\n     */\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a * b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `/` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a / b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * reverting when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a % b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\r\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\r\\n     *\\r\\n     * Counterpart to Solidity's `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            require(b <= a, errorMessage);\\r\\n            return a - b;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            require(b > 0, errorMessage);\\r\\n            return a / b;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * reverting with custom message when dividing by zero.\\r\\n     *\\r\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\r\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\r\\n     *\\r\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            require(b > 0, errorMessage);\\r\\n            return a % b;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\nlibrary Address {\\r\\n    /**\\r\\n     * @dev Returns true if `account` is a contract.\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * It is unsafe to assume that an address for which this function returns\\r\\n     * false is an externally-owned account (EOA) and not a contract.\\r\\n     *\\r\\n     * Among others, `isContract` will return false for the following\\r\\n     * types of addresses:\\r\\n     *\\r\\n     *  - an externally-owned account\\r\\n     *  - a contract in construction\\r\\n     *  - an address where a contract will be created\\r\\n     *  - an address where a contract lived, but was destroyed\\r\\n     * ====\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\r\\n     *\\r\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\r\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\r\\n     * constructor.\\r\\n     * ====\\r\\n     */\\r\\n    function isContract(address account) internal view returns (bool) {\\r\\n        // This method relies on extcodesize/address.code.length, which returns 0\\r\\n        // for contracts in construction, since the code is only stored at the end\\r\\n        // of the constructor execution.\\r\\n\\r\\n        return account.code.length > 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\r\\n     * `recipient`, forwarding all available gas and reverting on errors.\\r\\n     *\\r\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\r\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\r\\n     * imposed by `transfer`, making them unable to receive funds via\\r\\n     * `transfer`. {sendValue} removes this limitation.\\r\\n     *\\r\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\r\\n     *\\r\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\r\\n     * taken to not create reentrancy vulnerabilities. Consider using\\r\\n     * {ReentrancyGuard} or the\\r\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\r\\n     */\\r\\n    function sendValue(address payable recipient, uint256 amount) internal {\\r\\n        require(\\r\\n            address(this).balance >= amount,\\r\\n            \\\"Address: insufficient balance\\\"\\r\\n        );\\r\\n\\r\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\r\\n        require(\\r\\n            success,\\r\\n            \\\"Address: unable to send value, recipient may have reverted\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Performs a Solidity function call using a low level `call`. A\\r\\n     * plain `call` is an unsafe replacement for a function call: use this\\r\\n     * function instead.\\r\\n     *\\r\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\r\\n     * function (like regular Solidity function calls).\\r\\n     *\\r\\n     * Returns the raw returned data. To convert to the expected return value,\\r\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `target` must be a contract.\\r\\n     * - calling `target` with `data` must not revert.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(\\r\\n        address target,\\r\\n        bytes memory data\\r\\n    ) internal returns (bytes memory) {\\r\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\r\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, 0, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but also transferring `value` wei to `target`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the calling contract must have an ETH balance of at least `value`.\\r\\n     * - the called Solidity function must be `payable`.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        uint256 value\\r\\n    ) internal returns (bytes memory) {\\r\\n        return\\r\\n            functionCallWithValue(\\r\\n                target,\\r\\n                data,\\r\\n                value,\\r\\n                \\\"Address: low-level call with value failed\\\"\\r\\n            );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\r\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        uint256 value,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        require(\\r\\n            address(this).balance >= value,\\r\\n            \\\"Address: insufficient balance for call\\\"\\r\\n        );\\r\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\r\\n\\r\\n        (bool success, bytes memory returndata) = target.call{value: value}(\\r\\n            data\\r\\n        );\\r\\n        return verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(\\r\\n        address target,\\r\\n        bytes memory data\\r\\n    ) internal view returns (bytes memory) {\\r\\n        return\\r\\n            functionStaticCall(\\r\\n                target,\\r\\n                data,\\r\\n                \\\"Address: low-level static call failed\\\"\\r\\n            );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal view returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\r\\n\\r\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\r\\n        return verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function functionDelegateCall(\\r\\n        address target,\\r\\n        bytes memory data\\r\\n    ) internal returns (bytes memory) {\\r\\n        return\\r\\n            functionDelegateCall(\\r\\n                target,\\r\\n                data,\\r\\n                \\\"Address: low-level delegate call failed\\\"\\r\\n            );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function functionDelegateCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\r\\n\\r\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\r\\n        return verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\r\\n     * revert reason using the provided one.\\r\\n     *\\r\\n     * _Available since v4.3._\\r\\n     */\\r\\n    function verifyCallResult(\\r\\n        bool success,\\r\\n        bytes memory returndata,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (bytes memory) {\\r\\n        if (success) {\\r\\n            return returndata;\\r\\n        } else {\\r\\n            // Look for revert reason and bubble it up if present\\r\\n            if (returndata.length > 0) {\\r\\n                // The easiest way to bubble the revert reason is using memory via assembly\\r\\n\\r\\n                assembly {\\r\\n                    let returndata_size := mload(returndata)\\r\\n                    revert(add(32, returndata), returndata_size)\\r\\n                }\\r\\n            } else {\\r\\n                revert(errorMessage);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\ninterface IERC20 {\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(\\r\\n        address indexed owner,\\r\\n        address indexed spender,\\r\\n        uint256 value\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address to, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(\\r\\n        address owner,\\r\\n        address spender\\r\\n    ) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender's allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller's\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n}\\r\\n\\r\\nlibrary SafeERC20 {\\r\\n    using Address for address;\\r\\n\\r\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\r\\n        _callOptionalReturn(\\r\\n            token,\\r\\n            abi.encodeWithSelector(token.transfer.selector, to, value)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function safeTransferFrom(\\r\\n        IERC20 token,\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        _callOptionalReturn(\\r\\n            token,\\r\\n            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Deprecated. This function has issues similar to the ones found in\\r\\n     * {IERC20-approve}, and its usage is discouraged.\\r\\n     *\\r\\n     * Whenever possible, use {safeIncreaseAllowance} and\\r\\n     * {safeDecreaseAllowance} instead.\\r\\n     */\\r\\n    function safeApprove(\\r\\n        IERC20 token,\\r\\n        address spender,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        // safeApprove should only be called when setting an initial allowance,\\r\\n        // or when resetting it to zero. To increase and decrease it, use\\r\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\r\\n        require(\\r\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\r\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\r\\n        );\\r\\n        _callOptionalReturn(\\r\\n            token,\\r\\n            abi.encodeWithSelector(token.approve.selector, spender, value)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function safeIncreaseAllowance(\\r\\n        IERC20 token,\\r\\n        address spender,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\r\\n        _callOptionalReturn(\\r\\n            token,\\r\\n            abi.encodeWithSelector(\\r\\n                token.approve.selector,\\r\\n                spender,\\r\\n                newAllowance\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function safeDecreaseAllowance(\\r\\n        IERC20 token,\\r\\n        address spender,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        unchecked {\\r\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\r\\n            require(\\r\\n                oldAllowance >= value,\\r\\n                \\\"SafeERC20: decreased allowance below zero\\\"\\r\\n            );\\r\\n            uint256 newAllowance = oldAllowance - value;\\r\\n            _callOptionalReturn(\\r\\n                token,\\r\\n                abi.encodeWithSelector(\\r\\n                    token.approve.selector,\\r\\n                    spender,\\r\\n                    newAllowance\\r\\n                )\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\r\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\r\\n     * @param token The token targeted by the call.\\r\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\r\\n     */\\r\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\r\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\r\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\r\\n        // the target address contains contract code and also asserts for success in the low-level call.\\r\\n\\r\\n        bytes memory returndata = address(token).functionCall(\\r\\n            data,\\r\\n            \\\"SafeERC20: low-level call failed\\\"\\r\\n        );\\r\\n        if (returndata.length > 0) {\\r\\n            // Return data is optional\\r\\n            require(\\r\\n                abi.decode(returndata, (bool)),\\r\\n                \\\"SafeERC20: ERC20 operation did not succeed\\\"\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n}\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\n/// @title Callback for IPancakeV3PoolActions#swap\\r\\n/// @notice Any contract that calls IPancakeV3PoolActions#swap must implement this interface\\r\\ninterface IPancakeV3SwapCallback {\\r\\n    /// @notice Called to `msg.sender` after executing a swap via IPancakeV3Pool#swap.\\r\\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\\r\\n    /// The caller of this method must be checked to be a PancakeV3Pool deployed by the canonical PancakeV3Factory.\\r\\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\\r\\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\\r\\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\\r\\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\\r\\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\\r\\n    /// @param data Any data passed through by the caller via the IPancakeV3PoolActions#swap call\\r\\n    function pancakeV3SwapCallback(\\r\\n        int256 amount0Delta,\\r\\n        int256 amount1Delta,\\r\\n        bytes calldata data\\r\\n    ) external;\\r\\n}\\r\\n\\r\\ninterface IV3SwapRouter is IPancakeV3SwapCallback {\\r\\n    struct ExactInputSingleParams {\\r\\n        address tokenIn;\\r\\n        address tokenOut;\\r\\n        uint24 fee;\\r\\n        address recipient;\\r\\n        uint256 amountIn;\\r\\n        uint256 amountOutMinimum;\\r\\n        uint160 sqrtPriceLimitX96;\\r\\n    }\\r\\n\\r\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\\r\\n    /// @dev Setting `amountIn` to 0 will cause the contract to look up its own balance,\\r\\n    /// and swap the entire amount, enabling contracts to send tokens before calling this function.\\r\\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\\r\\n    /// @return amountOut The amount of the received token\\r\\n    function exactInputSingle(\\r\\n        ExactInputSingleParams calldata params\\r\\n    ) external payable returns (uint256 amountOut);\\r\\n\\r\\n    struct ExactInputParams {\\r\\n        bytes path;\\r\\n        address recipient;\\r\\n        uint256 amountIn;\\r\\n        uint256 amountOutMinimum;\\r\\n    }\\r\\n\\r\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\\r\\n    /// @dev Setting `amountIn` to 0 will cause the contract to look up its own balance,\\r\\n    /// and swap the entire amount, enabling contracts to send tokens before calling this function.\\r\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\\r\\n    /// @return amountOut The amount of the received token\\r\\n    function exactInput(\\r\\n        ExactInputParams calldata params\\r\\n    ) external payable returns (uint256 amountOut);\\r\\n\\r\\n    struct ExactOutputSingleParams {\\r\\n        address tokenIn;\\r\\n        address tokenOut;\\r\\n        uint24 fee;\\r\\n        address recipient;\\r\\n        uint256 amountOut;\\r\\n        uint256 amountInMaximum;\\r\\n        uint160 sqrtPriceLimitX96;\\r\\n    }\\r\\n\\r\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\\r\\n    /// that may remain in the router after the swap.\\r\\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\\r\\n    /// @return amountIn The amount of the input token\\r\\n    function exactOutputSingle(\\r\\n        ExactOutputSingleParams calldata params\\r\\n    ) external payable returns (uint256 amountIn);\\r\\n\\r\\n    struct ExactOutputParams {\\r\\n        bytes path;\\r\\n        address recipient;\\r\\n        uint256 amountOut;\\r\\n        uint256 amountInMaximum;\\r\\n    }\\r\\n\\r\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\\r\\n    /// that may remain in the router after the swap.\\r\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\\r\\n    /// @return amountIn The amount of the input token\\r\\n    function exactOutput(\\r\\n        ExactOutputParams calldata params\\r\\n    ) external payable returns (uint256 amountIn);\\r\\n\\r\\n     function refundETH() external payable;\\r\\n}\\r\\n\\r\\ncontract V3Swap {\\r\\n    using SafeMath for uint256;\\r\\n    using SafeERC20 for IERC20;\\r\\n    address public routerAddress = 0x13f4EA83D0bd40E75C8222255bc855a974568Dd4;\\r\\n    address public factoryAddress = 0x0BFbCF9fa4f9C56B0F40a671Ad40E0805A091865;\\r\\n    address public wbnbAddress = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;\\r\\n    uint24 fee = 100;\\r\\n\\r\\n    constructor() {}\\r\\n\\r\\n    function getOutputTokenAmount(\\r\\n        uint256 _inputAmount,\\r\\n        address _tokenIn,\\r\\n        address _tokenOut\\r\\n    ) external view returns (uint outputAmount) {\\r\\n        uint256 slotReturnValue = 0;\\r\\n        address pairAddress = IPancakeV3Factory(factoryAddress).getPool(\\r\\n            _tokenIn,\\r\\n            _tokenOut,\\r\\n            fee\\r\\n        );\\r\\n        (slotReturnValue, , , , , , ) = IPancakeV3PoolState(pairAddress)\\r\\n            .slot0();\\r\\n        address token0 = IPancakeV3Pool(pairAddress).token0();\\r\\n        if (_tokenIn == token0)\\r\\n            outputAmount = ((slotReturnValue ** 2 * _inputAmount) / 2 ** 192);\\r\\n        else outputAmount = ((2 ** 192 * _inputAmount) / slotReturnValue ** 2);\\r\\n    }\\r\\n\\r\\n    function _approve(address _token, uint _amount) internal {\\r\\n        IERC20(_token).approve(address(routerAddress), _amount);\\r\\n    }\\r\\n\\r\\n    function swapTokens(\\r\\n        address _tokenIn,\\r\\n        address _tokenOut,\\r\\n        uint256 _amountIn\\r\\n    ) external payable {\\r\\n        IV3SwapRouter.ExactInputSingleParams memory params = IV3SwapRouter\\r\\n            .ExactInputSingleParams(\\r\\n                _tokenIn,\\r\\n                _tokenOut,\\r\\n                fee,\\r\\n                msg.sender,\\r\\n                _amountIn,\\r\\n                0,\\r\\n                0\\r\\n            );\\r\\n        if (_tokenIn == wbnbAddress)\\r\\n            IV3SwapRouter(routerAddress).exactInputSingle{value: msg.value}(\\r\\n                params\\r\\n            );\\r\\n        else {\\r\\n            IERC20(_tokenIn).safeTransferFrom(\\r\\n                msg.sender,\\r\\n                address(this),\\r\\n                _amountIn\\r\\n            );\\r\\n            _approve(_tokenIn,_amountIn);\\r\\n            IV3SwapRouter(routerAddress).exactInputSingle{value: msg.value}(\\r\\n                params\\r\\n            );\\r\\n        }\\r\\n        IV3SwapRouter(routerAddress).refundETH();\\r\\n        // refund leftover ETH to user\\r\\n        (bool success, ) = msg.sender.call{value: address(this).balance}(\\\"\\\");\\r\\n        require(success, \\\"refund failed\\\");\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xfe6ba12da9fa1b1eff0ef756a0460141c1a57ef8bc48bc9baa89ccc88b4b0fb0\",\"license\":\"GPL-2.0-or-later\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}},"SafeMath":{"abi":[],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220412991439e088a465ee0eed0380788a66fccad9732d0f22d7f56801db1da420164736f6c63430008040033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 COINBASE 0x29 SWAP2 NUMBER SWAP15 ADDMOD DUP11 CHAINID 0x5E 0xE0 0xEE 0xD0 CODESIZE SMOD DUP9 0xA6 PUSH16 0xCCAD9732D0F22D7F56801DB1DA420164 PUSH20 0x6F6C634300080400330000000000000000000000 ","sourceMap":"5898:6636:2:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;5898:6636:2;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220412991439e088a465ee0eed0380788a66fccad9732d0f22d7f56801db1da420164736f6c63430008040033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 COINBASE 0x29 SWAP2 NUMBER SWAP15 ADDMOD DUP11 CHAINID 0x5E 0xE0 0xEE 0xD0 CODESIZE SMOD DUP9 0xA6 PUSH16 0xCCAD9732D0F22D7F56801DB1DA420164 PUSH20 0x6F6C634300080400330000000000000000000000 ","sourceMap":"5898:6636:2:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"add(uint256,uint256)":"infinite","div(uint256,uint256)":"infinite","div(uint256,uint256,string memory)":"infinite","mod(uint256,uint256)":"infinite","mod(uint256,uint256,string memory)":"infinite","mul(uint256,uint256)":"infinite","sub(uint256,uint256)":"infinite","sub(uint256,uint256,string memory)":"infinite","tryAdd(uint256,uint256)":"infinite","tryDiv(uint256,uint256)":"infinite","tryMod(uint256,uint256)":"infinite","tryMul(uint256,uint256)":"infinite","trySub(uint256,uint256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/v3dex.sol\":\"SafeMath\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/v3dex.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\n/// @title The interface for the PancakeSwap V3 Factory\\r\\n/// @notice The PancakeSwap V3 Factory facilitates creation of PancakeSwap V3 pools and control over the protocol fees\\r\\ninterface IPancakeV3Factory {\\r\\n    function getPool(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint24 fee\\r\\n    ) external view returns (address pool);\\r\\n}\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\ninterface IPancakeV3PoolState {\\r\\n    function slot0()\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            uint160 sqrtPriceX96,\\r\\n            int24 tick,\\r\\n            uint16 observationIndex,\\r\\n            uint16 observationCardinality,\\r\\n            uint16 observationCardinalityNext,\\r\\n            uint32 feeProtocol,\\r\\n            bool unlocked\\r\\n        );\\r\\n}\\r\\n\\r\\ninterface IPancakeV3PoolImmutables {\\r\\n    /// @notice The contract that deployed the pool, which must adhere to the IPancakeV3Factory interface\\r\\n    /// @return The contract address\\r\\n    function factory() external view returns (address);\\r\\n\\r\\n    /// @notice The first of the two tokens of the pool, sorted by address\\r\\n    /// @return The token contract address\\r\\n    function token0() external view returns (address);\\r\\n\\r\\n    /// @notice The second of the two tokens of the pool, sorted by address\\r\\n    /// @return The token contract address\\r\\n    function token1() external view returns (address);\\r\\n\\r\\n    /// @notice The pool's fee in hundredths of a bip, i.e. 1e-6\\r\\n    /// @return The fee\\r\\n    function fee() external view returns (uint24);\\r\\n\\r\\n    /// @notice The pool tick spacing\\r\\n    /// @dev Ticks can only be used at multiples of this value, minimum of 1 and always positive\\r\\n    /// e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ...\\r\\n    /// This value is an int24 to avoid casting even though it is always positive.\\r\\n    /// @return The tick spacing\\r\\n    function tickSpacing() external view returns (int24);\\r\\n\\r\\n    /// @notice The maximum amount of position liquidity that can use any tick in the range\\r\\n    /// @dev This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and\\r\\n    /// also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\\r\\n    /// @return The max amount of liquidity per tick\\r\\n    function maxLiquidityPerTick() external view returns (uint128);\\r\\n}\\r\\n\\r\\ninterface IPancakeV3Pool is IPancakeV3PoolState, IPancakeV3PoolImmutables {}\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Provides information about the current execution context, including the\\r\\n * sender of the transaction and its data. While these are generally available\\r\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\r\\n * manner, since when dealing with meta-transactions the account sending and\\r\\n * paying for execution may not be the actual sender (as far as an application\\r\\n * is concerned).\\r\\n *\\r\\n * This contract is only required for intermediate, library-like contracts.\\r\\n */\\r\\nabstract contract Context {\\r\\n    function _msgSender() internal view virtual returns (address) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view virtual returns (bytes calldata) {\\r\\n        return msg.data;\\r\\n    }\\r\\n}\\r\\n\\r\\n// File @openzeppelin/contracts/access/Ownable.sol@v4.6.0\\r\\n\\r\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Contract module which provides a basic access control mechanism, where\\r\\n * there is an account (an owner) that can be granted exclusive access to\\r\\n * specific functions.\\r\\n *\\r\\n * By default, the owner account will be the one that deploys the contract. This\\r\\n * can later be changed with {transferOwnership}.\\r\\n *\\r\\n * This module is used through inheritance. It will make available the modifier\\r\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\r\\n * the owner.\\r\\n */\\r\\nabstract contract Ownable is Context {\\r\\n    address private _owner;\\r\\n\\r\\n    event OwnershipTransferred(\\r\\n        address indexed previousOwner,\\r\\n        address indexed newOwner\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\r\\n     */\\r\\n    constructor() {\\r\\n        _transferOwnership(_msgSender());\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current owner.\\r\\n     */\\r\\n    function owner() public view virtual returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier onlyOwner() {\\r\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Leaves the contract without owner. It will not be possible to call\\r\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\r\\n     *\\r\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\r\\n     * thereby removing any functionality that is only available to the owner.\\r\\n     */\\r\\n    function renounceOwnership() public virtual onlyOwner {\\r\\n        _transferOwnership(address(0));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n        require(\\r\\n            newOwner != address(0),\\r\\n            \\\"Ownable: new owner is the zero address\\\"\\r\\n        );\\r\\n        _transferOwnership(newOwner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Internal function without access restriction.\\r\\n     */\\r\\n    function _transferOwnership(address newOwner) internal virtual {\\r\\n        address oldOwner = _owner;\\r\\n        _owner = newOwner;\\r\\n        emit OwnershipTransferred(oldOwner, newOwner);\\r\\n    }\\r\\n}\\r\\n\\r\\nlibrary SafeMath {\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryAdd(\\r\\n        uint256 a,\\r\\n        uint256 b\\r\\n    ) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            uint256 c = a + b;\\r\\n            if (c < a) return (false, 0);\\r\\n            return (true, c);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function trySub(\\r\\n        uint256 a,\\r\\n        uint256 b\\r\\n    ) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            if (b > a) return (false, 0);\\r\\n            return (true, a - b);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryMul(\\r\\n        uint256 a,\\r\\n        uint256 b\\r\\n    ) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\r\\n            // benefit is lost if 'b' is also tested.\\r\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\r\\n            if (a == 0) return (true, 0);\\r\\n            uint256 c = a * b;\\r\\n            if (c / a != b) return (false, 0);\\r\\n            return (true, c);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryDiv(\\r\\n        uint256 a,\\r\\n        uint256 b\\r\\n    ) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            if (b == 0) return (false, 0);\\r\\n            return (true, a / b);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryMod(\\r\\n        uint256 a,\\r\\n        uint256 b\\r\\n    ) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            if (b == 0) return (false, 0);\\r\\n            return (true, a % b);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity's `+` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Addition cannot overflow.\\r\\n     */\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a + b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity's `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a - b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity's `*` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Multiplication cannot overflow.\\r\\n     */\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a * b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `/` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a / b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * reverting when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a % b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\r\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\r\\n     *\\r\\n     * Counterpart to Solidity's `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            require(b <= a, errorMessage);\\r\\n            return a - b;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            require(b > 0, errorMessage);\\r\\n            return a / b;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * reverting with custom message when dividing by zero.\\r\\n     *\\r\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\r\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\r\\n     *\\r\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            require(b > 0, errorMessage);\\r\\n            return a % b;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\nlibrary Address {\\r\\n    /**\\r\\n     * @dev Returns true if `account` is a contract.\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * It is unsafe to assume that an address for which this function returns\\r\\n     * false is an externally-owned account (EOA) and not a contract.\\r\\n     *\\r\\n     * Among others, `isContract` will return false for the following\\r\\n     * types of addresses:\\r\\n     *\\r\\n     *  - an externally-owned account\\r\\n     *  - a contract in construction\\r\\n     *  - an address where a contract will be created\\r\\n     *  - an address where a contract lived, but was destroyed\\r\\n     * ====\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\r\\n     *\\r\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\r\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\r\\n     * constructor.\\r\\n     * ====\\r\\n     */\\r\\n    function isContract(address account) internal view returns (bool) {\\r\\n        // This method relies on extcodesize/address.code.length, which returns 0\\r\\n        // for contracts in construction, since the code is only stored at the end\\r\\n        // of the constructor execution.\\r\\n\\r\\n        return account.code.length > 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\r\\n     * `recipient`, forwarding all available gas and reverting on errors.\\r\\n     *\\r\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\r\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\r\\n     * imposed by `transfer`, making them unable to receive funds via\\r\\n     * `transfer`. {sendValue} removes this limitation.\\r\\n     *\\r\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\r\\n     *\\r\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\r\\n     * taken to not create reentrancy vulnerabilities. Consider using\\r\\n     * {ReentrancyGuard} or the\\r\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\r\\n     */\\r\\n    function sendValue(address payable recipient, uint256 amount) internal {\\r\\n        require(\\r\\n            address(this).balance >= amount,\\r\\n            \\\"Address: insufficient balance\\\"\\r\\n        );\\r\\n\\r\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\r\\n        require(\\r\\n            success,\\r\\n            \\\"Address: unable to send value, recipient may have reverted\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Performs a Solidity function call using a low level `call`. A\\r\\n     * plain `call` is an unsafe replacement for a function call: use this\\r\\n     * function instead.\\r\\n     *\\r\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\r\\n     * function (like regular Solidity function calls).\\r\\n     *\\r\\n     * Returns the raw returned data. To convert to the expected return value,\\r\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `target` must be a contract.\\r\\n     * - calling `target` with `data` must not revert.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(\\r\\n        address target,\\r\\n        bytes memory data\\r\\n    ) internal returns (bytes memory) {\\r\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\r\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, 0, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but also transferring `value` wei to `target`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the calling contract must have an ETH balance of at least `value`.\\r\\n     * - the called Solidity function must be `payable`.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        uint256 value\\r\\n    ) internal returns (bytes memory) {\\r\\n        return\\r\\n            functionCallWithValue(\\r\\n                target,\\r\\n                data,\\r\\n                value,\\r\\n                \\\"Address: low-level call with value failed\\\"\\r\\n            );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\r\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        uint256 value,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        require(\\r\\n            address(this).balance >= value,\\r\\n            \\\"Address: insufficient balance for call\\\"\\r\\n        );\\r\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\r\\n\\r\\n        (bool success, bytes memory returndata) = target.call{value: value}(\\r\\n            data\\r\\n        );\\r\\n        return verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(\\r\\n        address target,\\r\\n        bytes memory data\\r\\n    ) internal view returns (bytes memory) {\\r\\n        return\\r\\n            functionStaticCall(\\r\\n                target,\\r\\n                data,\\r\\n                \\\"Address: low-level static call failed\\\"\\r\\n            );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal view returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\r\\n\\r\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\r\\n        return verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function functionDelegateCall(\\r\\n        address target,\\r\\n        bytes memory data\\r\\n    ) internal returns (bytes memory) {\\r\\n        return\\r\\n            functionDelegateCall(\\r\\n                target,\\r\\n                data,\\r\\n                \\\"Address: low-level delegate call failed\\\"\\r\\n            );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function functionDelegateCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\r\\n\\r\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\r\\n        return verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\r\\n     * revert reason using the provided one.\\r\\n     *\\r\\n     * _Available since v4.3._\\r\\n     */\\r\\n    function verifyCallResult(\\r\\n        bool success,\\r\\n        bytes memory returndata,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (bytes memory) {\\r\\n        if (success) {\\r\\n            return returndata;\\r\\n        } else {\\r\\n            // Look for revert reason and bubble it up if present\\r\\n            if (returndata.length > 0) {\\r\\n                // The easiest way to bubble the revert reason is using memory via assembly\\r\\n\\r\\n                assembly {\\r\\n                    let returndata_size := mload(returndata)\\r\\n                    revert(add(32, returndata), returndata_size)\\r\\n                }\\r\\n            } else {\\r\\n                revert(errorMessage);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\ninterface IERC20 {\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(\\r\\n        address indexed owner,\\r\\n        address indexed spender,\\r\\n        uint256 value\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address to, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(\\r\\n        address owner,\\r\\n        address spender\\r\\n    ) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender's allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller's\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n}\\r\\n\\r\\nlibrary SafeERC20 {\\r\\n    using Address for address;\\r\\n\\r\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\r\\n        _callOptionalReturn(\\r\\n            token,\\r\\n            abi.encodeWithSelector(token.transfer.selector, to, value)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function safeTransferFrom(\\r\\n        IERC20 token,\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        _callOptionalReturn(\\r\\n            token,\\r\\n            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Deprecated. This function has issues similar to the ones found in\\r\\n     * {IERC20-approve}, and its usage is discouraged.\\r\\n     *\\r\\n     * Whenever possible, use {safeIncreaseAllowance} and\\r\\n     * {safeDecreaseAllowance} instead.\\r\\n     */\\r\\n    function safeApprove(\\r\\n        IERC20 token,\\r\\n        address spender,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        // safeApprove should only be called when setting an initial allowance,\\r\\n        // or when resetting it to zero. To increase and decrease it, use\\r\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\r\\n        require(\\r\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\r\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\r\\n        );\\r\\n        _callOptionalReturn(\\r\\n            token,\\r\\n            abi.encodeWithSelector(token.approve.selector, spender, value)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function safeIncreaseAllowance(\\r\\n        IERC20 token,\\r\\n        address spender,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\r\\n        _callOptionalReturn(\\r\\n            token,\\r\\n            abi.encodeWithSelector(\\r\\n                token.approve.selector,\\r\\n                spender,\\r\\n                newAllowance\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function safeDecreaseAllowance(\\r\\n        IERC20 token,\\r\\n        address spender,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        unchecked {\\r\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\r\\n            require(\\r\\n                oldAllowance >= value,\\r\\n                \\\"SafeERC20: decreased allowance below zero\\\"\\r\\n            );\\r\\n            uint256 newAllowance = oldAllowance - value;\\r\\n            _callOptionalReturn(\\r\\n                token,\\r\\n                abi.encodeWithSelector(\\r\\n                    token.approve.selector,\\r\\n                    spender,\\r\\n                    newAllowance\\r\\n                )\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\r\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\r\\n     * @param token The token targeted by the call.\\r\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\r\\n     */\\r\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\r\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\r\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\r\\n        // the target address contains contract code and also asserts for success in the low-level call.\\r\\n\\r\\n        bytes memory returndata = address(token).functionCall(\\r\\n            data,\\r\\n            \\\"SafeERC20: low-level call failed\\\"\\r\\n        );\\r\\n        if (returndata.length > 0) {\\r\\n            // Return data is optional\\r\\n            require(\\r\\n                abi.decode(returndata, (bool)),\\r\\n                \\\"SafeERC20: ERC20 operation did not succeed\\\"\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n}\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\n/// @title Callback for IPancakeV3PoolActions#swap\\r\\n/// @notice Any contract that calls IPancakeV3PoolActions#swap must implement this interface\\r\\ninterface IPancakeV3SwapCallback {\\r\\n    /// @notice Called to `msg.sender` after executing a swap via IPancakeV3Pool#swap.\\r\\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\\r\\n    /// The caller of this method must be checked to be a PancakeV3Pool deployed by the canonical PancakeV3Factory.\\r\\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\\r\\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\\r\\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\\r\\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\\r\\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\\r\\n    /// @param data Any data passed through by the caller via the IPancakeV3PoolActions#swap call\\r\\n    function pancakeV3SwapCallback(\\r\\n        int256 amount0Delta,\\r\\n        int256 amount1Delta,\\r\\n        bytes calldata data\\r\\n    ) external;\\r\\n}\\r\\n\\r\\ninterface IV3SwapRouter is IPancakeV3SwapCallback {\\r\\n    struct ExactInputSingleParams {\\r\\n        address tokenIn;\\r\\n        address tokenOut;\\r\\n        uint24 fee;\\r\\n        address recipient;\\r\\n        uint256 amountIn;\\r\\n        uint256 amountOutMinimum;\\r\\n        uint160 sqrtPriceLimitX96;\\r\\n    }\\r\\n\\r\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\\r\\n    /// @dev Setting `amountIn` to 0 will cause the contract to look up its own balance,\\r\\n    /// and swap the entire amount, enabling contracts to send tokens before calling this function.\\r\\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\\r\\n    /// @return amountOut The amount of the received token\\r\\n    function exactInputSingle(\\r\\n        ExactInputSingleParams calldata params\\r\\n    ) external payable returns (uint256 amountOut);\\r\\n\\r\\n    struct ExactInputParams {\\r\\n        bytes path;\\r\\n        address recipient;\\r\\n        uint256 amountIn;\\r\\n        uint256 amountOutMinimum;\\r\\n    }\\r\\n\\r\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\\r\\n    /// @dev Setting `amountIn` to 0 will cause the contract to look up its own balance,\\r\\n    /// and swap the entire amount, enabling contracts to send tokens before calling this function.\\r\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\\r\\n    /// @return amountOut The amount of the received token\\r\\n    function exactInput(\\r\\n        ExactInputParams calldata params\\r\\n    ) external payable returns (uint256 amountOut);\\r\\n\\r\\n    struct ExactOutputSingleParams {\\r\\n        address tokenIn;\\r\\n        address tokenOut;\\r\\n        uint24 fee;\\r\\n        address recipient;\\r\\n        uint256 amountOut;\\r\\n        uint256 amountInMaximum;\\r\\n        uint160 sqrtPriceLimitX96;\\r\\n    }\\r\\n\\r\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\\r\\n    /// that may remain in the router after the swap.\\r\\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\\r\\n    /// @return amountIn The amount of the input token\\r\\n    function exactOutputSingle(\\r\\n        ExactOutputSingleParams calldata params\\r\\n    ) external payable returns (uint256 amountIn);\\r\\n\\r\\n    struct ExactOutputParams {\\r\\n        bytes path;\\r\\n        address recipient;\\r\\n        uint256 amountOut;\\r\\n        uint256 amountInMaximum;\\r\\n    }\\r\\n\\r\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\\r\\n    /// that may remain in the router after the swap.\\r\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\\r\\n    /// @return amountIn The amount of the input token\\r\\n    function exactOutput(\\r\\n        ExactOutputParams calldata params\\r\\n    ) external payable returns (uint256 amountIn);\\r\\n\\r\\n     function refundETH() external payable;\\r\\n}\\r\\n\\r\\ncontract V3Swap {\\r\\n    using SafeMath for uint256;\\r\\n    using SafeERC20 for IERC20;\\r\\n    address public routerAddress = 0x13f4EA83D0bd40E75C8222255bc855a974568Dd4;\\r\\n    address public factoryAddress = 0x0BFbCF9fa4f9C56B0F40a671Ad40E0805A091865;\\r\\n    address public wbnbAddress = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;\\r\\n    uint24 fee = 100;\\r\\n\\r\\n    constructor() {}\\r\\n\\r\\n    function getOutputTokenAmount(\\r\\n        uint256 _inputAmount,\\r\\n        address _tokenIn,\\r\\n        address _tokenOut\\r\\n    ) external view returns (uint outputAmount) {\\r\\n        uint256 slotReturnValue = 0;\\r\\n        address pairAddress = IPancakeV3Factory(factoryAddress).getPool(\\r\\n            _tokenIn,\\r\\n            _tokenOut,\\r\\n            fee\\r\\n        );\\r\\n        (slotReturnValue, , , , , , ) = IPancakeV3PoolState(pairAddress)\\r\\n            .slot0();\\r\\n        address token0 = IPancakeV3Pool(pairAddress).token0();\\r\\n        if (_tokenIn == token0)\\r\\n            outputAmount = ((slotReturnValue ** 2 * _inputAmount) / 2 ** 192);\\r\\n        else outputAmount = ((2 ** 192 * _inputAmount) / slotReturnValue ** 2);\\r\\n    }\\r\\n\\r\\n    function _approve(address _token, uint _amount) internal {\\r\\n        IERC20(_token).approve(address(routerAddress), _amount);\\r\\n    }\\r\\n\\r\\n    function swapTokens(\\r\\n        address _tokenIn,\\r\\n        address _tokenOut,\\r\\n        uint256 _amountIn\\r\\n    ) external payable {\\r\\n        IV3SwapRouter.ExactInputSingleParams memory params = IV3SwapRouter\\r\\n            .ExactInputSingleParams(\\r\\n                _tokenIn,\\r\\n                _tokenOut,\\r\\n                fee,\\r\\n                msg.sender,\\r\\n                _amountIn,\\r\\n                0,\\r\\n                0\\r\\n            );\\r\\n        if (_tokenIn == wbnbAddress)\\r\\n            IV3SwapRouter(routerAddress).exactInputSingle{value: msg.value}(\\r\\n                params\\r\\n            );\\r\\n        else {\\r\\n            IERC20(_tokenIn).safeTransferFrom(\\r\\n                msg.sender,\\r\\n                address(this),\\r\\n                _amountIn\\r\\n            );\\r\\n            _approve(_tokenIn,_amountIn);\\r\\n            IV3SwapRouter(routerAddress).exactInputSingle{value: msg.value}(\\r\\n                params\\r\\n            );\\r\\n        }\\r\\n        IV3SwapRouter(routerAddress).refundETH();\\r\\n        // refund leftover ETH to user\\r\\n        (bool success, ) = msg.sender.call{value: address(this).balance}(\\\"\\\");\\r\\n        require(success, \\\"refund failed\\\");\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xfe6ba12da9fa1b1eff0ef756a0460141c1a57ef8bc48bc9baa89ccc88b4b0fb0\",\"license\":\"GPL-2.0-or-later\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}},"V3Swap":{"abi":[{"inputs":[],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[],"name":"factoryAddress","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_inputAmount","type":"uint256"},{"internalType":"address","name":"_tokenIn","type":"address"},{"internalType":"address","name":"_tokenOut","type":"address"}],"name":"getOutputTokenAmount","outputs":[{"internalType":"uint256","name":"outputAmount","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"routerAddress","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_tokenIn","type":"address"},{"internalType":"address","name":"_tokenOut","type":"address"},{"internalType":"uint256","name":"_amountIn","type":"uint256"}],"name":"swapTokens","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[],"name":"wbnbAddress","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"generatedSources":[],"linkReferences":{},"object":"6080604052600080546001600160a01b03199081167313f4ea83d0bd40e75c8222255bc855a974568dd41790915560018054909116730bfbcf9fa4f9c56b0f40a671ad40e0805a091865179055600280547464bb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c6001600160b81b031990911617905534801561008157600080fd5b50610cd2806100916000396000f3fe60806040526004361061004a5760003560e01c80633268cc561461004f57806363fe3e3a1461008c578063966dae0e146100ac578063a189d648146100cc578063ec6cc0cc146100fa575b600080fd5b34801561005b57600080fd5b5060005461006f906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561009857600080fd5b5060025461006f906001600160a01b031681565b3480156100b857600080fd5b5060015461006f906001600160a01b031681565b3480156100d857600080fd5b506100ec6100e7366004610a25565b61010f565b604051908152602001610083565b61010d610108366004610919565b610320565b005b600154600254604051630b4c774160e11b81526001600160a01b0385811660048301528481166024830152600160a01b90920462ffffff16604482015260009283928392911690631698ee829060640160206040518083038186803b15801561017757600080fd5b505afa15801561018b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101af91906108fd565b9050806001600160a01b0316633850c7bd6040518163ffffffff1660e01b815260040160e06040518083038186803b1580156101ea57600080fd5b505afa1580156101fe573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102229190610973565b505060408051630dfe168160e01b815290516001600160a01b03968716985060009688169550630dfe1681945060048083019450602093509091829003018186803b15801561027057600080fd5b505afa158015610284573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102a891906108fd565b9050806001600160a01b0316866001600160a01b031614156102f057600160c01b876102d5600286610b76565b6102df9190610c23565b6102e99190610b13565b9350610316565b6102fb600284610b76565b61030988600160c01b610c23565b6103139190610b13565b93505b5050509392505050565b6040805160e0810182526001600160a01b03808616808352858216602084015260025462ffffff600160a01b8204169484019490945233606084015260808301859052600060a0840181905260c08401529192161415610404576000546040516304e45aaf60e01b81526001600160a01b03909116906304e45aaf9034906103ac908590600401610ab5565b6020604051808303818588803b1580156103c557600080fd5b505af11580156103d9573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906103fe9190610a0d565b506104a9565b6104196001600160a01b038516333085610596565b61042384836105f6565b6000546040516304e45aaf60e01b81526001600160a01b03909116906304e45aaf903490610455908590600401610ab5565b6020604051808303818588803b15801561046e57600080fd5b505af1158015610482573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906104a79190610a0d565b505b6000805460408051630910874560e11b815290516001600160a01b03909216926312210e8a9260048084019382900301818387803b1580156104ea57600080fd5b505af11580156104fe573d6000803e3d6000fd5b50506040516000925033915047908381818185875af1925050503d8060008114610544576040519150601f19603f3d011682016040523d82523d6000602084013e610549565b606091505b505090508061058f5760405162461bcd60e51b815260206004820152600d60248201526c1c99599d5b990819985a5b1959609a1b60448201526064015b60405180910390fd5b5050505050565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b1790526105f0908590610681565b50505050565b60005460405163095ea7b360e01b81526001600160a01b039182166004820152602481018390529083169063095ea7b390604401602060405180830381600087803b15801561064457600080fd5b505af1158015610658573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061067c9190610959565b505050565b60006106d6826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166107539092919063ffffffff16565b80519091501561067c57808060200190518101906106f49190610959565b61067c5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610586565b6060610762848460008561076c565b90505b9392505050565b6060824710156107cd5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610586565b6001600160a01b0385163b6108245760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610586565b600080866001600160a01b031685876040516108409190610a66565b60006040518083038185875af1925050503d806000811461087d576040519150601f19603f3d011682016040523d82523d6000602084013e610882565b606091505b509150915061089282828661089d565b979650505050505050565b606083156108ac575081610765565b8251156108bc5782518084602001fd5b8160405162461bcd60e51b81526004016105869190610a82565b805180151581146108e657600080fd5b919050565b805161ffff811681146108e657600080fd5b60006020828403121561090e578081fd5b815161076581610c84565b60008060006060848603121561092d578182fd5b833561093881610c84565b9250602084013561094881610c84565b929592945050506040919091013590565b60006020828403121561096a578081fd5b610765826108d6565b600080600080600080600060e0888a03121561098d578283fd5b875161099881610c84565b8097505060208801518060020b81146109af578384fd5b95506109bd604089016108eb565b94506109cb606089016108eb565b93506109d9608089016108eb565b925060a088015163ffffffff811681146109f1578283fd5b91506109ff60c089016108d6565b905092959891949750929550565b600060208284031215610a1e578081fd5b5051919050565b600080600060608486031215610a39578283fd5b833592506020840135610a4b81610c84565b91506040840135610a5b81610c84565b809150509250925092565b60008251610a78818460208701610c42565b9190910192915050565b6020815260008251806020840152610aa1816040850160208701610c42565b601f01601f19169190910160400192915050565b81516001600160a01b03908116825260208084015182169083015260408084015162ffffff16908301526060808401518216908301526080808401519083015260a0838101519083015260c092830151169181019190915260e00190565b600082610b2e57634e487b7160e01b81526012600452602481fd5b500490565b600181815b80851115610b6e578160001904821115610b5457610b54610c6e565b80851615610b6157918102915b93841c9390800290610b38565b509250929050565b600061076560ff841683600082610b8f57506001610c1d565b81610b9c57506000610c1d565b8160018114610bb25760028114610bbc57610bd8565b6001915050610c1d565b60ff841115610bcd57610bcd610c6e565b50506001821b610c1d565b5060208310610133831016604e8410600b8410161715610bfb575081810a610c1d565b610c058383610b33565b8060001904821115610c1957610c19610c6e565b0290505b92915050565b6000816000190483118215151615610c3d57610c3d610c6e565b500290565b60005b83811015610c5d578181015183820152602001610c45565b838111156105f05750506000910152565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b0381168114610c9957600080fd5b5056fea264697066735822122017f7a528e6ea686ff249e208acaca333201fa48d6d5f6e6b89327e4a5eed4ea964736f6c63430008040033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP1 DUP2 AND PUSH20 0x13F4EA83D0BD40E75C8222255BC855A974568DD4 OR SWAP1 SWAP2 SSTORE PUSH1 0x1 DUP1 SLOAD SWAP1 SWAP2 AND PUSH20 0xBFBCF9FA4F9C56B0F40A671AD40E0805A091865 OR SWAP1 SSTORE PUSH1 0x2 DUP1 SLOAD PUSH21 0x64BB4CDB9CBD36B01BD1CBAEBF2DE08D9173BC095C PUSH1 0x1 PUSH1 0x1 PUSH1 0xB8 SHL SUB NOT SWAP1 SWAP2 AND OR SWAP1 SSTORE CALLVALUE DUP1 ISZERO PUSH2 0x81 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xCD2 DUP1 PUSH2 0x91 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x4A JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x3268CC56 EQ PUSH2 0x4F JUMPI DUP1 PUSH4 0x63FE3E3A EQ PUSH2 0x8C JUMPI DUP1 PUSH4 0x966DAE0E EQ PUSH2 0xAC JUMPI DUP1 PUSH4 0xA189D648 EQ PUSH2 0xCC JUMPI DUP1 PUSH4 0xEC6CC0CC EQ PUSH2 0xFA JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x0 SLOAD PUSH2 0x6F SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x98 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x2 SLOAD PUSH2 0x6F SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xB8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 SLOAD PUSH2 0x6F SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xD8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xEC PUSH2 0xE7 CALLDATASIZE PUSH1 0x4 PUSH2 0xA25 JUMP JUMPDEST PUSH2 0x10F JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x83 JUMP JUMPDEST PUSH2 0x10D PUSH2 0x108 CALLDATASIZE PUSH1 0x4 PUSH2 0x919 JUMP JUMPDEST PUSH2 0x320 JUMP JUMPDEST STOP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x2 SLOAD PUSH1 0x40 MLOAD PUSH4 0xB4C7741 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE DUP5 DUP2 AND PUSH1 0x24 DUP4 ADD MSTORE PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 SWAP3 DIV PUSH3 0xFFFFFF AND PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x0 SWAP3 DUP4 SWAP3 DUP4 SWAP3 SWAP2 AND SWAP1 PUSH4 0x1698EE82 SWAP1 PUSH1 0x64 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x177 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x18B JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1AF SWAP2 SWAP1 PUSH2 0x8FD JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x3850C7BD PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0xE0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1EA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1FE JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x222 SWAP2 SWAP1 PUSH2 0x973 JUMP JUMPDEST POP POP PUSH1 0x40 DUP1 MLOAD PUSH4 0xDFE1681 PUSH1 0xE0 SHL DUP2 MSTORE SWAP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP7 DUP8 AND SWAP9 POP PUSH1 0x0 SWAP7 DUP9 AND SWAP6 POP PUSH4 0xDFE1681 SWAP5 POP PUSH1 0x4 DUP1 DUP4 ADD SWAP5 POP PUSH1 0x20 SWAP4 POP SWAP1 SWAP2 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x270 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x284 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2A8 SWAP2 SWAP1 PUSH2 0x8FD JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x2F0 JUMPI PUSH1 0x1 PUSH1 0xC0 SHL DUP8 PUSH2 0x2D5 PUSH1 0x2 DUP7 PUSH2 0xB76 JUMP JUMPDEST PUSH2 0x2DF SWAP2 SWAP1 PUSH2 0xC23 JUMP JUMPDEST PUSH2 0x2E9 SWAP2 SWAP1 PUSH2 0xB13 JUMP JUMPDEST SWAP4 POP PUSH2 0x316 JUMP JUMPDEST PUSH2 0x2FB PUSH1 0x2 DUP5 PUSH2 0xB76 JUMP JUMPDEST PUSH2 0x309 DUP9 PUSH1 0x1 PUSH1 0xC0 SHL PUSH2 0xC23 JUMP JUMPDEST PUSH2 0x313 SWAP2 SWAP1 PUSH2 0xB13 JUMP JUMPDEST SWAP4 POP JUMPDEST POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0xE0 DUP2 ADD DUP3 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP7 AND DUP1 DUP4 MSTORE DUP6 DUP3 AND PUSH1 0x20 DUP5 ADD MSTORE PUSH1 0x2 SLOAD PUSH3 0xFFFFFF PUSH1 0x1 PUSH1 0xA0 SHL DUP3 DIV AND SWAP5 DUP5 ADD SWAP5 SWAP1 SWAP5 MSTORE CALLER PUSH1 0x60 DUP5 ADD MSTORE PUSH1 0x80 DUP4 ADD DUP6 SWAP1 MSTORE PUSH1 0x0 PUSH1 0xA0 DUP5 ADD DUP2 SWAP1 MSTORE PUSH1 0xC0 DUP5 ADD MSTORE SWAP2 SWAP3 AND EQ ISZERO PUSH2 0x404 JUMPI PUSH1 0x0 SLOAD PUSH1 0x40 MLOAD PUSH4 0x4E45AAF PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x4E45AAF SWAP1 CALLVALUE SWAP1 PUSH2 0x3AC SWAP1 DUP6 SWAP1 PUSH1 0x4 ADD PUSH2 0xAB5 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3C5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x3D9 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x3FE SWAP2 SWAP1 PUSH2 0xA0D JUMP JUMPDEST POP PUSH2 0x4A9 JUMP JUMPDEST PUSH2 0x419 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND CALLER ADDRESS DUP6 PUSH2 0x596 JUMP JUMPDEST PUSH2 0x423 DUP5 DUP4 PUSH2 0x5F6 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x40 MLOAD PUSH4 0x4E45AAF PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x4E45AAF SWAP1 CALLVALUE SWAP1 PUSH2 0x455 SWAP1 DUP6 SWAP1 PUSH1 0x4 ADD PUSH2 0xAB5 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x46E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x482 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x4A7 SWAP2 SWAP1 PUSH2 0xA0D JUMP JUMPDEST POP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH4 0x9108745 PUSH1 0xE1 SHL DUP2 MSTORE SWAP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND SWAP3 PUSH4 0x12210E8A SWAP3 PUSH1 0x4 DUP1 DUP5 ADD SWAP4 DUP3 SWAP1 SUB ADD DUP2 DUP4 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4EA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x4FE JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x40 MLOAD PUSH1 0x0 SWAP3 POP CALLER SWAP2 POP SELFBALANCE SWAP1 DUP4 DUP2 DUP2 DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x544 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x549 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0x58F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xD PUSH1 0x24 DUP3 ADD MSTORE PUSH13 0x1C99599D5B990819985A5B1959 PUSH1 0x9A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND PUSH1 0x24 DUP4 ADD MSTORE DUP5 AND PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 DUP1 DUP3 ADD DUP5 SWAP1 MSTORE DUP3 MLOAD DUP1 DUP4 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0x84 SWAP1 SWAP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH4 0x23B872DD PUSH1 0xE0 SHL OR SWAP1 MSTORE PUSH2 0x5F0 SWAP1 DUP6 SWAP1 PUSH2 0x681 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x40 MLOAD PUSH4 0x95EA7B3 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP4 SWAP1 MSTORE SWAP1 DUP4 AND SWAP1 PUSH4 0x95EA7B3 SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x644 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x658 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x67C SWAP2 SWAP1 PUSH2 0x959 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x6D6 DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x5361666545524332303A206C6F772D6C6576656C2063616C6C206661696C6564 DUP2 MSTORE POP DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x753 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP1 MLOAD SWAP1 SWAP2 POP ISZERO PUSH2 0x67C JUMPI DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x6F4 SWAP2 SWAP1 PUSH2 0x959 JUMP JUMPDEST PUSH2 0x67C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5361666545524332303A204552433230206F7065726174696F6E20646964206E PUSH1 0x44 DUP3 ADD MSTORE PUSH10 0x1BDD081CDD58D8D95959 PUSH1 0xB2 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x586 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x762 DUP5 DUP5 PUSH1 0x0 DUP6 PUSH2 0x76C JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP3 SELFBALANCE LT ISZERO PUSH2 0x7CD JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A20696E73756666696369656E742062616C616E636520666F PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x1C8818D85B1B PUSH1 0xD2 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x586 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND EXTCODESIZE PUSH2 0x824 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x586 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 DUP8 PUSH1 0x40 MLOAD PUSH2 0x840 SWAP2 SWAP1 PUSH2 0xA66 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x87D JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x882 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x892 DUP3 DUP3 DUP7 PUSH2 0x89D JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0x8AC JUMPI POP DUP2 PUSH2 0x765 JUMP JUMPDEST DUP3 MLOAD ISZERO PUSH2 0x8BC JUMPI DUP3 MLOAD DUP1 DUP5 PUSH1 0x20 ADD REVERT JUMPDEST DUP2 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x586 SWAP2 SWAP1 PUSH2 0xA82 JUMP JUMPDEST DUP1 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x8E6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 MLOAD PUSH2 0xFFFF DUP2 AND DUP2 EQ PUSH2 0x8E6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x90E JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x765 DUP2 PUSH2 0xC84 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x92D JUMPI DUP2 DUP3 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 0x938 DUP2 PUSH2 0xC84 JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH2 0x948 DUP2 PUSH2 0xC84 JUMP JUMPDEST SWAP3 SWAP6 SWAP3 SWAP5 POP POP POP PUSH1 0x40 SWAP2 SWAP1 SWAP2 ADD CALLDATALOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x96A JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x765 DUP3 PUSH2 0x8D6 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xE0 DUP9 DUP11 SUB SLT ISZERO PUSH2 0x98D JUMPI DUP3 DUP4 REVERT JUMPDEST DUP8 MLOAD PUSH2 0x998 DUP2 PUSH2 0xC84 JUMP JUMPDEST DUP1 SWAP8 POP POP PUSH1 0x20 DUP9 ADD MLOAD DUP1 PUSH1 0x2 SIGNEXTEND DUP2 EQ PUSH2 0x9AF JUMPI DUP4 DUP5 REVERT JUMPDEST SWAP6 POP PUSH2 0x9BD PUSH1 0x40 DUP10 ADD PUSH2 0x8EB JUMP JUMPDEST SWAP5 POP PUSH2 0x9CB PUSH1 0x60 DUP10 ADD PUSH2 0x8EB JUMP JUMPDEST SWAP4 POP PUSH2 0x9D9 PUSH1 0x80 DUP10 ADD PUSH2 0x8EB JUMP JUMPDEST SWAP3 POP PUSH1 0xA0 DUP9 ADD MLOAD PUSH4 0xFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x9F1 JUMPI DUP3 DUP4 REVERT JUMPDEST SWAP2 POP PUSH2 0x9FF PUSH1 0xC0 DUP10 ADD PUSH2 0x8D6 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP6 SWAP9 SWAP2 SWAP5 SWAP8 POP SWAP3 SWAP6 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xA1E JUMPI DUP1 DUP2 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0xA39 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP4 CALLDATALOAD SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH2 0xA4B DUP2 PUSH2 0xC84 JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD PUSH2 0xA5B DUP2 PUSH2 0xC84 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0xA78 DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0xC42 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 DUP3 MLOAD DUP1 PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0xAA1 DUP2 PUSH1 0x40 DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0xC42 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP2 SWAP1 SWAP2 ADD PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND DUP3 MSTORE PUSH1 0x20 DUP1 DUP5 ADD MLOAD DUP3 AND SWAP1 DUP4 ADD MSTORE PUSH1 0x40 DUP1 DUP5 ADD MLOAD PUSH3 0xFFFFFF AND SWAP1 DUP4 ADD MSTORE PUSH1 0x60 DUP1 DUP5 ADD MLOAD DUP3 AND SWAP1 DUP4 ADD MSTORE PUSH1 0x80 DUP1 DUP5 ADD MLOAD SWAP1 DUP4 ADD MSTORE PUSH1 0xA0 DUP4 DUP2 ADD MLOAD SWAP1 DUP4 ADD MSTORE PUSH1 0xC0 SWAP3 DUP4 ADD MLOAD AND SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0xE0 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0xB2E JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 DUP2 REVERT JUMPDEST POP DIV SWAP1 JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 JUMPDEST DUP1 DUP6 GT ISZERO PUSH2 0xB6E JUMPI DUP2 PUSH1 0x0 NOT DIV DUP3 GT ISZERO PUSH2 0xB54 JUMPI PUSH2 0xB54 PUSH2 0xC6E JUMP JUMPDEST DUP1 DUP6 AND ISZERO PUSH2 0xB61 JUMPI SWAP2 DUP2 MUL SWAP2 JUMPDEST SWAP4 DUP5 SHR SWAP4 SWAP1 DUP1 MUL SWAP1 PUSH2 0xB38 JUMP JUMPDEST POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x765 PUSH1 0xFF DUP5 AND DUP4 PUSH1 0x0 DUP3 PUSH2 0xB8F JUMPI POP PUSH1 0x1 PUSH2 0xC1D JUMP JUMPDEST DUP2 PUSH2 0xB9C JUMPI POP PUSH1 0x0 PUSH2 0xC1D JUMP JUMPDEST DUP2 PUSH1 0x1 DUP2 EQ PUSH2 0xBB2 JUMPI PUSH1 0x2 DUP2 EQ PUSH2 0xBBC JUMPI PUSH2 0xBD8 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP PUSH2 0xC1D JUMP JUMPDEST PUSH1 0xFF DUP5 GT ISZERO PUSH2 0xBCD JUMPI PUSH2 0xBCD PUSH2 0xC6E JUMP JUMPDEST POP POP PUSH1 0x1 DUP3 SHL PUSH2 0xC1D JUMP JUMPDEST POP PUSH1 0x20 DUP4 LT PUSH2 0x133 DUP4 LT AND PUSH1 0x4E DUP5 LT PUSH1 0xB DUP5 LT AND OR ISZERO PUSH2 0xBFB JUMPI POP DUP2 DUP2 EXP PUSH2 0xC1D JUMP JUMPDEST PUSH2 0xC05 DUP4 DUP4 PUSH2 0xB33 JUMP JUMPDEST DUP1 PUSH1 0x0 NOT DIV DUP3 GT ISZERO PUSH2 0xC19 JUMPI PUSH2 0xC19 PUSH2 0xC6E JUMP JUMPDEST MUL SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 NOT DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0xC3D JUMPI PUSH2 0xC3D PUSH2 0xC6E JUMP JUMPDEST POP MUL SWAP1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xC5D JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0xC45 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x5F0 JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0xC99 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 OR 0xF7 0xA5 0x28 0xE6 0xEA PUSH9 0x6FF249E208ACACA333 KECCAK256 0x1F LOG4 DUP14 PUSH14 0x5F6E6B89327E4A5EED4EA964736F PUSH13 0x63430008040033000000000000 ","sourceMap":"32047:2391:2:-:0;;;32136:73;;;-1:-1:-1;;;;;;32136:73:2;;;32167:42;32136:73;;;;;32216:74;;;;;32248:42;32216:74;;;32297:71;;;32375:16;-1:-1:-1;;;;;;32375:16:2;;;;;;32400;;;;;;;;;;32047:2391;;;;;;"},"deployedBytecode":{"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:9800:3","statements":[{"nodeType":"YulBlock","src":"6:3:3","statements":[]},{"body":{"nodeType":"YulBlock","src":"71:107:3","statements":[{"nodeType":"YulAssignment","src":"81:22:3","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"96:6:3"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"90:5:3"},"nodeType":"YulFunctionCall","src":"90:13:3"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"81:5:3"}]},{"body":{"nodeType":"YulBlock","src":"156:16:3","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"165:1:3","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"168:1:3","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"158:6:3"},"nodeType":"YulFunctionCall","src":"158:12:3"},"nodeType":"YulExpressionStatement","src":"158:12:3"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"125:5:3"},{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"146:5:3"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"139:6:3"},"nodeType":"YulFunctionCall","src":"139:13:3"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"132:6:3"},"nodeType":"YulFunctionCall","src":"132:21:3"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"122:2:3"},"nodeType":"YulFunctionCall","src":"122:32:3"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"115:6:3"},"nodeType":"YulFunctionCall","src":"115:40:3"},"nodeType":"YulIf","src":"112:2:3"}]},"name":"abi_decode_bool_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"50:6:3","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"61:5:3","type":""}],"src":"14:164:3"},{"body":{"nodeType":"YulBlock","src":"242:104:3","statements":[{"nodeType":"YulAssignment","src":"252:22:3","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"267:6:3"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"261:5:3"},"nodeType":"YulFunctionCall","src":"261:13:3"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"252:5:3"}]},{"body":{"nodeType":"YulBlock","src":"324:16:3","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"333:1:3","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"336:1:3","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"326:6:3"},"nodeType":"YulFunctionCall","src":"326:12:3"},"nodeType":"YulExpressionStatement","src":"326:12:3"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"296:5:3"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"307:5:3"},{"kind":"number","nodeType":"YulLiteral","src":"314:6:3","type":"","value":"0xffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"303:3:3"},"nodeType":"YulFunctionCall","src":"303:18:3"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"293:2:3"},"nodeType":"YulFunctionCall","src":"293:29:3"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"286:6:3"},"nodeType":"YulFunctionCall","src":"286:37:3"},"nodeType":"YulIf","src":"283:2:3"}]},"name":"abi_decode_uint16_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"221:6:3","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"232:5:3","type":""}],"src":"183:163:3"},{"body":{"nodeType":"YulBlock","src":"432:180:3","statements":[{"body":{"nodeType":"YulBlock","src":"478:26:3","statements":[{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"487:6:3"},{"name":"value0","nodeType":"YulIdentifier","src":"495:6:3"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"480:6:3"},"nodeType":"YulFunctionCall","src":"480:22:3"},"nodeType":"YulExpressionStatement","src":"480:22:3"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"453:7:3"},{"name":"headStart","nodeType":"YulIdentifier","src":"462:9:3"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"449:3:3"},"nodeType":"YulFunctionCall","src":"449:23:3"},{"kind":"number","nodeType":"YulLiteral","src":"474:2:3","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"445:3:3"},"nodeType":"YulFunctionCall","src":"445:32:3"},"nodeType":"YulIf","src":"442:2:3"},{"nodeType":"YulVariableDeclaration","src":"513:29:3","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"532:9:3"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"526:5:3"},"nodeType":"YulFunctionCall","src":"526:16:3"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"517:5:3","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"576:5:3"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"551:24:3"},"nodeType":"YulFunctionCall","src":"551:31:3"},"nodeType":"YulExpressionStatement","src":"551:31:3"},{"nodeType":"YulAssignment","src":"591:15:3","value":{"name":"value","nodeType":"YulIdentifier","src":"601:5:3"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"591:6:3"}]}]},"name":"abi_decode_tuple_t_address_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"398:9:3","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"409:7:3","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"421:6:3","type":""}],"src":"351:261:3"},{"body":{"nodeType":"YulBlock","src":"721:362:3","statements":[{"body":{"nodeType":"YulBlock","src":"767:26:3","statements":[{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"776:6:3"},{"name":"value1","nodeType":"YulIdentifier","src":"784:6:3"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"769:6:3"},"nodeType":"YulFunctionCall","src":"769:22:3"},"nodeType":"YulExpressionStatement","src":"769:22:3"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"742:7:3"},{"name":"headStart","nodeType":"YulIdentifier","src":"751:9:3"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"738:3:3"},"nodeType":"YulFunctionCall","src":"738:23:3"},{"kind":"number","nodeType":"YulLiteral","src":"763:2:3","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"734:3:3"},"nodeType":"YulFunctionCall","src":"734:32:3"},"nodeType":"YulIf","src":"731:2:3"},{"nodeType":"YulVariableDeclaration","src":"802:36:3","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"828:9:3"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"815:12:3"},"nodeType":"YulFunctionCall","src":"815:23:3"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"806:5:3","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"872:5:3"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"847:24:3"},"nodeType":"YulFunctionCall","src":"847:31:3"},"nodeType":"YulExpressionStatement","src":"847:31:3"},{"nodeType":"YulAssignment","src":"887:15:3","value":{"name":"value","nodeType":"YulIdentifier","src":"897:5:3"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"887:6:3"}]},{"nodeType":"YulVariableDeclaration","src":"911:47:3","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"943:9:3"},{"kind":"number","nodeType":"YulLiteral","src":"954:2:3","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"939:3:3"},"nodeType":"YulFunctionCall","src":"939:18:3"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"926:12:3"},"nodeType":"YulFunctionCall","src":"926:32:3"},"variables":[{"name":"value_1","nodeType":"YulTypedName","src":"915:7:3","type":""}]},{"expression":{"arguments":[{"name":"value_1","nodeType":"YulIdentifier","src":"992:7:3"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"967:24:3"},"nodeType":"YulFunctionCall","src":"967:33:3"},"nodeType":"YulExpressionStatement","src":"967:33:3"},{"nodeType":"YulAssignment","src":"1009:17:3","value":{"name":"value_1","nodeType":"YulIdentifier","src":"1019:7:3"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"1009:6:3"}]},{"nodeType":"YulAssignment","src":"1035:42:3","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1062:9:3"},{"kind":"number","nodeType":"YulLiteral","src":"1073:2:3","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1058:3:3"},"nodeType":"YulFunctionCall","src":"1058:18:3"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1045:12:3"},"nodeType":"YulFunctionCall","src":"1045:32:3"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"1035:6:3"}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"671:9:3","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"682:7:3","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"694:6:3","type":""},{"name":"value1","nodeType":"YulTypedName","src":"702:6:3","type":""},{"name":"value2","nodeType":"YulTypedName","src":"710:6:3","type":""}],"src":"617:466:3"},{"body":{"nodeType":"YulBlock","src":"1166:134:3","statements":[{"body":{"nodeType":"YulBlock","src":"1212:26:3","statements":[{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1221:6:3"},{"name":"value0","nodeType":"YulIdentifier","src":"1229:6:3"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1214:6:3"},"nodeType":"YulFunctionCall","src":"1214:22:3"},"nodeType":"YulExpressionStatement","src":"1214:22:3"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1187:7:3"},{"name":"headStart","nodeType":"YulIdentifier","src":"1196:9:3"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1183:3:3"},"nodeType":"YulFunctionCall","src":"1183:23:3"},{"kind":"number","nodeType":"YulLiteral","src":"1208:2:3","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1179:3:3"},"nodeType":"YulFunctionCall","src":"1179:32:3"},"nodeType":"YulIf","src":"1176:2:3"},{"nodeType":"YulAssignment","src":"1247:47:3","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1284:9:3"}],"functionName":{"name":"abi_decode_bool_fromMemory","nodeType":"YulIdentifier","src":"1257:26:3"},"nodeType":"YulFunctionCall","src":"1257:37:3"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1247:6:3"}]}]},"name":"abi_decode_tuple_t_bool_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1132:9:3","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1143:7:3","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1155:6:3","type":""}],"src":"1088:212:3"},{"body":{"nodeType":"YulBlock","src":"1479:766:3","statements":[{"body":{"nodeType":"YulBlock","src":"1526:26:3","statements":[{"expression":{"arguments":[{"name":"value4","nodeType":"YulIdentifier","src":"1535:6:3"},{"name":"value4","nodeType":"YulIdentifier","src":"1543:6:3"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1528:6:3"},"nodeType":"YulFunctionCall","src":"1528:22:3"},"nodeType":"YulExpressionStatement","src":"1528:22:3"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1500:7:3"},{"name":"headStart","nodeType":"YulIdentifier","src":"1509:9:3"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1496:3:3"},"nodeType":"YulFunctionCall","src":"1496:23:3"},{"kind":"number","nodeType":"YulLiteral","src":"1521:3:3","type":"","value":"224"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1492:3:3"},"nodeType":"YulFunctionCall","src":"1492:33:3"},"nodeType":"YulIf","src":"1489:2:3"},{"nodeType":"YulVariableDeclaration","src":"1561:29:3","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1580:9:3"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1574:5:3"},"nodeType":"YulFunctionCall","src":"1574:16:3"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"1565:5:3","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1624:5:3"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"1599:24:3"},"nodeType":"YulFunctionCall","src":"1599:31:3"},"nodeType":"YulExpressionStatement","src":"1599:31:3"},{"nodeType":"YulAssignment","src":"1639:15:3","value":{"name":"value","nodeType":"YulIdentifier","src":"1649:5:3"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1639:6:3"}]},{"nodeType":"YulVariableDeclaration","src":"1663:40:3","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1688:9:3"},{"kind":"number","nodeType":"YulLiteral","src":"1699:2:3","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1684:3:3"},"nodeType":"YulFunctionCall","src":"1684:18:3"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1678:5:3"},"nodeType":"YulFunctionCall","src":"1678:25:3"},"variables":[{"name":"value_1","nodeType":"YulTypedName","src":"1667:7:3","type":""}]},{"body":{"nodeType":"YulBlock","src":"1759:26:3","statements":[{"expression":{"arguments":[{"name":"value4","nodeType":"YulIdentifier","src":"1768:6:3"},{"name":"value4","nodeType":"YulIdentifier","src":"1776:6:3"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1761:6:3"},"nodeType":"YulFunctionCall","src":"1761:22:3"},"nodeType":"YulExpressionStatement","src":"1761:22:3"}]},"condition":{"arguments":[{"arguments":[{"name":"value_1","nodeType":"YulIdentifier","src":"1725:7:3"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1745:1:3","type":"","value":"2"},{"name":"value_1","nodeType":"YulIdentifier","src":"1748:7:3"}],"functionName":{"name":"signextend","nodeType":"YulIdentifier","src":"1734:10:3"},"nodeType":"YulFunctionCall","src":"1734:22:3"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"1722:2:3"},"nodeType":"YulFunctionCall","src":"1722:35:3"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1715:6:3"},"nodeType":"YulFunctionCall","src":"1715:43:3"},"nodeType":"YulIf","src":"1712:2:3"},{"nodeType":"YulAssignment","src":"1794:17:3","value":{"name":"value_1","nodeType":"YulIdentifier","src":"1804:7:3"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"1794:6:3"}]},{"nodeType":"YulAssignment","src":"1820:58:3","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1863:9:3"},{"kind":"number","nodeType":"YulLiteral","src":"1874:2:3","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1859:3:3"},"nodeType":"YulFunctionCall","src":"1859:18:3"}],"functionName":{"name":"abi_decode_uint16_fromMemory","nodeType":"YulIdentifier","src":"1830:28:3"},"nodeType":"YulFunctionCall","src":"1830:48:3"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"1820:6:3"}]},{"nodeType":"YulAssignment","src":"1887:58:3","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1930:9:3"},{"kind":"number","nodeType":"YulLiteral","src":"1941:2:3","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1926:3:3"},"nodeType":"YulFunctionCall","src":"1926:18:3"}],"functionName":{"name":"abi_decode_uint16_fromMemory","nodeType":"YulIdentifier","src":"1897:28:3"},"nodeType":"YulFunctionCall","src":"1897:48:3"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"1887:6:3"}]},{"nodeType":"YulAssignment","src":"1954:59:3","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1997:9:3"},{"kind":"number","nodeType":"YulLiteral","src":"2008:3:3","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1993:3:3"},"nodeType":"YulFunctionCall","src":"1993:19:3"}],"functionName":{"name":"abi_decode_uint16_fromMemory","nodeType":"YulIdentifier","src":"1964:28:3"},"nodeType":"YulFunctionCall","src":"1964:49:3"},"variableNames":[{"name":"value4","nodeType":"YulIdentifier","src":"1954:6:3"}]},{"nodeType":"YulVariableDeclaration","src":"2022:41:3","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2047:9:3"},{"kind":"number","nodeType":"YulLiteral","src":"2058:3:3","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2043:3:3"},"nodeType":"YulFunctionCall","src":"2043:19:3"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2037:5:3"},"nodeType":"YulFunctionCall","src":"2037:26:3"},"variables":[{"name":"value_2","nodeType":"YulTypedName","src":"2026:7:3","type":""}]},{"body":{"nodeType":"YulBlock","src":"2121:26:3","statements":[{"expression":{"arguments":[{"name":"value5","nodeType":"YulIdentifier","src":"2130:6:3"},{"name":"value5","nodeType":"YulIdentifier","src":"2138:6:3"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2123:6:3"},"nodeType":"YulFunctionCall","src":"2123:22:3"},"nodeType":"YulExpressionStatement","src":"2123:22:3"}]},"condition":{"arguments":[{"arguments":[{"name":"value_2","nodeType":"YulIdentifier","src":"2085:7:3"},{"arguments":[{"name":"value_2","nodeType":"YulIdentifier","src":"2098:7:3"},{"kind":"number","nodeType":"YulLiteral","src":"2107:10:3","type":"","value":"0xffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2094:3:3"},"nodeType":"YulFunctionCall","src":"2094:24:3"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"2082:2:3"},"nodeType":"YulFunctionCall","src":"2082:37:3"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2075:6:3"},"nodeType":"YulFunctionCall","src":"2075:45:3"},"nodeType":"YulIf","src":"2072:2:3"},{"nodeType":"YulAssignment","src":"2156:17:3","value":{"name":"value_2","nodeType":"YulIdentifier","src":"2166:7:3"},"variableNames":[{"name":"value5","nodeType":"YulIdentifier","src":"2156:6:3"}]},{"nodeType":"YulAssignment","src":"2182:57:3","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2223:9:3"},{"kind":"number","nodeType":"YulLiteral","src":"2234:3:3","type":"","value":"192"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2219:3:3"},"nodeType":"YulFunctionCall","src":"2219:19:3"}],"functionName":{"name":"abi_decode_bool_fromMemory","nodeType":"YulIdentifier","src":"2192:26:3"},"nodeType":"YulFunctionCall","src":"2192:47:3"},"variableNames":[{"name":"value6","nodeType":"YulIdentifier","src":"2182:6:3"}]}]},"name":"abi_decode_tuple_t_uint160t_int24t_uint16t_uint16t_uint16t_uint32t_bool_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1397:9:3","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1408:7:3","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1420:6:3","type":""},{"name":"value1","nodeType":"YulTypedName","src":"1428:6:3","type":""},{"name":"value2","nodeType":"YulTypedName","src":"1436:6:3","type":""},{"name":"value3","nodeType":"YulTypedName","src":"1444:6:3","type":""},{"name":"value4","nodeType":"YulTypedName","src":"1452:6:3","type":""},{"name":"value5","nodeType":"YulTypedName","src":"1460:6:3","type":""},{"name":"value6","nodeType":"YulTypedName","src":"1468:6:3","type":""}],"src":"1305:940:3"},{"body":{"nodeType":"YulBlock","src":"2331:113:3","statements":[{"body":{"nodeType":"YulBlock","src":"2377:26:3","statements":[{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"2386:6:3"},{"name":"value0","nodeType":"YulIdentifier","src":"2394:6:3"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2379:6:3"},"nodeType":"YulFunctionCall","src":"2379:22:3"},"nodeType":"YulExpressionStatement","src":"2379:22:3"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2352:7:3"},{"name":"headStart","nodeType":"YulIdentifier","src":"2361:9:3"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2348:3:3"},"nodeType":"YulFunctionCall","src":"2348:23:3"},{"kind":"number","nodeType":"YulLiteral","src":"2373:2:3","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2344:3:3"},"nodeType":"YulFunctionCall","src":"2344:32:3"},"nodeType":"YulIf","src":"2341:2:3"},{"nodeType":"YulAssignment","src":"2412:26:3","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2428:9:3"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2422:5:3"},"nodeType":"YulFunctionCall","src":"2422:16:3"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2412:6:3"}]}]},"name":"abi_decode_tuple_t_uint256_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2297:9:3","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2308:7:3","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2320:6:3","type":""}],"src":"2250:194:3"},{"body":{"nodeType":"YulBlock","src":"2553:362:3","statements":[{"body":{"nodeType":"YulBlock","src":"2599:26:3","statements":[{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"2608:6:3"},{"name":"value0","nodeType":"YulIdentifier","src":"2616:6:3"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2601:6:3"},"nodeType":"YulFunctionCall","src":"2601:22:3"},"nodeType":"YulExpressionStatement","src":"2601:22:3"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2574:7:3"},{"name":"headStart","nodeType":"YulIdentifier","src":"2583:9:3"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2570:3:3"},"nodeType":"YulFunctionCall","src":"2570:23:3"},{"kind":"number","nodeType":"YulLiteral","src":"2595:2:3","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2566:3:3"},"nodeType":"YulFunctionCall","src":"2566:32:3"},"nodeType":"YulIf","src":"2563:2:3"},{"nodeType":"YulAssignment","src":"2634:33:3","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2657:9:3"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2644:12:3"},"nodeType":"YulFunctionCall","src":"2644:23:3"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2634:6:3"}]},{"nodeType":"YulVariableDeclaration","src":"2676:45:3","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2706:9:3"},{"kind":"number","nodeType":"YulLiteral","src":"2717:2:3","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2702:3:3"},"nodeType":"YulFunctionCall","src":"2702:18:3"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2689:12:3"},"nodeType":"YulFunctionCall","src":"2689:32:3"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"2680:5:3","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2755:5:3"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"2730:24:3"},"nodeType":"YulFunctionCall","src":"2730:31:3"},"nodeType":"YulExpressionStatement","src":"2730:31:3"},{"nodeType":"YulAssignment","src":"2770:15:3","value":{"name":"value","nodeType":"YulIdentifier","src":"2780:5:3"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"2770:6:3"}]},{"nodeType":"YulVariableDeclaration","src":"2794:47:3","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2826:9:3"},{"kind":"number","nodeType":"YulLiteral","src":"2837:2:3","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2822:3:3"},"nodeType":"YulFunctionCall","src":"2822:18:3"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2809:12:3"},"nodeType":"YulFunctionCall","src":"2809:32:3"},"variables":[{"name":"value_1","nodeType":"YulTypedName","src":"2798:7:3","type":""}]},{"expression":{"arguments":[{"name":"value_1","nodeType":"YulIdentifier","src":"2875:7:3"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"2850:24:3"},"nodeType":"YulFunctionCall","src":"2850:33:3"},"nodeType":"YulExpressionStatement","src":"2850:33:3"},{"nodeType":"YulAssignment","src":"2892:17:3","value":{"name":"value_1","nodeType":"YulIdentifier","src":"2902:7:3"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"2892:6:3"}]}]},"name":"abi_decode_tuple_t_uint256t_addresst_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2503:9:3","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2514:7:3","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2526:6:3","type":""},{"name":"value1","nodeType":"YulTypedName","src":"2534:6:3","type":""},{"name":"value2","nodeType":"YulTypedName","src":"2542:6:3","type":""}],"src":"2449:466:3"},{"body":{"nodeType":"YulBlock","src":"3057:137:3","statements":[{"nodeType":"YulVariableDeclaration","src":"3067:27:3","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"3087:6:3"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3081:5:3"},"nodeType":"YulFunctionCall","src":"3081:13:3"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"3071:6:3","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"3129:6:3"},{"kind":"number","nodeType":"YulLiteral","src":"3137:4:3","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3125:3:3"},"nodeType":"YulFunctionCall","src":"3125:17:3"},{"name":"pos","nodeType":"YulIdentifier","src":"3144:3:3"},{"name":"length","nodeType":"YulIdentifier","src":"3149:6:3"}],"functionName":{"name":"copy_memory_to_memory","nodeType":"YulIdentifier","src":"3103:21:3"},"nodeType":"YulFunctionCall","src":"3103:53:3"},"nodeType":"YulExpressionStatement","src":"3103:53:3"},{"nodeType":"YulAssignment","src":"3165:23:3","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"3176:3:3"},{"name":"length","nodeType":"YulIdentifier","src":"3181:6:3"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3172:3:3"},"nodeType":"YulFunctionCall","src":"3172:16:3"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"3165:3:3"}]}]},"name":"abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"3033:3:3","type":""},{"name":"value0","nodeType":"YulTypedName","src":"3038:6:3","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"3049:3:3","type":""}],"src":"2920:274:3"},{"body":{"nodeType":"YulBlock","src":"3390:14:3","statements":[{"nodeType":"YulAssignment","src":"3392:10:3","value":{"name":"pos","nodeType":"YulIdentifier","src":"3399:3:3"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"3392:3:3"}]}]},"name":"abi_encode_tuple_packed_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"3374:3:3","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"3382:3:3","type":""}],"src":"3199:205:3"},{"body":{"nodeType":"YulBlock","src":"3510:102:3","statements":[{"nodeType":"YulAssignment","src":"3520:26:3","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3532:9:3"},{"kind":"number","nodeType":"YulLiteral","src":"3543:2:3","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3528:3:3"},"nodeType":"YulFunctionCall","src":"3528:18:3"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"3520:4:3"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3562:9:3"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"3577:6:3"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3593:3:3","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"3598:1:3","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"3589:3:3"},"nodeType":"YulFunctionCall","src":"3589:11:3"},{"kind":"number","nodeType":"YulLiteral","src":"3602:1:3","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3585:3:3"},"nodeType":"YulFunctionCall","src":"3585:19:3"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3573:3:3"},"nodeType":"YulFunctionCall","src":"3573:32:3"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3555:6:3"},"nodeType":"YulFunctionCall","src":"3555:51:3"},"nodeType":"YulExpressionStatement","src":"3555:51:3"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3479:9:3","type":""},{"name":"value0","nodeType":"YulTypedName","src":"3490:6:3","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"3501:4:3","type":""}],"src":"3409:203:3"},{"body":{"nodeType":"YulBlock","src":"3772:233:3","statements":[{"nodeType":"YulAssignment","src":"3782:26:3","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3794:9:3"},{"kind":"number","nodeType":"YulLiteral","src":"3805:2:3","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3790:3:3"},"nodeType":"YulFunctionCall","src":"3790:18:3"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"3782:4:3"}]},{"nodeType":"YulVariableDeclaration","src":"3817:29:3","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3835:3:3","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"3840:1:3","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"3831:3:3"},"nodeType":"YulFunctionCall","src":"3831:11:3"},{"kind":"number","nodeType":"YulLiteral","src":"3844:1:3","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3827:3:3"},"nodeType":"YulFunctionCall","src":"3827:19:3"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"3821:2:3","type":""}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3862:9:3"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"3877:6:3"},{"name":"_1","nodeType":"YulIdentifier","src":"3885:2:3"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3873:3:3"},"nodeType":"YulFunctionCall","src":"3873:15:3"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3855:6:3"},"nodeType":"YulFunctionCall","src":"3855:34:3"},"nodeType":"YulExpressionStatement","src":"3855:34:3"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3909:9:3"},{"kind":"number","nodeType":"YulLiteral","src":"3920:2:3","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3905:3:3"},"nodeType":"YulFunctionCall","src":"3905:18:3"},{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"3929:6:3"},{"name":"_1","nodeType":"YulIdentifier","src":"3937:2:3"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3925:3:3"},"nodeType":"YulFunctionCall","src":"3925:15:3"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3898:6:3"},"nodeType":"YulFunctionCall","src":"3898:43:3"},"nodeType":"YulExpressionStatement","src":"3898:43:3"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3961:9:3"},{"kind":"number","nodeType":"YulLiteral","src":"3972:2:3","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3957:3:3"},"nodeType":"YulFunctionCall","src":"3957:18:3"},{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"3981:6:3"},{"kind":"number","nodeType":"YulLiteral","src":"3989:8:3","type":"","value":"0xffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3977:3:3"},"nodeType":"YulFunctionCall","src":"3977:21:3"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3950:6:3"},"nodeType":"YulFunctionCall","src":"3950:49:3"},"nodeType":"YulExpressionStatement","src":"3950:49:3"}]},"name":"abi_encode_tuple_t_address_t_address_t_uint24__to_t_address_t_address_t_uint24__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3725:9:3","type":""},{"name":"value2","nodeType":"YulTypedName","src":"3736:6:3","type":""},{"name":"value1","nodeType":"YulTypedName","src":"3744:6:3","type":""},{"name":"value0","nodeType":"YulTypedName","src":"3752:6:3","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"3763:4:3","type":""}],"src":"3617:388:3"},{"body":{"nodeType":"YulBlock","src":"4167:218:3","statements":[{"nodeType":"YulAssignment","src":"4177:26:3","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4189:9:3"},{"kind":"number","nodeType":"YulLiteral","src":"4200:2:3","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4185:3:3"},"nodeType":"YulFunctionCall","src":"4185:18:3"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"4177:4:3"}]},{"nodeType":"YulVariableDeclaration","src":"4212:29:3","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4230:3:3","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"4235:1:3","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"4226:3:3"},"nodeType":"YulFunctionCall","src":"4226:11:3"},{"kind":"number","nodeType":"YulLiteral","src":"4239:1:3","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4222:3:3"},"nodeType":"YulFunctionCall","src":"4222:19:3"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"4216:2:3","type":""}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4257:9:3"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"4272:6:3"},{"name":"_1","nodeType":"YulIdentifier","src":"4280:2:3"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4268:3:3"},"nodeType":"YulFunctionCall","src":"4268:15:3"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4250:6:3"},"nodeType":"YulFunctionCall","src":"4250:34:3"},"nodeType":"YulExpressionStatement","src":"4250:34:3"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4304:9:3"},{"kind":"number","nodeType":"YulLiteral","src":"4315:2:3","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4300:3:3"},"nodeType":"YulFunctionCall","src":"4300:18:3"},{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"4324:6:3"},{"name":"_1","nodeType":"YulIdentifier","src":"4332:2:3"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4320:3:3"},"nodeType":"YulFunctionCall","src":"4320:15:3"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4293:6:3"},"nodeType":"YulFunctionCall","src":"4293:43:3"},"nodeType":"YulExpressionStatement","src":"4293:43:3"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4356:9:3"},{"kind":"number","nodeType":"YulLiteral","src":"4367:2:3","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4352:3:3"},"nodeType":"YulFunctionCall","src":"4352:18:3"},{"name":"value2","nodeType":"YulIdentifier","src":"4372:6:3"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4345:6:3"},"nodeType":"YulFunctionCall","src":"4345:34:3"},"nodeType":"YulExpressionStatement","src":"4345:34:3"}]},"name":"abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4120:9:3","type":""},{"name":"value2","nodeType":"YulTypedName","src":"4131:6:3","type":""},{"name":"value1","nodeType":"YulTypedName","src":"4139:6:3","type":""},{"name":"value0","nodeType":"YulTypedName","src":"4147:6:3","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"4158:4:3","type":""}],"src":"4010:375:3"},{"body":{"nodeType":"YulBlock","src":"4519:145:3","statements":[{"nodeType":"YulAssignment","src":"4529:26:3","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4541:9:3"},{"kind":"number","nodeType":"YulLiteral","src":"4552:2:3","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4537:3:3"},"nodeType":"YulFunctionCall","src":"4537:18:3"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"4529:4:3"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4571:9:3"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"4586:6:3"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4602:3:3","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"4607:1:3","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"4598:3:3"},"nodeType":"YulFunctionCall","src":"4598:11:3"},{"kind":"number","nodeType":"YulLiteral","src":"4611:1:3","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4594:3:3"},"nodeType":"YulFunctionCall","src":"4594:19:3"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4582:3:3"},"nodeType":"YulFunctionCall","src":"4582:32:3"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4564:6:3"},"nodeType":"YulFunctionCall","src":"4564:51:3"},"nodeType":"YulExpressionStatement","src":"4564:51:3"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4635:9:3"},{"kind":"number","nodeType":"YulLiteral","src":"4646:2:3","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4631:3:3"},"nodeType":"YulFunctionCall","src":"4631:18:3"},{"name":"value1","nodeType":"YulIdentifier","src":"4651:6:3"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4624:6:3"},"nodeType":"YulFunctionCall","src":"4624:34:3"},"nodeType":"YulExpressionStatement","src":"4624:34:3"}]},"name":"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4480:9:3","type":""},{"name":"value1","nodeType":"YulTypedName","src":"4491:6:3","type":""},{"name":"value0","nodeType":"YulTypedName","src":"4499:6:3","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"4510:4:3","type":""}],"src":"4390:274:3"},{"body":{"nodeType":"YulBlock","src":"4790:262:3","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4807:9:3"},{"kind":"number","nodeType":"YulLiteral","src":"4818:2:3","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4800:6:3"},"nodeType":"YulFunctionCall","src":"4800:21:3"},"nodeType":"YulExpressionStatement","src":"4800:21:3"},{"nodeType":"YulVariableDeclaration","src":"4830:27:3","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"4850:6:3"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"4844:5:3"},"nodeType":"YulFunctionCall","src":"4844:13:3"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"4834:6:3","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4877:9:3"},{"kind":"number","nodeType":"YulLiteral","src":"4888:2:3","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4873:3:3"},"nodeType":"YulFunctionCall","src":"4873:18:3"},{"name":"length","nodeType":"YulIdentifier","src":"4893:6:3"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4866:6:3"},"nodeType":"YulFunctionCall","src":"4866:34:3"},"nodeType":"YulExpressionStatement","src":"4866:34:3"},{"expression":{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"4935:6:3"},{"kind":"number","nodeType":"YulLiteral","src":"4943:2:3","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4931:3:3"},"nodeType":"YulFunctionCall","src":"4931:15:3"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4952:9:3"},{"kind":"number","nodeType":"YulLiteral","src":"4963:2:3","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4948:3:3"},"nodeType":"YulFunctionCall","src":"4948:18:3"},{"name":"length","nodeType":"YulIdentifier","src":"4968:6:3"}],"functionName":{"name":"copy_memory_to_memory","nodeType":"YulIdentifier","src":"4909:21:3"},"nodeType":"YulFunctionCall","src":"4909:66:3"},"nodeType":"YulExpressionStatement","src":"4909:66:3"},{"nodeType":"YulAssignment","src":"4984:62:3","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5000:9:3"},{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"5019:6:3"},{"kind":"number","nodeType":"YulLiteral","src":"5027:2:3","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5015:3:3"},"nodeType":"YulFunctionCall","src":"5015:15:3"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5036:2:3","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"5032:3:3"},"nodeType":"YulFunctionCall","src":"5032:7:3"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"5011:3:3"},"nodeType":"YulFunctionCall","src":"5011:29:3"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4996:3:3"},"nodeType":"YulFunctionCall","src":"4996:45:3"},{"kind":"number","nodeType":"YulLiteral","src":"5043:2:3","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4992:3:3"},"nodeType":"YulFunctionCall","src":"4992:54:3"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"4984:4:3"}]}]},"name":"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4759:9:3","type":""},{"name":"value0","nodeType":"YulTypedName","src":"4770:6:3","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"4781:4:3","type":""}],"src":"4669:383:3"},{"body":{"nodeType":"YulBlock","src":"5231:228:3","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5248:9:3"},{"kind":"number","nodeType":"YulLiteral","src":"5259:2:3","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5241:6:3"},"nodeType":"YulFunctionCall","src":"5241:21:3"},"nodeType":"YulExpressionStatement","src":"5241:21:3"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5282:9:3"},{"kind":"number","nodeType":"YulLiteral","src":"5293:2:3","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5278:3:3"},"nodeType":"YulFunctionCall","src":"5278:18:3"},{"kind":"number","nodeType":"YulLiteral","src":"5298:2:3","type":"","value":"38"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5271:6:3"},"nodeType":"YulFunctionCall","src":"5271:30:3"},"nodeType":"YulExpressionStatement","src":"5271:30:3"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5321:9:3"},{"kind":"number","nodeType":"YulLiteral","src":"5332:2:3","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5317:3:3"},"nodeType":"YulFunctionCall","src":"5317:18:3"},{"kind":"string","nodeType":"YulLiteral","src":"5337:34:3","type":"","value":"Address: insufficient balance fo"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5310:6:3"},"nodeType":"YulFunctionCall","src":"5310:62:3"},"nodeType":"YulExpressionStatement","src":"5310:62:3"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5392:9:3"},{"kind":"number","nodeType":"YulLiteral","src":"5403:2:3","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5388:3:3"},"nodeType":"YulFunctionCall","src":"5388:18:3"},{"kind":"string","nodeType":"YulLiteral","src":"5408:8:3","type":"","value":"r call"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5381:6:3"},"nodeType":"YulFunctionCall","src":"5381:36:3"},"nodeType":"YulExpressionStatement","src":"5381:36:3"},{"nodeType":"YulAssignment","src":"5426:27:3","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5438:9:3"},{"kind":"number","nodeType":"YulLiteral","src":"5449:3:3","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5434:3:3"},"nodeType":"YulFunctionCall","src":"5434:19:3"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"5426:4:3"}]}]},"name":"abi_encode_tuple_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5208:9:3","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"5222:4:3","type":""}],"src":"5057:402:3"},{"body":{"nodeType":"YulBlock","src":"5638:179:3","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5655:9:3"},{"kind":"number","nodeType":"YulLiteral","src":"5666:2:3","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5648:6:3"},"nodeType":"YulFunctionCall","src":"5648:21:3"},"nodeType":"YulExpressionStatement","src":"5648:21:3"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5689:9:3"},{"kind":"number","nodeType":"YulLiteral","src":"5700:2:3","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5685:3:3"},"nodeType":"YulFunctionCall","src":"5685:18:3"},{"kind":"number","nodeType":"YulLiteral","src":"5705:2:3","type":"","value":"29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5678:6:3"},"nodeType":"YulFunctionCall","src":"5678:30:3"},"nodeType":"YulExpressionStatement","src":"5678:30:3"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5728:9:3"},{"kind":"number","nodeType":"YulLiteral","src":"5739:2:3","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5724:3:3"},"nodeType":"YulFunctionCall","src":"5724:18:3"},{"kind":"string","nodeType":"YulLiteral","src":"5744:31:3","type":"","value":"Address: call to non-contract"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5717:6:3"},"nodeType":"YulFunctionCall","src":"5717:59:3"},"nodeType":"YulExpressionStatement","src":"5717:59:3"},{"nodeType":"YulAssignment","src":"5785:26:3","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5797:9:3"},{"kind":"number","nodeType":"YulLiteral","src":"5808:2:3","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5793:3:3"},"nodeType":"YulFunctionCall","src":"5793:18:3"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"5785:4:3"}]}]},"name":"abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5615:9:3","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"5629:4:3","type":""}],"src":"5464:353:3"},{"body":{"nodeType":"YulBlock","src":"5996:232:3","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6013:9:3"},{"kind":"number","nodeType":"YulLiteral","src":"6024:2:3","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6006:6:3"},"nodeType":"YulFunctionCall","src":"6006:21:3"},"nodeType":"YulExpressionStatement","src":"6006:21:3"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6047:9:3"},{"kind":"number","nodeType":"YulLiteral","src":"6058:2:3","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6043:3:3"},"nodeType":"YulFunctionCall","src":"6043:18:3"},{"kind":"number","nodeType":"YulLiteral","src":"6063:2:3","type":"","value":"42"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6036:6:3"},"nodeType":"YulFunctionCall","src":"6036:30:3"},"nodeType":"YulExpressionStatement","src":"6036:30:3"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6086:9:3"},{"kind":"number","nodeType":"YulLiteral","src":"6097:2:3","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6082:3:3"},"nodeType":"YulFunctionCall","src":"6082:18:3"},{"kind":"string","nodeType":"YulLiteral","src":"6102:34:3","type":"","value":"SafeERC20: ERC20 operation did n"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6075:6:3"},"nodeType":"YulFunctionCall","src":"6075:62:3"},"nodeType":"YulExpressionStatement","src":"6075:62:3"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6157:9:3"},{"kind":"number","nodeType":"YulLiteral","src":"6168:2:3","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6153:3:3"},"nodeType":"YulFunctionCall","src":"6153:18:3"},{"kind":"string","nodeType":"YulLiteral","src":"6173:12:3","type":"","value":"ot succeed"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6146:6:3"},"nodeType":"YulFunctionCall","src":"6146:40:3"},"nodeType":"YulExpressionStatement","src":"6146:40:3"},{"nodeType":"YulAssignment","src":"6195:27:3","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6207:9:3"},{"kind":"number","nodeType":"YulLiteral","src":"6218:3:3","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6203:3:3"},"nodeType":"YulFunctionCall","src":"6203:19:3"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"6195:4:3"}]}]},"name":"abi_encode_tuple_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5973:9:3","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"5987:4:3","type":""}],"src":"5822:406:3"},{"body":{"nodeType":"YulBlock","src":"6407:163:3","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6424:9:3"},{"kind":"number","nodeType":"YulLiteral","src":"6435:2:3","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6417:6:3"},"nodeType":"YulFunctionCall","src":"6417:21:3"},"nodeType":"YulExpressionStatement","src":"6417:21:3"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6458:9:3"},{"kind":"number","nodeType":"YulLiteral","src":"6469:2:3","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6454:3:3"},"nodeType":"YulFunctionCall","src":"6454:18:3"},{"kind":"number","nodeType":"YulLiteral","src":"6474:2:3","type":"","value":"13"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6447:6:3"},"nodeType":"YulFunctionCall","src":"6447:30:3"},"nodeType":"YulExpressionStatement","src":"6447:30:3"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6497:9:3"},{"kind":"number","nodeType":"YulLiteral","src":"6508:2:3","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6493:3:3"},"nodeType":"YulFunctionCall","src":"6493:18:3"},{"kind":"string","nodeType":"YulLiteral","src":"6513:15:3","type":"","value":"refund failed"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6486:6:3"},"nodeType":"YulFunctionCall","src":"6486:43:3"},"nodeType":"YulExpressionStatement","src":"6486:43:3"},{"nodeType":"YulAssignment","src":"6538:26:3","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6550:9:3"},{"kind":"number","nodeType":"YulLiteral","src":"6561:2:3","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6546:3:3"},"nodeType":"YulFunctionCall","src":"6546:18:3"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"6538:4:3"}]}]},"name":"abi_encode_tuple_t_stringliteral_f9239079da98909f815170ee967acd53b4cf9b37ced6a4dd9f2f25df9bc54bf5__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6384:9:3","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"6398:4:3","type":""}],"src":"6233:337:3"},{"body":{"nodeType":"YulBlock","src":"6756:551:3","statements":[{"nodeType":"YulAssignment","src":"6766:27:3","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6778:9:3"},{"kind":"number","nodeType":"YulLiteral","src":"6789:3:3","type":"","value":"224"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6774:3:3"},"nodeType":"YulFunctionCall","src":"6774:19:3"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"6766:4:3"}]},{"nodeType":"YulVariableDeclaration","src":"6802:29:3","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6820:3:3","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"6825:1:3","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"6816:3:3"},"nodeType":"YulFunctionCall","src":"6816:11:3"},{"kind":"number","nodeType":"YulLiteral","src":"6829:1:3","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"6812:3:3"},"nodeType":"YulFunctionCall","src":"6812:19:3"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"6806:2:3","type":""}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6847:9:3"},{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"6868:6:3"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"6862:5:3"},"nodeType":"YulFunctionCall","src":"6862:13:3"},{"name":"_1","nodeType":"YulIdentifier","src":"6877:2:3"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"6858:3:3"},"nodeType":"YulFunctionCall","src":"6858:22:3"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6840:6:3"},"nodeType":"YulFunctionCall","src":"6840:41:3"},"nodeType":"YulExpressionStatement","src":"6840:41:3"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6901:9:3"},{"kind":"number","nodeType":"YulLiteral","src":"6912:4:3","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6897:3:3"},"nodeType":"YulFunctionCall","src":"6897:20:3"},{"arguments":[{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"6933:6:3"},{"kind":"number","nodeType":"YulLiteral","src":"6941:4:3","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6929:3:3"},"nodeType":"YulFunctionCall","src":"6929:17:3"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"6923:5:3"},"nodeType":"YulFunctionCall","src":"6923:24:3"},{"name":"_1","nodeType":"YulIdentifier","src":"6949:2:3"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"6919:3:3"},"nodeType":"YulFunctionCall","src":"6919:33:3"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6890:6:3"},"nodeType":"YulFunctionCall","src":"6890:63:3"},"nodeType":"YulExpressionStatement","src":"6890:63:3"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6973:9:3"},{"kind":"number","nodeType":"YulLiteral","src":"6984:4:3","type":"","value":"0x40"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6969:3:3"},"nodeType":"YulFunctionCall","src":"6969:20:3"},{"arguments":[{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"7005:6:3"},{"kind":"number","nodeType":"YulLiteral","src":"7013:4:3","type":"","value":"0x40"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7001:3:3"},"nodeType":"YulFunctionCall","src":"7001:17:3"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"6995:5:3"},"nodeType":"YulFunctionCall","src":"6995:24:3"},{"kind":"number","nodeType":"YulLiteral","src":"7021:8:3","type":"","value":"0xffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"6991:3:3"},"nodeType":"YulFunctionCall","src":"6991:39:3"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6962:6:3"},"nodeType":"YulFunctionCall","src":"6962:69:3"},"nodeType":"YulExpressionStatement","src":"6962:69:3"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7051:9:3"},{"kind":"number","nodeType":"YulLiteral","src":"7062:4:3","type":"","value":"0x60"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7047:3:3"},"nodeType":"YulFunctionCall","src":"7047:20:3"},{"arguments":[{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"7083:6:3"},{"kind":"number","nodeType":"YulLiteral","src":"7091:4:3","type":"","value":"0x60"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7079:3:3"},"nodeType":"YulFunctionCall","src":"7079:17:3"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"7073:5:3"},"nodeType":"YulFunctionCall","src":"7073:24:3"},{"name":"_1","nodeType":"YulIdentifier","src":"7099:2:3"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"7069:3:3"},"nodeType":"YulFunctionCall","src":"7069:33:3"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7040:6:3"},"nodeType":"YulFunctionCall","src":"7040:63:3"},"nodeType":"YulExpressionStatement","src":"7040:63:3"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7123:9:3"},{"kind":"number","nodeType":"YulLiteral","src":"7134:4:3","type":"","value":"0x80"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7119:3:3"},"nodeType":"YulFunctionCall","src":"7119:20:3"},{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"7151:6:3"},{"kind":"number","nodeType":"YulLiteral","src":"7159:4:3","type":"","value":"0x80"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7147:3:3"},"nodeType":"YulFunctionCall","src":"7147:17:3"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"7141:5:3"},"nodeType":"YulFunctionCall","src":"7141:24:3"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7112:6:3"},"nodeType":"YulFunctionCall","src":"7112:54:3"},"nodeType":"YulExpressionStatement","src":"7112:54:3"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7186:9:3"},{"kind":"number","nodeType":"YulLiteral","src":"7197:4:3","type":"","value":"0xa0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7182:3:3"},"nodeType":"YulFunctionCall","src":"7182:20:3"},{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"7214:6:3"},{"kind":"number","nodeType":"YulLiteral","src":"7222:4:3","type":"","value":"0xa0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7210:3:3"},"nodeType":"YulFunctionCall","src":"7210:17:3"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"7204:5:3"},"nodeType":"YulFunctionCall","src":"7204:24:3"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7175:6:3"},"nodeType":"YulFunctionCall","src":"7175:54:3"},"nodeType":"YulExpressionStatement","src":"7175:54:3"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7249:9:3"},{"kind":"number","nodeType":"YulLiteral","src":"7260:4:3","type":"","value":"0xc0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7245:3:3"},"nodeType":"YulFunctionCall","src":"7245:20:3"},{"arguments":[{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"7281:6:3"},{"kind":"number","nodeType":"YulLiteral","src":"7289:4:3","type":"","value":"0xc0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7277:3:3"},"nodeType":"YulFunctionCall","src":"7277:17:3"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"7271:5:3"},"nodeType":"YulFunctionCall","src":"7271:24:3"},{"name":"_1","nodeType":"YulIdentifier","src":"7297:2:3"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"7267:3:3"},"nodeType":"YulFunctionCall","src":"7267:33:3"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7238:6:3"},"nodeType":"YulFunctionCall","src":"7238:63:3"},"nodeType":"YulExpressionStatement","src":"7238:63:3"}]},"name":"abi_encode_tuple_t_struct$_ExactInputSingleParams_$3969_memory_ptr__to_t_struct$_ExactInputSingleParams_$3969_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6725:9:3","type":""},{"name":"value0","nodeType":"YulTypedName","src":"6736:6:3","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"6747:4:3","type":""}],"src":"6575:732:3"},{"body":{"nodeType":"YulBlock","src":"7413:76:3","statements":[{"nodeType":"YulAssignment","src":"7423:26:3","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7435:9:3"},{"kind":"number","nodeType":"YulLiteral","src":"7446:2:3","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7431:3:3"},"nodeType":"YulFunctionCall","src":"7431:18:3"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"7423:4:3"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7465:9:3"},{"name":"value0","nodeType":"YulIdentifier","src":"7476:6:3"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7458:6:3"},"nodeType":"YulFunctionCall","src":"7458:25:3"},"nodeType":"YulExpressionStatement","src":"7458:25:3"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"7382:9:3","type":""},{"name":"value0","nodeType":"YulTypedName","src":"7393:6:3","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"7404:4:3","type":""}],"src":"7312:177:3"},{"body":{"nodeType":"YulBlock","src":"7540:171:3","statements":[{"body":{"nodeType":"YulBlock","src":"7571:111:3","statements":[{"expression":{"arguments":[{"name":"r","nodeType":"YulIdentifier","src":"7592:1:3"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7599:3:3","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"7604:10:3","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"7595:3:3"},"nodeType":"YulFunctionCall","src":"7595:20:3"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7585:6:3"},"nodeType":"YulFunctionCall","src":"7585:31:3"},"nodeType":"YulExpressionStatement","src":"7585:31:3"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7636:1:3","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"7639:4:3","type":"","value":"0x12"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7629:6:3"},"nodeType":"YulFunctionCall","src":"7629:15:3"},"nodeType":"YulExpressionStatement","src":"7629:15:3"},{"expression":{"arguments":[{"name":"r","nodeType":"YulIdentifier","src":"7664:1:3"},{"kind":"number","nodeType":"YulLiteral","src":"7667:4:3","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"7657:6:3"},"nodeType":"YulFunctionCall","src":"7657:15:3"},"nodeType":"YulExpressionStatement","src":"7657:15:3"}]},"condition":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"7560:1:3"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"7553:6:3"},"nodeType":"YulFunctionCall","src":"7553:9:3"},"nodeType":"YulIf","src":"7550:2:3"},{"nodeType":"YulAssignment","src":"7691:14:3","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"7700:1:3"},{"name":"y","nodeType":"YulIdentifier","src":"7703:1:3"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"7696:3:3"},"nodeType":"YulFunctionCall","src":"7696:9:3"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"7691:1:3"}]}]},"name":"checked_div_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"7525:1:3","type":""},{"name":"y","nodeType":"YulTypedName","src":"7528:1:3","type":""}],"returnVariables":[{"name":"r","nodeType":"YulTypedName","src":"7534:1:3","type":""}],"src":"7494:217:3"},{"body":{"nodeType":"YulBlock","src":"7780:358:3","statements":[{"nodeType":"YulVariableDeclaration","src":"7790:16:3","value":{"kind":"number","nodeType":"YulLiteral","src":"7805:1:3","type":"","value":"1"},"variables":[{"name":"power_1","nodeType":"YulTypedName","src":"7794:7:3","type":""}]},{"nodeType":"YulAssignment","src":"7815:16:3","value":{"name":"power_1","nodeType":"YulIdentifier","src":"7824:7:3"},"variableNames":[{"name":"power","nodeType":"YulIdentifier","src":"7815:5:3"}]},{"nodeType":"YulAssignment","src":"7840:13:3","value":{"name":"_base","nodeType":"YulIdentifier","src":"7848:5:3"},"variableNames":[{"name":"base","nodeType":"YulIdentifier","src":"7840:4:3"}]},{"body":{"nodeType":"YulBlock","src":"7904:228:3","statements":[{"body":{"nodeType":"YulBlock","src":"7949:22:3","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"7951:16:3"},"nodeType":"YulFunctionCall","src":"7951:18:3"},"nodeType":"YulExpressionStatement","src":"7951:18:3"}]},"condition":{"arguments":[{"name":"base","nodeType":"YulIdentifier","src":"7924:4:3"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7938:1:3","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"7934:3:3"},"nodeType":"YulFunctionCall","src":"7934:6:3"},{"name":"base","nodeType":"YulIdentifier","src":"7942:4:3"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"7930:3:3"},"nodeType":"YulFunctionCall","src":"7930:17:3"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"7921:2:3"},"nodeType":"YulFunctionCall","src":"7921:27:3"},"nodeType":"YulIf","src":"7918:2:3"},{"body":{"nodeType":"YulBlock","src":"8010:29:3","statements":[{"nodeType":"YulAssignment","src":"8012:25:3","value":{"arguments":[{"name":"power","nodeType":"YulIdentifier","src":"8025:5:3"},{"name":"base","nodeType":"YulIdentifier","src":"8032:4:3"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"8021:3:3"},"nodeType":"YulFunctionCall","src":"8021:16:3"},"variableNames":[{"name":"power","nodeType":"YulIdentifier","src":"8012:5:3"}]}]},"condition":{"arguments":[{"name":"exponent","nodeType":"YulIdentifier","src":"7991:8:3"},{"name":"power_1","nodeType":"YulIdentifier","src":"8001:7:3"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"7987:3:3"},"nodeType":"YulFunctionCall","src":"7987:22:3"},"nodeType":"YulIf","src":"7984:2:3"},{"nodeType":"YulAssignment","src":"8052:23:3","value":{"arguments":[{"name":"base","nodeType":"YulIdentifier","src":"8064:4:3"},{"name":"base","nodeType":"YulIdentifier","src":"8070:4:3"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"8060:3:3"},"nodeType":"YulFunctionCall","src":"8060:15:3"},"variableNames":[{"name":"base","nodeType":"YulIdentifier","src":"8052:4:3"}]},{"nodeType":"YulAssignment","src":"8088:34:3","value":{"arguments":[{"name":"power_1","nodeType":"YulIdentifier","src":"8104:7:3"},{"name":"exponent","nodeType":"YulIdentifier","src":"8113:8:3"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"8100:3:3"},"nodeType":"YulFunctionCall","src":"8100:22:3"},"variableNames":[{"name":"exponent","nodeType":"YulIdentifier","src":"8088:8:3"}]}]},"condition":{"arguments":[{"name":"exponent","nodeType":"YulIdentifier","src":"7873:8:3"},{"name":"power_1","nodeType":"YulIdentifier","src":"7883:7:3"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"7870:2:3"},"nodeType":"YulFunctionCall","src":"7870:21:3"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"7892:3:3","statements":[]},"pre":{"nodeType":"YulBlock","src":"7866:3:3","statements":[]},"src":"7862:270:3"}]},"name":"checked_exp_helper","nodeType":"YulFunctionDefinition","parameters":[{"name":"_base","nodeType":"YulTypedName","src":"7744:5:3","type":""},{"name":"exponent","nodeType":"YulTypedName","src":"7751:8:3","type":""}],"returnVariables":[{"name":"power","nodeType":"YulTypedName","src":"7764:5:3","type":""},{"name":"base","nodeType":"YulTypedName","src":"7771:4:3","type":""}],"src":"7716:422:3"},{"body":{"nodeType":"YulBlock","src":"8211:72:3","statements":[{"nodeType":"YulAssignment","src":"8221:56:3","value":{"arguments":[{"name":"base","nodeType":"YulIdentifier","src":"8251:4:3"},{"arguments":[{"name":"exponent","nodeType":"YulIdentifier","src":"8261:8:3"},{"kind":"number","nodeType":"YulLiteral","src":"8271:4:3","type":"","value":"0xff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"8257:3:3"},"nodeType":"YulFunctionCall","src":"8257:19:3"}],"functionName":{"name":"checked_exp_unsigned","nodeType":"YulIdentifier","src":"8230:20:3"},"nodeType":"YulFunctionCall","src":"8230:47:3"},"variableNames":[{"name":"power","nodeType":"YulIdentifier","src":"8221:5:3"}]}]},"name":"checked_exp_t_uint256_t_uint8","nodeType":"YulFunctionDefinition","parameters":[{"name":"base","nodeType":"YulTypedName","src":"8182:4:3","type":""},{"name":"exponent","nodeType":"YulTypedName","src":"8188:8:3","type":""}],"returnVariables":[{"name":"power","nodeType":"YulTypedName","src":"8201:5:3","type":""}],"src":"8143:140:3"},{"body":{"nodeType":"YulBlock","src":"8347:747:3","statements":[{"body":{"nodeType":"YulBlock","src":"8385:52:3","statements":[{"nodeType":"YulAssignment","src":"8399:10:3","value":{"kind":"number","nodeType":"YulLiteral","src":"8408:1:3","type":"","value":"1"},"variableNames":[{"name":"power","nodeType":"YulIdentifier","src":"8399:5:3"}]},{"nodeType":"YulLeave","src":"8422:5:3"}]},"condition":{"arguments":[{"name":"exponent","nodeType":"YulIdentifier","src":"8367:8:3"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"8360:6:3"},"nodeType":"YulFunctionCall","src":"8360:16:3"},"nodeType":"YulIf","src":"8357:2:3"},{"body":{"nodeType":"YulBlock","src":"8470:52:3","statements":[{"nodeType":"YulAssignment","src":"8484:10:3","value":{"kind":"number","nodeType":"YulLiteral","src":"8493:1:3","type":"","value":"0"},"variableNames":[{"name":"power","nodeType":"YulIdentifier","src":"8484:5:3"}]},{"nodeType":"YulLeave","src":"8507:5:3"}]},"condition":{"arguments":[{"name":"base","nodeType":"YulIdentifier","src":"8456:4:3"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"8449:6:3"},"nodeType":"YulFunctionCall","src":"8449:12:3"},"nodeType":"YulIf","src":"8446:2:3"},{"cases":[{"body":{"nodeType":"YulBlock","src":"8558:52:3","statements":[{"nodeType":"YulAssignment","src":"8572:10:3","value":{"kind":"number","nodeType":"YulLiteral","src":"8581:1:3","type":"","value":"1"},"variableNames":[{"name":"power","nodeType":"YulIdentifier","src":"8572:5:3"}]},{"nodeType":"YulLeave","src":"8595:5:3"}]},"nodeType":"YulCase","src":"8551:59:3","value":{"kind":"number","nodeType":"YulLiteral","src":"8556:1:3","type":"","value":"1"}},{"body":{"nodeType":"YulBlock","src":"8626:123:3","statements":[{"body":{"nodeType":"YulBlock","src":"8661:22:3","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"8663:16:3"},"nodeType":"YulFunctionCall","src":"8663:18:3"},"nodeType":"YulExpressionStatement","src":"8663:18:3"}]},"condition":{"arguments":[{"name":"exponent","nodeType":"YulIdentifier","src":"8646:8:3"},{"kind":"number","nodeType":"YulLiteral","src":"8656:3:3","type":"","value":"255"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"8643:2:3"},"nodeType":"YulFunctionCall","src":"8643:17:3"},"nodeType":"YulIf","src":"8640:2:3"},{"nodeType":"YulAssignment","src":"8696:25:3","value":{"arguments":[{"name":"exponent","nodeType":"YulIdentifier","src":"8709:8:3"},{"kind":"number","nodeType":"YulLiteral","src":"8719:1:3","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"8705:3:3"},"nodeType":"YulFunctionCall","src":"8705:16:3"},"variableNames":[{"name":"power","nodeType":"YulIdentifier","src":"8696:5:3"}]},{"nodeType":"YulLeave","src":"8734:5:3"}]},"nodeType":"YulCase","src":"8619:130:3","value":{"kind":"number","nodeType":"YulLiteral","src":"8624:1:3","type":"","value":"2"}}],"expression":{"name":"base","nodeType":"YulIdentifier","src":"8538:4:3"},"nodeType":"YulSwitch","src":"8531:218:3"},{"body":{"nodeType":"YulBlock","src":"8847:70:3","statements":[{"nodeType":"YulAssignment","src":"8861:28:3","value":{"arguments":[{"name":"base","nodeType":"YulIdentifier","src":"8874:4:3"},{"name":"exponent","nodeType":"YulIdentifier","src":"8880:8:3"}],"functionName":{"name":"exp","nodeType":"YulIdentifier","src":"8870:3:3"},"nodeType":"YulFunctionCall","src":"8870:19:3"},"variableNames":[{"name":"power","nodeType":"YulIdentifier","src":"8861:5:3"}]},{"nodeType":"YulLeave","src":"8902:5:3"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"base","nodeType":"YulIdentifier","src":"8771:4:3"},{"kind":"number","nodeType":"YulLiteral","src":"8777:2:3","type":"","value":"11"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"8768:2:3"},"nodeType":"YulFunctionCall","src":"8768:12:3"},{"arguments":[{"name":"exponent","nodeType":"YulIdentifier","src":"8785:8:3"},{"kind":"number","nodeType":"YulLiteral","src":"8795:2:3","type":"","value":"78"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"8782:2:3"},"nodeType":"YulFunctionCall","src":"8782:16:3"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"8764:3:3"},"nodeType":"YulFunctionCall","src":"8764:35:3"},{"arguments":[{"arguments":[{"name":"base","nodeType":"YulIdentifier","src":"8808:4:3"},{"kind":"number","nodeType":"YulLiteral","src":"8814:3:3","type":"","value":"307"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"8805:2:3"},"nodeType":"YulFunctionCall","src":"8805:13:3"},{"arguments":[{"name":"exponent","nodeType":"YulIdentifier","src":"8823:8:3"},{"kind":"number","nodeType":"YulLiteral","src":"8833:2:3","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"8820:2:3"},"nodeType":"YulFunctionCall","src":"8820:16:3"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"8801:3:3"},"nodeType":"YulFunctionCall","src":"8801:36:3"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"8761:2:3"},"nodeType":"YulFunctionCall","src":"8761:77:3"},"nodeType":"YulIf","src":"8758:2:3"},{"nodeType":"YulVariableDeclaration","src":"8926:57:3","value":{"arguments":[{"name":"base","nodeType":"YulIdentifier","src":"8968:4:3"},{"name":"exponent","nodeType":"YulIdentifier","src":"8974:8:3"}],"functionName":{"name":"checked_exp_helper","nodeType":"YulIdentifier","src":"8949:18:3"},"nodeType":"YulFunctionCall","src":"8949:34:3"},"variables":[{"name":"power_1","nodeType":"YulTypedName","src":"8930:7:3","type":""},{"name":"base_1","nodeType":"YulTypedName","src":"8939:6:3","type":""}]},{"body":{"nodeType":"YulBlock","src":"9028:22:3","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"9030:16:3"},"nodeType":"YulFunctionCall","src":"9030:18:3"},"nodeType":"YulExpressionStatement","src":"9030:18:3"}]},"condition":{"arguments":[{"name":"power_1","nodeType":"YulIdentifier","src":"8998:7:3"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9015:1:3","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"9011:3:3"},"nodeType":"YulFunctionCall","src":"9011:6:3"},{"name":"base_1","nodeType":"YulIdentifier","src":"9019:6:3"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"9007:3:3"},"nodeType":"YulFunctionCall","src":"9007:19:3"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"8995:2:3"},"nodeType":"YulFunctionCall","src":"8995:32:3"},"nodeType":"YulIf","src":"8992:2:3"},{"nodeType":"YulAssignment","src":"9059:29:3","value":{"arguments":[{"name":"power_1","nodeType":"YulIdentifier","src":"9072:7:3"},{"name":"base_1","nodeType":"YulIdentifier","src":"9081:6:3"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"9068:3:3"},"nodeType":"YulFunctionCall","src":"9068:20:3"},"variableNames":[{"name":"power","nodeType":"YulIdentifier","src":"9059:5:3"}]}]},"name":"checked_exp_unsigned","nodeType":"YulFunctionDefinition","parameters":[{"name":"base","nodeType":"YulTypedName","src":"8318:4:3","type":""},{"name":"exponent","nodeType":"YulTypedName","src":"8324:8:3","type":""}],"returnVariables":[{"name":"power","nodeType":"YulTypedName","src":"8337:5:3","type":""}],"src":"8288:806:3"},{"body":{"nodeType":"YulBlock","src":"9151:116:3","statements":[{"body":{"nodeType":"YulBlock","src":"9210:22:3","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"9212:16:3"},"nodeType":"YulFunctionCall","src":"9212:18:3"},"nodeType":"YulExpressionStatement","src":"9212:18:3"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"9182:1:3"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"9175:6:3"},"nodeType":"YulFunctionCall","src":"9175:9:3"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"9168:6:3"},"nodeType":"YulFunctionCall","src":"9168:17:3"},{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"9190:1:3"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9201:1:3","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"9197:3:3"},"nodeType":"YulFunctionCall","src":"9197:6:3"},{"name":"x","nodeType":"YulIdentifier","src":"9205:1:3"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"9193:3:3"},"nodeType":"YulFunctionCall","src":"9193:14:3"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"9187:2:3"},"nodeType":"YulFunctionCall","src":"9187:21:3"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"9164:3:3"},"nodeType":"YulFunctionCall","src":"9164:45:3"},"nodeType":"YulIf","src":"9161:2:3"},{"nodeType":"YulAssignment","src":"9241:20:3","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"9256:1:3"},{"name":"y","nodeType":"YulIdentifier","src":"9259:1:3"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"9252:3:3"},"nodeType":"YulFunctionCall","src":"9252:9:3"},"variableNames":[{"name":"product","nodeType":"YulIdentifier","src":"9241:7:3"}]}]},"name":"checked_mul_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"9130:1:3","type":""},{"name":"y","nodeType":"YulTypedName","src":"9133:1:3","type":""}],"returnVariables":[{"name":"product","nodeType":"YulTypedName","src":"9139:7:3","type":""}],"src":"9099:168:3"},{"body":{"nodeType":"YulBlock","src":"9325:205:3","statements":[{"nodeType":"YulVariableDeclaration","src":"9335:10:3","value":{"kind":"number","nodeType":"YulLiteral","src":"9344:1:3","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"9339:1:3","type":""}]},{"body":{"nodeType":"YulBlock","src":"9404:63:3","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"9429:3:3"},{"name":"i","nodeType":"YulIdentifier","src":"9434:1:3"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9425:3:3"},"nodeType":"YulFunctionCall","src":"9425:11:3"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"9448:3:3"},{"name":"i","nodeType":"YulIdentifier","src":"9453:1:3"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9444:3:3"},"nodeType":"YulFunctionCall","src":"9444:11:3"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"9438:5:3"},"nodeType":"YulFunctionCall","src":"9438:18:3"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9418:6:3"},"nodeType":"YulFunctionCall","src":"9418:39:3"},"nodeType":"YulExpressionStatement","src":"9418:39:3"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"9365:1:3"},{"name":"length","nodeType":"YulIdentifier","src":"9368:6:3"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"9362:2:3"},"nodeType":"YulFunctionCall","src":"9362:13:3"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"9376:19:3","statements":[{"nodeType":"YulAssignment","src":"9378:15:3","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"9387:1:3"},{"kind":"number","nodeType":"YulLiteral","src":"9390:2:3","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9383:3:3"},"nodeType":"YulFunctionCall","src":"9383:10:3"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"9378:1:3"}]}]},"pre":{"nodeType":"YulBlock","src":"9358:3:3","statements":[]},"src":"9354:113:3"},{"body":{"nodeType":"YulBlock","src":"9493:31:3","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"9506:3:3"},{"name":"length","nodeType":"YulIdentifier","src":"9511:6:3"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9502:3:3"},"nodeType":"YulFunctionCall","src":"9502:16:3"},{"kind":"number","nodeType":"YulLiteral","src":"9520:1:3","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9495:6:3"},"nodeType":"YulFunctionCall","src":"9495:27:3"},"nodeType":"YulExpressionStatement","src":"9495:27:3"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"9482:1:3"},{"name":"length","nodeType":"YulIdentifier","src":"9485:6:3"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"9479:2:3"},"nodeType":"YulFunctionCall","src":"9479:13:3"},"nodeType":"YulIf","src":"9476:2:3"}]},"name":"copy_memory_to_memory","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"9303:3:3","type":""},{"name":"dst","nodeType":"YulTypedName","src":"9308:3:3","type":""},{"name":"length","nodeType":"YulTypedName","src":"9313:6:3","type":""}],"src":"9272:258:3"},{"body":{"nodeType":"YulBlock","src":"9567:95:3","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9584:1:3","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9591:3:3","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"9596:10:3","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"9587:3:3"},"nodeType":"YulFunctionCall","src":"9587:20:3"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9577:6:3"},"nodeType":"YulFunctionCall","src":"9577:31:3"},"nodeType":"YulExpressionStatement","src":"9577:31:3"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9624:1:3","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"9627:4:3","type":"","value":"0x11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9617:6:3"},"nodeType":"YulFunctionCall","src":"9617:15:3"},"nodeType":"YulExpressionStatement","src":"9617:15:3"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9648:1:3","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"9651:4:3","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"9641:6:3"},"nodeType":"YulFunctionCall","src":"9641:15:3"},"nodeType":"YulExpressionStatement","src":"9641:15:3"}]},"name":"panic_error_0x11","nodeType":"YulFunctionDefinition","src":"9535:127:3"},{"body":{"nodeType":"YulBlock","src":"9712:86:3","statements":[{"body":{"nodeType":"YulBlock","src":"9776:16:3","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9785:1:3","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"9788:1:3","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"9778:6:3"},"nodeType":"YulFunctionCall","src":"9778:12:3"},"nodeType":"YulExpressionStatement","src":"9778:12:3"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"9735:5:3"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"9746:5:3"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9761:3:3","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"9766:1:3","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"9757:3:3"},"nodeType":"YulFunctionCall","src":"9757:11:3"},{"kind":"number","nodeType":"YulLiteral","src":"9770:1:3","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"9753:3:3"},"nodeType":"YulFunctionCall","src":"9753:19:3"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"9742:3:3"},"nodeType":"YulFunctionCall","src":"9742:31:3"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"9732:2:3"},"nodeType":"YulFunctionCall","src":"9732:42:3"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"9725:6:3"},"nodeType":"YulFunctionCall","src":"9725:50:3"},"nodeType":"YulIf","src":"9722:2:3"}]},"name":"validator_revert_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"9701:5:3","type":""}],"src":"9667:131:3"}]},"contents":"{\n    { }\n    function abi_decode_bool_fromMemory(offset) -> value\n    {\n        value := mload(offset)\n        if iszero(eq(value, iszero(iszero(value)))) { revert(0, 0) }\n    }\n    function abi_decode_uint16_fromMemory(offset) -> value\n    {\n        value := mload(offset)\n        if iszero(eq(value, and(value, 0xffff))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_address_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        let value := mload(headStart)\n        validator_revert_address(value)\n        value0 := value\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(value1, value1) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        let value_1 := calldataload(add(headStart, 32))\n        validator_revert_address(value_1)\n        value1 := value_1\n        value2 := calldataload(add(headStart, 64))\n    }\n    function abi_decode_tuple_t_bool_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        value0 := abi_decode_bool_fromMemory(headStart)\n    }\n    function abi_decode_tuple_t_uint160t_int24t_uint16t_uint16t_uint16t_uint32t_bool_fromMemory(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5, value6\n    {\n        if slt(sub(dataEnd, headStart), 224) { revert(value4, value4) }\n        let value := mload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        let value_1 := mload(add(headStart, 32))\n        if iszero(eq(value_1, signextend(2, value_1))) { revert(value4, value4) }\n        value1 := value_1\n        value2 := abi_decode_uint16_fromMemory(add(headStart, 64))\n        value3 := abi_decode_uint16_fromMemory(add(headStart, 96))\n        value4 := abi_decode_uint16_fromMemory(add(headStart, 128))\n        let value_2 := mload(add(headStart, 160))\n        if iszero(eq(value_2, and(value_2, 0xffffffff))) { revert(value5, value5) }\n        value5 := value_2\n        value6 := abi_decode_bool_fromMemory(add(headStart, 192))\n    }\n    function abi_decode_tuple_t_uint256_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        value0 := mload(headStart)\n    }\n    function abi_decode_tuple_t_uint256t_addresst_address(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(value0, value0) }\n        value0 := calldataload(headStart)\n        let value := calldataload(add(headStart, 32))\n        validator_revert_address(value)\n        value1 := value\n        let value_1 := calldataload(add(headStart, 64))\n        validator_revert_address(value_1)\n        value2 := value_1\n    }\n    function abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value0) -> end\n    {\n        let length := mload(value0)\n        copy_memory_to_memory(add(value0, 0x20), pos, length)\n        end := add(pos, length)\n    }\n    function abi_encode_tuple_packed_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos) -> end\n    { end := pos }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_encode_tuple_t_address_t_address_t_uint24__to_t_address_t_address_t_uint24__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        let _1 := sub(shl(160, 1), 1)\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), and(value2, 0xffffff))\n    }\n    function abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        let _1 := sub(shl(160, 1), 1)\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), value2)\n    }\n    function abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        let length := mload(value0)\n        mstore(add(headStart, 32), length)\n        copy_memory_to_memory(add(value0, 32), add(headStart, 64), length)\n        tail := add(add(headStart, and(add(length, 31), not(31))), 64)\n    }\n    function abi_encode_tuple_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"Address: insufficient balance fo\")\n        mstore(add(headStart, 96), \"r call\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 29)\n        mstore(add(headStart, 64), \"Address: call to non-contract\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 42)\n        mstore(add(headStart, 64), \"SafeERC20: ERC20 operation did n\")\n        mstore(add(headStart, 96), \"ot succeed\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_f9239079da98909f815170ee967acd53b4cf9b37ced6a4dd9f2f25df9bc54bf5__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 13)\n        mstore(add(headStart, 64), \"refund failed\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_struct$_ExactInputSingleParams_$3969_memory_ptr__to_t_struct$_ExactInputSingleParams_$3969_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 224)\n        let _1 := sub(shl(160, 1), 1)\n        mstore(headStart, and(mload(value0), _1))\n        mstore(add(headStart, 0x20), and(mload(add(value0, 0x20)), _1))\n        mstore(add(headStart, 0x40), and(mload(add(value0, 0x40)), 0xffffff))\n        mstore(add(headStart, 0x60), and(mload(add(value0, 0x60)), _1))\n        mstore(add(headStart, 0x80), mload(add(value0, 0x80)))\n        mstore(add(headStart, 0xa0), mload(add(value0, 0xa0)))\n        mstore(add(headStart, 0xc0), and(mload(add(value0, 0xc0)), _1))\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function checked_div_t_uint256(x, y) -> r\n    {\n        if iszero(y)\n        {\n            mstore(r, shl(224, 0x4e487b71))\n            mstore(4, 0x12)\n            revert(r, 0x24)\n        }\n        r := div(x, y)\n    }\n    function checked_exp_helper(_base, exponent) -> power, base\n    {\n        let power_1 := 1\n        power := power_1\n        base := _base\n        for { } gt(exponent, power_1) { }\n        {\n            if gt(base, div(not(0), base)) { panic_error_0x11() }\n            if and(exponent, power_1) { power := mul(power, base) }\n            base := mul(base, base)\n            exponent := shr(power_1, exponent)\n        }\n    }\n    function checked_exp_t_uint256_t_uint8(base, exponent) -> power\n    {\n        power := checked_exp_unsigned(base, and(exponent, 0xff))\n    }\n    function checked_exp_unsigned(base, exponent) -> power\n    {\n        if iszero(exponent)\n        {\n            power := 1\n            leave\n        }\n        if iszero(base)\n        {\n            power := 0\n            leave\n        }\n        switch base\n        case 1 {\n            power := 1\n            leave\n        }\n        case 2 {\n            if gt(exponent, 255) { panic_error_0x11() }\n            power := shl(exponent, 1)\n            leave\n        }\n        if or(and(lt(base, 11), lt(exponent, 78)), and(lt(base, 307), lt(exponent, 32)))\n        {\n            power := exp(base, exponent)\n            leave\n        }\n        let power_1, base_1 := checked_exp_helper(base, exponent)\n        if gt(power_1, div(not(0), base_1)) { panic_error_0x11() }\n        power := mul(power_1, base_1)\n    }\n    function checked_mul_t_uint256(x, y) -> product\n    {\n        if and(iszero(iszero(x)), gt(y, div(not(0), x))) { panic_error_0x11() }\n        product := mul(x, y)\n    }\n    function copy_memory_to_memory(src, dst, length)\n    {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        if gt(i, length) { mstore(add(dst, length), 0) }\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function validator_revert_address(value)\n    {\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n}","id":3,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"60806040526004361061004a5760003560e01c80633268cc561461004f57806363fe3e3a1461008c578063966dae0e146100ac578063a189d648146100cc578063ec6cc0cc146100fa575b600080fd5b34801561005b57600080fd5b5060005461006f906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561009857600080fd5b5060025461006f906001600160a01b031681565b3480156100b857600080fd5b5060015461006f906001600160a01b031681565b3480156100d857600080fd5b506100ec6100e7366004610a25565b61010f565b604051908152602001610083565b61010d610108366004610919565b610320565b005b600154600254604051630b4c774160e11b81526001600160a01b0385811660048301528481166024830152600160a01b90920462ffffff16604482015260009283928392911690631698ee829060640160206040518083038186803b15801561017757600080fd5b505afa15801561018b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101af91906108fd565b9050806001600160a01b0316633850c7bd6040518163ffffffff1660e01b815260040160e06040518083038186803b1580156101ea57600080fd5b505afa1580156101fe573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102229190610973565b505060408051630dfe168160e01b815290516001600160a01b03968716985060009688169550630dfe1681945060048083019450602093509091829003018186803b15801561027057600080fd5b505afa158015610284573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102a891906108fd565b9050806001600160a01b0316866001600160a01b031614156102f057600160c01b876102d5600286610b76565b6102df9190610c23565b6102e99190610b13565b9350610316565b6102fb600284610b76565b61030988600160c01b610c23565b6103139190610b13565b93505b5050509392505050565b6040805160e0810182526001600160a01b03808616808352858216602084015260025462ffffff600160a01b8204169484019490945233606084015260808301859052600060a0840181905260c08401529192161415610404576000546040516304e45aaf60e01b81526001600160a01b03909116906304e45aaf9034906103ac908590600401610ab5565b6020604051808303818588803b1580156103c557600080fd5b505af11580156103d9573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906103fe9190610a0d565b506104a9565b6104196001600160a01b038516333085610596565b61042384836105f6565b6000546040516304e45aaf60e01b81526001600160a01b03909116906304e45aaf903490610455908590600401610ab5565b6020604051808303818588803b15801561046e57600080fd5b505af1158015610482573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906104a79190610a0d565b505b6000805460408051630910874560e11b815290516001600160a01b03909216926312210e8a9260048084019382900301818387803b1580156104ea57600080fd5b505af11580156104fe573d6000803e3d6000fd5b50506040516000925033915047908381818185875af1925050503d8060008114610544576040519150601f19603f3d011682016040523d82523d6000602084013e610549565b606091505b505090508061058f5760405162461bcd60e51b815260206004820152600d60248201526c1c99599d5b990819985a5b1959609a1b60448201526064015b60405180910390fd5b5050505050565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b1790526105f0908590610681565b50505050565b60005460405163095ea7b360e01b81526001600160a01b039182166004820152602481018390529083169063095ea7b390604401602060405180830381600087803b15801561064457600080fd5b505af1158015610658573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061067c9190610959565b505050565b60006106d6826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166107539092919063ffffffff16565b80519091501561067c57808060200190518101906106f49190610959565b61067c5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610586565b6060610762848460008561076c565b90505b9392505050565b6060824710156107cd5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610586565b6001600160a01b0385163b6108245760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610586565b600080866001600160a01b031685876040516108409190610a66565b60006040518083038185875af1925050503d806000811461087d576040519150601f19603f3d011682016040523d82523d6000602084013e610882565b606091505b509150915061089282828661089d565b979650505050505050565b606083156108ac575081610765565b8251156108bc5782518084602001fd5b8160405162461bcd60e51b81526004016105869190610a82565b805180151581146108e657600080fd5b919050565b805161ffff811681146108e657600080fd5b60006020828403121561090e578081fd5b815161076581610c84565b60008060006060848603121561092d578182fd5b833561093881610c84565b9250602084013561094881610c84565b929592945050506040919091013590565b60006020828403121561096a578081fd5b610765826108d6565b600080600080600080600060e0888a03121561098d578283fd5b875161099881610c84565b8097505060208801518060020b81146109af578384fd5b95506109bd604089016108eb565b94506109cb606089016108eb565b93506109d9608089016108eb565b925060a088015163ffffffff811681146109f1578283fd5b91506109ff60c089016108d6565b905092959891949750929550565b600060208284031215610a1e578081fd5b5051919050565b600080600060608486031215610a39578283fd5b833592506020840135610a4b81610c84565b91506040840135610a5b81610c84565b809150509250925092565b60008251610a78818460208701610c42565b9190910192915050565b6020815260008251806020840152610aa1816040850160208701610c42565b601f01601f19169190910160400192915050565b81516001600160a01b03908116825260208084015182169083015260408084015162ffffff16908301526060808401518216908301526080808401519083015260a0838101519083015260c092830151169181019190915260e00190565b600082610b2e57634e487b7160e01b81526012600452602481fd5b500490565b600181815b80851115610b6e578160001904821115610b5457610b54610c6e565b80851615610b6157918102915b93841c9390800290610b38565b509250929050565b600061076560ff841683600082610b8f57506001610c1d565b81610b9c57506000610c1d565b8160018114610bb25760028114610bbc57610bd8565b6001915050610c1d565b60ff841115610bcd57610bcd610c6e565b50506001821b610c1d565b5060208310610133831016604e8410600b8410161715610bfb575081810a610c1d565b610c058383610b33565b8060001904821115610c1957610c19610c6e565b0290505b92915050565b6000816000190483118215151615610c3d57610c3d610c6e565b500290565b60005b83811015610c5d578181015183820152602001610c45565b838111156105f05750506000910152565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b0381168114610c9957600080fd5b5056fea264697066735822122017f7a528e6ea686ff249e208acaca333201fa48d6d5f6e6b89327e4a5eed4ea964736f6c63430008040033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x4A JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x3268CC56 EQ PUSH2 0x4F JUMPI DUP1 PUSH4 0x63FE3E3A EQ PUSH2 0x8C JUMPI DUP1 PUSH4 0x966DAE0E EQ PUSH2 0xAC JUMPI DUP1 PUSH4 0xA189D648 EQ PUSH2 0xCC JUMPI DUP1 PUSH4 0xEC6CC0CC EQ PUSH2 0xFA JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x0 SLOAD PUSH2 0x6F SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x98 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x2 SLOAD PUSH2 0x6F SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xB8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 SLOAD PUSH2 0x6F SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xD8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xEC PUSH2 0xE7 CALLDATASIZE PUSH1 0x4 PUSH2 0xA25 JUMP JUMPDEST PUSH2 0x10F JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x83 JUMP JUMPDEST PUSH2 0x10D PUSH2 0x108 CALLDATASIZE PUSH1 0x4 PUSH2 0x919 JUMP JUMPDEST PUSH2 0x320 JUMP JUMPDEST STOP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x2 SLOAD PUSH1 0x40 MLOAD PUSH4 0xB4C7741 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE DUP5 DUP2 AND PUSH1 0x24 DUP4 ADD MSTORE PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 SWAP3 DIV PUSH3 0xFFFFFF AND PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x0 SWAP3 DUP4 SWAP3 DUP4 SWAP3 SWAP2 AND SWAP1 PUSH4 0x1698EE82 SWAP1 PUSH1 0x64 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x177 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x18B JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1AF SWAP2 SWAP1 PUSH2 0x8FD JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x3850C7BD PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0xE0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1EA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1FE JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x222 SWAP2 SWAP1 PUSH2 0x973 JUMP JUMPDEST POP POP PUSH1 0x40 DUP1 MLOAD PUSH4 0xDFE1681 PUSH1 0xE0 SHL DUP2 MSTORE SWAP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP7 DUP8 AND SWAP9 POP PUSH1 0x0 SWAP7 DUP9 AND SWAP6 POP PUSH4 0xDFE1681 SWAP5 POP PUSH1 0x4 DUP1 DUP4 ADD SWAP5 POP PUSH1 0x20 SWAP4 POP SWAP1 SWAP2 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x270 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x284 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2A8 SWAP2 SWAP1 PUSH2 0x8FD JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x2F0 JUMPI PUSH1 0x1 PUSH1 0xC0 SHL DUP8 PUSH2 0x2D5 PUSH1 0x2 DUP7 PUSH2 0xB76 JUMP JUMPDEST PUSH2 0x2DF SWAP2 SWAP1 PUSH2 0xC23 JUMP JUMPDEST PUSH2 0x2E9 SWAP2 SWAP1 PUSH2 0xB13 JUMP JUMPDEST SWAP4 POP PUSH2 0x316 JUMP JUMPDEST PUSH2 0x2FB PUSH1 0x2 DUP5 PUSH2 0xB76 JUMP JUMPDEST PUSH2 0x309 DUP9 PUSH1 0x1 PUSH1 0xC0 SHL PUSH2 0xC23 JUMP JUMPDEST PUSH2 0x313 SWAP2 SWAP1 PUSH2 0xB13 JUMP JUMPDEST SWAP4 POP JUMPDEST POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0xE0 DUP2 ADD DUP3 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP7 AND DUP1 DUP4 MSTORE DUP6 DUP3 AND PUSH1 0x20 DUP5 ADD MSTORE PUSH1 0x2 SLOAD PUSH3 0xFFFFFF PUSH1 0x1 PUSH1 0xA0 SHL DUP3 DIV AND SWAP5 DUP5 ADD SWAP5 SWAP1 SWAP5 MSTORE CALLER PUSH1 0x60 DUP5 ADD MSTORE PUSH1 0x80 DUP4 ADD DUP6 SWAP1 MSTORE PUSH1 0x0 PUSH1 0xA0 DUP5 ADD DUP2 SWAP1 MSTORE PUSH1 0xC0 DUP5 ADD MSTORE SWAP2 SWAP3 AND EQ ISZERO PUSH2 0x404 JUMPI PUSH1 0x0 SLOAD PUSH1 0x40 MLOAD PUSH4 0x4E45AAF PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x4E45AAF SWAP1 CALLVALUE SWAP1 PUSH2 0x3AC SWAP1 DUP6 SWAP1 PUSH1 0x4 ADD PUSH2 0xAB5 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3C5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x3D9 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x3FE SWAP2 SWAP1 PUSH2 0xA0D JUMP JUMPDEST POP PUSH2 0x4A9 JUMP JUMPDEST PUSH2 0x419 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND CALLER ADDRESS DUP6 PUSH2 0x596 JUMP JUMPDEST PUSH2 0x423 DUP5 DUP4 PUSH2 0x5F6 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x40 MLOAD PUSH4 0x4E45AAF PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x4E45AAF SWAP1 CALLVALUE SWAP1 PUSH2 0x455 SWAP1 DUP6 SWAP1 PUSH1 0x4 ADD PUSH2 0xAB5 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x46E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x482 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x4A7 SWAP2 SWAP1 PUSH2 0xA0D JUMP JUMPDEST POP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH4 0x9108745 PUSH1 0xE1 SHL DUP2 MSTORE SWAP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND SWAP3 PUSH4 0x12210E8A SWAP3 PUSH1 0x4 DUP1 DUP5 ADD SWAP4 DUP3 SWAP1 SUB ADD DUP2 DUP4 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4EA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x4FE JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x40 MLOAD PUSH1 0x0 SWAP3 POP CALLER SWAP2 POP SELFBALANCE SWAP1 DUP4 DUP2 DUP2 DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x544 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x549 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0x58F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xD PUSH1 0x24 DUP3 ADD MSTORE PUSH13 0x1C99599D5B990819985A5B1959 PUSH1 0x9A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND PUSH1 0x24 DUP4 ADD MSTORE DUP5 AND PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 DUP1 DUP3 ADD DUP5 SWAP1 MSTORE DUP3 MLOAD DUP1 DUP4 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0x84 SWAP1 SWAP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH4 0x23B872DD PUSH1 0xE0 SHL OR SWAP1 MSTORE PUSH2 0x5F0 SWAP1 DUP6 SWAP1 PUSH2 0x681 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x40 MLOAD PUSH4 0x95EA7B3 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP4 SWAP1 MSTORE SWAP1 DUP4 AND SWAP1 PUSH4 0x95EA7B3 SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x644 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x658 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x67C SWAP2 SWAP1 PUSH2 0x959 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x6D6 DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x5361666545524332303A206C6F772D6C6576656C2063616C6C206661696C6564 DUP2 MSTORE POP DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x753 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP1 MLOAD SWAP1 SWAP2 POP ISZERO PUSH2 0x67C JUMPI DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x6F4 SWAP2 SWAP1 PUSH2 0x959 JUMP JUMPDEST PUSH2 0x67C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5361666545524332303A204552433230206F7065726174696F6E20646964206E PUSH1 0x44 DUP3 ADD MSTORE PUSH10 0x1BDD081CDD58D8D95959 PUSH1 0xB2 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x586 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x762 DUP5 DUP5 PUSH1 0x0 DUP6 PUSH2 0x76C JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP3 SELFBALANCE LT ISZERO PUSH2 0x7CD JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A20696E73756666696369656E742062616C616E636520666F PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x1C8818D85B1B PUSH1 0xD2 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x586 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND EXTCODESIZE PUSH2 0x824 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x586 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 DUP8 PUSH1 0x40 MLOAD PUSH2 0x840 SWAP2 SWAP1 PUSH2 0xA66 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x87D JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x882 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x892 DUP3 DUP3 DUP7 PUSH2 0x89D JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0x8AC JUMPI POP DUP2 PUSH2 0x765 JUMP JUMPDEST DUP3 MLOAD ISZERO PUSH2 0x8BC JUMPI DUP3 MLOAD DUP1 DUP5 PUSH1 0x20 ADD REVERT JUMPDEST DUP2 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x586 SWAP2 SWAP1 PUSH2 0xA82 JUMP JUMPDEST DUP1 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x8E6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 MLOAD PUSH2 0xFFFF DUP2 AND DUP2 EQ PUSH2 0x8E6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x90E JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x765 DUP2 PUSH2 0xC84 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x92D JUMPI DUP2 DUP3 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 0x938 DUP2 PUSH2 0xC84 JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH2 0x948 DUP2 PUSH2 0xC84 JUMP JUMPDEST SWAP3 SWAP6 SWAP3 SWAP5 POP POP POP PUSH1 0x40 SWAP2 SWAP1 SWAP2 ADD CALLDATALOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x96A JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x765 DUP3 PUSH2 0x8D6 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xE0 DUP9 DUP11 SUB SLT ISZERO PUSH2 0x98D JUMPI DUP3 DUP4 REVERT JUMPDEST DUP8 MLOAD PUSH2 0x998 DUP2 PUSH2 0xC84 JUMP JUMPDEST DUP1 SWAP8 POP POP PUSH1 0x20 DUP9 ADD MLOAD DUP1 PUSH1 0x2 SIGNEXTEND DUP2 EQ PUSH2 0x9AF JUMPI DUP4 DUP5 REVERT JUMPDEST SWAP6 POP PUSH2 0x9BD PUSH1 0x40 DUP10 ADD PUSH2 0x8EB JUMP JUMPDEST SWAP5 POP PUSH2 0x9CB PUSH1 0x60 DUP10 ADD PUSH2 0x8EB JUMP JUMPDEST SWAP4 POP PUSH2 0x9D9 PUSH1 0x80 DUP10 ADD PUSH2 0x8EB JUMP JUMPDEST SWAP3 POP PUSH1 0xA0 DUP9 ADD MLOAD PUSH4 0xFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x9F1 JUMPI DUP3 DUP4 REVERT JUMPDEST SWAP2 POP PUSH2 0x9FF PUSH1 0xC0 DUP10 ADD PUSH2 0x8D6 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP6 SWAP9 SWAP2 SWAP5 SWAP8 POP SWAP3 SWAP6 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xA1E JUMPI DUP1 DUP2 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0xA39 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP4 CALLDATALOAD SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH2 0xA4B DUP2 PUSH2 0xC84 JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD PUSH2 0xA5B DUP2 PUSH2 0xC84 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0xA78 DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0xC42 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 DUP3 MLOAD DUP1 PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0xAA1 DUP2 PUSH1 0x40 DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0xC42 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP2 SWAP1 SWAP2 ADD PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND DUP3 MSTORE PUSH1 0x20 DUP1 DUP5 ADD MLOAD DUP3 AND SWAP1 DUP4 ADD MSTORE PUSH1 0x40 DUP1 DUP5 ADD MLOAD PUSH3 0xFFFFFF AND SWAP1 DUP4 ADD MSTORE PUSH1 0x60 DUP1 DUP5 ADD MLOAD DUP3 AND SWAP1 DUP4 ADD MSTORE PUSH1 0x80 DUP1 DUP5 ADD MLOAD SWAP1 DUP4 ADD MSTORE PUSH1 0xA0 DUP4 DUP2 ADD MLOAD SWAP1 DUP4 ADD MSTORE PUSH1 0xC0 SWAP3 DUP4 ADD MLOAD AND SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0xE0 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0xB2E JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 DUP2 REVERT JUMPDEST POP DIV SWAP1 JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 JUMPDEST DUP1 DUP6 GT ISZERO PUSH2 0xB6E JUMPI DUP2 PUSH1 0x0 NOT DIV DUP3 GT ISZERO PUSH2 0xB54 JUMPI PUSH2 0xB54 PUSH2 0xC6E JUMP JUMPDEST DUP1 DUP6 AND ISZERO PUSH2 0xB61 JUMPI SWAP2 DUP2 MUL SWAP2 JUMPDEST SWAP4 DUP5 SHR SWAP4 SWAP1 DUP1 MUL SWAP1 PUSH2 0xB38 JUMP JUMPDEST POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x765 PUSH1 0xFF DUP5 AND DUP4 PUSH1 0x0 DUP3 PUSH2 0xB8F JUMPI POP PUSH1 0x1 PUSH2 0xC1D JUMP JUMPDEST DUP2 PUSH2 0xB9C JUMPI POP PUSH1 0x0 PUSH2 0xC1D JUMP JUMPDEST DUP2 PUSH1 0x1 DUP2 EQ PUSH2 0xBB2 JUMPI PUSH1 0x2 DUP2 EQ PUSH2 0xBBC JUMPI PUSH2 0xBD8 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP PUSH2 0xC1D JUMP JUMPDEST PUSH1 0xFF DUP5 GT ISZERO PUSH2 0xBCD JUMPI PUSH2 0xBCD PUSH2 0xC6E JUMP JUMPDEST POP POP PUSH1 0x1 DUP3 SHL PUSH2 0xC1D JUMP JUMPDEST POP PUSH1 0x20 DUP4 LT PUSH2 0x133 DUP4 LT AND PUSH1 0x4E DUP5 LT PUSH1 0xB DUP5 LT AND OR ISZERO PUSH2 0xBFB JUMPI POP DUP2 DUP2 EXP PUSH2 0xC1D JUMP JUMPDEST PUSH2 0xC05 DUP4 DUP4 PUSH2 0xB33 JUMP JUMPDEST DUP1 PUSH1 0x0 NOT DIV DUP3 GT ISZERO PUSH2 0xC19 JUMPI PUSH2 0xC19 PUSH2 0xC6E JUMP JUMPDEST MUL SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 NOT DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0xC3D JUMPI PUSH2 0xC3D PUSH2 0xC6E JUMP JUMPDEST POP MUL SWAP1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xC5D JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0xC45 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x5F0 JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0xC99 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 OR 0xF7 0xA5 0x28 0xE6 0xEA PUSH9 0x6FF249E208ACACA333 KECCAK256 0x1F LOG4 DUP14 PUSH14 0x5F6E6B89327E4A5EED4EA964736F PUSH13 0x63430008040033000000000000 ","sourceMap":"32047:2391:2:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;32136:73;;;;;;;;;;-1:-1:-1;32136:73:2;;;;-1:-1:-1;;;;;32136:73:2;;;;;;-1:-1:-1;;;;;3573:32:3;;;3555:51;;3543:2;3528:18;32136:73:2;;;;;;;;32297:71;;;;;;;;;;-1:-1:-1;32297:71:2;;;;-1:-1:-1;;;;;32297:71:2;;;32216:74;;;;;;;;;;-1:-1:-1;32216:74:2;;;;-1:-1:-1;;;;;32216:74:2;;;32424:716;;;;;;;;;;-1:-1:-1;32424:716:2;;;;;:::i;:::-;;:::i;:::-;;;7458:25:3;;;7446:2;7431:18;32424:716:2;7413:76:3;33287:1148:2;;;;;;:::i;:::-;;:::i;:::-;;32424:716;32678:14;;32763:3;;32660:117;;-1:-1:-1;;;32660:117:2;;-1:-1:-1;;;;;3873:15:3;;;32660:117:2;;;3855:34:3;3925:15;;;3905:18;;;3898:43;-1:-1:-1;;;32763:3:2;;;;;3957:18:3;;;3950:49;32570:17:2;;;;;;32678:14;;;32660:41;;3790:18:3;;32660:117:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;32638:139;;32840:11;-1:-1:-1;;;;;32820:52:2;;:54;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;32902:36:2;;;-1:-1:-1;;;32902:36:2;;;;-1:-1:-1;;;;;32788:86:2;;;;-1:-1:-1;32885:14:2;;32902:34;;;-1:-1:-1;32902:34:2;;-1:-1:-1;32902:36:2;;;;;-1:-1:-1;32902:36:2;;-1:-1:-1;32902:36:2;;;;;;;:34;:36;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;32885:53;;32965:6;-1:-1:-1;;;;;32953:18:2;:8;-1:-1:-1;;;;;32953:18:2;;32949:183;;;-1:-1:-1;;;33026:12:2;33003:20;33022:1;33003:15;:20;:::i;:::-;:35;;;;:::i;:::-;33002:48;;;;:::i;:::-;32986:65;;32949:183;;;33111:20;33130:1;33111:15;:20;:::i;:::-;33084:23;33095:12;-1:-1:-1;;;33084:23:2;:::i;:::-;33083:48;;;;:::i;:::-;33067:65;;32949:183;32424:716;;;;;;;;:::o;33287:1148::-;33478:239;;;;;;;;-1:-1:-1;;;;;33478:239:2;;;;;;;;;;;;;33602:3;;;-1:-1:-1;;;33602:3:2;;;33478:239;;;;;;;33624:10;33478:239;;;;;;;;;;33425:50;33478:239;;;;;;;;;;;;33744:11;33732:23;33728:486;;;33784:13;;33770:103;;-1:-1:-1;;;33770:103:2;;-1:-1:-1;;;;;33784:13:2;;;;33770:45;;33823:9;;33770:103;;33852:6;;33770:103;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;33728:486;;;33904:137;-1:-1:-1;;;;;33904:33:2;;33956:10;33993:4;34017:9;33904:33;:137::i;:::-;34056:28;34065:8;34074:9;34056:8;:28::i;:::-;34113:13;;34099:103;;-1:-1:-1;;;34099:103:2;;-1:-1:-1;;;;;34113:13:2;;;;34099:45;;34152:9;;34099:103;;34181:6;;34099:103;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;33728:486;34238:13;;;34224:40;;;-1:-1:-1;;;34224:40:2;;;;-1:-1:-1;;;;;34238:13:2;;;;34224:38;;:40;;;;;;;;;;34238:13;;34224:40;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;34334:49:2;;34316:12;;-1:-1:-1;34334:10:2;;-1:-1:-1;34357:21:2;;34316:12;34334:49;34316:12;34334:49;34357:21;34334:10;:49;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;34315:68;;;34402:7;34394:33;;;;-1:-1:-1;;;34394:33:2;;6435:2:3;34394:33:2;;;6417:21:3;6474:2;6454:18;;;6447:30;-1:-1:-1;;;6493:18:3;;;6486:43;6546:18;;34394:33:2;;;;;;;;;33287:1148;;;;;:::o;24261:285::-;24459:68;;;-1:-1:-1;;;;;4268:15:3;;;24459:68:2;;;4250:34:3;4320:15;;4300:18;;;4293:43;4352:18;;;;4345:34;;;24459:68:2;;;;;;;;;;4185:18:3;;;;24459:68:2;;;;;;;;-1:-1:-1;;;;;24459:68:2;-1:-1:-1;;;24459:68:2;;;24405:133;;24439:5;;24405:19;:133::i;:::-;24261:285;;;;:::o;33148:131::-;33247:13;;33216:55;;-1:-1:-1;;;33216:55:2;;-1:-1:-1;;;;;33247:13:2;;;33216:55;;;4564:51:3;4631:18;;;4624:34;;;33216:22:2;;;;;;4537:18:3;;33216:55:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;33148:131;;:::o;26972:802::-;27396:23;27422:106;27464:4;27422:106;;;;;;;;;;;;;;;;;27430:5;-1:-1:-1;;;;;27422:27:2;;;:106;;;;;:::i;:::-;27543:17;;27396:132;;-1:-1:-1;27543:21:2;27539:228;;27658:10;27647:30;;;;;;;;;;;;:::i;:::-;27621:134;;;;-1:-1:-1;;;27621:134:2;;6024:2:3;27621:134:2;;;6006:21:3;6063:2;6043:18;;;6036:30;6102:34;6082:18;;;6075:62;-1:-1:-1;;;6153:18:3;;;6146:40;6203:19;;27621:134:2;5996:232:3;16390:229:2;16527:12;16559:52;16581:6;16589:4;16595:1;16598:12;16559:21;:52::i;:::-;16552:59;;16390:229;;;;;;:::o;17606:571::-;17776:12;17848:5;17823:21;:30;;17801:118;;;;-1:-1:-1;;;17801:118:2;;5259:2:3;17801:118:2;;;5241:21:3;5298:2;5278:18;;;5271:30;5337:34;5317:18;;;5310:62;-1:-1:-1;;;5388:18:3;;;5381:36;5434:19;;17801:118:2;5231:228:3;17801:118:2;-1:-1:-1;;;;;13841:19:2;;;17930:60;;;;-1:-1:-1;;;17930:60:2;;5666:2:3;17930:60:2;;;5648:21:3;5705:2;5685:18;;;5678:30;5744:31;5724:18;;;5717:59;5793:18;;17930:60:2;5638:179:3;17930:60:2;18004:12;18018:23;18045:6;-1:-1:-1;;;;;18045:11:2;18064:5;18085:4;18045:55;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;18003:97;;;;18118:51;18135:7;18144:10;18156:12;18118:16;:51::i;:::-;18111:58;17606:571;-1:-1:-1;;;;;;;17606:571:2:o;20561:712::-;20711:12;20740:7;20736:530;;;-1:-1:-1;20771:10:2;20764:17;;20736:530;20885:17;;:21;20881:374;;21083:10;21077:17;21144:15;21131:10;21127:2;21123:19;21116:44;21031:148;21226:12;21219:20;;-1:-1:-1;;;21219:20:2;;;;;;;;:::i;14:164:3:-;90:13;;139;;132:21;122:32;;112:2;;168:1;165;158:12;112:2;71:107;;;:::o;183:163::-;261:13;;314:6;303:18;;293:29;;283:2;;336:1;333;326:12;351:261;421:6;474:2;462:9;453:7;449:23;445:32;442:2;;;495:6;487;480:22;442:2;532:9;526:16;551:31;576:5;551:31;:::i;617:466::-;694:6;702;710;763:2;751:9;742:7;738:23;734:32;731:2;;;784:6;776;769:22;731:2;828:9;815:23;847:31;872:5;847:31;:::i;:::-;897:5;-1:-1:-1;954:2:3;939:18;;926:32;967:33;926:32;967:33;:::i;:::-;721:362;;1019:7;;-1:-1:-1;;;1073:2:3;1058:18;;;;1045:32;;721:362::o;1088:212::-;1155:6;1208:2;1196:9;1187:7;1183:23;1179:32;1176:2;;;1229:6;1221;1214:22;1176:2;1257:37;1284:9;1257:37;:::i;1305:940::-;1420:6;1428;1436;1444;1452;1460;1468;1521:3;1509:9;1500:7;1496:23;1492:33;1489:2;;;1543:6;1535;1528:22;1489:2;1580:9;1574:16;1599:31;1624:5;1599:31;:::i;:::-;1649:5;1639:15;;;1699:2;1688:9;1684:18;1678:25;1748:7;1745:1;1734:22;1725:7;1722:35;1712:2;;1776:6;1768;1761:22;1712:2;1804:7;-1:-1:-1;1830:48:3;1874:2;1859:18;;1830:48;:::i;:::-;1820:58;;1897:48;1941:2;1930:9;1926:18;1897:48;:::i;:::-;1887:58;;1964:49;2008:3;1997:9;1993:19;1964:49;:::i;:::-;1954:59;;2058:3;2047:9;2043:19;2037:26;2107:10;2098:7;2094:24;2085:7;2082:37;2072:2;;2138:6;2130;2123:22;2072:2;2166:7;-1:-1:-1;2192:47:3;2234:3;2219:19;;2192:47;:::i;:::-;2182:57;;1479:766;;;;;;;;;;:::o;2250:194::-;2320:6;2373:2;2361:9;2352:7;2348:23;2344:32;2341:2;;;2394:6;2386;2379:22;2341:2;-1:-1:-1;2422:16:3;;2331:113;-1:-1:-1;2331:113:3:o;2449:466::-;2526:6;2534;2542;2595:2;2583:9;2574:7;2570:23;2566:32;2563:2;;;2616:6;2608;2601:22;2563:2;2657:9;2644:23;2634:33;;2717:2;2706:9;2702:18;2689:32;2730:31;2755:5;2730:31;:::i;:::-;2780:5;-1:-1:-1;2837:2:3;2822:18;;2809:32;2850:33;2809:32;2850:33;:::i;:::-;2902:7;2892:17;;;2553:362;;;;;:::o;2920:274::-;3049:3;3087:6;3081:13;3103:53;3149:6;3144:3;3137:4;3129:6;3125:17;3103:53;:::i;:::-;3172:16;;;;;3057:137;-1:-1:-1;;3057:137:3:o;4669:383::-;4818:2;4807:9;4800:21;4781:4;4850:6;4844:13;4893:6;4888:2;4877:9;4873:18;4866:34;4909:66;4968:6;4963:2;4952:9;4948:18;4943:2;4935:6;4931:15;4909:66;:::i;:::-;5036:2;5015:15;-1:-1:-1;;5011:29:3;4996:45;;;;5043:2;4992:54;;4790:262;-1:-1:-1;;4790:262:3:o;6575:732::-;6862:13;;-1:-1:-1;;;;;6858:22:3;;;6840:41;;6941:4;6929:17;;;6923:24;6919:33;;6897:20;;;6890:63;7013:4;7001:17;;;6995:24;7021:8;6991:39;6969:20;;;6962:69;7091:4;7079:17;;;7073:24;7069:33;;7047:20;;;7040:63;7159:4;7147:17;;;7141:24;7119:20;;;7112:54;6820:3;7210:17;;;7204:24;7182:20;;;7175:54;7289:4;7277:17;;;7271:24;7267:33;7245:20;;;7238:63;;;;6789:3;6774:19;;6756:551::o;7494:217::-;7534:1;7560;7550:2;;-1:-1:-1;;;7585:31:3;;7639:4;7636:1;7629:15;7667:4;7592:1;7657:15;7550:2;-1:-1:-1;7696:9:3;;7540:171::o;7716:422::-;7805:1;7848:5;7805:1;7862:270;7883:7;7873:8;7870:21;7862:270;;;7942:4;7938:1;7934:6;7930:17;7924:4;7921:27;7918:2;;;7951:18;;:::i;:::-;8001:7;7991:8;7987:22;7984:2;;;8021:16;;;;7984:2;8100:22;;;;8060:15;;;;7862:270;;;7866:3;7780:358;;;;;:::o;8143:140::-;8201:5;8230:47;8271:4;8261:8;8257:19;8251:4;8337:5;8367:8;8357:2;;-1:-1:-1;8408:1:3;8422:5;;8357:2;8456:4;8446:2;;-1:-1:-1;8493:1:3;8507:5;;8446:2;8538:4;8556:1;8551:59;;;;8624:1;8619:130;;;;8531:218;;8551:59;8581:1;8572:10;;8595:5;;;8619:130;8656:3;8646:8;8643:17;8640:2;;;8663:18;;:::i;:::-;-1:-1:-1;;8719:1:3;8705:16;;8734:5;;8531:218;;8833:2;8823:8;8820:16;8814:3;8808:4;8805:13;8801:36;8795:2;8785:8;8782:16;8777:2;8771:4;8768:12;8764:35;8761:77;8758:2;;;-1:-1:-1;8870:19:3;;;8902:5;;8758:2;8949:34;8974:8;8968:4;8949:34;:::i;:::-;9019:6;9015:1;9011:6;9007:19;8998:7;8995:32;8992:2;;;9030:18;;:::i;:::-;9068:20;;-1:-1:-1;8347:747:3;;;;;:::o;9099:168::-;9139:7;9205:1;9201;9197:6;9193:14;9190:1;9187:21;9182:1;9175:9;9168:17;9164:45;9161:2;;;9212:18;;:::i;:::-;-1:-1:-1;9252:9:3;;9151:116::o;9272:258::-;9344:1;9354:113;9368:6;9365:1;9362:13;9354:113;;;9444:11;;;9438:18;9425:11;;;9418:39;9390:2;9383:10;9354:113;;;9485:6;9482:1;9479:13;9476:2;;;-1:-1:-1;;9520:1:3;9502:16;;9495:27;9325:205::o;9535:127::-;9596:10;9591:3;9587:20;9584:1;9577:31;9627:4;9624:1;9617:15;9651:4;9648:1;9641:15;9667:131;-1:-1:-1;;;;;9742:31:3;;9732:42;;9722:2;;9788:1;9785;9778:12;9722:2;9712:86;:::o"},"gasEstimates":{"creation":{"codeDepositCost":"656400","executionCost":"63200","totalCost":"719600"},"external":{"factoryAddress()":"1048","getOutputTokenAmount(uint256,address,address)":"infinite","routerAddress()":"1004","swapTokens(address,address,uint256)":"infinite","wbnbAddress()":"1026"},"internal":{"_approve(address,uint256)":"infinite"}},"methodIdentifiers":{"factoryAddress()":"966dae0e","getOutputTokenAmount(uint256,address,address)":"a189d648","routerAddress()":"3268cc56","swapTokens(address,address,uint256)":"ec6cc0cc","wbnbAddress()":"63fe3e3a"}},"metadata":"{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"factoryAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_inputAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenOut\",\"type\":\"address\"}],\"name\":\"getOutputTokenAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"outputAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"routerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"}],\"name\":\"swapTokens\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wbnbAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/v3dex.sol\":\"V3Swap\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/v3dex.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\n/// @title The interface for the PancakeSwap V3 Factory\\r\\n/// @notice The PancakeSwap V3 Factory facilitates creation of PancakeSwap V3 pools and control over the protocol fees\\r\\ninterface IPancakeV3Factory {\\r\\n    function getPool(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint24 fee\\r\\n    ) external view returns (address pool);\\r\\n}\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\ninterface IPancakeV3PoolState {\\r\\n    function slot0()\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            uint160 sqrtPriceX96,\\r\\n            int24 tick,\\r\\n            uint16 observationIndex,\\r\\n            uint16 observationCardinality,\\r\\n            uint16 observationCardinalityNext,\\r\\n            uint32 feeProtocol,\\r\\n            bool unlocked\\r\\n        );\\r\\n}\\r\\n\\r\\ninterface IPancakeV3PoolImmutables {\\r\\n    /// @notice The contract that deployed the pool, which must adhere to the IPancakeV3Factory interface\\r\\n    /// @return The contract address\\r\\n    function factory() external view returns (address);\\r\\n\\r\\n    /// @notice The first of the two tokens of the pool, sorted by address\\r\\n    /// @return The token contract address\\r\\n    function token0() external view returns (address);\\r\\n\\r\\n    /// @notice The second of the two tokens of the pool, sorted by address\\r\\n    /// @return The token contract address\\r\\n    function token1() external view returns (address);\\r\\n\\r\\n    /// @notice The pool's fee in hundredths of a bip, i.e. 1e-6\\r\\n    /// @return The fee\\r\\n    function fee() external view returns (uint24);\\r\\n\\r\\n    /// @notice The pool tick spacing\\r\\n    /// @dev Ticks can only be used at multiples of this value, minimum of 1 and always positive\\r\\n    /// e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ...\\r\\n    /// This value is an int24 to avoid casting even though it is always positive.\\r\\n    /// @return The tick spacing\\r\\n    function tickSpacing() external view returns (int24);\\r\\n\\r\\n    /// @notice The maximum amount of position liquidity that can use any tick in the range\\r\\n    /// @dev This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and\\r\\n    /// also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\\r\\n    /// @return The max amount of liquidity per tick\\r\\n    function maxLiquidityPerTick() external view returns (uint128);\\r\\n}\\r\\n\\r\\ninterface IPancakeV3Pool is IPancakeV3PoolState, IPancakeV3PoolImmutables {}\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Provides information about the current execution context, including the\\r\\n * sender of the transaction and its data. While these are generally available\\r\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\r\\n * manner, since when dealing with meta-transactions the account sending and\\r\\n * paying for execution may not be the actual sender (as far as an application\\r\\n * is concerned).\\r\\n *\\r\\n * This contract is only required for intermediate, library-like contracts.\\r\\n */\\r\\nabstract contract Context {\\r\\n    function _msgSender() internal view virtual returns (address) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view virtual returns (bytes calldata) {\\r\\n        return msg.data;\\r\\n    }\\r\\n}\\r\\n\\r\\n// File @openzeppelin/contracts/access/Ownable.sol@v4.6.0\\r\\n\\r\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Contract module which provides a basic access control mechanism, where\\r\\n * there is an account (an owner) that can be granted exclusive access to\\r\\n * specific functions.\\r\\n *\\r\\n * By default, the owner account will be the one that deploys the contract. This\\r\\n * can later be changed with {transferOwnership}.\\r\\n *\\r\\n * This module is used through inheritance. It will make available the modifier\\r\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\r\\n * the owner.\\r\\n */\\r\\nabstract contract Ownable is Context {\\r\\n    address private _owner;\\r\\n\\r\\n    event OwnershipTransferred(\\r\\n        address indexed previousOwner,\\r\\n        address indexed newOwner\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\r\\n     */\\r\\n    constructor() {\\r\\n        _transferOwnership(_msgSender());\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current owner.\\r\\n     */\\r\\n    function owner() public view virtual returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier onlyOwner() {\\r\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Leaves the contract without owner. It will not be possible to call\\r\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\r\\n     *\\r\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\r\\n     * thereby removing any functionality that is only available to the owner.\\r\\n     */\\r\\n    function renounceOwnership() public virtual onlyOwner {\\r\\n        _transferOwnership(address(0));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n        require(\\r\\n            newOwner != address(0),\\r\\n            \\\"Ownable: new owner is the zero address\\\"\\r\\n        );\\r\\n        _transferOwnership(newOwner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Internal function without access restriction.\\r\\n     */\\r\\n    function _transferOwnership(address newOwner) internal virtual {\\r\\n        address oldOwner = _owner;\\r\\n        _owner = newOwner;\\r\\n        emit OwnershipTransferred(oldOwner, newOwner);\\r\\n    }\\r\\n}\\r\\n\\r\\nlibrary SafeMath {\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryAdd(\\r\\n        uint256 a,\\r\\n        uint256 b\\r\\n    ) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            uint256 c = a + b;\\r\\n            if (c < a) return (false, 0);\\r\\n            return (true, c);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function trySub(\\r\\n        uint256 a,\\r\\n        uint256 b\\r\\n    ) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            if (b > a) return (false, 0);\\r\\n            return (true, a - b);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryMul(\\r\\n        uint256 a,\\r\\n        uint256 b\\r\\n    ) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\r\\n            // benefit is lost if 'b' is also tested.\\r\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\r\\n            if (a == 0) return (true, 0);\\r\\n            uint256 c = a * b;\\r\\n            if (c / a != b) return (false, 0);\\r\\n            return (true, c);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryDiv(\\r\\n        uint256 a,\\r\\n        uint256 b\\r\\n    ) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            if (b == 0) return (false, 0);\\r\\n            return (true, a / b);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryMod(\\r\\n        uint256 a,\\r\\n        uint256 b\\r\\n    ) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            if (b == 0) return (false, 0);\\r\\n            return (true, a % b);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity's `+` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Addition cannot overflow.\\r\\n     */\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a + b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity's `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a - b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity's `*` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Multiplication cannot overflow.\\r\\n     */\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a * b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `/` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a / b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * reverting when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a % b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\r\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\r\\n     *\\r\\n     * Counterpart to Solidity's `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            require(b <= a, errorMessage);\\r\\n            return a - b;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            require(b > 0, errorMessage);\\r\\n            return a / b;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * reverting with custom message when dividing by zero.\\r\\n     *\\r\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\r\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\r\\n     *\\r\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            require(b > 0, errorMessage);\\r\\n            return a % b;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\nlibrary Address {\\r\\n    /**\\r\\n     * @dev Returns true if `account` is a contract.\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * It is unsafe to assume that an address for which this function returns\\r\\n     * false is an externally-owned account (EOA) and not a contract.\\r\\n     *\\r\\n     * Among others, `isContract` will return false for the following\\r\\n     * types of addresses:\\r\\n     *\\r\\n     *  - an externally-owned account\\r\\n     *  - a contract in construction\\r\\n     *  - an address where a contract will be created\\r\\n     *  - an address where a contract lived, but was destroyed\\r\\n     * ====\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\r\\n     *\\r\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\r\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\r\\n     * constructor.\\r\\n     * ====\\r\\n     */\\r\\n    function isContract(address account) internal view returns (bool) {\\r\\n        // This method relies on extcodesize/address.code.length, which returns 0\\r\\n        // for contracts in construction, since the code is only stored at the end\\r\\n        // of the constructor execution.\\r\\n\\r\\n        return account.code.length > 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\r\\n     * `recipient`, forwarding all available gas and reverting on errors.\\r\\n     *\\r\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\r\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\r\\n     * imposed by `transfer`, making them unable to receive funds via\\r\\n     * `transfer`. {sendValue} removes this limitation.\\r\\n     *\\r\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\r\\n     *\\r\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\r\\n     * taken to not create reentrancy vulnerabilities. Consider using\\r\\n     * {ReentrancyGuard} or the\\r\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\r\\n     */\\r\\n    function sendValue(address payable recipient, uint256 amount) internal {\\r\\n        require(\\r\\n            address(this).balance >= amount,\\r\\n            \\\"Address: insufficient balance\\\"\\r\\n        );\\r\\n\\r\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\r\\n        require(\\r\\n            success,\\r\\n            \\\"Address: unable to send value, recipient may have reverted\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Performs a Solidity function call using a low level `call`. A\\r\\n     * plain `call` is an unsafe replacement for a function call: use this\\r\\n     * function instead.\\r\\n     *\\r\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\r\\n     * function (like regular Solidity function calls).\\r\\n     *\\r\\n     * Returns the raw returned data. To convert to the expected return value,\\r\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `target` must be a contract.\\r\\n     * - calling `target` with `data` must not revert.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(\\r\\n        address target,\\r\\n        bytes memory data\\r\\n    ) internal returns (bytes memory) {\\r\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\r\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, 0, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but also transferring `value` wei to `target`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the calling contract must have an ETH balance of at least `value`.\\r\\n     * - the called Solidity function must be `payable`.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        uint256 value\\r\\n    ) internal returns (bytes memory) {\\r\\n        return\\r\\n            functionCallWithValue(\\r\\n                target,\\r\\n                data,\\r\\n                value,\\r\\n                \\\"Address: low-level call with value failed\\\"\\r\\n            );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\r\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        uint256 value,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        require(\\r\\n            address(this).balance >= value,\\r\\n            \\\"Address: insufficient balance for call\\\"\\r\\n        );\\r\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\r\\n\\r\\n        (bool success, bytes memory returndata) = target.call{value: value}(\\r\\n            data\\r\\n        );\\r\\n        return verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(\\r\\n        address target,\\r\\n        bytes memory data\\r\\n    ) internal view returns (bytes memory) {\\r\\n        return\\r\\n            functionStaticCall(\\r\\n                target,\\r\\n                data,\\r\\n                \\\"Address: low-level static call failed\\\"\\r\\n            );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal view returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\r\\n\\r\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\r\\n        return verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function functionDelegateCall(\\r\\n        address target,\\r\\n        bytes memory data\\r\\n    ) internal returns (bytes memory) {\\r\\n        return\\r\\n            functionDelegateCall(\\r\\n                target,\\r\\n                data,\\r\\n                \\\"Address: low-level delegate call failed\\\"\\r\\n            );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function functionDelegateCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\r\\n\\r\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\r\\n        return verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\r\\n     * revert reason using the provided one.\\r\\n     *\\r\\n     * _Available since v4.3._\\r\\n     */\\r\\n    function verifyCallResult(\\r\\n        bool success,\\r\\n        bytes memory returndata,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (bytes memory) {\\r\\n        if (success) {\\r\\n            return returndata;\\r\\n        } else {\\r\\n            // Look for revert reason and bubble it up if present\\r\\n            if (returndata.length > 0) {\\r\\n                // The easiest way to bubble the revert reason is using memory via assembly\\r\\n\\r\\n                assembly {\\r\\n                    let returndata_size := mload(returndata)\\r\\n                    revert(add(32, returndata), returndata_size)\\r\\n                }\\r\\n            } else {\\r\\n                revert(errorMessage);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\ninterface IERC20 {\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(\\r\\n        address indexed owner,\\r\\n        address indexed spender,\\r\\n        uint256 value\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address to, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(\\r\\n        address owner,\\r\\n        address spender\\r\\n    ) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender's allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller's\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n}\\r\\n\\r\\nlibrary SafeERC20 {\\r\\n    using Address for address;\\r\\n\\r\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\r\\n        _callOptionalReturn(\\r\\n            token,\\r\\n            abi.encodeWithSelector(token.transfer.selector, to, value)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function safeTransferFrom(\\r\\n        IERC20 token,\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        _callOptionalReturn(\\r\\n            token,\\r\\n            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Deprecated. This function has issues similar to the ones found in\\r\\n     * {IERC20-approve}, and its usage is discouraged.\\r\\n     *\\r\\n     * Whenever possible, use {safeIncreaseAllowance} and\\r\\n     * {safeDecreaseAllowance} instead.\\r\\n     */\\r\\n    function safeApprove(\\r\\n        IERC20 token,\\r\\n        address spender,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        // safeApprove should only be called when setting an initial allowance,\\r\\n        // or when resetting it to zero. To increase and decrease it, use\\r\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\r\\n        require(\\r\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\r\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\r\\n        );\\r\\n        _callOptionalReturn(\\r\\n            token,\\r\\n            abi.encodeWithSelector(token.approve.selector, spender, value)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function safeIncreaseAllowance(\\r\\n        IERC20 token,\\r\\n        address spender,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\r\\n        _callOptionalReturn(\\r\\n            token,\\r\\n            abi.encodeWithSelector(\\r\\n                token.approve.selector,\\r\\n                spender,\\r\\n                newAllowance\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function safeDecreaseAllowance(\\r\\n        IERC20 token,\\r\\n        address spender,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        unchecked {\\r\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\r\\n            require(\\r\\n                oldAllowance >= value,\\r\\n                \\\"SafeERC20: decreased allowance below zero\\\"\\r\\n            );\\r\\n            uint256 newAllowance = oldAllowance - value;\\r\\n            _callOptionalReturn(\\r\\n                token,\\r\\n                abi.encodeWithSelector(\\r\\n                    token.approve.selector,\\r\\n                    spender,\\r\\n                    newAllowance\\r\\n                )\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\r\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\r\\n     * @param token The token targeted by the call.\\r\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\r\\n     */\\r\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\r\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\r\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\r\\n        // the target address contains contract code and also asserts for success in the low-level call.\\r\\n\\r\\n        bytes memory returndata = address(token).functionCall(\\r\\n            data,\\r\\n            \\\"SafeERC20: low-level call failed\\\"\\r\\n        );\\r\\n        if (returndata.length > 0) {\\r\\n            // Return data is optional\\r\\n            require(\\r\\n                abi.decode(returndata, (bool)),\\r\\n                \\\"SafeERC20: ERC20 operation did not succeed\\\"\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n}\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\n/// @title Callback for IPancakeV3PoolActions#swap\\r\\n/// @notice Any contract that calls IPancakeV3PoolActions#swap must implement this interface\\r\\ninterface IPancakeV3SwapCallback {\\r\\n    /// @notice Called to `msg.sender` after executing a swap via IPancakeV3Pool#swap.\\r\\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\\r\\n    /// The caller of this method must be checked to be a PancakeV3Pool deployed by the canonical PancakeV3Factory.\\r\\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\\r\\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\\r\\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\\r\\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\\r\\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\\r\\n    /// @param data Any data passed through by the caller via the IPancakeV3PoolActions#swap call\\r\\n    function pancakeV3SwapCallback(\\r\\n        int256 amount0Delta,\\r\\n        int256 amount1Delta,\\r\\n        bytes calldata data\\r\\n    ) external;\\r\\n}\\r\\n\\r\\ninterface IV3SwapRouter is IPancakeV3SwapCallback {\\r\\n    struct ExactInputSingleParams {\\r\\n        address tokenIn;\\r\\n        address tokenOut;\\r\\n        uint24 fee;\\r\\n        address recipient;\\r\\n        uint256 amountIn;\\r\\n        uint256 amountOutMinimum;\\r\\n        uint160 sqrtPriceLimitX96;\\r\\n    }\\r\\n\\r\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\\r\\n    /// @dev Setting `amountIn` to 0 will cause the contract to look up its own balance,\\r\\n    /// and swap the entire amount, enabling contracts to send tokens before calling this function.\\r\\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\\r\\n    /// @return amountOut The amount of the received token\\r\\n    function exactInputSingle(\\r\\n        ExactInputSingleParams calldata params\\r\\n    ) external payable returns (uint256 amountOut);\\r\\n\\r\\n    struct ExactInputParams {\\r\\n        bytes path;\\r\\n        address recipient;\\r\\n        uint256 amountIn;\\r\\n        uint256 amountOutMinimum;\\r\\n    }\\r\\n\\r\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\\r\\n    /// @dev Setting `amountIn` to 0 will cause the contract to look up its own balance,\\r\\n    /// and swap the entire amount, enabling contracts to send tokens before calling this function.\\r\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\\r\\n    /// @return amountOut The amount of the received token\\r\\n    function exactInput(\\r\\n        ExactInputParams calldata params\\r\\n    ) external payable returns (uint256 amountOut);\\r\\n\\r\\n    struct ExactOutputSingleParams {\\r\\n        address tokenIn;\\r\\n        address tokenOut;\\r\\n        uint24 fee;\\r\\n        address recipient;\\r\\n        uint256 amountOut;\\r\\n        uint256 amountInMaximum;\\r\\n        uint160 sqrtPriceLimitX96;\\r\\n    }\\r\\n\\r\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\\r\\n    /// that may remain in the router after the swap.\\r\\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\\r\\n    /// @return amountIn The amount of the input token\\r\\n    function exactOutputSingle(\\r\\n        ExactOutputSingleParams calldata params\\r\\n    ) external payable returns (uint256 amountIn);\\r\\n\\r\\n    struct ExactOutputParams {\\r\\n        bytes path;\\r\\n        address recipient;\\r\\n        uint256 amountOut;\\r\\n        uint256 amountInMaximum;\\r\\n    }\\r\\n\\r\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\\r\\n    /// that may remain in the router after the swap.\\r\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\\r\\n    /// @return amountIn The amount of the input token\\r\\n    function exactOutput(\\r\\n        ExactOutputParams calldata params\\r\\n    ) external payable returns (uint256 amountIn);\\r\\n\\r\\n     function refundETH() external payable;\\r\\n}\\r\\n\\r\\ncontract V3Swap {\\r\\n    using SafeMath for uint256;\\r\\n    using SafeERC20 for IERC20;\\r\\n    address public routerAddress = 0x13f4EA83D0bd40E75C8222255bc855a974568Dd4;\\r\\n    address public factoryAddress = 0x0BFbCF9fa4f9C56B0F40a671Ad40E0805A091865;\\r\\n    address public wbnbAddress = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;\\r\\n    uint24 fee = 100;\\r\\n\\r\\n    constructor() {}\\r\\n\\r\\n    function getOutputTokenAmount(\\r\\n        uint256 _inputAmount,\\r\\n        address _tokenIn,\\r\\n        address _tokenOut\\r\\n    ) external view returns (uint outputAmount) {\\r\\n        uint256 slotReturnValue = 0;\\r\\n        address pairAddress = IPancakeV3Factory(factoryAddress).getPool(\\r\\n            _tokenIn,\\r\\n            _tokenOut,\\r\\n            fee\\r\\n        );\\r\\n        (slotReturnValue, , , , , , ) = IPancakeV3PoolState(pairAddress)\\r\\n            .slot0();\\r\\n        address token0 = IPancakeV3Pool(pairAddress).token0();\\r\\n        if (_tokenIn == token0)\\r\\n            outputAmount = ((slotReturnValue ** 2 * _inputAmount) / 2 ** 192);\\r\\n        else outputAmount = ((2 ** 192 * _inputAmount) / slotReturnValue ** 2);\\r\\n    }\\r\\n\\r\\n    function _approve(address _token, uint _amount) internal {\\r\\n        IERC20(_token).approve(address(routerAddress), _amount);\\r\\n    }\\r\\n\\r\\n    function swapTokens(\\r\\n        address _tokenIn,\\r\\n        address _tokenOut,\\r\\n        uint256 _amountIn\\r\\n    ) external payable {\\r\\n        IV3SwapRouter.ExactInputSingleParams memory params = IV3SwapRouter\\r\\n            .ExactInputSingleParams(\\r\\n                _tokenIn,\\r\\n                _tokenOut,\\r\\n                fee,\\r\\n                msg.sender,\\r\\n                _amountIn,\\r\\n                0,\\r\\n                0\\r\\n            );\\r\\n        if (_tokenIn == wbnbAddress)\\r\\n            IV3SwapRouter(routerAddress).exactInputSingle{value: msg.value}(\\r\\n                params\\r\\n            );\\r\\n        else {\\r\\n            IERC20(_tokenIn).safeTransferFrom(\\r\\n                msg.sender,\\r\\n                address(this),\\r\\n                _amountIn\\r\\n            );\\r\\n            _approve(_tokenIn,_amountIn);\\r\\n            IV3SwapRouter(routerAddress).exactInputSingle{value: msg.value}(\\r\\n                params\\r\\n            );\\r\\n        }\\r\\n        IV3SwapRouter(routerAddress).refundETH();\\r\\n        // refund leftover ETH to user\\r\\n        (bool success, ) = msg.sender.call{value: address(this).balance}(\\\"\\\");\\r\\n        require(success, \\\"refund failed\\\");\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xfe6ba12da9fa1b1eff0ef756a0460141c1a57ef8bc48bc9baa89ccc88b4b0fb0\",\"license\":\"GPL-2.0-or-later\"}},\"version\":1}","storageLayout":{"storage":[{"astId":4052,"contract":"contracts/v3dex.sol:V3Swap","label":"routerAddress","offset":0,"slot":"0","type":"t_address"},{"astId":4055,"contract":"contracts/v3dex.sol:V3Swap","label":"factoryAddress","offset":0,"slot":"1","type":"t_address"},{"astId":4058,"contract":"contracts/v3dex.sol:V3Swap","label":"wbnbAddress","offset":0,"slot":"2","type":"t_address"},{"astId":4061,"contract":"contracts/v3dex.sol:V3Swap","label":"fee","offset":20,"slot":"2","type":"t_uint24"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_uint24":{"encoding":"inplace","label":"uint24","numberOfBytes":"3"}}},"userdoc":{"kind":"user","methods":{},"version":1}}}}}}